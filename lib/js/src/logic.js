// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function cardValue(param) {
  var style = param[/* style */1];
  if (typeof style === "number") {
    return 10;
  } else {
    return style[0];
  }
}

function addAces(sumSoFar, aces) {
  return Belt_List.reduce(aces, sumSoFar, (function (a, _) {
                if ((a + 11 | 0) <= 21) {
                  return a + 11 | 0;
                } else {
                  return a + 1 | 0;
                }
              }));
}

function calculateHand(hand) {
  var aces = List.filter((function (param) {
            return param[/* style */1] === /* Ace */0;
          }))(hand);
  var noAceHand = List.filter((function (param) {
            return param[/* style */1] !== /* Ace */0;
          }))(hand);
  var sumWithoutAces = Belt_List.reduce(List.map(cardValue, noAceHand), 0, (function (prim, prim$1) {
          return prim + prim$1 | 0;
        }));
  return addAces(sumWithoutAces, aces);
}

function range(start, end_) {
  if (start >= end_) {
    return /* [] */0;
  } else {
    return /* :: */[
            start,
            range(start + 1 | 0, end_)
          ];
  }
}

var suits = /* :: */[
  /* Hearts */0,
  /* :: */[
    /* Clubs */3,
    /* :: */[
      /* Diamonds */1,
      /* :: */[
        /* Spades */2,
        /* [] */0
      ]
    ]
  ]
];

var simpleCards = List.map((function (i) {
        return /* Simple */[i];
      }), range(2, 10));

var styles = List.append(/* :: */[
      /* Ace */0,
      /* :: */[
        /* King */1,
        /* :: */[
          /* Queen */2,
          /* :: */[
            /* Jack */3,
            /* [] */0
          ]
        ]
      ]
    ], simpleCards);

var defaultDeck = Belt_List.reduce(suits, /* [] */0, (function (a, suit) {
        return List.append(a, Belt_List.map(styles, (function (style) {
                          return /* record */[
                                  /* suit */suit,
                                  /* style */style
                                ];
                        })));
      }));

function dealInitialcards(game) {
  var exit = 0;
  var match = game[/* deck */1];
  if (match) {
    var match$1 = match[1];
    if (match$1) {
      var match$2 = match$1[1];
      if (match$2) {
        return /* record */[
                /* board : record */[
                  /* playerHand : :: */[
                    match[0],
                    /* :: */[
                      match$1[0],
                      /* [] */0
                    ]
                  ],
                  /* dealerHand : :: */[
                    match$2[0],
                    /* [] */0
                  ]
                ],
                /* deck */match$2[1],
                /* gameState : PlayerTurn */1
              ];
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "logic.re",
            83,
            6
          ]
        ];
  }
  
}

function findWinner(board) {
  var playerTotal = calculateHand(board[/* playerHand */0]);
  var dealerTotal = calculateHand(board[/* dealerHand */1]);
  if (playerTotal > dealerTotal) {
    if (playerTotal < 21) {
      return /* Player */0;
    } else {
      return /* Dealer */1;
    }
  } else if (dealerTotal < 21) {
    return /* Dealer */1;
  } else {
    return /* Player */0;
  }
}

function dealerCanPlay(hand) {
  return calculateHand(hand) <= 17;
}

function runPlayerTurn(game, action) {
  if (action !== 0) {
    return game;
  } else {
    var match = game[/* deck */1];
    if (match) {
      var restDeck = match[1];
      var newPlayerHand_000 = match[0];
      var newPlayerHand_001 = game[/* board */0][/* playerHand */0];
      var newPlayerHand = /* :: */[
        newPlayerHand_000,
        newPlayerHand_001
      ];
      if (calculateHand(newPlayerHand) <= 21) {
        var init = game[/* board */0];
        return /* record */[
                /* board : record */[
                  /* playerHand */newPlayerHand,
                  /* dealerHand */init[/* dealerHand */1]
                ],
                /* deck */restDeck,
                /* gameState : PlayerTurn */1
              ];
      } else {
        var init$1 = game[/* board */0];
        return /* record */[
                /* board : record */[
                  /* playerHand */newPlayerHand,
                  /* dealerHand */init$1[/* dealerHand */1]
                ],
                /* deck */restDeck,
                /* gameState : PlayerBust */2
              ];
      }
    } else {
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "logic.re",
              121,
              10
            ]
          ];
    }
  }
}

var faceCardValue = 10;

var aceHighValue = 11;

var aceLowValue = 1;

var maxValue = 21;

var testHand = /* :: */[
  /* record */[
    /* suit : Hearts */0,
    /* style : Jack */3
  ],
  /* :: */[
    /* record */[
      /* suit : Hearts */0,
      /* style : Simple */[1]
    ],
    /* [] */0
  ]
];

var emptyBoard = /* record */[
  /* playerHand : [] */0,
  /* dealerHand : [] */0
];

var dealerHitValue = 17;

exports.faceCardValue = faceCardValue;
exports.cardValue = cardValue;
exports.aceHighValue = aceHighValue;
exports.aceLowValue = aceLowValue;
exports.maxValue = maxValue;
exports.addAces = addAces;
exports.calculateHand = calculateHand;
exports.testHand = testHand;
exports.range = range;
exports.suits = suits;
exports.simpleCards = simpleCards;
exports.styles = styles;
exports.defaultDeck = defaultDeck;
exports.emptyBoard = emptyBoard;
exports.dealInitialcards = dealInitialcards;
exports.findWinner = findWinner;
exports.dealerHitValue = dealerHitValue;
exports.dealerCanPlay = dealerCanPlay;
exports.runPlayerTurn = runPlayerTurn;
/* simpleCards Not a pure module */

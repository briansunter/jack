// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function styleToString(style) {
  if (typeof style === "number") {
    switch (style) {
      case 0 : 
          return "Jack";
      case 1 : 
          return "Queen";
      case 2 : 
          return "King";
      case 3 : 
          return "Ace";
      
    }
  } else {
    return String(style[0]);
  }
}

function suitToString(style) {
  switch (style) {
    case 0 : 
        return "Jack";
    case 1 : 
        return "Queen";
    case 2 : 
        return "King";
    case 3 : 
        return "Ace";
    
  }
}

function cardValue(param) {
  var style = param[/* style */1];
  if (typeof style === "number") {
    return 10;
  } else {
    return style[0];
  }
}

function addAces(sumSoFar, aces) {
  return Belt_List.reduce(aces, sumSoFar, (function (a, _) {
                if ((a + 11 | 0) <= 21) {
                  return a + 11 | 0;
                } else {
                  return a + 1 | 0;
                }
              }));
}

function calculateHand(hand) {
  var aces = List.filter((function (param) {
            return param[/* style */1] === /* Ace */3;
          }))(hand);
  var noAceHand = List.filter((function (param) {
            return param[/* style */1] !== /* Ace */3;
          }))(hand);
  var sumWithoutAces = Belt_List.reduce(List.map(cardValue, noAceHand), 0, (function (prim, prim$1) {
          return prim + prim$1 | 0;
        }));
  return addAces(sumWithoutAces, aces);
}

function range(start, end_) {
  if (start >= end_) {
    return /* [] */0;
  } else {
    return /* :: */[
            start,
            range(start + 1 | 0, end_)
          ];
  }
}

var suits = /* :: */[
  /* Hearts */0,
  /* :: */[
    /* Clubs */3,
    /* :: */[
      /* Diamonds */1,
      /* :: */[
        /* Spades */2,
        /* [] */0
      ]
    ]
  ]
];

var faceCards = /* :: */[
  /* Ace */3,
  /* :: */[
    /* King */2,
    /* :: */[
      /* Queen */1,
      /* :: */[
        /* Jack */0,
        /* [] */0
      ]
    ]
  ]
];

var simpleCards = List.map((function (i) {
        return /* Simple */[i];
      }), range(2, 10));

var styles = List.append(faceCards, simpleCards);

var defaultDeck = Belt_List.reduce(suits, /* [] */0, (function (a, suit) {
        return List.append(a, Belt_List.map(styles, (function (style) {
                          return /* record */[
                                  /* suit */suit,
                                  /* style */style
                                ];
                        })));
      }));

function gameStateToString(state) {
  switch (state) {
    case 0 : 
        return "New Game";
    case 1 : 
        return "Player Turn";
    case 2 : 
        return "Blackjack";
    case 3 : 
        return "Push";
    case 4 : 
        return "Player Bust";
    case 5 : 
        return "Dealer Bust";
    case 6 : 
        return "Dealer Turn";
    case 7 : 
        return "Player Win";
    case 8 : 
        return "Dealer Blackjack";
    case 9 : 
        return "Dealer Win";
    
  }
}

function dealInitialcards(game) {
  var exit = 0;
  var match = game[/* deck */1];
  if (match) {
    var match$1 = match[1];
    if (match$1) {
      var match$2 = match$1[1];
      if (match$2) {
        var match$3 = match$2[1];
        if (match$3) {
          var playerHand_000 = match[0];
          var playerHand_001 = /* :: */[
            match$1[0],
            /* [] */0
          ];
          var playerHand = /* :: */[
            playerHand_000,
            playerHand_001
          ];
          var dealerHand_000 = match$2[0];
          var dealerHand_001 = /* :: */[
            match$3[0],
            /* [] */0
          ];
          var dealerHand = /* :: */[
            dealerHand_000,
            dealerHand_001
          ];
          var initialGameState = calculateHand(playerHand) === 21 ? /* Blackjack */2 : /* PlayerTurn */1;
          return /* record */[
                  /* board : record */[
                    /* playerHand */playerHand,
                    /* dealerHand */dealerHand
                  ],
                  /* deck */match$3[1],
                  /* gameState */initialGameState
                ];
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "logic.re",
            130,
            6
          ]
        ];
  }
  
}

function dealerCanPlay(hand) {
  return calculateHand(hand) < 17;
}

function runDealerTurn(game) {
  return Belt_List.reduce(game[/* deck */1], game, (function (g, _) {
                var match = game[/* deck */1];
                if (match) {
                  var restDeck = match[1];
                  var newDealerHand_000 = match[0];
                  var newDealerHand_001 = game[/* board */0][/* dealerHand */1];
                  var newDealerHand = /* :: */[
                    newDealerHand_000,
                    newDealerHand_001
                  ];
                  if (calculateHand(g[/* board */0][/* dealerHand */1]) < 17) {
                    if (calculateHand(newDealerHand) <= 21) {
                      var init = game[/* board */0];
                      return /* record */[
                              /* board : record */[
                                /* playerHand */init[/* playerHand */0],
                                /* dealerHand */newDealerHand
                              ],
                              /* deck */restDeck,
                              /* gameState : DealerTurn */6
                            ];
                    } else {
                      var init$1 = game[/* board */0];
                      return /* record */[
                              /* board : record */[
                                /* playerHand */init$1[/* playerHand */0],
                                /* dealerHand */newDealerHand
                              ],
                              /* deck */restDeck,
                              /* gameState : DealerBust */5
                            ];
                    }
                  } else {
                    return g;
                  }
                } else {
                  throw [
                        Caml_builtin_exceptions.match_failure,
                        [
                          "logic.re",
                          161,
                          10
                        ]
                      ];
                }
              }));
}

function findWinner(board) {
  var playerTotal = calculateHand(board[/* playerHand */0]);
  var dealerTotal = calculateHand(board[/* dealerHand */1]);
  if (playerTotal === dealerTotal) {
    return /* Push */3;
  } else if (playerTotal > 21) {
    return /* PlayerBust */4;
  } else if (dealerTotal > 21) {
    return /* DealerBust */5;
  } else if (playerTotal > dealerTotal) {
    return /* PlayerWin */7;
  } else {
    return /* DealerWin */9;
  }
}

function runPlayerTurn(game, action) {
  if (action !== 0) {
    switch (action - 1 | 0) {
      case 0 : 
          var match = game[/* deck */1];
          if (match) {
            var restDeck = match[1];
            var newPlayerHand_000 = match[0];
            var newPlayerHand_001 = game[/* board */0][/* playerHand */0];
            var newPlayerHand = /* :: */[
              newPlayerHand_000,
              newPlayerHand_001
            ];
            if (calculateHand(newPlayerHand) <= 21) {
              var init = game[/* board */0];
              return /* record */[
                      /* board : record */[
                        /* playerHand */newPlayerHand,
                        /* dealerHand */init[/* dealerHand */1]
                      ],
                      /* deck */restDeck,
                      /* gameState : PlayerTurn */1
                    ];
            } else {
              var init$1 = game[/* board */0];
              return /* record */[
                      /* board : record */[
                        /* playerHand */newPlayerHand,
                        /* dealerHand */init$1[/* dealerHand */1]
                      ],
                      /* deck */restDeck,
                      /* gameState : PlayerBust */4
                    ];
            }
          } else {
            throw [
                  Caml_builtin_exceptions.match_failure,
                  [
                    "logic.re",
                    221,
                    8
                  ]
                ];
          }
      case 1 : 
          var dealerGame = runDealerTurn(game);
          if (dealerGame[/* gameState */2] === /* DealerBust */5) {
            return dealerGame;
          } else {
            var winner = findWinner(dealerGame[/* board */0]);
            return /* record */[
                    /* board */dealerGame[/* board */0],
                    /* deck */dealerGame[/* deck */1],
                    /* gameState */winner
                  ];
          }
      case 2 : 
          throw [
                Caml_builtin_exceptions.match_failure,
                [
                  "logic.re",
                  219,
                  2
                ]
              ];
      
    }
  } else {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "logic.re",
            219,
            2
          ]
        ];
  }
}

function canHit(game) {
  var match = game[/* gameState */2];
  if (match !== 1) {
    return false;
  } else {
    return true;
  }
}

function canStand(game) {
  var match = game[/* gameState */2];
  if (match !== 1) {
    return false;
  } else {
    return true;
  }
}

var faceCardValue = 10;

var aceHighValue = 11;

var aceLowValue = 1;

var maxValue = 21;

var testHand = /* :: */[
  /* record */[
    /* suit : Hearts */0,
    /* style : Jack */0
  ],
  /* :: */[
    /* record */[
      /* suit : Hearts */0,
      /* style : Simple */[1]
    ],
    /* [] */0
  ]
];

var emptyBoard = /* record */[
  /* playerHand : [] */0,
  /* dealerHand : [] */0
];

var dealerHitValue = 17;

exports.styleToString = styleToString;
exports.suitToString = suitToString;
exports.faceCardValue = faceCardValue;
exports.cardValue = cardValue;
exports.aceHighValue = aceHighValue;
exports.aceLowValue = aceLowValue;
exports.maxValue = maxValue;
exports.addAces = addAces;
exports.calculateHand = calculateHand;
exports.testHand = testHand;
exports.range = range;
exports.suits = suits;
exports.faceCards = faceCards;
exports.simpleCards = simpleCards;
exports.styles = styles;
exports.defaultDeck = defaultDeck;
exports.emptyBoard = emptyBoard;
exports.gameStateToString = gameStateToString;
exports.dealInitialcards = dealInitialcards;
exports.dealerHitValue = dealerHitValue;
exports.dealerCanPlay = dealerCanPlay;
exports.runDealerTurn = runDealerTurn;
exports.findWinner = findWinner;
exports.runPlayerTurn = runPlayerTurn;
exports.canHit = canHit;
exports.canStand = canStand;
/* simpleCards Not a pure module */

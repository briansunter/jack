// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/lib/js/src/Css.js");
var List = require("bs-platform/lib/js/list.js");
var React = require("react");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

ReasonReact.statelessComponent("Card");

var card_000 = Css.backgroundColor(Css.white);

var card_001 = /* :: */[
  Css.display(Css.flexBox),
  /* :: */[
    Css.flexDirection(Css.column),
    /* :: */[
      Css.justifyContent(Css.spaceBetween),
      /* :: */[
        Css.boxShadow(/* None */0, /* Some */[Css.px(4)], /* Some */[Css.px(6)], /* None */0, /* None */0, Css.rgba(0, 0, 0, 0.3)),
        /* :: */[
          Css.borderStyle(Css.solid),
          /* :: */[
            Css.borderRadius(Css.px(5)),
            /* :: */[
              Css.borderWidth(Css.px(3)),
              /* :: */[
                Css.padding(Css.px(10)),
                /* :: */[
                  Css.minWidth(Css.px(75)),
                  /* :: */[
                    Css.backfaceVisibility(/* hidden */-862584982),
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var card = /* :: */[
  card_000,
  card_001
];

var cardFlipped = Css.style(List.concat(/* :: */[
          card,
          /* :: */[
            /* :: */[
              Css.transition(/* Some */[1000], /* None */0, /* None */0, "transform"),
              /* :: */[
                Css.transformStyle(/* preserve3d */589702045),
                /* :: */[
                  Css.transform(Css.rotateY(Css.deg(0))),
                  /* [] */0
                ]
              ]
            ],
            /* [] */0
          ]
        ]));

var cardUnFlipped = Css.style(List.concat(/* :: */[
          card,
          /* :: */[
            /* :: */[
              Css.transition(/* Some */[1000], /* None */0, /* None */0, "transform"),
              /* :: */[
                Css.transformStyle(/* preserve3d */589702045),
                /* :: */[
                  Css.transform(Css.rotateY(Css.deg(180))),
                  /* [] */0
                ]
              ]
            ],
            /* [] */0
          ]
        ]));

var topStyle = Css.style(/* :: */[
      Css.display(Css.flexBox),
      /* [] */0
    ]);

var middleStyle = Css.style(/* :: */[
      Css.display(Css.flexBox),
      /* :: */[
        Css.justifyContent(Css.center),
        /* :: */[
          Css.fontSize(Css.px(100)),
          /* [] */0
        ]
      ]
    ]);

var bottomStyle = Css.style(/* :: */[
      Css.display(Css.flexBox),
      /* :: */[
        Css.justifyContent(Css.flexEnd),
        /* [] */0
      ]
    ]);

function actionButton(disabled) {
  return Css.style(/* :: */[
              Css.background(disabled ? Css.darkgray : Css.white),
              /* :: */[
                Css.color(Css.black),
                /* :: */[
                  Css.border(Css.px(1), Css.solid, Css.black),
                  /* :: */[
                    Css.borderRadius(Css.px(3)),
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

var Styles = /* module */[
  /* card */card,
  /* cardFlipped */cardFlipped,
  /* cardUnFlipped */cardUnFlipped,
  /* topStyle */topStyle,
  /* middleStyle */middleStyle,
  /* bottomStyle */bottomStyle,
  /* actionButton */actionButton
];

function styleToString(style) {
  if (typeof style === "number") {
    switch (style) {
      case 0 : 
          return "Jack";
      case 1 : 
          return "Queen";
      case 2 : 
          return "King";
      case 3 : 
          return "Ace";
      
    }
  } else {
    return String(style[0]);
  }
}

function suitToSymbol(suit) {
  switch (suit) {
    case 0 : 
        return "\u2665";
    case 1 : 
        return "\u2666";
    case 2 : 
        return "\u2660";
    case 3 : 
        return "\u2663";
    
  }
}

var component = ReasonReact.statelessComponent("Card");

function make(suit, cardStyle, $staropt$star, _, _$1) {
  var flipped = $staropt$star ? $staropt$star[0] : true;
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return React.createElement("div", {
                          className: flipped ? cardFlipped : cardUnFlipped
                        }, React.createElement("div", {
                              className: topStyle
                            }, React.createElement("div", undefined, styleToString(cardStyle)), React.createElement("div", undefined, suitToSymbol(suit))), React.createElement("div", {
                              className: middleStyle
                            }, suitToSymbol(suit)), React.createElement("div", {
                              className: bottomStyle
                            }, React.createElement("div", undefined, styleToString(cardStyle)), React.createElement("div", undefined, suitToSymbol(suit))));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.Styles = Styles;
exports.styleToString = styleToString;
exports.suitToSymbol = suitToSymbol;
exports.component = component;
exports.make = make;
/*  Not a pure module */

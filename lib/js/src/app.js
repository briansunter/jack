// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Game = require("./Game.js");
var Block = require("bs-platform/lib/js/block.js");
var Logic = require("./logic.js");
var React = require("react");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var component = ReasonReact.reducerComponent("MyCounter");

function appReducer(action, state) {
  switch (action) {
    case 0 : 
        return /* Update */Block.__(0, [/* record */[/* game */Logic.dealInitialcards(state[/* game */0])]]);
    case 1 : 
        return /* Update */Block.__(0, [/* record */[/* game */Logic.runPlayerTurn(state[/* game */0], /* Hit */1)]]);
    case 2 : 
        return /* Update */Block.__(0, [/* record */[/* game */Logic.runPlayerTurn(state[/* game */0], /* Stand */2)]]);
    case 3 : 
        throw [
              Caml_builtin_exceptions.match_failure,
              [
                "app.re",
                7,
                2
              ]
            ];
    
  }
}

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, Game.make(param[/* state */1][/* game */0], param[/* send */3], /* array */[])));
            }),
          /* initialState */(function () {
              var shuffledDeck = Belt_List.shuffle(Logic.defaultDeck);
              return /* record */[/* game : record */[
                        /* board */Logic.emptyBoard,
                        /* deck */shuffledDeck,
                        /* gameState : NewGame */0
                      ]];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */appReducer,
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.appReducer = appReducer;
exports.make = make;
/* component Not a pure module */

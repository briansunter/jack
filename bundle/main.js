!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!b[e]||!y[e])return;for(var n in y[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(m[n]=t[n]);0==--v&&0===g&&E()}(e,n),t&&t(e,n)};var n,r=!0,o="ec4a3e07905706f7841d",i=1e4,a={},u=[],l=[];function c(e){var t=S[e];if(!t)return T;var r=function(r){return t.hot.active?(S[r]?-1===S[r].parents.indexOf(e)&&S[r].parents.push(e):(u=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),u=[]),T(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return T[e]},set:function(t){T[e]=t}}};for(var i in T)Object.prototype.hasOwnProperty.call(T,i)&&"e"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===f&&d("prepare"),g++,T.e(e).then(t,function(e){throw t(),e});function t(){g--,"prepare"===f&&(_[e]||C(e),0===g&&0===v&&E())}},r}var s=[],f="idle";function d(e){f=e;for(var t=0;t<s.length;t++)s[t].call(null,e)}var p,m,h,v=0,g=0,_={},y={},b={};function w(e){return+e+""===e?+e:e}function x(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=e,d("check"),(t=i,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=T.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return d("idle"),null;y={},_={},b=e.c,h=e.h,d("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});m={};return C(0),"prepare"===f&&0===g&&0===v&&E(),t});var t}function C(e){b[e]?(y[e]=!0,v++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=T.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):_[e]=!0}function E(){d("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return k(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in m)Object.prototype.hasOwnProperty.call(m,n)&&t.push(w(n));e.resolve(t)}}function k(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var n,r,i,l,c;function s(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((l=S[i])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(l.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var u=0;u<l.parents.length;u++){var c=l.parents[u],s=S[c];if(s){if(s.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([c]),moduleId:i,parentId:c};-1===t.indexOf(c)&&(s.hot._acceptedDependencies[i]?(n[c]||(n[c]=[]),p(n[c],[i])):(delete n[c],t.push(c),r.push({chain:a.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var v={},g=[],_={},y=function(){console.warn("[HMR] unexpected require("+C.moduleId+") to disposed module")};for(var x in m)if(Object.prototype.hasOwnProperty.call(m,x)){var C;c=w(x);var E=!1,k=!1,O=!1,P="";switch((C=m[x]?s(c):{type:"disposed",moduleId:x}).chain&&(P="\nUpdate propagation: "+C.chain.join(" -> ")),C.type){case"self-declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(E=new Error("Aborted because of self decline: "+C.moduleId+P));break;case"declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+C.moduleId+" in "+C.parentId+P));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(C),t.ignoreUnaccepted||(E=new Error("Aborted because "+c+" is not accepted"+P));break;case"accepted":t.onAccepted&&t.onAccepted(C),k=!0;break;case"disposed":t.onDisposed&&t.onDisposed(C),O=!0;break;default:throw new Error("Unexception type "+C.type)}if(E)return d("abort"),Promise.reject(E);if(k)for(c in _[c]=m[c],p(g,C.outdatedModules),C.outdatedDependencies)Object.prototype.hasOwnProperty.call(C.outdatedDependencies,c)&&(v[c]||(v[c]=[]),p(v[c],C.outdatedDependencies[c]));O&&(p(g,[C.moduleId]),_[c]=y)}var F,N=[];for(r=0;r<g.length;r++)c=g[r],S[c]&&S[c].hot._selfAccepted&&N.push({module:c,errorHandler:S[c].hot._selfAccepted});d("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var A,D,R=g.slice();R.length>0;)if(c=R.pop(),l=S[c]){var M={},I=l.hot._disposeHandlers;for(i=0;i<I.length;i++)(n=I[i])(M);for(a[c]=M,l.hot.active=!1,delete S[c],delete v[c],i=0;i<l.children.length;i++){var U=S[l.children[i]];U&&((F=U.parents.indexOf(c))>=0&&U.parents.splice(F,1))}}for(c in v)if(Object.prototype.hasOwnProperty.call(v,c)&&(l=S[c]))for(D=v[c],i=0;i<D.length;i++)A=D[i],(F=l.children.indexOf(A))>=0&&l.children.splice(F,1);for(c in d("apply"),o=h,_)Object.prototype.hasOwnProperty.call(_,c)&&(e[c]=_[c]);var j=null;for(c in v)if(Object.prototype.hasOwnProperty.call(v,c)&&(l=S[c])){D=v[c];var B=[];for(r=0;r<D.length;r++)if(A=D[r],n=l.hot._acceptedDependencies[A]){if(-1!==B.indexOf(n))continue;B.push(n)}for(r=0;r<B.length;r++){n=B[r];try{n(D)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:c,dependencyId:D[r],error:e}),t.ignoreErrored||j||(j=e)}}}for(r=0;r<N.length;r++){var L=N[r];c=L.module,u=[c];try{T(c)}catch(e){if("function"==typeof L.errorHandler)try{L.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:n,originalError:e}),t.ignoreErrored||j||(j=n),j||(j=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:c,error:e}),t.ignoreErrored||j||(j=e)}}return j?(d("fail"),Promise.reject(j)):(d("idle"),new Promise(function(e){e(g)}))}var S={};function T(t){if(S[t])return S[t].exports;var r=S[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:x,apply:k,status:function(e){if(!e)return f;s.push(e)},addStatusHandler:function(e){s.push(e)},removeStatusHandler:function(e){var t=s.indexOf(e);t>=0&&s.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(l=u,u=[],l),children:[]};return e[t].call(r.exports,r,r.exports,c(t)),r.l=!0,r.exports}T.m=e,T.c=S,T.d=function(e,t,n){T.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},T.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},T.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return T.d(t,"a",t),t},T.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},T.p="./",T.h=function(){return o},c(112)(T.s=112)}([function(e,t,n){"use strict";var r=["Out_of_memory",0],o=["Sys_error",-1],i=["Failure",-2],a=["Invalid_argument",-3],u=["End_of_file",-4],l=["Division_by_zero",-5],c=["Not_found",-6],s=["Match_failure",-7],f=["Stack_overflow",-8],d=["Sys_blocked_io",-9],p=["Assert_failure",-10],m=["Undefined_recursive_module",-11];r.tag=248,o.tag=248,i.tag=248,a.tag=248,u.tag=248,l.tag=248,c.tag=248,s.tag=248,f.tag=248,d.tag=248,p.tag=248,m.tag=248,t.out_of_memory=r,t.sys_error=o,t.failure=i,t.invalid_argument=a,t.end_of_file=u,t.division_by_zero=l,t.not_found=c,t.match_failure=s,t.stack_overflow=f,t.sys_blocked_io=d,t.assert_failure=p,t.undefined_recursive_module=m},function(e,t,n){"use strict";e.exports=n(65)},function(e,t,n){"use strict";var r=n(35);function o(e,t){for(;;){var n=t,i=e,a=i.length,u=0===a?1:a,l=u-n.length|0;if(0===l)return i.apply(null,n);if(!(l<0))return function(e,t){return function(n){return o(e,t.concat([n]))}}(i,n);t=r.caml_array_sub(n,u,0|-l),e=i.apply(null,r.caml_array_sub(n,0,u))}}function i(e,t,n){if(n>7||n<0)return o(e,[t]);switch(n){case 0:case 1:return e(t);case 2:return function(n){return e(t,n)};case 3:return function(n,r){return e(t,n,r)};case 4:return function(n,r,o){return e(t,n,r,o)};case 5:return function(n,r,o,i){return e(t,n,r,o,i)};case 6:return function(n,r,o,i,a){return e(t,n,r,o,i,a)};case 7:return function(n,r,o,i,a,u){return e(t,n,r,o,i,a,u)}}}function a(e,t){var n=e.length;return 1===n?e(t):i(e,t,n)}function u(e,t,n,r){if(r>7||r<0)return o(e,[t,n]);switch(r){case 0:case 1:return o(e(t),[n]);case 2:return e(t,n);case 3:return function(r){return e(t,n,r)};case 4:return function(r,o){return e(t,n,r,o)};case 5:return function(r,o,i){return e(t,n,r,o,i)};case 6:return function(r,o,i,a){return e(t,n,r,o,i,a)};case 7:return function(r,o,i,a,u){return e(t,n,r,o,i,a,u)}}}function l(e,t,n){var r=e.length;return 2===r?e(t,n):u(e,t,n,r)}function c(e,t,n,r,i){var a=0;if(i>7||i<0)return o(e,[t,n,r]);switch(i){case 0:case 1:a=1;break;case 2:return o(e(t,n),[r]);case 3:return e(t,n,r);case 4:return function(o){return e(t,n,r,o)};case 5:return function(o,i){return e(t,n,r,o,i)};case 6:return function(o,i,a){return e(t,n,r,o,i,a)};case 7:return function(o,i,a,u){return e(t,n,r,o,i,a,u)}}return 1===a?o(e(t),[n,r]):void 0}function s(e,t,n,r){var o=e.length;return 3===o?e(t,n,r):c(e,t,n,r,o)}function f(e,t,n,r,i,a){var u=0;if(a>7||a<0)return o(e,[t,n,r,i]);switch(a){case 0:case 1:u=1;break;case 2:return o(e(t,n),[r,i]);case 3:return o(e(t,n,r),[i]);case 4:return e(t,n,r,i);case 5:return function(o){return e(t,n,r,i,o)};case 6:return function(o,a){return e(t,n,r,i,o,a)};case 7:return function(o,a,u){return e(t,n,r,i,o,a,u)}}return 1===u?o(e(t),[n,r,i]):void 0}function d(e,t,n,r,o){var i=e.length;return 4===i?e(t,n,r,o):f(e,t,n,r,o,i)}function p(e,t,n,r,i,a,u){var l=0;if(u>7||u<0)return o(e,[t,n,r,i,a]);switch(u){case 0:case 1:l=1;break;case 2:return o(e(t,n),[r,i,a]);case 3:return o(e(t,n,r),[i,a]);case 4:return o(e(t,n,r,i),[a]);case 5:return e(t,n,r,i,a);case 6:return function(o){return e(t,n,r,i,a,o)};case 7:return function(o,u){return e(t,n,r,i,a,o,u)}}return 1===l?o(e(t),[n,r,i,a]):void 0}function m(e,t,n,r,o,i){var a=e.length;return 5===a?e(t,n,r,o,i):p(e,t,n,r,o,i,a)}function h(e,t,n,r,i,a,u,l){var c=0;if(l>7||l<0)return o(e,[t,n,r,i,a,u]);switch(l){case 0:case 1:c=1;break;case 2:return o(e(t,n),[r,i,a,u]);case 3:return o(e(t,n,r),[i,a,u]);case 4:return o(e(t,n,r,i),[a,u]);case 5:return o(e(t,n,r,i,a),[u]);case 6:return e(t,n,r,i,a,u);case 7:return function(o){return e(t,n,r,i,a,u,o)}}return 1===c?o(e(t),[n,r,i,a,u]):void 0}function v(e,t,n,r,o,i,a){var u=e.length;return 6===u?e(t,n,r,o,i,a):h(e,t,n,r,o,i,a,u)}function g(e,t,n,r,i,a,u,l,c){var s=0;if(c>7||c<0)return o(e,[t,n,r,i,a,u,l]);switch(c){case 0:case 1:s=1;break;case 2:return o(e(t,n),[r,i,a,u,l]);case 3:return o(e(t,n,r),[i,a,u,l]);case 4:return o(e(t,n,r,i),[a,u,l]);case 5:return o(e(t,n,r,i,a),[u,l]);case 6:return o(e(t,n,r,i,a,u),[l]);case 7:return e(t,n,r,i,a,u,l)}return 1===s?o(e(t),[n,r,i,a,u,l]):void 0}function _(e,t,n,r,o,i,a,u){var l=e.length;return 7===l?e(t,n,r,o,i,a,u):g(e,t,n,r,o,i,a,u,l)}function y(e,t,n,r,i,a,u,l,c,s){var f=0;if(s>7||s<0)return o(e,[t,n,r,i,a,u,l,c]);switch(s){case 0:case 1:f=1;break;case 2:return o(e(t,n),[r,i,a,u,l,c]);case 3:return o(e(t,n,r),[i,a,u,l,c]);case 4:return o(e(t,n,r,i),[a,u,l,c]);case 5:return o(e(t,n,r,i,a),[u,l,c]);case 6:return o(e(t,n,r,i,a,u),[l,c]);case 7:return o(e(t,n,r,i,a,u,l),[c])}return 1===f?o(e(t),[n,r,i,a,u,l,c]):void 0}function b(e,t,n,r,o,i,a,u,l){var c=e.length;return 8===c?e(t,n,r,o,i,a,u,l):y(e,t,n,r,o,i,a,u,l,c)}t.app=o,t.curry_1=i,t._1=a,t.__1=function(e){return 1===e.length?e:function(t){return a(e,t)}},t.curry_2=u,t._2=l,t.__2=function(e){return 2===e.length?e:function(t,n){return l(e,t,n)}},t.curry_3=c,t._3=s,t.__3=function(e){return 3===e.length?e:function(t,n,r){return s(e,t,n,r)}},t.curry_4=f,t._4=d,t.__4=function(e){return 4===e.length?e:function(t,n,r,o){return d(e,t,n,r,o)}},t.curry_5=p,t._5=m,t.__5=function(e){return 5===e.length?e:function(t,n,r,o,i){return m(e,t,n,r,o,i)}},t.curry_6=h,t._6=v,t.__6=function(e){return 6===e.length?e:function(t,n,r,o,i,a){return v(e,t,n,r,o,i,a)}},t.curry_7=g,t._7=_,t.__7=function(e){return 7===e.length?e:function(t,n,r,o,i,a,u){return _(e,t,n,r,o,i,a,u)}},t.curry_8=y,t._8=b,t.__8=function(e){return 8===e.length?e:function(t,n,r,o,i,a,u,l){return b(e,t,n,r,o,i,a,u,l)}}},function(e,t,n){"use strict";var r=n(2),o=n(1),i=n(0),a=n(64);function u(){return 0}function l(){return!0}function c(e){return e[1]}function s(){return"RenderNotImplemented"}function f(){return 0}function d(e,t){return 0}function p(){return 0}function m(e,t,n){var o=e.reasonProps;if(null==o){if(t)return[r._1(t[0],e)];throw[i.invalid_argument,"A JS component called the Reason component "+n+" which didn't implement the JS->Reason React props conversion."]}return o}function h(e){return[e,function(e){return a.createClass({displayName:e,subscriptions:null,self:function(e,t){return[this.handleMethod,e,t,this.sendMethod,this.onUnmountMethod]},transitionNextTotalState:function(e,t){if("number"==typeof t)return[0,e];switch(0|t.tag){case 0:return[0,{reasonState:t[0]}];case 1:return[[t[0]],e];case 2:return[[t[1]],{reasonState:t[0]}]}},getInitialState:function(){var t=m(this.props,this.jsPropsToReason,e);return{reasonState:r._1(t[0][10],0)}},componentDidMount:function(){var t=m(this.props,this.jsPropsToReason,e)[0],n=this.state.reasonState,o=this.self(n,t[11]);if(t[13]!==p){var i=function(e){for(var t=e,n=[];;){var r=t;if(!r)return n.reverse();n.push(r[0]),t=r[1]}}(r._1(t[13],o)).map(function(e){var t=e[1],n=r._1(e[0],0);return function(){return r._1(t,n)}});this.subscriptions=i}return t[4]!==u?r._1(t[4],o):0},componentDidUpdate:function(t,n){var o=this.state.reasonState,i=this.props,a=m(i,this.jsPropsToReason,e),l=a[0];if(l[5]!==u){var c=t===i?a:m(t,this.jsPropsToReason,e),s=n.reasonState,f=this.self(o,l[11]),d=[f[0],s,c[0][11],f[3],f[4]];return r._1(l[5],[d,f])}return 0},componentWillUnmount:function(){var t=m(this.props,this.jsPropsToReason,e)[0],n=this.state.reasonState;t[6]!==u&&r._1(t[6],this.self(n,t[11]));var o=this.subscriptions;return null!==o?(o.forEach(function(e){return r._1(e,0)}),0):0},componentWillUpdate:function(t,n){var o=m(t,this.jsPropsToReason,e),i=o[0];if(i[7]!==u){var a=this.props,l=t===a?o:m(a,this.jsPropsToReason,e),c=this.state.reasonState,s=n.reasonState,f=this.self(s,i[11]),d=[f[0],c,l[0][11],f[3],f[4]];return r._1(i[7],[d,f])}return 0},componentWillReceiveProps:function(t){var n=this,o=m(t,this.jsPropsToReason,e),i=o[0];if(i[3]!==c){var a=this.props,u=(t===a?o:m(a,this.jsPropsToReason,e))[0];return this.setState(function(e,t){var o=e.reasonState,a=n.self(o,u[11]),l=r._1(i[3],a);return l!==e?{reasonState:l}:e},null)}return 0},shouldComponentUpdate:function(t,n,o){var i=this.props,a=m(this.props,this.jsPropsToReason,e),u=(t===i?a:m(t,this.jsPropsToReason,e))[0],c=n.reasonState,s=this.self(c,u[11]);if(u[8]!==l){var f=this.state.reasonState,d=[s[0],f,a[0][11],s[3],s[4]];return r._1(u[8],[d,s])}return!0},onUnmountMethod:function(e){var t=this.subscriptions;return null!==t?(t.push(e),0):(this.subscriptions=[e],0)},handleMethod:function(t){var n=this,o=this;return function(i){var a=o.state.reasonState,u=m(o.props,o.jsPropsToReason,e);return r._2(t,i,n.self(a,u[0][11]))}},sendMethod:function(t){var n=this,o=m(this.props,this.jsPropsToReason,e)[0];if(o[12]!==d){var i=[function(){return 0}],a=r._1(o[12],t);return this.setState(function(e,t){var o=e.reasonState,u=r._1(a,o);if(0===u)return null;var l=n.transitionNextTotalState(e,u),c=l[1],s=l[0];return s&&(i[0]=s[0]),c!==e?c:null},n.handleMethod(function(e,t){return r._1(i[0],t)}))}return 0},render:function(){var t=m(this.props,this.jsPropsToReason,e)[0],n=this.state.reasonState;return r._1(t[9],this.self(n,t[11]))}})}(e),[0],c,u,u,u,u,l,s,f,0,d,p,0]}var v=h,g=h,_=h,y=h;var b=h("interop");function w(){return[function(){var e="undefined"==typeof window?void 0:window;if(void 0===e)return 0;var t=e.location.pathname;switch(t){case"":case"/":return 0;default:for(var n=t.slice(1),r=("/"===n[n.length-1|0]?n.slice(0,-1):n).split("/"),o=r.length-1|0,i=0;;){var a=i,u=o;if(u<0)return a;i=[r[u],a],o=u-1|0}}}(),function(){var e="undefined"==typeof window?void 0:window;if(void 0===e)return"";var t=e.location.hash;switch(t){case"":case"#":return"";default:return t.slice(1)}}(),function(){var e="undefined"==typeof window?void 0:window;if(void 0===e)return"";var t=e.location.search;switch(t){case"":case"?":return"";default:return t.slice(1)}}()]}var x=[function(){return 0},function(e,t,n){return r._1(e,n),r._1(t,n)}],C=[function(e){var t="undefined"==typeof history?void 0:history,n="undefined"==typeof window?void 0:window;return void 0!==t&&void 0!==n?(t.pushState(null,"",e),n.dispatchEvent(function(e){if("function"==typeof Event)return new Event(e);var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}("popstate")),0):0},function(e){var t="undefined"==typeof window?void 0:window;if(void 0!==t){var n=function(){return r._1(e,w())};return t.addEventListener("popstate",n),n}return function(){return 0}},function(e){var t="undefined"==typeof window?void 0:window;return void 0!==t?(t.removeEventListener("popstate",e),0):0},w];t.statelessComponent=v,t.statelessComponentWithRetainedProps=g,t.reducerComponent=_,t.reducerComponentWithRetainedProps=y,t.element=function(e,t,n){var i=e?e[0]:void 0,a=t?t[0]:void 0,u=[n],l=n[14];return l?r._2(l[0],i,a):o.createElement(n[1],{key:i,ref:a,reasonProps:u})},t.wrapReasonForJs=function(e,t){return e[1].prototype.jsPropsToReason=[t],e[1]},t.createDomElement=function(e,t,n){var r=[e,t].concat(n);return o.createElement.apply(null,r)},t.wrapJsForReason=function(e,t,n){var r=[function(r,i){var a=t,u=n,l=r,c=i,s=[e,Object.assign(Object.assign({},a),{ref:c,key:l})].concat(u);return o.createElement.apply(null,s)}];return[b[0],b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],r]},t.Router=C,t.Callback=x},function(e,t,n){e.exports=n(56)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"string"==typeof e&&r.test(e)};var r=/-webkit-|-moz-|-ms-/;e.exports=t.default},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var s=0;s<a.length;s++)i.call(n,a[s])&&(u[a[s]]=n[a[s]])}}return u}},function(e,t,n){"use strict";function r(e,t){return e<t?-1:e===t?0:1}var o=r,i=r;t.caml_int_compare=r,t.caml_bool_compare=function(e,t){return e?t?0:1:t?-1:0},t.caml_float_compare=function(e,t){return e===t?0:e<t?-1:e>t||e==e?1:t==t?-1:0},t.caml_nativeint_compare=o,t.caml_string_compare=function(e,t){return e===t?0:e<t?-1:1},t.caml_int32_compare=i,t.caml_bool_min=function(e,t){return e?t:e},t.caml_int_min=function(e,t){return e<t?e:t},t.caml_float_min=function(e,t){return e<t?e:t},t.caml_string_min=function(e,t){return e<t?e:t},t.caml_nativeint_min=function(e,t){return e<t?e:t},t.caml_int32_min=function(e,t){return e<t?e:t},t.caml_bool_max=function(e,t){return e||t},t.caml_int_max=function(e,t){return e>t?e:t},t.caml_float_max=function(e,t){return e>t?e:t},t.caml_string_max=function(e,t){return e>t?e:t},t.caml_nativeint_max=function(e,t){return e>t?e:t},t.caml_int32_max=function(e,t){return e>t?e:t}},function(e,t,n){"use strict";var r=n(2),o=n(34),i=n(33),a=n(0);function u(e){for(var t=0,n=e;;){var r=n,o=t;if(!r)return o;n=r[1],t=o+1|0}}function l(e,t){for(;;){var n=t,r=e;if(!r)return n;t=[r[0],n],e=r[1]}}function c(e){return e?i.$at(e[0],c(e[1])):0}function s(e){return function(t){for(var n=0,o=t;;){var i=o,a=n;if(!i)return l(a,0);var u=i[1],c=i[0];r._1(e,c)?(o=u,n=[c,a]):o=u}}}function f(e,t){for(;;){var n=t,r=e;if(0===r)return n;if(!n)throw[a.assert_failure,["list.ml",223,11]];t=n[1],e=r-1|0}}function d(e,t){var n=function(t,n){var i=0;if(2!==t)if(3===t&&n){var a=n[1];if(a){var u=a[1];if(u){var c=u[0],s=a[0],d=n[0];return r._2(e,d,s)<=0?r._2(e,s,c)<=0?[d,[s,[c,0]]]:r._2(e,d,c)<=0?[d,[c,[s,0]]]:[c,[d,[s,0]]]:r._2(e,d,c)<=0?[s,[d,[c,0]]]:r._2(e,s,c)<=0?[s,[c,[d,0]]]:[c,[s,[d,0]]]}i=1}else i=1}else i=1;else if(n){var p=n[1];if(p){var m=p[0],h=n[0];return r._2(e,h,m)<=0?[h,[m,0]]:[m,[h,0]]}i=1}else i=1;if(1===i)for(var v=t>>1,g=t-v|0,_=f(v,n),y=o(v,n),b=o(g,_),w=0;;){var x=w,C=b,E=y;if(E){if(C){var k=C[0],S=E[0];if(r._2(e,S,k)>0){w=[S,x],y=E[1];continue}w=[k,x],b=C[1];continue}return l(E,x)}return l(C,x)}},o=function(t,o){var i=0;if(2!==t)if(3===t&&o){var a=o[1];if(a){var u=a[1];if(u){var c=u[0],s=a[0],d=o[0];return r._2(e,d,s)>0?r._2(e,s,c)>0?[d,[s,[c,0]]]:r._2(e,d,c)>0?[d,[c,[s,0]]]:[c,[d,[s,0]]]:r._2(e,d,c)>0?[s,[d,[c,0]]]:r._2(e,s,c)>0?[s,[c,[d,0]]]:[c,[s,[d,0]]]}i=1}else i=1}else i=1;else if(o){var p=o[1];if(p){var m=p[0],h=o[0];return r._2(e,h,m)>0?[h,[m,0]]:[m,[h,0]]}i=1}else i=1;if(1===i)for(var v=t>>1,g=t-v|0,_=f(v,o),y=n(v,o),b=n(g,_),w=0;;){var x=w,C=b,E=y;if(E){if(C){var k=C[0],S=E[0];if(r._2(e,S,k)<=0){w=[S,x],y=E[1];continue}w=[k,x],b=C[1];continue}return l(E,x)}return l(C,x)}},i=u(t);return i<2?t:n(i,t)}var p=i.$at,m=c,h=s,v=d,g=d;t.length=u,t.hd=function(e){if(e)return e[0];throw[a.failure,"hd"]},t.tl=function(e){if(e)return e[1];throw[a.failure,"tl"]},t.nth=function(e,t){if(t<0)throw[a.invalid_argument,"List.nth"];for(var n=e,r=t;;){var o=r,i=n;if(!i)throw[a.failure,"nth"];if(0===o)return i[0];r=o-1|0,n=i[1]}},t.rev=function(e){return l(e,0)},t.append=p,t.rev_append=l,t.concat=m,t.flatten=c,t.iter=function(e,t){for(;;){var n=t;if(!n)return 0;r._1(e,n[0]),t=n[1]}},t.iteri=function(e,t){for(var n=0,o=e,i=t;;){var a=i,u=n;if(!a)return 0;r._2(o,u,a[0]),i=a[1],n=u+1|0}},t.map=function e(t,n){return n?[r._1(t,n[0]),e(t,n[1])]:0},t.mapi=function(e,t){return function e(t,n,o){return o?[r._2(n,t,o[0]),e(t+1|0,n,o[1])]:0}(0,e,t)},t.rev_map=function(e,t){for(var n=0,o=t;;){var i=o,a=n;if(!i)return a;o=i[1],n=[r._1(e,i[0]),a]}},t.fold_left=function(e,t,n){for(;;){var o=n,i=t;if(!o)return i;n=o[1],t=r._2(e,i,o[0])}},t.fold_right=function e(t,n,o){return n?r._2(t,n[0],e(t,n[1],o)):o},t.iter2=function(e,t,n){for(;;){var o=n,i=t;if(i){if(o){r._2(e,i[0],o[0]),n=o[1],t=i[1];continue}throw[a.invalid_argument,"List.iter2"]}if(o)throw[a.invalid_argument,"List.iter2"];return 0}},t.map2=function e(t,n,o){if(n){if(o)return[r._2(t,n[0],o[0]),e(t,n[1],o[1])];throw[a.invalid_argument,"List.map2"]}if(o)throw[a.invalid_argument,"List.map2"];return 0},t.rev_map2=function(e,t,n){for(var o=0,i=t,u=n;;){var l=u,c=i,s=o;if(c){if(l){u=l[1],i=c[1],o=[r._2(e,c[0],l[0]),s];continue}throw[a.invalid_argument,"List.rev_map2"]}if(l)throw[a.invalid_argument,"List.rev_map2"];return s}},t.fold_left2=function(e,t,n,o){for(;;){var i=o,u=n,l=t;if(u){if(i){o=i[1],n=u[1],t=r._3(e,l,u[0],i[0]);continue}throw[a.invalid_argument,"List.fold_left2"]}if(i)throw[a.invalid_argument,"List.fold_left2"];return l}},t.fold_right2=function e(t,n,o,i){if(n){if(o)return r._3(t,n[0],o[0],e(t,n[1],o[1],i));throw[a.invalid_argument,"List.fold_right2"]}if(o)throw[a.invalid_argument,"List.fold_right2"];return i},t.for_all=function(e,t){for(;;){var n=t;if(n){if(r._1(e,n[0])){t=n[1];continue}return!1}return!0}},t.exists=function(e,t){for(;;){var n=t;if(!n)return!1;if(r._1(e,n[0]))return!0;t=n[1]}},t.for_all2=function(e,t,n){for(;;){var o=n,i=t;if(i){if(o){if(r._2(e,i[0],o[0])){n=o[1],t=i[1];continue}return!1}throw[a.invalid_argument,"List.for_all2"]}if(o)throw[a.invalid_argument,"List.for_all2"];return!0}},t.exists2=function(e,t,n){for(;;){var o=n,i=t;if(i){if(o){if(r._2(e,i[0],o[0]))return!0;n=o[1],t=i[1];continue}throw[a.invalid_argument,"List.exists2"]}if(o)throw[a.invalid_argument,"List.exists2"];return!1}},t.mem=function(e,t){for(;;){var n=t;if(!n)return!1;if(o.caml_equal(n[0],e))return!0;t=n[1]}},t.memq=function(e,t){for(;;){var n=t;if(!n)return!1;if(n[0]===e)return!0;t=n[1]}},t.find=function(e,t){for(;;){var n=t;if(!n)throw a.not_found;var o=n[0];if(r._1(e,o))return o;t=n[1]}},t.filter=h,t.find_all=s,t.partition=function(e,t){for(var n=0,o=0,i=t;;){var a=i,u=o,c=n;if(!a)return[l(c,0),l(u,0)];var s=a[1],f=a[0];r._1(e,f)?(i=s,n=[f,c]):(i=s,o=[f,u])}},t.assoc=function(e,t){for(;;){var n=t;if(!n)throw a.not_found;var r=n[0];if(o.caml_equal(r[0],e))return r[1];t=n[1]}},t.assq=function(e,t){for(;;){var n=t;if(!n)throw a.not_found;var r=n[0];if(r[0]===e)return r[1];t=n[1]}},t.mem_assoc=function(e,t){for(;;){var n=t;if(!n)return!1;if(o.caml_equal(n[0][0],e))return!0;t=n[1]}},t.mem_assq=function(e,t){for(;;){var n=t;if(!n)return!1;if(n[0][0]===e)return!0;t=n[1]}},t.remove_assoc=function e(t,n){if(n){var r=n[1],i=n[0];return o.caml_equal(i[0],t)?r:[i,e(t,r)]}return 0},t.remove_assq=function e(t,n){if(n){var r=n[1],o=n[0];return o[0]===t?r:[o,e(t,r)]}return 0},t.split=function e(t){if(t){var n=t[0],r=e(t[1]);return[[n[0],r[0]],[n[1],r[1]]]}return[0,0]},t.combine=function e(t,n){if(t){if(n)return[[t[0],n[0]],e(t[1],n[1])];throw[a.invalid_argument,"List.combine"]}if(n)throw[a.invalid_argument,"List.combine"];return 0},t.sort=v,t.stable_sort=d,t.fast_sort=g,t.sort_uniq=function(e,t){var n=function(t,n){var i=0;if(2!==t)if(3===t&&n){var a=n[1];if(a){var u=a[1];if(u){var c=u[0],s=a[0],d=n[0],p=r._2(e,d,s);if(0===p){var m=r._2(e,s,c);return 0===m?[s,0]:m<0?[s,[c,0]]:[c,[s,0]]}if(p<0){var h=r._2(e,s,c);if(0===h)return[d,[s,0]];if(h<0)return[d,[s,[c,0]]];var v=r._2(e,d,c);return 0===v?[d,[s,0]]:v<0?[d,[c,[s,0]]]:[c,[d,[s,0]]]}var g=r._2(e,d,c);if(0===g)return[s,[d,0]];if(g<0)return[s,[d,[c,0]]];var _=r._2(e,s,c);return 0===_?[s,[d,0]]:_<0?[s,[c,[d,0]]]:[c,[s,[d,0]]]}i=1}else i=1}else i=1;else if(n){var y=n[1];if(y){var b=y[0],w=n[0],x=r._2(e,w,b);return 0===x?[w,0]:x<0?[w,[b,0]]:[b,[w,0]]}i=1}else i=1;if(1===i)for(var C=t>>1,E=t-C|0,k=f(C,n),S=o(C,n),T=o(E,k),O=0;;){var P=O,F=T,N=S;if(N){if(F){var A=F[1],D=F[0],R=N[1],M=N[0],I=r._2(e,M,D);if(0===I){O=[M,P],T=A,S=R;continue}if(I>0){O=[M,P],S=R;continue}O=[D,P],T=A;continue}return l(N,P)}return l(F,P)}},o=function(t,o){var i=0;if(2!==t)if(3===t&&o){var a=o[1];if(a){var u=a[1];if(u){var c=u[0],s=a[0],d=o[0],p=r._2(e,d,s);if(0===p){var m=r._2(e,s,c);return 0===m?[s,0]:m>0?[s,[c,0]]:[c,[s,0]]}if(p>0){var h=r._2(e,s,c);if(0===h)return[d,[s,0]];if(h>0)return[d,[s,[c,0]]];var v=r._2(e,d,c);return 0===v?[d,[s,0]]:v>0?[d,[c,[s,0]]]:[c,[d,[s,0]]]}var g=r._2(e,d,c);if(0===g)return[s,[d,0]];if(g>0)return[s,[d,[c,0]]];var _=r._2(e,s,c);return 0===_?[s,[d,0]]:_>0?[s,[c,[d,0]]]:[c,[s,[d,0]]]}i=1}else i=1}else i=1;else if(o){var y=o[1];if(y){var b=y[0],w=o[0],x=r._2(e,w,b);return 0===x?[w,0]:x>0?[w,[b,0]]:[b,[w,0]]}i=1}else i=1;if(1===i)for(var C=t>>1,E=t-C|0,k=f(C,o),S=n(C,o),T=n(E,k),O=0;;){var P=O,F=T,N=S;if(N){if(F){var A=F[1],D=F[0],R=N[1],M=N[0],I=r._2(e,M,D);if(0===I){O=[M,P],T=A,S=R;continue}if(I<0){O=[M,P],S=R;continue}O=[D,P],T=A;continue}return l(N,P)}return l(F,P)}},i=u(t);return i<2?t:n(i,t)},t.merge=function e(t,n,o){if(n){if(o){var i=o[0],a=n[0];return r._2(t,a,i)<=0?[a,e(t,n[1],o)]:[i,e(t,n,o[1])]}return n}return o}},function(e,t,n){"use strict";var r=n(8),o=n(102),i=n(30),a=n(71),u=n(70),l=n(69);function c(e,t){for(var n="",r=t;;){var o=r,i=n;if(o){var a=o[1],u=o[0];if(a){r=a,n=i+(u+e);continue}return i+u}return i}}function s(e){return a.fromList(r.map(function(e){var t=e[0];if(-659583595!==t){if(t>=488687584){if(t>=829240095){var n=e[1];return[n[0],s(n[1])]}return["boxShadow",e[1]]}if(t>=-434952966){var r=e[1];return[r[0],r[1]]}return["animation",e[1]]}return["transition",e[1]]},e))}function f(e,t){return[-434952966,[e,t]]}function d(e,t){return e+"("+t+")"}function p(e,t,n){return e+"("+t+", "+n+")"}function m(e,t){return e+"("+c(", ",t)+")"}function h(e){return String(e)+""}function v(e){var t=e[0];return t>=4995526?t>=5690837?h(e[1])+"rad":String(e[1])+"deg":t>=-855250051?h(e[1])+"turn":h(e[1])+"grad"}function g(e){if("number"==typeof e)return e>=582626130?"transparent":"currentColor";var t=e[0];if(-878128972!==t){if(t>=5197569){if(t>=5692173){var n=e[1];return"rgb("+c(", ",[String(n[0]),[String(n[1]),[String(n[2]),0]]])+")"}var r=e[1];return"hsl("+c(", ",[String(r[0]),[String(r[1])+"%",[String(r[2])+"%",0]]])+")"}if(t>=5194459)return"#"+e[1];var o=e[1];return"hsla("+c(", ",[String(o[0]),[String(o[1])+"%",[String(o[2])+"%",[h(o[3]),0]]]])+")"}var i=e[1];return"rgba("+c(", ",[String(i[0]),[String(i[1]),[String(i[2]),[h(i[3]),0]]]])+")"}function _(e){return c(", ",r.map(function(e){return c(" ",[g(e[1]),[String(e[0])+"%",0]])},e))}function y(e){if("number"==typeof e)return"0";var t=e[0];if(t>=22643)return t>=25096?t>=26433?t>=5691738?h(e[1])+"rem":h(e[1])+"vw":t>=26418?h(e[1])+"vh":String(e[1])+"px":24416!==t?t>=25092?String(e[1])+"pt":h(e[1])+"ex":h(e[1])+"mm";if(t>=-119887163)return t>=22186?t>=22632?h(e[1])+"em":h(e[1])+"cm":t>=22181?h(e[1])+"ch":h(e[1])+"%";if(-833472530!==t){if(t>=-833470756)return h(e[1])+"vmin";var n=e[1];return n[0]>=5745024?"calc("+y(n[1])+" - "+y(n[2])+")":"calc("+y(n[1])+" + "+y(n[2])+")"}return h(e[1])+"vmax"}var b=[function(e,t){return[-1044768619,[5745024,e,t]]},function(e,t){return[-1044768619,[4846113,e,t]]}];function w(e){if("number"==typeof e)return e>=-789508312?"0":"auto";var t=e[0];if(t>=22643)return t>=25096?t>=26433?t>=5691738?h(e[1])+"rem":h(e[1])+"vw":t>=26418?h(e[1])+"vh":String(e[1])+"px":24416!==t?t>=25092?String(e[1])+"pt":h(e[1])+"ex":h(e[1])+"mm";if(t>=-119887163)return t>=22186?t>=22632?h(e[1])+"em":h(e[1])+"cm":t>=22181?h(e[1])+"ch":h(e[1])+"%";if(-833472530!==t){if(t>=-833470756)return h(e[1])+"vmin";var n=e[1];return n[0]>=5745024?"calc("+y(n[1])+" - "+y(n[2])+")":"calc("+y(n[1])+" + "+y(n[2])+")"}return h(e[1])+"vmax"}function x(e){if("number"==typeof e)return e>=-550577721?e>=60557045?"max-content":"min-content":e>=-789508312?"0":"auto";var t=e[0];if(t>=22643)return t>=25096?t>=26433?t>=5691738?h(e[1])+"rem":h(e[1])+"vw":t>=26418?h(e[1])+"vh":String(e[1])+"px":t>=24416?t>=25092?String(e[1])+"pt":h(e[1])+"mm":t>=22860?h(e[1])+"fr":h(e[1])+"ex";if(t>=-119887163)return t>=22186?t>=22632?h(e[1])+"em":h(e[1])+"cm":t>=22181?h(e[1])+"ch":h(e[1])+"%";if(-833472530!==t){if(t>=-833470756)return h(e[1])+"vmin";var n=e[1];return n[0]>=5745024?"calc("+y(n[1])+" - "+y(n[2])+")":"calc("+y(n[1])+" + "+y(n[2])+")"}return h(e[1])+"vmax"}function C(e){return o.concat(" ",r.map(x,e))}function E(e){return e>=98248149?e>=662439529?e>=924268066?"flex-end":"flex-start":e>=287825029?"baseline":"center":e>=-162316795?"stretch":"auto"}function k(e){return e>=98248149?e>=662439529?e>=924268066?"flex-end":"flex-start":e>=516682146?"space-between":"center":e>=-162316795?"stretch":"space-around"}function S(e){return e>=-862584982?e>=589592690?"visible":"hidden":e>=-949692403?"scroll":"auto"}function T(e){return e[1]}function O(e){return e>=568403505?e>=841979626?"dotted":"dashed":e>=12956715?"solid":"none"}function P(e){return e>=-484197732?e>=700345660?e>=787279419?e>=826920258?"upper-latin":"upper-roman":e>=739986499?"lower-latin":"lower-roman":e>=-422333295?"decimal":"upper-alpha":e>=-703761904?e>=-655228771?e>=-571131491?"lower-alpha":"square":e>=-699686657?"lower-greek":"circle":e>=-922086728?"none":"disc"}function F(e){return e>=501235708?"inside":"outside"}function N(e){return"number"==typeof e?"none":d("url",e[1])}function A(e){return e>=472095738?568403505!==e?e>=852175633?e>=1042283741?"inset":"double":e>=841979626?"dotted":"grove":"dashed":-862584982!==e?e>=12956715?e>=209930196?"outset":"solid":e>=-379468757?"ridge":"none":"hidden"}var D=[[107228912,"italic"],[734792881,"oblique"],[812216871,"normal"]];function R(e){var t=e[0];if(t>=-120664438){if(!(t>=106728778)){if(-31746546!==t){if(t>=-31746545)return d("skewY",v(e[1]));var n=e[1];return m("scale",r.map(h,[n[0],[n[1],0]]))}return d("skewX",v(e[1]))}if(t>=178189215){if(!(t>=1009117838)){var o=e[1];return m("translate3d",r.map(y,[o[0],[o[1],[o[2],0]]]))}switch(t-1009117838|0){case 0:return d("scaleX",h(e[1]));case 1:return d("scaleY",h(e[1]));case 2:return d("scaleZ",h(e[1]))}}else{if(t>=142802924){var i=e[1];return m("rotate3d",[h(i[0]),[h(i[1]),[h(i[2]),[v(i[3]),0]]]])}switch(t-106728778|0){case 0:return d("translateX",y(e[1]));case 1:return d("translateY",y(e[1]));case 2:return d("translateZ",y(e[1]))}}}else{if(!(t>=-887077285)){if(t>=-914368690){var a=e[1];return p("translate",y(a[0]),y(a[1]))}return d("perspective",String(e[1]))}if(!(t>=-452513317)){if(t>=-866839798){var u=e[1];return m("skew",r.map(v,[u[0],[u[1],0]]))}return d("rotate",v(e[1]))}if(!(t>=-249738851)){var l=e[1];return m("scale3d",r.map(h,[l[0],[l[1],[l[2],0]]]))}switch(t+249738851|0){case 0:return d("rotateX",v(e[1]));case 1:return d("rotateY",v(e[1]));case 2:return d("rotateZ",v(e[1]))}}}function M(e){if("number"==typeof e)return e>=-193525386?e>=138027891?"ease-out":e>=20933615?"step-end":"step-start":-960651557!==e?e>=-325037595?"linear":"ease":"ease-in-out";if(e[0]>=68058023){var t=e[1],n=t[0];return t[1]>=67859554?p("steps",String(n),"start"):p("steps",String(n),"end")}var o=e[1];return m("cubic-bezier",r.map(h,[o[0],[o[1],[o[2],[o[3],0]]]]))}function I(e){return e>=812216871?e>=892586298?"alternate":"normal":e>=545428232?"alternate-reverse":"reverse"}function U(e){return e>=245861168?e>=733653774?"forwards":"backwards":e>=-922086728?"none":"both"}function j(e){return"number"==typeof e?"infinite":String(e[1])}function B(e){return e>=-276545362?"paused":"running"}function L(e){return e[1]}function z(e,t){return[829240095,[e,t]]}function W(e){return z(":default",e)}var H=r.concat,V=f,q=[function(e){return f("fill",g(e))},function(e){return f("fillRule",e>=110563029?"evenodd":"nonzero")},function(e){return f("fillOpacity",h(e))},function(e){return f("stroke",g(e))},function(e){return f("strokeLinecap",-655228771!==e?e>=-312084402?"round":"butt":"square")},function(e){return f("strokeLinejoin",141361157!==e?e>=811681914?"bevel":"round":"miter")},function(e){return f("strokeMiterlimit",h(e))},function(e){return f("strokeWidth",y(e))},function(e){return f("strokeOpacity",h(e))},function(e){return f("stopColor",g(e))},function(e){return f("stopOpacity",h(e))}];t.empty=0,t.merge=H,t.style=function(e){return i.css(s(r.rev(e))).toString()},t.$$global=function(e,t){return i.css.global(e,s(t)),0},t.important=function(e){if("number"==typeof e||-434952966!==e[0])return e;var t=e[1];return[-434952966,[t[0],t[1]+" !important"]]},t.label=function(e){return[-434952966,["label",e]]},t.deg=function(e){return[4995526,e]},t.rad=function(e){return[5690837,e]},t.grad=function(e){return[-999567410,e]},t.turn=function(e){return[-855250051,e]},t.rgb=function(e,t,n){return[5692173,[e,t,n]]},t.rgba=function(e,t,n,r){return[-878128972,[e,t,n,r]]},t.hsl=function(e,t,n){return[5197569,[e,t,n]]},t.hsla=function(e,t,n,r){return[-988425664,[e,t,n,r]]},t.hex=function(e){return[5194459,e]},t.transparent=582626130,t.currentColor=292050538,t.linearGradient=function(e,t){return[616379637,[e,t]]},t.repeatingLinearGradient=function(e,t){return[-160280644,[e,t]]},t.radialGradient=function(e){return[119548911,e]},t.repeatingRadialGradient=function(e){return[-657111370,e]},t.aliceblue=[5194459,"F0F8FF"],t.antiquewhite=[5194459,"FAEBD7"],t.aqua=[5194459,"00FFFF"],t.aquamarine=[5194459,"7FFFD4"],t.azure=[5194459,"F0FFFF"],t.beige=[5194459,"F5F5DC"],t.bisque=[5194459,"FFE4C4"],t.black=[5194459,"000000"],t.blanchedalmond=[5194459,"FFEBCD"],t.blue=[5194459,"0000FF"],t.blueviolet=[5194459,"8A2BE2"],t.brown=[5194459,"A52A2A"],t.burlywood=[5194459,"DEB887"],t.cadetblue=[5194459,"5F9EA0"],t.chartreuse=[5194459,"7FFF00"],t.chocolate=[5194459,"D2691E"],t.coral=[5194459,"FF7F50"],t.cornflowerblue=[5194459,"6495ED"],t.cornsilk=[5194459,"FFF8DC"],t.crimson=[5194459,"DC143C"],t.cyan=[5194459,"00FFFF"],t.darkblue=[5194459,"00008B"],t.darkcyan=[5194459,"008B8B"],t.darkgoldenrod=[5194459,"B8860B"],t.darkgray=[5194459,"A9A9A9"],t.darkgrey=[5194459,"A9A9A9"],t.darkgreen=[5194459,"006400"],t.darkkhaki=[5194459,"BDB76B"],t.darkmagenta=[5194459,"8B008B"],t.darkolivegreen=[5194459,"556B2F"],t.darkorange=[5194459,"FF8C00"],t.darkorchid=[5194459,"9932CC"],t.darkred=[5194459,"8B0000"],t.darksalmon=[5194459,"E9967A"],t.darkseagreen=[5194459,"8FBC8F"],t.darkslateblue=[5194459,"483D8B"],t.darkslategray=[5194459,"2F4F4F"],t.darkslategrey=[5194459,"2F4F4F"],t.darkturquoise=[5194459,"00CED1"],t.darkviolet=[5194459,"9400D3"],t.deeppink=[5194459,"FF1493"],t.deepskyblue=[5194459,"00BFFF"],t.dimgray=[5194459,"696969"],t.dimgrey=[5194459,"696969"],t.dodgerblue=[5194459,"1E90FF"],t.firebrick=[5194459,"B22222"],t.floralwhite=[5194459,"FFFAF0"],t.forestgreen=[5194459,"228B22"],t.fuchsia=[5194459,"FF00FF"],t.gainsboro=[5194459,"DCDCDC"],t.ghostwhite=[5194459,"F8F8FF"],t.gold=[5194459,"FFD700"],t.goldenrod=[5194459,"DAA520"],t.gray=[5194459,"808080"],t.grey=[5194459,"808080"],t.green=[5194459,"008000"],t.greenyellow=[5194459,"ADFF2F"],t.honeydew=[5194459,"F0FFF0"],t.hotpink=[5194459,"FF69B4"],t.indianred=[5194459,"CD5C5C"],t.indigo=[5194459,"4B0082"],t.ivory=[5194459,"FFFFF0"],t.khaki=[5194459,"F0E68C"],t.lavender=[5194459,"E6E6FA"],t.lavenderblush=[5194459,"FFF0F5"],t.lawngreen=[5194459,"7CFC00"],t.lemonchiffon=[5194459,"FFFACD"],t.lightblue=[5194459,"ADD8E6"],t.lightcoral=[5194459,"F08080"],t.lightcyan=[5194459,"E0FFFF"],t.lightgoldenrodyellow=[5194459,"FAFAD2"],t.lightgray=[5194459,"D3D3D3"],t.lightgrey=[5194459,"D3D3D3"],t.lightgreen=[5194459,"90EE90"],t.lightpink=[5194459,"FFB6C1"],t.lightsalmon=[5194459,"FFA07A"],t.lightseagreen=[5194459,"20B2AA"],t.lightskyblue=[5194459,"87CEFA"],t.lightslategray=[5194459,"778899"],t.lightslategrey=[5194459,"778899"],t.lightsteelblue=[5194459,"B0C4DE"],t.lightyellow=[5194459,"FFFFE0"],t.lime=[5194459,"00FF00"],t.limegreen=[5194459,"32CD32"],t.linen=[5194459,"FAF0E6"],t.magenta=[5194459,"FF00FF"],t.maroon=[5194459,"800000"],t.mediumaquamarine=[5194459,"66CDAA"],t.mediumblue=[5194459,"0000CD"],t.mediumorchid=[5194459,"BA55D3"],t.mediumpurple=[5194459,"9370DB"],t.mediumseagreen=[5194459,"3CB371"],t.mediumslateblue=[5194459,"7B68EE"],t.mediumspringgreen=[5194459,"00FA9A"],t.mediumturquoise=[5194459,"48D1CC"],t.mediumvioletred=[5194459,"C71585"],t.midnightblue=[5194459,"191970"],t.mintcream=[5194459,"F5FFFA"],t.mistyrose=[5194459,"FFE4E1"],t.moccasin=[5194459,"FFE4B5"],t.navajowhite=[5194459,"FFDEAD"],t.navy=[5194459,"000080"],t.oldlace=[5194459,"FDF5E6"],t.olive=[5194459,"808000"],t.olivedrab=[5194459,"6B8E23"],t.orange=[5194459,"FFA500"],t.orangered=[5194459,"FF4500"],t.orchid=[5194459,"DA70D6"],t.palegoldenrod=[5194459,"EEE8AA"],t.palegreen=[5194459,"98FB98"],t.paleturquoise=[5194459,"AFEEEE"],t.palevioletred=[5194459,"DB7093"],t.papayawhip=[5194459,"FFEFD5"],t.peachpuff=[5194459,"FFDAB9"],t.peru=[5194459,"CD853F"],t.pink=[5194459,"FFC0CB"],t.plum=[5194459,"DDA0DD"],t.powderblue=[5194459,"B0E0E6"],t.purple=[5194459,"800080"],t.rebeccapurple=[5194459,"663399"],t.red=[5194459,"FF0000"],t.rosybrown=[5194459,"BC8F8F"],t.royalblue=[5194459,"4169E1"],t.saddlebrown=[5194459,"8B4513"],t.salmon=[5194459,"FA8072"],t.sandybrown=[5194459,"F4A460"],t.seagreen=[5194459,"2E8B57"],t.seashell=[5194459,"FFF5EE"],t.sienna=[5194459,"A0522D"],t.silver=[5194459,"C0C0C0"],t.skyblue=[5194459,"87CEEB"],t.slateblue=[5194459,"6A5ACD"],t.slategray=[5194459,"708090"],t.slategrey=[5194459,"708090"],t.snow=[5194459,"FFFAFA"],t.springgreen=[5194459,"00FF7F"],t.steelblue=[5194459,"4682B4"],t.tan=[5194459,"D2B48C"],t.teal=[5194459,"008080"],t.thistle=[5194459,"D8BFD8"],t.tomato=[5194459,"FF6347"],t.turquoise=[5194459,"40E0D0"],t.violet=[5194459,"EE82EE"],t.wheat=[5194459,"F5DEB3"],t.white=[5194459,"FFFFFF"],t.whitesmoke=[5194459,"F5F5F5"],t.yellow=[5194459,"FFFF00"],t.yellowgreen=[5194459,"9ACD3"],t.ch=function(e){return[22181,e]},t.cm=function(e){return[22186,e]},t.em=function(e){return[22632,e]},t.ex=function(e){return[22643,e]},t.fr=function(e){return[22860,e]},t.mm=function(e){return[24416,e]},t.pct=function(e){return[-119887163,e]},t.pt=function(e){return[25092,e]},t.px=function(e){return[25096,e]},t.rem=function(e){return[5691738,e]},t.vh=function(e){return[26418,e]},t.vmax=function(e){return[-833472530,e]},t.vmin=function(e){return[-833470756,e]},t.vw=function(e){return[26433,e]},t.zero=-789508312,t.Calc=b,t.size=function(e,t){return[-866934591,[e,t]]},t.solid=12956715,t.dotted=841979626,t.dashed=568403505,t.localUrl=function(e){return[-538079548,e]},t.url=function(e){return[5843823,e]},t.none=-922086728,t.auto=-1065951377,t.hidden=-862584982,t.visible=589592690,t.local=-118437525,t.scroll=-949692403,t.paddingBox=972575930,t.borderBox=9307263,t.contentBox=-1008848302,t.noRepeat=-695430532,t.repeat=108828507,t.repeatX=646437021,t.repeatY=646437022,t.contain=427065300,t.cover=-899416265,t.row=5693978,t.rowReverse=378951208,t.column=-963948842,t.columnReverse=135477484,t.wrap=-822134326,t.nowrap=867913355,t.wrapReverse=-463121288,t.flexBox=-1010954439,t.grid=-999565626,t.inlineGrid=64712127,t.block=888960333,t.inline=423610969,t.inlineBlock=-147785676,t.inlineFlex=53323314,t.absolute=-1013592457,t.relative=903134412,t.$$static=100392110,t.fixed=10615156,t.sticky=188263721,t.flexStart=662439529,t.flexEnd=924268066,t.center=98248149,t.stretch=-162316795,t.spaceBetween=516682146,t.spaceAround=-485895757,t.baseline=287825029,t.forwards=733653774,t.backwards=245861168,t.both=-1055160191,t.infinite=-630647084,t.count=function(e){return[-899463985,e]},t.paused=-276545362,t.running=-345412097,t.inside=501235708,t.outside=-430011099,t.translate=function(e,t){return[-914368690,[e,t]]},t.translate3d=function(e,t,n){return[178189215,[e,t,n]]},t.translateX=function(e){return[106728778,e]},t.translateY=function(e){return[106728779,e]},t.translateZ=function(e){return[106728780,e]},t.scale=function(e,t){return[-120664438,[e,t]]},t.scale3d=function(e,t,n){return[-452513317,[e,t,n]]},t.scaleX=function(e){return[1009117838,e]},t.scaleY=function(e){return[1009117839,e]},t.scaleZ=function(e){return[1009117840,e]},t.rotate=function(e){return[-887077285,e]},t.rotate3d=function(e,t,n,r){return[142802924,[e,t,n,r]]},t.rotateX=function(e){return[-249738851,e]},t.rotateY=function(e){return[-249738850,e]},t.rotateZ=function(e){return[-249738849,e]},t.skew=function(e,t){return[-866839798,[e,t]]},t.skewX=function(e){return[-31746546,e]},t.skewY=function(e){return[-31746545,e]},t.italic=107228912,t.oblique=734792881,t.underline=131142924,t.overline=-986651832,t.lineThrough=-512623793,t.clip=-1044222256,t.ellipsis=166888785,t.wavy=-822975027,t.$$double=852175633,t.uppercase=-415330030,t.lowercase=-425349839,t.capitalize=-509867604,t.sub=5745024,t.$$super=79692155,t.textTop=516406248,t.textBottom=476669816,t.middle=-866200747,t.normal=812216871,t.breakAll=-323760734,t.keepAll=892748188,t.breakWord=1059921449,t.reverse=452737314,t.alternate=892586298,t.alternateReverse=545428232,t.fill=-1011102077,t.content=427265337,t.maxContent=60557045,t.minContent=-550577721,t.fitContent=-195805336,t.all=4847905,t.text=-856044371,t.linear=-325037595,t.ease=-1022587922,t.easeIn=138027891,t.easeOut=715748672,t.easeInOut=-960651557,t.stepStart=-193525386,t.stepEnd=20933615,t.steps=function(e,t){return[68058023,[e,t]]},t.cubicBesier=function(e,t,n,r){return[-554785527,[e,t,n,r]]},t.round=-312084402,t.miter=141361157,t.bevel=811681914,t.butt=-1054861805,t.square=-655228771,t.unsafe=V,t.display=function(e){return f("display",e>=53323314?e>=423610969?e>=888960333?"block":"inline":e>=64712127?"inline-grid":"inline-flex":e>=-922086728?e>=-147785676?"inline-block":"none":e>=-999565626?"grid":"flex")},t.position=function(e){return f("position",10615156!==e?e>=188263721?e>=903134412?"relative":"sticky":e>=100392110?"static":"absolute":"fixed")},t.top=function(e){return f("top",y(e))},t.bottom=function(e){return f("bottom",y(e))},t.left=function(e){return f("left",y(e))},t.right=function(e){return f("right",y(e))},t.flex=function(e){return f("flex",String(e))},t.flexGrow=function(e){return f("flexGrow",String(e))},t.flexShrink=function(e){return f("flexShrink",String(e))},t.flexBasis=function(e){var t;if("number"==typeof e)t=e>=-550577721?e>=60557045?e>=427265337?"content":"max-content":e>=-195805336?"fit-content":"min-content":-1011102077!==e?e>=-789508312?"0":"auto":"fill";else{var n=e[0];if(n>=22643)t=n>=25096?n>=26433?n>=5691738?h(e[1])+"rem":h(e[1])+"vw":n>=26418?h(e[1])+"vh":String(e[1])+"px":24416!==n?n>=25092?String(e[1])+"pt":h(e[1])+"ex":h(e[1])+"mm";else if(n>=-119887163)t=n>=22186?n>=22632?h(e[1])+"em":h(e[1])+"cm":n>=22181?h(e[1])+"ch":h(e[1])+"%";else if(-833472530!==n)if(n>=-833470756)t=h(e[1])+"vmin";else{var r=e[1];t=r[0]>=5745024?"calc("+y(r[1])+" - "+y(r[2])+")":"calc("+y(r[1])+" + "+y(r[2])+")"}else t=h(e[1])+"vmax"}return f("flexBasis",t)},t.flexDirection=function(e){return f("flexDirection",e>=135477484?e>=378951208?"row-reverse":"column-reverse":e>=5693978?"row":"column")},t.flexWrap=function(e){return f("flexWrap",-463121288!==e?e>=867913355?"nowrap":"wrap":"wrap-reverse")},t.order=function(e){return f("order",String(e))},t.gridTemplateColumns=function(e){return f("gridTemplateColumns",C(e))},t.gridTemplateRows=function(e){return f("gridTemplateRows",C(e))},t.gridAutoRows=function(e){return f("gridAutoRows",x(e))},t.gridColumn=function(e,t){return f("gridColumn",String(e)+" / "+String(t))},t.gridRow=function(e,t){return f("gridRow",String(e)+" / "+String(t))},t.gridColumnStart=function(e){return f("gridColumnStart",String(e))},t.gridColumnEnd=function(e){return f("gridColumnEnd",String(e))},t.gridRowStart=function(e){return f("gridRowStart",String(e))},t.gridRowEnd=function(e){return f("gridRowEnd",String(e))},t.gridColumnGap=function(e){return f("gridColumnGap",y(e))},t.gridRowGap=function(e){return f("gridRowGap",y(e))},t.gridGap=function(e){return f("gridGap",y(e))},t.width=function(e){return f("width",x(e))},t.minWidth=function(e){return f("minWidth",x(e))},t.maxWidth=function(e){return f("maxWidth",x(e))},t.height=function(e){return f("height",x(e))},t.minHeight=function(e){return f("minHeight",x(e))},t.maxHeight=function(e){return f("maxHeight",x(e))},t.margin=function(e){return f("margin",w(e))},t.margin2=function(e,t){return f("margin",c(" ",r.map(w,[e,[t,0]])))},t.margin3=function(e,t,n){return f("margin",c(" ",r.map(w,[e,[t,[n,0]]])))},t.margin4=function(e,t,n,o){return f("margin",c(" ",r.map(w,[e,[t,[n,[o,0]]]])))},t.marginLeft=function(e){return f("marginLeft",w(e))},t.marginRight=function(e){return f("marginRight",w(e))},t.marginTop=function(e){return f("marginTop",w(e))},t.marginBottom=function(e){return f("marginBottom",w(e))},t.padding=function(e){return f("padding",y(e))},t.padding2=function(e,t){return f("padding",c(" ",r.map(y,[e,[t,0]])))},t.padding3=function(e,t,n){return f("padding",c(" ",r.map(y,[e,[t,[n,0]]])))},t.padding4=function(e,t,n,o){return f("padding",c(" ",r.map(y,[e,[t,[n,[o,0]]]])))},t.paddingLeft=function(e){return f("paddingLeft",y(e))},t.paddingRight=function(e){return f("paddingRight",y(e))},t.paddingTop=function(e){return f("paddingTop",y(e))},t.paddingBottom=function(e){return f("paddingBottom",y(e))},t.alignContent=function(e){return f("alignContent",k(e))},t.alignItems=function(e){return f("alignItems",E(e))},t.alignSelf=function(e){return f("alignSelf",E(e))},t.justifyContent=function(e){return f("justifyContent",k(e))},t.boxSizing=function(e){return f("boxSizing",e>=9307263?"border-box":"content-box")},t.$$float=function(e){return f("float",-922086728!==e?e>=-379319332?"right":"left":"none")},t.clear=function(e){return f("clear",-944764921!==e?e>=-379319332?"right":"both":"left")},t.overflow=function(e){return f("overflow",S(e))},t.overflowX=function(e){return f("overflowX",S(e))},t.overflowY=function(e){return f("overflowY",S(e))},t.zIndex=function(e){return f("zIndex",String(e))},t.backfaceVisibility=function(e){return f("backfaceVisibility",e>=589592690?"visible":"hidden")},t.visibility=function(e){return f("visibility",e>=589592690?"visible":"hidden")},t.border=function(e,t,n){return f("border",c(" ",[y(e),[O(t),[g(n),0]]]))},t.borderWidth=function(e){return f("borderWidth",y(e))},t.borderStyle=function(e){return f("borderStyle",O(e))},t.borderColor=function(e){return f("borderColor",g(e))},t.borderTop=function(e,t,n){return f("borderTop",c(" ",[y(e),[O(t),[g(n),0]]]))},t.borderTopWidth=function(e){return f("borderTopWidth",y(e))},t.borderTopStyle=function(e){return f("borderTopStyle",O(e))},t.borderTopColor=function(e){return f("borderTopColor",g(e))},t.borderBottom=function(e,t,n){return f("borderBottom",c(" ",[y(e),[O(t),[g(n),0]]]))},t.borderBottomWidth=function(e){return f("borderBottomWidth",y(e))},t.borderBottomStyle=function(e){return f("borderBottomStyle",O(e))},t.borderBottomColor=function(e){return f("borderBottomColor",g(e))},t.borderLeft=function(e,t,n){return f("borderLeft",c(" ",[y(e),[O(t),[g(n),0]]]))},t.borderLeftWidth=function(e){return f("borderLeftWidth",y(e))},t.borderLeftStyle=function(e){return f("borderLeftStyle",O(e))},t.borderLeftColor=function(e){return f("borderLeftColor",g(e))},t.borderRight=function(e,t,n){return f("borderRight",c(" ",[y(e),[O(t),[g(n),0]]]))},t.borderRightWidth=function(e){return f("borderRightWidth",y(e))},t.borderRightStyle=function(e){return f("borderRightStyle",O(e))},t.borderRightColor=function(e){return f("borderRightColor",g(e))},t.borderRadius=function(e){return f("borderRadius",y(e))},t.borderTopLeftRadius=function(e){return f("borderTopLeftRadius",y(e))},t.borderTopRightRadius=function(e){return f("borderTopRightRadius",y(e))},t.borderBottomLeftRadius=function(e){return f("borderBottomLeftRadius",y(e))},t.borderBottomRightRadius=function(e){return f("borderBottomRightRadius",y(e))},t.tableLayout=function(e){return f("tableLayout",e>=10615156?"fixed":"auto")},t.borderCollapse=function(e){return f("borderCollapse",e>=119283555?"separate":"collapse")},t.borderSpacing=function(e){return f("borderSpacing",y(e))},t.boxShadow=function(e,t,n,r,o,i){var a=e?e[0]:-789508312,u=t?t[0]:-789508312,l=n?n[0]:-789508312,s=r?r[0]:-789508312,f=!!o&&o[0];return[488687584,c(" ",[y(a),[y(u),[y(l),[y(s),[g(i),[f?"inset":"",0]]]]]])]},t.boxShadows=function(e){return f("boxShadow",c(", ",r.map(T,e)))},t.background=function(e){var t;if("number"==typeof e)t=292050538!==e?e>=582626130?"transparent":"none":"currentColor";else{var n=e[0];if(n>=5197569)if(5692173!==n)if(n>=119548911)if(n>=616379637){var r=e[1];t="linear-gradient("+v(r[0])+", "+_(r[1])+")"}else t="radial-gradient("+_(e[1])+")";else if(n>=5843823)t="url("+e[1]+")";else{var o=e[1];t="hsl("+c(", ",[String(o[0]),[String(o[1])+"%",[String(o[2])+"%",0]]])+")"}else{var i=e[1];t="rgb("+c(", ",[String(i[0]),[String(i[1]),[String(i[2]),0]]])+")"}else if(-878128972!==n)if(n>=-160280644)if(n>=5194459)t="#"+e[1];else{var a=e[1];t="repeating-linear-gradient("+v(a[0])+", "+_(a[1])+")"}else if(n>=-657111370)t="repeating-radial-gradient("+_(e[1])+")";else{var u=e[1];t="hsla("+c(", ",[String(u[0]),[String(u[1])+"%",[String(u[2])+"%",[h(u[3]),0]]]])+")"}else{var l=e[1];t="rgba("+c(", ",[String(l[0]),[String(l[1]),[String(l[2]),[h(l[3]),0]]]])+")"}}return f("background",t)},t.backgroundColor=function(e){return f("backgroundColor",g(e))},t.backgroundImage=function(e){var t;if("number"==typeof e)t="none";else{var n=e[0];if(-160280644!==n)if(n>=119548911)if(n>=616379637){var r=e[1];t="linear-gradient("+v(r[0])+", "+_(r[1])+")"}else t="radial-gradient("+_(e[1])+")";else t=n>=5843823?"url("+e[1]+")":"repeating-radial-gradient("+_(e[1])+")";else{var o=e[1];t="repeating-linear-gradient("+v(o[0])+", "+_(o[1])+")"}}return f("backgroundImage",t)},t.backgroundAttachment=function(e){return f("backgroundAttachment",-118437525!==e?e>=10615156?"fixed":"scroll":"local")},t.backgroundClip=function(e){return f("backgroundClip",9307263!==e?e>=972575930?"padding-box":"content-box":"border-box")},t.backgroundOrigin=function(e){return f("backgroundOrigin",9307263!==e?e>=972575930?"padding-box":"content-box":"border-box")},t.backgroundPosition=function(e,t){return f("backgroundPosition",y(e)+" "+y(t))},t.backgroundRepeat=function(e){return f("backgroundRepeat",e>=646437021?e>=646437022?"repeat-y":"repeat-x":e>=108828507?"repeat":"no-repeat")},t.backgroundSize=function(e){var t;if("number"==typeof e)t=-899416265!==e?e>=427065300?"contain":"auto":"cover";else{var n=e[1];t=y(n[0])+" "+y(n[1])}return f("backgroundSize",t)},t.cursor=function(e){return f("cursor",e>=-459627717?e>=365450254?465819841!==e?e>=626862894?e>=939907157?"not-allowed":"context-menu":e>=563171728?"alias":"all-scroll":"default":-88732200!==e?e>=103479213?e>=180897442?"crosshair":"progress":e>=-19620980?"grabbing":"zoom-out":"zoom-in":e>=-933174511?-922086728!==e?e>=-822977931?e>=-786317123?"pointer":"wait":e>=-856044371?"text":"move":"none":-1044569694!==e?e>=-999567412?e>=-989121855?"help":"grab":e>=-1044071499?"copy":"auto":"cell")},t.clipPath=function(e){return f("clipPath","url("+e[1]+")")},t.listStyle=function(e,t,n){return f("listStyle",c(" ",[P(e),[F(t),[N(n),0]]]))},t.listStyleType=function(e){return f("listStyleType",P(e))},t.listStylePosition=function(e){return f("listStylePosition",F(e))},t.listStyleImage=function(e){return f("listStyleImage",N(e))},t.opacity=function(e){return f("opacity",h(e))},t.outline=function(e,t,n){return f("outline",c(" ",[y(e),[A(t),[g(n),0]]]))},t.outlineStyle=function(e){return f("outlineStyle",A(e))},t.outlineWidth=function(e){return f("outlineWidth",y(e))},t.outlineColor=function(e){return f("outlineColor",g(e))},t.outlineOffset=function(e){return f("outlineOffset",y(e))},t.pointerEvents=function(e){return f("pointerEvents",e>=-922086728?"none":"auto")},t.color=function(e){return f("color",g(e))},t.fontFamily=function(e){return f("fontFamily",e)},t.fontFace=function(e,t,n,a,c){var s=u.map(function(e){return l.binarySearch(3,e,D)},n),f={fontFamily:e,src:o.concat(", ",r.map(function(e){return e[0]>=5843823?'url("'+String(e[1])+'")':'local("'+String(e[1])+'")'},t))};return s&&(f.fontStyle=s[0]),a&&(f.fontWeight=a[0]),i.css.fontFace(f)},t.fontSize=function(e){return f("fontSize",y(e))},t.fontVariant=function(e){return f("fontVariant",e>=812216871?"normal":"small-caps")},t.fontStyle=function(e){return f("fontStyle",l.binarySearch(3,e,D))},t.fontWeight=function(e){return f("fontWeight",String(e))},t.letterSpacing=function(e){var t;if("number"==typeof e)t=-789508312!==e?e>=812216871?"normal":"auto":"0";else{var n=e[0];if(n>=22643)t=n>=25096?n>=26433?n>=5691738?h(e[1])+"rem":h(e[1])+"vw":n>=26418?h(e[1])+"vh":String(e[1])+"px":24416!==n?n>=25092?String(e[1])+"pt":h(e[1])+"ex":h(e[1])+"mm";else if(n>=-119887163)t=n>=22186?n>=22632?h(e[1])+"em":h(e[1])+"cm":n>=22181?h(e[1])+"ch":h(e[1])+"%";else if(-833472530!==n)if(n>=-833470756)t=h(e[1])+"vmin";else{var r=e[1];t=r[0]>=5745024?"calc("+y(r[1])+" - "+y(r[2])+")":"calc("+y(r[1])+" + "+y(r[2])+")"}else t=h(e[1])+"vmax"}return f("letterSpacing",t)},t.lineHeight=function(e){var t;if("number"==typeof e)t=-789508312!==e?e>=812216871?"normal":"auto":"0";else{var n=e[0];if(n>=22643)t=n>=26418?n>=4845682?n>=5691738?h(e[1])+"rem":h(e[1]):n>=26433?h(e[1])+"vw":h(e[1])+"vh":n>=25092?n>=25096?String(e[1])+"px":String(e[1])+"pt":n>=24416?h(e[1])+"mm":h(e[1])+"ex";else if(n>=-119887163)t=n>=22186?n>=22632?h(e[1])+"em":h(e[1])+"cm":n>=22181?h(e[1])+"ch":h(e[1])+"%";else if(-833472530!==n)if(n>=-833470756)t=h(e[1])+"vmin";else{var r=e[1];t=r[0]>=5745024?"calc("+y(r[1])+" - "+y(r[2])+")":"calc("+y(r[1])+" + "+y(r[2])+")"}else t=h(e[1])+"vmax"}return f("lineHeight",t)},t.textAlign=function(e){return f("textAlign",e>=62250832?e>=98248149?"center":"justify":e>=-379319332?"right":"left")},t.textDecoration=function(e){return f("textDecoration",e>=131142924?e>=412155569?"line-through":"underline":e>=-922086728?"none":"overline")},t.textDecorationColor=function(e){return f("textDecorationColor",g(e))},t.textDecorationStyle=function(e){return f("textDecorationStyle",12956715!==e?e>=841979626?e>=852175633?"double":"dotted":e>=568403505?"dashed":"wavy":"solid")},t.textIndent=function(e){return f("textIndent",y(e))},t.textOverflow=function(e){return f("textOverflow","number"==typeof e?e>=166888785?"ellipsis":"clip":e[1])},t.textShadow=function(e,t,n,r){var o=e?e[0]:-789508312,i=t?t[0]:-789508312,a=n?n[0]:-789508312;return f("textShadow",c(" ",[y(o),[y(i),[y(a),[g(r),0]]]]))},t.textTransform=function(e){return f("textTransform",e>=-425349839?e>=-415330030?"uppercase":"lowercase":e>=-509867604?"capitalize":"none")},t.userSelect=function(e){return f("userSelect",e>=-856044371?e>=4847905?"all":"text":e>=-922086728?"none":"auto")},t.verticalAlign=function(e){var t;if("number"==typeof e)t=e>=5793429?79692155!==e?e>=476669816?e>=516406248?"text-top":"text-bottom":e>=287825029?"baseline":"top":"super":-866200747!==e?e>=-445061397?e>=5745024?"sub":"bottom":e>=-789508312?"0":"auto":"middle";else{var n=e[0];if(n>=22643)t=n>=25096?n>=26433?n>=5691738?h(e[1])+"rem":h(e[1])+"vw":n>=26418?h(e[1])+"vh":String(e[1])+"px":24416!==n?n>=25092?String(e[1])+"pt":h(e[1])+"ex":h(e[1])+"mm";else if(n>=-119887163)t=n>=22186?n>=22632?h(e[1])+"em":h(e[1])+"cm":n>=22181?h(e[1])+"ch":h(e[1])+"%";else if(-833472530!==n)if(n>=-833470756)t=h(e[1])+"vmin";else{var r=e[1];t=r[0]>=5745024?"calc("+y(r[1])+" - "+y(r[2])+")":"calc("+y(r[1])+" + "+y(r[2])+")"}else t=h(e[1])+"vmax"}return f("verticalAlign",t)},t.whiteSpace=function(e){return f("whiteSpace",538440119!==e?e>=812216871?e>=867913355?"nowrap":"normal":e>=660870029?"pre-wrap":"pre":"pre-line")},t.wordBreak=function(e){return f("wordBreak",812216871!==e?e>=892748188?"keep-all":"break-all":"normal")},t.wordSpacing=function(e){var t;if("number"==typeof e)t=-789508312!==e?e>=812216871?"normal":"auto":"0";else{var n=e[0];if(n>=22643)t=n>=25096?n>=26433?n>=5691738?h(e[1])+"rem":h(e[1])+"vw":n>=26418?h(e[1])+"vh":String(e[1])+"px":24416!==n?n>=25092?String(e[1])+"pt":h(e[1])+"ex":h(e[1])+"mm";else if(n>=-119887163)t=n>=22186?n>=22632?h(e[1])+"em":h(e[1])+"cm":n>=22181?h(e[1])+"ch":h(e[1])+"%";else if(-833472530!==n)if(n>=-833470756)t=h(e[1])+"vmin";else{var r=e[1];t=r[0]>=5745024?"calc("+y(r[1])+" - "+y(r[2])+")":"calc("+y(r[1])+" + "+y(r[2])+")"}else t=h(e[1])+"vmax"}return f("wordSpacing",t)},t.wordWrap=function(e){return f("wordWrap",e>=1059921449?"break-word":"normal")},t.transform=function(e){return f("transform",R(e))},t.transforms=function(e){return f("transform",c(" ",r.map(R,e)))},t.transformOrigin=function(e,t){return f("transformOrigin",c(" ",r.map(y,[e,[t,0]])))},t.transformOrigin3d=function(e,t,n){return f("transformOrigin",c(" ",r.map(y,[e,[t,[n,0]]])))},t.transformStyle=function(e){return f("transformStyle",e>=589702045?"preserve-3d":"flat")},t.perspective=function(e){var t;if("number"==typeof e)t=e>=-789508312?"0":"none";else{var n=e[0];if(n>=22643)t=n>=25096?n>=26433?n>=5691738?h(e[1])+"rem":h(e[1])+"vw":n>=26418?h(e[1])+"vh":String(e[1])+"px":24416!==n?n>=25092?String(e[1])+"pt":h(e[1])+"ex":h(e[1])+"mm";else if(n>=-119887163)t=n>=22186?n>=22632?h(e[1])+"em":h(e[1])+"cm":n>=22181?h(e[1])+"ch":h(e[1])+"%";else if(-833472530!==n)if(n>=-833470756)t=h(e[1])+"vmin";else{var r=e[1];t=r[0]>=5745024?"calc("+y(r[1])+" - "+y(r[2])+")":"calc("+y(r[1])+" + "+y(r[2])+")"}else t=h(e[1])+"vmax"}return f("perspective",t)},t.perspectiveOrigin=function(e,t){return f("perspectiveOrigin",c(" ",r.map(y,[e,[t,0]])))},t.transition=function(e,t,n,r){var o=e?e[0]:0,i=t?t[0]:0,a=n?n[0]:-1022587922;return[-659583595,c(" ",[String(o)+"ms",[M(a),[String(i)+"ms",[r,0]]]])]},t.transitions=function(e){return f("transition",c(", ",r.map(function(e){return e[1]},e)))},t.transitionDelay=function(e){return f("transitionDelay",String(e)+"ms")},t.transitionDuration=function(e){return f("transitionDuration",String(e)+"ms")},t.transitionTimingFunction=function(e){return f("transitionTimingFunction",M(e))},t.transitionProperty=function(e){return f("transitionProperty",e)},t.keyframes=function(e){return i.css.keyframes(r.fold_left(function(e,t){return e[String(t[0])+"%"]=s(t[1]),e},{},e))},t.animation=function(e,t,n,r,o,i,a,u){var l=e?e[0]:0,s=t?t[0]:0,f=n?n[0]:812216871,d=r?r[0]:-1022587922,p=o?o[0]:-922086728,m=i?i[0]:-345412097,h=a?a[0]:[-899463985,1];return[-885723388,c(" ",[u,[String(l)+"ms",[M(d),[String(s)+"ms",[j(h),[I(f),[U(p),[B(m),0]]]]]]]])]},t.animations=function(e){return f("animation",c(", ",r.map(L,e)))},t.animationDelay=function(e){return f("animationDelay",String(e)+"ms")},t.animationDirection=function(e){return f("animationDirection",I(e))},t.animationDuration=function(e){return f("animationDuration",String(e)+"ms")},t.animationFillMode=function(e){return f("animationFillMode",U(e))},t.animationIterationCount=function(e){return f("animationIterationCount",j(e))},t.animationName=function(e){return f("animationName",e)},t.animationPlayState=function(e){return f("animationPlayState",B(e))},t.animationTimingFunction=function(e){return f("animationTimingFunction",M(e))},t.selector=z,t.active=function(e){return z(":active",e)},t.after=function(e){return z("::after",e)},t.before=function(e){return z("::before",e)},t.checked=function(e){return z(":checked",e)},t.children=function(e){return z(" > *",e)},t.directSibling=function(e){return z(" + ",e)},t.disabled=function(e){return z(":disabled",e)},t.firstChild=function(e){return z(":first-child",e)},t.firstOfType=function(e){return z(":first-of-type",e)},t.focus=function(e){return z(":focus",e)},t.hover=function(e){return z(":hover",e)},t.lastChild=function(e){return z(":last-child",e)},t.lastOfType=function(e){return z(":last-of-type",e)},t.link=function(e){return z(":link",e)},t.readOnly=function(e){return z(":read-only",e)},t.required=function(e){return z(":required",e)},t.visited=function(e){return z(":visited",e)},t.enabled=function(e){return z(":enabled",e)},t.noContent=function(e){return z(":empty",e)},t.$$default=W,t.default=W,t.__esModule=!0,t.anyLink=function(e){return z(":any-link",e)},t.onlyChild=function(e){return z(":only-child",e)},t.onlyOfType=function(e){return z(":only-of-type",e)},t.optional=function(e){return z(":optional",e)},t.invalid=function(e){return z(":invalid",e)},t.outOfRange=function(e){return z(":out-of-range",e)},t.siblings=function(e){return z(" ~ ",e)},t.target=function(e){return z(":target",e)},t.firstLine=function(e){return z("::first-line",e)},t.firstLetter=function(e){return z("::first-letter",e)},t.selection=function(e){return z("::selection",e)},t.placeholder=function(e){return z("::placeholder",e)},t.media=function(e,t){return[829240095,["@media "+e,t]]},t.SVG=q},function(e,t,n){(e.exports=n(41)(!1)).push([e.i,".card-enter-done {\n    transform: rotateY(180deg);\n    transition: 0.4s;\n  transform-style: preserve-3d;\n}\n",""])},function(e,t,n){"use strict";var r=n(2),o=n(62),i=n(7);function a(e,t,n){var r=e[t];return e[t]=e[n],e[n]=r,0}function u(e){for(var t=e.length,n=0,r=t-1|0;n<=r;++n)a(e,n,o.random_int(n,t));return 0}function l(e,t){if(e<=0)return[];for(var n=new Array(e),r=0,o=e-1|0;r<=o;++r)n[r]=t(r);return n}function c(e,t){var n=l(e,t);return u(n),n}function s(e,t,n){for(var r=e.length,o=t.length,i=r<o?r:o,a=new Array(i),u=0,l=i-1|0;u<=l;++u)a[u]=n(e[u],t[u]);return a}function f(e,t){for(var n=0,r=e.length-1|0;n<=r;++n)t(e[n]);return 0}function d(e,t){for(var n=e.length,r=new Array(n),o=0,i=n-1|0;o<=i;++o)r[o]=t(e[o]);return r}function p(e,t){for(var n=e.length,r=new Array(n),o=0,i=0,a=n-1|0;i<=a;++i){var u=e[i];t(u)&&(r[o]=u,o=o+1|0)}return r.length=o,r}function m(e,t){for(var n=e.length,r=new Array(n),o=0,i=0,a=n-1|0;i<=a;++i){var u=t(e[i]);u&&(r[o]=u[0],o=o+1|0)}return r.length=o,r}function h(e,t){for(var n=0,r=e.length-1|0;n<=r;++n)t(n,e[n]);return 0}function v(e,t){for(var n=e.length,r=new Array(n),o=0,i=n-1|0;o<=i;++o)r[o]=t(o,e[o]);return r}function g(e,t,n){for(var r=t,o=0,i=e.length-1|0;o<=i;++o)r=n(r,e[o]);return r}function _(e,t,n){for(var r=t,o=e.length-1|0;o>=0;--o)r=n(r,e[o]);return r}function y(e,t,n,r){for(var o=n,a=i.caml_int_min(e.length,t.length)-1|0;a>=0;--a)o=r(o,e[a],t[a]);return o}function b(e,t){for(var n=e,r=0,o=t,i=e.length;;){var a=r;if(a===i)return!0;if(!o(n[a]))return!1;r=a+1|0}}function w(e,t){for(var n=e,r=0,o=t,i=e.length;;){var a=r;if(a===i)return!1;if(o(n[a]))return!0;r=a+1|0}}function x(e,t,n,r,o){for(;;){var i=n;if(i===o)return!0;if(!r(e[i],t[i]))return!1;n=i+1|0}}function C(e,t,n){return x(e,t,0,n,i.caml_int_min(e.length,t.length))}function E(e,t,n){for(var r=e,o=t,a=0,u=n,l=i.caml_int_min(e.length,t.length);;){var c=a;if(c===l)return!1;if(u(r[c],o[c]))return!0;a=c+1|0}}function k(e,t,n){var r=e.length;return r===t.length&&x(e,t,0,n,r)}function S(e,t,n){var r=e.length,o=t.length;if(r>o)return 1;if(r<o)return-1;for(var i=e,a=t,u=0,l=n,c=r;;){var s=u;if(s===c)return 0;var f=l(i[s],a[s]);if(0!==f)return f;u=s+1|0}}t.get=function(e,t){return t>=0&&t<e.length?[e[t]]:0},t.getExn=function(e,t){if(!(t>=0&&t<e.length))throw new Error('File "belt_Array.ml", line 25, characters 6-12');return e[t]},t.set=function(e,t,n){return t>=0&&t<e.length&&(e[t]=n,!0)},t.setExn=function(e,t,n){if(!(t>=0&&t<e.length))throw new Error('File "belt_Array.ml", line 31, characters 4-10');return e[t]=n,0},t.shuffleInPlace=u,t.shuffle=function(e){var t=e.slice(0);return u(t),t},t.reverseInPlace=function(e){for(var t=e,n=e.length,r=0,o=(n/2|0)-1|0;r<=o;++r)a(t,0+r|0,((0+n|0)-r|0)-1|0);return 0},t.reverse=function(e){for(var t=e.length,n=new Array(t),r=0,o=t-1|0;r<=o;++r)n[r]=e[(t-1|0)-r|0];return n},t.make=function(e,t){if(e<=0)return[];for(var n=new Array(e),r=0,o=e-1|0;r<=o;++r)n[r]=t;return n},t.range=function(e,t){var n=t-e|0;if(n<0)return[];for(var r=new Array(n+1|0),o=0;o<=n;++o)r[o]=e+o|0;return r},t.rangeBy=function(e,t,n){var r=t-e|0;if(r<0||n<=0)return[];for(var o=1+(r/n|0)|0,i=new Array(o),a=e,u=0,l=o-1|0;u<=l;++u)i[u]=a,a=a+n|0;return i},t.makeByU=l,t.makeBy=function(e,t){return l(e,r.__1(t))},t.makeByAndShuffleU=c,t.makeByAndShuffle=function(e,t){return c(e,r.__1(t))},t.zip=function(e,t){for(var n=e.length,r=t.length,o=n<r?n:r,i=new Array(o),a=0,u=o-1|0;a<=u;++a)i[a]=[e[a],t[a]];return i},t.zipByU=s,t.zipBy=function(e,t,n){return s(e,t,r.__2(n))},t.concat=function(e,t){for(var n=e.length,r=t.length,o=new Array(n+r|0),i=0,a=n-1|0;i<=a;++i)o[i]=e[i];for(var u=0,l=r-1|0;u<=l;++u)o[n+u|0]=t[u];return o},t.concatMany=function(e){for(var t=e.length,n=0,r=0,o=t-1|0;r<=o;++r)n=n+e[r].length|0;var i=new Array(n);n=0;for(var a=0,u=t-1|0;a<=u;++a)for(var l=e[a],c=0,s=l.length-1|0;c<=s;++c)i[n]=l[c],n=n+1|0;return i},t.slice=function(e,t,n){if(n<=0)return[];var r=e.length,o=t<0?i.caml_int_max(r+t|0,0):t,a=r-o|0,u=a<n?a:n;if(u<=0)return[];for(var l=new Array(u),c=0,s=u-1|0;c<=s;++c)l[c]=e[o+c|0];return l},t.fill=function(e,t,n,r){if(n>0){var o=e.length,a=t<0?i.caml_int_max(o+t|0,0):t,u=o-a|0,l=u<n?u:n;if(l>0){for(var c=a,s=(a+l|0)-1|0;c<=s;++c)e[c]=r;return 0}return 0}return 0},t.blit=function(e,t,n,r,o){var a=e.length,u=n.length,l=t<0?i.caml_int_max(a+t|0,0):t,c=r<0?i.caml_int_max(u+r|0,0):r,s=i.caml_int_min(o,i.caml_int_min(a-l|0,u-c|0));if(c<=l){for(var f=0,d=s-1|0;f<=d;++f)n[f+c|0]=e[f+l|0];return 0}for(var p=s-1|0;p>=0;--p)n[p+c|0]=e[p+l|0];return 0},t.blitUnsafe=function(e,t,n,r,o){if(r<=t){for(var i=0,a=o-1|0;i<=a;++i)n[i+r|0]=e[i+t|0];return 0}for(var u=o-1|0;u>=0;--u)n[u+r|0]=e[u+t|0];return 0},t.forEachU=f,t.forEach=function(e,t){return f(e,r.__1(t))},t.mapU=d,t.map=function(e,t){return d(e,r.__1(t))},t.keepU=p,t.keep=function(e,t){return p(e,r.__1(t))},t.keepMapU=m,t.keepMap=function(e,t){return m(e,r.__1(t))},t.forEachWithIndexU=h,t.forEachWithIndex=function(e,t){return h(e,r.__2(t))},t.mapWithIndexU=v,t.mapWithIndex=function(e,t){return v(e,r.__2(t))},t.reduceU=g,t.reduce=function(e,t,n){return g(e,t,r.__2(n))},t.reduceReverseU=_,t.reduceReverse=function(e,t,n){return _(e,t,r.__2(n))},t.reduceReverse2U=y,t.reduceReverse2=function(e,t,n,o){return y(e,t,n,r.__3(o))},t.someU=w,t.some=function(e,t){return w(e,r.__1(t))},t.everyU=b,t.every=function(e,t){return b(e,r.__1(t))},t.every2U=C,t.every2=function(e,t,n){return C(e,t,r.__2(n))},t.some2U=E,t.some2=function(e,t,n){return E(e,t,r.__2(n))},t.cmpU=S,t.cmp=function(e,t,n){return S(e,t,r.__2(n))},t.eqU=k,t.eq=function(e,t,n){return k(e,t,r.__2(n))}},function(e,t,n){"use strict";var r=n(0);function o(e,t,n,r,o){if(o>0){if(e===n){var i=e,a=t,u=r,l=o;if(a<u){for(var c=(i.length-u|0)-1|0,s=l-1|0,f=c>s?s:c;f>=0;--f)i[u+f|0]=i[a+f|0];return 0}if(a>u){for(var d=(i.length-a|0)-1|0,p=l-1|0,m=d>p?p:d,h=0;h<=m;++h)i[u+h|0]=i[a+h|0];return 0}return 0}var v=e.length-t|0;if(o<=v){for(var g=0,_=o-1|0;g<=_;++g)n[r+g|0]=e[t+g|0];return 0}for(var y=0,b=v-1|0;y<=b;++y)n[r+y|0]=e[t+y|0];for(var w=v,x=o-1|0;w<=x;++w)n[r+w|0]=0;return 0}return 0}function i(e){var t=e,n=e.length,r="",i=n;if(n<=4096&&n===t.length)return String.fromCharCode.apply(null,t);for(var a=0;i>0;){var u=i<1024?i:1024,l=new Array(u);o(t,a,l,0,u),r+=String.fromCharCode.apply(null,l),i=i-u|0,a=a+u|0}return r}t.bytes_of_string=function(e){for(var t=e.length,n=new Array(t),r=0,o=t-1|0;r<=o;++r)n[r]=e.charCodeAt(r);return n},t.bytes_to_string=i,t.caml_is_printable=function(e){return e>31&&e<127},t.caml_string_of_char_array=function(e){for(var t=e.length,n=new Array(t),r=0,o=t-1|0;r<=o;++r)n[r]=e[r];return i(n)},t.caml_string_get=function(e,t){if(t>=e.length||t<0)throw[r.invalid_argument,"index out of bounds"];return e.charCodeAt(t)},t.caml_create_string=function(e){if(e<0)throw[r.invalid_argument,"String.create"];for(var t=new Array(e),n=0,o=e-1|0;n<=o;++n)t[n]=0;return t},t.caml_fill_string=function(e,t,n,r){if(n>0){for(var o=t,i=(n+t|0)-1|0;o<=i;++o)e[o]=r;return 0}return 0},t.caml_blit_string=function(e,t,n,r,o){if(o>0){var i=e.length-t|0;if(o<=i){for(var a=0,u=o-1|0;a<=u;++a)n[r+a|0]=e.charCodeAt(t+a|0);return 0}for(var l=0,c=i-1|0;l<=c;++l)n[r+l|0]=e.charCodeAt(t+l|0);for(var s=i,f=o-1|0;s<=f;++s)n[r+s|0]=0;return 0}return 0},t.caml_blit_bytes=o,t.caml_string_get16=function(e,t){return e.charCodeAt(t)+(e.charCodeAt(t+1|0)<<8)|0},t.caml_string_get32=function(e,t){return((e.charCodeAt(t)+(e.charCodeAt(t+1|0)<<8)|0)+(e.charCodeAt(t+2|0)<<16)|0)+(e.charCodeAt(t+3|0)<<24)|0},t.string_of_char=function(e){return String.fromCharCode(e)},t.get=function(e,t){if(t<0||t>=e.length)throw[r.invalid_argument,"index out of bounds"];return e.charCodeAt(t)}},function(e,t,n){"use strict";var r=n(0);function o(e){return(255&e)<<24|(65280&e)<<8|(16711680&e)>>>8|(4278190080&e)>>>24}var i=Math.imul||function(e,t){return((e>>16)*(t|=0)<<16)+(65535&e)*t|0},a=o;t.div=function(e,t){if(0===t)throw r.division_by_zero;return e/t|0},t.mod_=function(e,t){if(0===t)throw r.division_by_zero;return e%t},t.caml_bswap16=function(e){return(255&e)<<8|(65280&e)>>>8},t.caml_int32_bswap=o,t.caml_nativeint_bswap=a,t.imul=i},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(51)},function(e,t,n){"use strict";var r=n(2),o=n(11),i=n(60);function a(e,t){for(;;){var n=t,r=e;if(!r)return n;var o=[r[0],0];n[1]=o,t=o,e=r[1]}}function u(e,t,n){for(;;){var r=n,o=t;if(!o)return 0;var i=o[1],a=o[0];if(e(a)){var u=[a,0];r[1]=u,n=u,t=i}else t=i}}function l(e,t,n){for(;;){var r=n,o=t;if(!o)return 0;var i=o[1],a=e(o[0]);if(a){var u=[a[0],0];r[1]=u,n=u,t=i}else t=i}}function c(e,t){if(e){var n=[e[0],0];return a(e[1],n)[1]=t,n}return t}function s(e,t){if(e){var n=[t(e[0]),0];return function(e,t,n){for(;;){var r=t,o=e;if(!o)return 0;var i=[n(o[0]),0];r[1]=i,t=i,e=o[1]}}(e[1],n,t),n}return 0}function f(e,t,n){if(e&&t){var r=[n(e[0],t[0]),0];return function(e,t,n,r){for(;;){var o=r,i=n,a=t;if(!a||!i)return 0;var u=[e(a[0],i[0]),0];o[1]=u,r=u,n=i[1],t=a[1]}}(n,e[1],t[1],r),r}return 0}function d(e,t){if(e){var n=[t(0,e[0]),0];return function(e,t,n,r){for(;;){var o=r,i=n,a=t;if(!i)return 0;var u=[e(a,i[0]),0];o[1]=u,r=u,n=i[1],t=a+1|0}}(t,1,e[1],n),n}return 0}function p(e,t){if(e<=0)return 0;for(var n=[t(0),0],r=n,o=1;o<e;){var i=[t(o),0];r[1]=i,r=i,o=o+1|0}return n}function m(e){for(var t=e,n=0;;){var r=n,o=t;if(!o)return r;n=r+1|0,t=o[1]}}function h(e){for(var t=e,n=e.length-1|0,r=0;;){var o=r,i=n;if(i<0)return o;r=[t[i],o],n=i-1|0}}function v(e){var t=m(e),n=new Array(t);return function(e,t,n){for(;;){var r=n,o=t;if(!r)return 0;e[o]=r[0],n=r[1],t=o+1|0}}(n,0,e),n}function g(e,t){for(;;){var n=t,r=e;if(!r)return n;t=[r[0],n],e=r[1]}}function _(e,t){for(;;){var n=t,r=e;if(!n)return r[1]=0,0;t=n[1],e=a(n[0],r)}}function y(e,t){for(var n=t,r=0,o=e;;){var i=o,a=r;if(!i)return a;o=i[1],r=[n(i[0]),a]}}function b(e,t){for(;;){var n=e;if(!n)return 0;t(n[0]),e=n[1]}}function w(e,t){for(var n=e,r=0,o=t;;){var i=r,a=n;if(!a)return 0;o(i,a[0]),r=i+1|0,n=a[1]}}function x(e,t,n){for(;;){var r=t,o=e;if(!o)return r;t=n(r,o[0]),e=o[1]}}function C(e,t,n){return m(e)<1e3?function e(t,n,r){return t?r(e(t[1],n,r),t[0]):n}(e,t,n):o.reduceReverseU(v(e),t,n)}function E(e,t,n){for(var r=e,o=t,i=0,a=n;;){var u=i,l=o,c=r;if(!c||!l)return u;i=[a(c[0],l[0]),u],o=l[1],r=c[1]}}function k(e,t,n){for(;;){var r=t,o=e;if(!o||!r)return 0;n(o[0],r[0]),t=r[1],e=o[1]}}function S(e,t,n,r){for(;;){var o=n,i=t,a=e;if(!a||!i)return o;n=r(o,a[0],i[0]),t=i[1],e=a[1]}}function T(e,t,n,r){return m(e)<1e3?function e(t,n,r,o){return t&&n?o(e(t[1],n[1],r,o),t[0],n[0]):r}(e,t,n,r):o.reduceReverse2U(v(e),v(t),n,r)}function O(e,t){for(;;){var n=e;if(n){if(t(n[0])){e=n[1];continue}return!1}return!0}}function P(e,t){for(;;){var n=e;if(!n)return!1;if(t(n[0]))return!0;e=n[1]}}function F(e,t,n){for(;;){var r=t,o=e;if(o&&r){if(n(o[0],r[0])){t=r[1],e=o[1];continue}return!1}return!0}}function N(e,t,n){for(;;){var r=t,o=e;if(o){if(r){var i=n(o[0],r[0]);if(0===i){t=r[1],e=o[1];continue}return i}return 1}return r?-1:0}}function A(e,t,n){for(;;){var r=t,o=e;if(o){if(r&&n(o[0],r[0])){t=r[1],e=o[1];continue}return!1}return!r}}function D(e,t,n){for(;;){var r=t,o=e;if(!o||!r)return!1;if(n(o[0],r[0]))return!0;t=r[1],e=o[1]}}function R(e,t,n){for(;;){var r=e;if(!r)return!1;if(n(r[0],t))return!0;e=r[1]}}function M(e,t,n){for(;;){var r=e;if(!r)return 0;var o=r[0];if(n(o[0],t))return[o[1]];e=r[1]}}function I(e,t,n){for(;;){var r=e;if(!r)return!1;if(n(r[0][0],t))return!0;e=r[1]}}function U(e,t,n){if(e){var r=e[1],o=e[0];if(n(o[0],t))return r;var i=[o,0];return function(e,t,n,r){for(;;){var o=n,i=e;if(!i)return!1;var a=i[1],u=i[0];if(r(u[0],t))return o[1]=a,!0;var l=[u,0];o[1]=l,n=l,e=a}}(r,t,i,n)?i:e}return 0}function j(e,t,n,r){if(e){var o=e[1],i=e[0];if(r(i[0],t))return[[t,n],o];var a=[i,0];return function(e,t,n,r,o){for(;;){var i=r,a=e;if(!a)return!1;var u=a[1],l=a[0];if(o(l[0],t))return i[1]=[[t,n],u],!0;var c=[l,0];i[1]=c,r=c,e=u}}(o,t,n,a,r)?a:[[t,n],e]}return[[t,n],0]}function B(e,t){var n=v(e);return i.stableSortInPlaceByU(n,t),h(n)}function L(e,t){for(;;){var n=e;if(!n)return 0;var r=n[0];if(t(r))return[r];e=n[1]}}function z(e,t){for(;;){var n=e;if(!n)return 0;var r=n[1],o=n[0];if(t(o)){var i=[o,0];return u(t,r,i),i}e=r}}function W(e,t){for(;;){var n=e;if(!n)return 0;var r=n[1],o=t(n[0]);if(o){var i=[o[0],0];return l(t,r,i),i}e=r}}function H(e,t){if(e){var n=e[0],r=[n,0],o=[n,0],i=t(n);return function(e,t,n,r){for(;;){var o=r,i=n,a=t;if(!a)return 0;var u=a[1],l=a[0],c=[l,0];e(l)?(i[1]=c,n=c,t=u):(o[1]=c,r=c,t=u)}}(t,e[1],r,o),i?[r,o[1]]:[r[1],o]}return[0,0]}var V=m,q=h;t.length=m,t.size=V,t.head=function(e){return e?[e[0]]:0},t.headExn=function(e){if(e)return e[0];throw new Error("headExn")},t.tail=function(e){return e?[e[1]]:0},t.tailExn=function(e){if(e)return e[1];throw new Error("tailExn")},t.add=function(e,t){return[t,e]},t.get=function(e,t){if(t<0)return 0;for(var n=e,r=t;;){var o=r,i=n;if(!i)return 0;if(0===o)return[i[0]];r=o-1|0,n=i[1]}},t.getExn=function(e,t){if(t<0)throw new Error("getExn");for(var n=e,r=t;;){var o=r,i=n;if(!i)throw new Error("getExn");if(0===o)return i[0];r=o-1|0,n=i[1]}},t.make=function(e,t){if(e<=0)return 0;for(var n=[t,0],r=n,o=1;o<e;){var i=[t,0];r[1]=i,r=i,o=o+1|0}return n},t.makeByU=p,t.makeBy=function(e,t){return p(e,r.__1(t))},t.shuffle=function(e){var t=v(e);return o.shuffleInPlace(t),h(t)},t.drop=function(e,t){if(t<0)return 0;for(var n=e,r=t;;){var o=r,i=n;if(0===o)return[i];if(!i)return 0;r=o-1|0,n=i[1]}},t.take=function(e,t){if(t<0)return 0;if(0===t)return[0];if(e){var n=[e[0],0];return function(e,t,n){for(;;){var r=n,o=t,i=e;if(0===i)return!0;if(!o)return!1;var a=[o[0],0];r[1]=a,n=a,t=o[1],e=i-1|0}}(t-1|0,e[1],n)?[n]:0}return 0},t.splitAt=function(e,t){if(t<0)return 0;if(0===t)return[[0,e]];if(e){var n=[e[0],0],r=function(e,t,n){for(;;){var r=n,o=t,i=e;if(0===i)return[o];if(!o)return 0;var a=[o[0],0];r[1]=a,n=a,t=o[1],e=i-1|0}}(t-1|0,e[1],n);return r?[[n,r[0]]]:0}return 0},t.concat=c,t.concatMany=function(e){var t=e.length;if(1!==t){if(0!==t){for(var n=e.length,r=e[n-1|0],o=n-2|0;o>=0;--o)r=c(e[o],r);return r}return 0}return e[0]},t.reverseConcat=g,t.flatten=function(e){for(;;){var t=e;if(!t)return 0;var n=t[0];if(n){var r=[n[0],0];return _(a(n[1],r),t[1]),r}e=t[1]}},t.mapU=s,t.map=function(e,t){return s(e,r.__1(t))},t.zip=function(e,t){if(e&&t){var n=[[e[0],t[0]],0];return function(e,t,n){for(;;){var r=n,o=t,i=e;if(!i||!o)return 0;var a=[[i[0],o[0]],0];r[1]=a,n=a,t=o[1],e=i[1]}}(e[1],t[1],n),n}return 0},t.zipByU=f,t.zipBy=function(e,t,n){return f(e,t,r.__2(n))},t.mapWithIndexU=d,t.mapWithIndex=function(e,t){return d(e,r.__2(t))},t.ofArray=q,t.fromArray=h,t.toArray=v,t.reverse=function(e){return g(e,0)},t.mapReverseU=y,t.mapReverse=function(e,t){return y(e,r.__1(t))},t.forEachU=b,t.forEach=function(e,t){return b(e,r.__1(t))},t.forEachWithIndexU=w,t.forEachWithIndex=function(e,t){return w(e,r.__2(t))},t.reduceU=x,t.reduce=function(e,t,n){return x(e,t,r.__2(n))},t.reduceReverseU=C,t.reduceReverse=function(e,t,n){return C(e,t,r.__2(n))},t.mapReverse2U=E,t.mapReverse2=function(e,t,n){return E(e,t,r.__2(n))},t.forEach2U=k,t.forEach2=function(e,t,n){return k(e,t,r.__2(n))},t.reduce2U=S,t.reduce2=function(e,t,n,o){return S(e,t,n,r.__3(o))},t.reduceReverse2U=T,t.reduceReverse2=function(e,t,n,o){return T(e,t,n,r.__3(o))},t.everyU=O,t.every=function(e,t){return O(e,r.__1(t))},t.someU=P,t.some=function(e,t){return P(e,r.__1(t))},t.every2U=F,t.every2=function(e,t,n){return F(e,t,r.__2(n))},t.some2U=D,t.some2=function(e,t,n){return D(e,t,r.__2(n))},t.cmpByLength=function(e,t){for(;;){var n=t,r=e;if(r){if(n){t=n[1],e=r[1];continue}return 1}return n?-1:0}},t.cmpU=N,t.cmp=function(e,t,n){return N(e,t,r.__2(n))},t.eqU=A,t.eq=function(e,t,n){return A(e,t,r.__2(n))},t.hasU=R,t.has=function(e,t,n){return R(e,t,r.__2(n))},t.getByU=L,t.getBy=function(e,t){return L(e,r.__1(t))},t.keepU=z,t.keep=function(e,t){return z(e,r.__1(t))},t.keepMapU=W,t.keepMap=function(e,t){return W(e,r.__1(t))},t.partitionU=H,t.partition=function(e,t){return H(e,r.__1(t))},t.unzip=function(e){if(e){var t=e[0],n=[t[0],0],r=[t[1],0];return function(e,t,n){for(;;){var r=n,o=t,i=e;if(!i)return 0;var a=i[0],u=[a[0],0],l=[a[1],0];o[1]=u,r[1]=l,n=l,t=u,e=i[1]}}(e[1],n,r),[n,r]}return[0,0]},t.getAssocU=M,t.getAssoc=function(e,t,n){return M(e,t,r.__2(n))},t.hasAssocU=I,t.hasAssoc=function(e,t,n){return I(e,t,r.__2(n))},t.removeAssocU=U,t.removeAssoc=function(e,t,n){return U(e,t,r.__2(n))},t.setAssocU=j,t.setAssoc=function(e,t,n,o){return j(e,t,n,r.__2(o))},t.sortU=B,t.sort=function(e,t){return B(e,r.__2(t))}},function(e,t,n){"use strict";var r=n(8),o=n(15),i=n(0);function a(e){var t=e[1];return"number"==typeof t?10:t[0]}function u(e,t){return o.reduce(t,e,function(e,t){return(e+11|0)<=21?e+11|0:e+1|0})}function l(e){var t=r.filter(function(e){return 3===e[1]})(e),n=r.filter(function(e){return 3!==e[1]})(e);return u(o.reduce(r.map(a,n),0,function(e,t){return e+t|0}),t)}function c(e,t){return e>=t?0:[e,c(e+1|0,t)]}var s=[0,[3,[1,[2,0]]]],f=[3,[2,[1,[0,0]]]],d=r.map(function(e){return[e]},c(2,10)),p=r.append(f,d),m=o.reduce(s,0,function(e,t){return r.append(e,o.map(p,function(e){return[t,e]}))});function h(e){switch(e[2]){case 2:return 3*e[3]/2;case 3:return e[3];case 5:case 7:return 2*e[3];case 0:case 1:case 4:case 6:case 8:case 9:return 0}}function v(e){var t=0,n=e[1];if(n){var r=n[1];if(r){var o=r[1];if(o){var a=o[1];if(a){var u=a[1],c=[n[0],[r[0],0]],s=[o[0],[a[0],0]],f=21===l(c)?2:1,d=[c,s],p=e[3],m=e[4];return[d,u,f,p,m+h([d,u,f,p,m])-p]}t=1}else t=1}else t=1}else t=1;if(1===t)throw[i.match_failure,["logic.re",144,6]]}function g(e){return o.reduce(e[1],e,function(t,n){var r=e[1];if(r){var o=r[1],a=[r[0],e[0][1]];return l(t[0][1])<17?l(a)<=21?[[e[0][0],a],o,6,t[3],t[4]]:[[e[0][0],a],o,5,t[3],t[4]]:t}throw[i.match_failure,["logic.re",176,10]]})}function _(e){var t=l(e[0]),n=l(e[1]);return t===n?3:t>21?4:n>21?5:t>n?7:9}t.styleToString=function(e){if("number"!=typeof e)return String(e[0]);switch(e){case 0:return"Jack";case 1:return"Queen";case 2:return"King";case 3:return"Ace"}},t.suitToString=function(e){switch(e){case 0:return"Jack";case 1:return"Queen";case 2:return"King";case 3:return"Ace"}},t.faceCardValue=10,t.cardValue=a,t.aceHighValue=11,t.aceLowValue=1,t.maxValue=21,t.addAces=u,t.calculateHand=l,t.testHand=[[0,0],[[0,[1]],0]],t.range=c,t.suits=s,t.faceCards=f,t.simpleCards=d,t.styles=p,t.defaultDeck=m,t.emptyBoard=[0,0],t.gameStateToString=function(e){switch(e){case 0:return"New Game";case 1:return"Player Turn";case 2:return"Blackjack";case 3:return"Push";case 4:return"Player Bust";case 5:return"Dealer Bust";case 6:return"Dealer Turn";case 7:return"Player Win";case 8:return"Dealer Blackjack";case 9:return"Dealer Win"}},t.calculatePayout=h,t.dealInitialCards=v,t.dealerHitValue=17,t.dealerCanPlay=function(e){return l(e)<17},t.runDealerTurn=g,t.findWinner=_,t.runPlayerTurn=function(e,t){switch(t){case 0:return v(e);case 1:var n=e[1];if(n){var r=n[1],o=[n[0],e[0][0]];return l(o)<=21?[[o,e[0][1]],r,1,e[3],e[4]]:[[o,e[0][1]],r,4,e[3],e[4]]}throw[i.match_failure,["logic.re",232,8]];case 2:var a,u=g(e);if(5===u[2])a=u;else{var c=_(u[0]);a=[u[0],u[1],c,u[3],u[4]]}return[a[0],a[1],a[2],a[3],e[4]+h(a)];case 3:throw[i.match_failure,["logic.re",229,2]]}},t.canHit=function(e){return 1===e[2]},t.canStand=function(e){return 1===e[2]},t.canDeal=function(e){return 1!==e[2]}},function(e,t,n){"use strict";var r=[0];function o(){return r[0]+=1,r[0]}t.caml_set_oo_id=function(e){return e[1]=r[0],r[0]+=1,e},t.get_id=o,t.create=function(e){var t=[e,o()];return t.tag=248,t},t.isCamlExceptionOrOpenVariant=function(e){if(void 0===e)return!1;if(248===e.tag)return!0;var t=e[0];return void 0!==t&&248===t.tag}},function(e,t,n){"use strict";t.__=function(e,t){return t.tag=e,t}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n(4)),i=l(n(1)),a=n(21),u=n(43);function l(e){return e&&e.__esModule?e:{default:e}}var c=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},s=(o.default.any,o.default.node,o.default.bool,o.default.bool,o.default.bool,o.default.func,function(e){function t(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r)),i=o.handleExited.bind(o);return o.state={handleExited:i,firstRender:!0},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},t.prototype.componentDidMount=function(){this.appeared=!0},t.getDerivedStateFromProps=function(e,t){var n=t.children,r=t.handleExited;return{children:t.firstRender?(0,u.getInitialChildMapping)(e,r):(0,u.getNextChildMapping)(e,n,r),firstRender:!1}},t.prototype.handleExited=function(e,t){var n=(0,u.getChildMapping)(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.setState(function(t){var n=r({},t.children);return delete n[e.key],{children:n}}))},t.prototype.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["component","childFactory"]),o=c(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?o:i.default.createElement(t,r,o)},t}(i.default.Component));s.childContextTypes={transitionGroup:o.default.object.isRequired},s.propTypes={},s.defaultProps={component:"div",childFactory:function(e){return e}},t.default=(0,a.polyfill)(s),e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.classNamesShape=t.timeoutsShape=void 0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}};var r,o=n(4),i=(r=o)&&r.__esModule?r:{default:r};t.timeoutsShape=i.default.oneOfType([i.default.number,i.default.shape({enter:i.default.number,exit:i.default.number}).isRequired]),t.classNamesShape=i.default.oneOfType([i.default.string,i.default.shape({enter:i.default.string,exit:i.default.string,active:i.default.string}),i.default.shape({enter:i.default.string,enterDone:i.default.string,enterActive:i.default.string,exit:i.default.string,exitDone:i.default.string,exitActive:i.default.string})])},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!==e&&void 0!==e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!==n&&void 0!==n?n:null}.bind(this))}function i(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,u=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?u="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==u){var l=e.displayName||e.name,c="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+l+" uses "+c+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==u?"\n  "+u:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=i;var s=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;s.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",function(){return a}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";t.__esModule=!0,t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(4)),o=u(n(1)),i=u(n(14)),a=n(21);n(20);function u(e){return e&&e.__esModule?e:{default:e}}var l=t.UNMOUNTED="unmounted",c=t.EXITED="exited",s=t.ENTERING="entering",f=t.ENTERED="entered",d=t.EXITING="exiting",p=function(e){function t(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r)),i=r.transitionGroup,a=i&&!i.isMounting?n.enter:n.appear,u=void 0;return o.appearStatus=null,n.in?a?(u=c,o.appearStatus=s):u=f:u=n.unmountOnExit||n.mountOnEnter?l:c,o.state={status:u},o.nextCallback=null,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{transitionGroup:null}},t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===l?{status:c}:null},t.prototype.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},t.prototype.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==s&&n!==f&&(t=s):n!==s&&n!==f||(t=d)}this.updateStatus(!1,t)},t.prototype.componentWillUnmount=function(){this.cancelNextCallback()},t.prototype.getTimeouts=function(){var e=this.props.timeout,t=void 0,n=void 0,r=void 0;return t=n=r=e,null!=e&&"number"!=typeof e&&(t=e.exit,n=e.enter,r=e.appear),{exit:t,enter:n,appear:r}},t.prototype.updateStatus=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments[1];if(null!==t){this.cancelNextCallback();var n=i.default.findDOMNode(this);t===s?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===c&&this.setState({status:l})},t.prototype.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,i=this.getTimeouts();t||r?(this.props.onEnter(e,o),this.safeSetState({status:s},function(){n.props.onEntering(e,o),n.onTransitionEnd(e,i.enter,function(){n.safeSetState({status:f},function(){n.props.onEntered(e,o)})})})):this.safeSetState({status:f},function(){n.props.onEntered(e)})},t.prototype.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:d},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:c},function(){t.props.onExited(e)})})})):this.safeSetState({status:c},function(){t.props.onExited(e)})},t.prototype.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},t.prototype.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},t.prototype.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},t.prototype.onTransitionEnd=function(e,t,n){this.setNextCallback(n),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},t.prototype.render=function(){var e=this.state.status;if(e===l)return null;var t=this.props,n=t.children,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var i=o.default.Children.only(n);return o.default.cloneElement(i,r)},t}(o.default.Component);function m(){}p.contextTypes={transitionGroup:r.object},p.childContextTypes={transitionGroup:function(){}},p.propTypes={},p.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:m,onEntering:m,onEntered:m,onExit:m,onExiting:m,onExited:m},p.UNMOUNTED=0,p.EXITED=1,p.ENTERING=2,p.ENTERED=3,p.EXITING=4,t.default=(0,a.polyfill)(p)},function(e,t,n){"use strict";var r=n(2),o=n(63),i=n(35),a=n(17),u=n(0);function l(e,t,n){for(var r=i.caml_make_vect(e,[]),o=0,a=e-1|0;o<=a;++o)r[o]=i.caml_make_vect(t,n);return r}function c(e){var t=e.length;return 0===t?[]:i.caml_array_sub(e,0,t)}function s(e,t,n,r,o){if(o<0||t<0||t>(e.length-o|0)||r<0||r>(n.length-o|0))throw[u.invalid_argument,"Array.blit"];return i.caml_array_blit(e,t,n,r,o)}var f=a.create("Array.Bottom");function d(e,t){var n=function(n,o,a,u,l,c,f){for(var d=n+o|0,p=u+l|0,m=n,h=i.caml_array_get(t,n),v=u,g=i.caml_array_get(a,u),_=f;;){var y=_,b=g,w=v,x=h,C=m;if(r._2(e,x,b)<=0){i.caml_array_set(c,y,x);var E=C+1|0;if(E<d){_=y+1|0,h=i.caml_array_get(t,E),m=E;continue}return s(a,w,c,y+1|0,p-w|0)}i.caml_array_set(c,y,b);var k=w+1|0;if(!(k<p))return s(t,C,c,y+1|0,d-C|0);_=y+1|0,g=i.caml_array_get(a,k),v=k}},o=function(n,o,a,u){for(var l=0,c=u-1|0;l<=c;++l){for(var s=i.caml_array_get(t,n+l|0),f=(a+l|0)-1|0;f>=a&&r._2(e,i.caml_array_get(o,f),s)>0;)i.caml_array_set(o,f+1|0,i.caml_array_get(o,f)),f=f-1|0;i.caml_array_set(o,f+1|0,s)}return 0},a=function(e,r,i,u){if(u<=5)return o(e,r,i,u);var l=u/2|0,c=u-l|0;return a(e+l|0,r,i+l|0,c),a(e,t,e+c|0,l),n(e+c|0,l,r,i+l|0,c,r,i)},u=t.length;if(u<=5)return o(0,t,0,u);var l=u/2|0,c=u-l|0,f=i.caml_make_vect(c,i.caml_array_get(t,0));return a(l,f,0,c),a(0,t,c,l),n(c,l,f,0,c,t,0)}var p=l,m=i.caml_array_concat,h=d;t.init=function(e,t){if(0===e)return[];if(e<0)throw[u.invalid_argument,"Array.init"];for(var n=i.caml_make_vect(e,r._1(t,0)),o=1,a=e-1|0;o<=a;++o)n[o]=r._1(t,o);return n},t.make_matrix=l,t.create_matrix=p,t.append=function(e,t){var n=e.length;return 0===n?c(t):0===t.length?i.caml_array_sub(e,0,n):e.concat(t)},t.concat=m,t.sub=function(e,t,n){if(n<0||t>(e.length-n|0))throw[u.invalid_argument,"Array.sub"];return i.caml_array_sub(e,t,n)},t.copy=c,t.fill=function(e,t,n,r){if(t<0||n<0||t>(e.length-n|0))throw[u.invalid_argument,"Array.fill"];for(var o=t,i=(t+n|0)-1|0;o<=i;++o)e[o]=r;return 0},t.blit=s,t.to_list=function(e){for(var t=e.length-1|0,n=0;;){var r=n,o=t;if(o<0)return r;n=[e[o],r],t=o-1|0}},t.of_list=function(e){if(!e)return[];for(var t=i.caml_make_vect(function(e,t){for(;;){var n=t,r=e;if(!n)return r;t=n[1],e=r+1|0}}(0,e),e[0]),n=1,r=e[1];;){var o=r,a=n;if(!o)return t;t[a]=o[0],r=o[1],n=a+1|0}},t.iter=function(e,t){for(var n=0,o=t.length-1|0;n<=o;++n)r._1(e,t[n]);return 0},t.map=function(e,t){var n=t.length;if(0===n)return[];for(var o=i.caml_make_vect(n,r._1(e,t[0])),a=1,u=n-1|0;a<=u;++a)o[a]=r._1(e,t[a]);return o},t.iteri=function(e,t){for(var n=0,o=t.length-1|0;n<=o;++n)r._2(e,n,t[n]);return 0},t.mapi=function(e,t){var n=t.length;if(0===n)return[];for(var o=i.caml_make_vect(n,r._2(e,0,t[0])),a=1,u=n-1|0;a<=u;++a)o[a]=r._2(e,a,t[a]);return o},t.fold_left=function(e,t,n){for(var o=t,i=0,a=n.length-1|0;i<=a;++i)o=r._2(e,o,n[i]);return o},t.fold_right=function(e,t,n){for(var o=n,i=t.length-1|0;i>=0;--i)o=r._2(e,t[i],o);return o},t.sort=function(e,t){for(var n=function(n,o){var a=1+((o+o|0)+o|0)|0,u=a;if((a+2|0)<n)return r._2(e,i.caml_array_get(t,a),i.caml_array_get(t,a+1|0))<0&&(u=a+1|0),r._2(e,i.caml_array_get(t,u),i.caml_array_get(t,a+2|0))<0&&(u=a+2|0),u;if((a+1|0)<n&&r._2(e,i.caml_array_get(t,a),i.caml_array_get(t,a+1|0))<0)return a+1|0;if(a<n)return a;throw[f,o]},a=function(a,u,l){try{for(var c=a,s=u,d=l;;){var p=s,m=n(c,p);if(!(r._2(e,i.caml_array_get(t,m),d)>0))return i.caml_array_set(t,p,d);i.caml_array_set(t,p,i.caml_array_get(t,m)),s=m}}catch(e){var h=o.internalToOCamlException(e);if(h[0]===f)return i.caml_array_set(t,h[1],l);throw h}},l=function(e,r){try{for(var a=e,u=r;;){var l=u,c=n(a,l);i.caml_array_set(t,l,i.caml_array_get(t,c)),u=c}}catch(e){var s=o.internalToOCamlException(e);if(s[0]===f)return s[1];throw s}},c=function(n,o){for(;;){var a=n,l=(a-1|0)/3|0;if(a===l)throw[u.assert_failure,["array.ml",173,4]];if(r._2(e,i.caml_array_get(t,l),o)<0){if(i.caml_array_set(t,a,i.caml_array_get(t,l)),l>0){n=l;continue}return i.caml_array_set(t,0,o)}return i.caml_array_set(t,a,o)}},s=t.length,d=((s+1|0)/3|0)-1|0;d>=0;--d)a(s,d,i.caml_array_get(t,d));for(var p=s-1|0;p>=2;--p){var m=i.caml_array_get(t,p);i.caml_array_set(t,p,i.caml_array_get(t,0)),c(l(p,0),m)}if(s>1){var h=i.caml_array_get(t,1);return i.caml_array_set(t,1,i.caml_array_get(t,0)),i.caml_array_set(t,0,h)}return 0},t.stable_sort=d,t.fast_sort=h},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,u,l){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,o,i,a,u,l],f=0;(c=new Error(t.replace(/%s/g,function(){return s[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},e.exports=t.default},function(e,t,n){"use strict";var r=n(94);e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.processStyleName=void 0,t.createMarkupForStyles=function(e,t){var n="";for(var o in e){var i=0===o.indexOf("--");if(e.hasOwnProperty(o)&&"label"!==o){var a=e[o];0,null!=a&&(i?n+=o+":"+a+";":(n+=u(o)+":",n+=(0,r.default)(o,a,t)+";"))}}return n||null};a(n(98));var r=a(n(96)),o=a(n(93)),i=a(n(91));a(n(28));function a(e){return e&&e.__esModule?e:{default:e}}var u=t.processStyleName=(0,i.default)(o.default)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compose=t.merge=t.$=t.style=t.presets=t.keyframes=t.fontFace=t.insertGlobal=t.insertRule=t.plugins=t.styleSheet=void 0,t.speedy=function(e){return f.speedy(e)},t.simulations=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];v=!!e},t.simulate=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(!(t=(0,a.default)(t)))return{};if(!v)return g||(console.warn("can't simulate without once calling simulations(true)"),g=!0),p||m||_||(console.warn("don't use simulation outside dev"),_=!0),{};return t.reduce(function(e,t){return e["data-simulate-"+b(t)]="",e},{})},t.cssLabels=function(e){y=!!e},t.isLikeRule=x,t.idFor=C,t.css=V,t.rehydrate=function(e){(0,r.default)(F,e.reduce(function(e,t){return e[t]=!0,e},{}))},t.flush=function(){F=f.inserted={},N=f.registered={},D={},f.flush(),f.inject()},t.select=$,t.parent=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return V(s({},e+" &",n))},t.media=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return V(s({},"@media "+e,n))},t.pseudo=G,t.active=function(e){return G(":active",e)},t.any=function(e){return G(":any",e)},t.checked=function(e){return G(":checked",e)},t.disabled=function(e){return G(":disabled",e)},t.empty=function(e){return G(":empty",e)},t.enabled=function(e){return G(":enabled",e)},t._default=function(e){return G(":default",e)},t.first=function(e){return G(":first",e)},t.firstChild=function(e){return G(":first-child",e)},t.firstOfType=function(e){return G(":first-of-type",e)},t.fullscreen=function(e){return G(":fullscreen",e)},t.focus=function(e){return G(":focus",e)},t.hover=function(e){return G(":hover",e)},t.indeterminate=function(e){return G(":indeterminate",e)},t.inRange=function(e){return G(":in-range",e)},t.invalid=function(e){return G(":invalid",e)},t.lastChild=function(e){return G(":last-child",e)},t.lastOfType=function(e){return G(":last-of-type",e)},t.left=function(e){return G(":left",e)},t.link=function(e){return G(":link",e)},t.onlyChild=function(e){return G(":only-child",e)},t.onlyOfType=function(e){return G(":only-of-type",e)},t.optional=function(e){return G(":optional",e)},t.outOfRange=function(e){return G(":out-of-range",e)},t.readOnly=function(e){return G(":read-only",e)},t.readWrite=function(e){return G(":read-write",e)},t.required=function(e){return G(":required",e)},t.right=function(e){return G(":right",e)},t.root=function(e){return G(":root",e)},t.scope=function(e){return G(":scope",e)},t.target=function(e){return G(":target",e)},t.valid=function(e){return G(":valid",e)},t.visited=function(e){return G(":visited",e)},t.dir=function(e,t){return G(":dir("+e+")",t)},t.lang=function(e,t){return G(":lang("+e+")",t)},t.not=function(e,t){var n=e.split(",").map(function(e){return e.trim()}).map(function(e){return":not("+e+")"});if(1===n.length)return G(":not("+e+")",t);return $(n.join(""),t)},t.nthChild=function(e,t){return G(":nth-child("+e+")",t)},t.nthLastChild=function(e,t){return G(":nth-last-child("+e+")",t)},t.nthLastOfType=function(e,t){return G(":nth-last-of-type("+e+")",t)},t.nthOfType=function(e,t){return G(":nth-of-type("+e+")",t)},t.after=function(e){return G("::after",e)},t.before=function(e){return G("::before",e)},t.firstLetter=function(e){return G("::first-letter",e)},t.firstLine=function(e){return G("::first-line",e)},t.selection=function(e){return G("::selection",e)},t.backdrop=function(e){return G("::backdrop",e)},t.placeholder=function(e){return V({"::placeholder":e})},t.cssFor=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return(t=(0,a.default)(t))?t.map(function(e){var t={label:[]};return U(t,{src:e}),P(w(t),O(t)).join("")}).join(""):""},t.attribsFor=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return(t=(0,a.default)(t))?t.map(function(e){C(e);var t=Object.keys(e)[0],n=e[t];return t+'="'+(n||"")+'"'}).join(" "):""};var r=c(n(6)),o=n(99),i=n(29),a=c(n(90)),u=n(89),l=c(n(72));function c(e){return e&&e.__esModule?e:{default:e}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var f=t.styleSheet=new o.StyleSheet;f.inject();var d=t.plugins=f.plugins=new u.PluginSet([u.prefixes,u.contentWrap,u.fallbacks]);d.media=new u.PluginSet,d.fontFace=new u.PluginSet,d.keyframes=new u.PluginSet([u.prefixes,u.fallbacks]);var p=!1,m=!1,h="undefined"!=typeof window,v=p,g=!1,_=!1;var y=p;function b(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e.toLowerCase().replace(/[^a-z0-9]/g,t)}function w(e){var t=JSON.stringify(e),n=(0,l.default)(t).toString(36);return e.label&&e.label.length>0&&p?b(e.label.join("."),"-")+"-"+n:n}function x(e){var t=Object.keys(e).filter(function(e){return"toString"!==e});return 1===t.length&&!!/data\-css\-([a-zA-Z0-9\-_]+)/.exec(t[0])}function C(e){var t=Object.keys(e).filter(function(e){return"toString"!==e});if(1!==t.length)throw new Error("not a rule");var n=/data\-css\-([a-zA-Z0-9\-_]+)/.exec(t[0]);if(!n)throw new Error("not a rule");return n[1]}var E=/[(),]|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g;function k(e){if(-1===e.indexOf(","))return[e];for(var t,n=[],r=[],o=0;t=E.exec(e);)switch(t[0]){case"(":o++;break;case")":o--;break;case",":if(o)break;n.push(t.index)}for(t=n.length;t--;)r.unshift(e.slice(n[t]+1)),e=e.slice(0,n[t]);return r.unshift(e),r}function S(e,t){if(!e)return t.replace(/\&/g,"");if(!t)return".css-"+e+",[data-css-"+e+"]";var n=k(t).map(function(t){return t.indexOf("&")>=0?[t.replace(/\&/gm,".css-"+e),t.replace(/\&/gm,"[data-css-"+e+"]")].join(","):".css-"+e+t+",[data-css-"+e+"]"+t}).join(",");return v&&/^\&\:/.exec(t)&&!/\s/.exec(t)&&(n+=",.css-"+e+"[data-simulate-"+b(t)+"],[data-css-"+e+"][data-simulate-"+b(t)+"]"),n}function T(e){var t=e.selector,n=e.style,r=d.transform({selector:t,style:n});return r.selector+"{"+(0,i.createMarkupForStyles)(r.style)+"}"}function O(e){var t=void 0,n=void 0,r=void 0,o=void 0;return Object.keys(e).forEach(function(i){i.indexOf("&")>=0?(n=n||{})[i]=e[i]:0===i.indexOf("@media")?(r=r||{})[i]=O(e[i]):0===i.indexOf("@supports")?(o=o||{})[i]=O(e[i]):"label"===i?e.label.length>0&&((t=t||{}).label=y?e.label.join("."):""):(t=t||{})[i]=e[i]}),{plain:t,selects:n,medias:r,supports:o}}function P(e,t){var n=[],r=t.plain,o=t.selects,i=t.medias,a=t.supports;return r&&n.push(T({style:r,selector:S(e)})),o&&Object.keys(o).forEach(function(t){return n.push(T({style:o[t],selector:S(e,t)}))}),i&&Object.keys(i).forEach(function(t){return n.push(t+"{"+P(e,i[t]).join("")+"}")}),a&&Object.keys(a).forEach(function(t){return n.push(t+"{"+P(e,a[t]).join("")+"}")}),n}var F=f.inserted={};var N=f.registered={};function A(e){N[e.id]||(N[e.id]=e)}var D={};function R(e){if(A(e),function(e){if(!F[e.id]){F[e.id]=!0;var t=O(e.style),n=P(e.id,t);F[e.id]=!!h||n,n.forEach(function(e){return f.insert(e)})}}(e),D[e.id])return D[e.id];var t=s({},"data-css-"+e.id,y&&e.label||"");return Object.defineProperty(t,"toString",{enumerable:!1,value:function(){return"css-"+e.id}}),D[e.id]=t,t}function M(e,t){var n=k(e).map(function(e){return e.indexOf("&")>=0?e:"&"+e});return k(t).map(function(e){return e.indexOf("&")>=0?e:"&"+e}).reduce(function(e,t){return e.concat(n.map(function(e){return t.replace(/\&/g,e)}))},[]).join(",")}var I={"::placeholder":["::-webkit-input-placeholder","::-moz-placeholder","::-ms-input-placeholder"],":fullscreen":[":-webkit-full-screen",":-moz-full-screen",":-ms-fullscreen"]};function U(e,t){var n=t.selector,r=void 0===n?"":n,o=t.mq,i=void 0===o?"":o,u=t.supp,l=void 0===u?"":u,c=t.src,s=void 0===c?{}:c;Array.isArray(s)||(s=[s]),(s=function e(t){for(var n=[],r=0;r<t.length;r++)n=Array.isArray(t[r])?n.concat(e(t[r])):n.concat(t[r]);return n}(s)).forEach(function(t){if(x(t)){var n=function(e){if(x(e)){var t=N[C(e)];if(null==t)throw new Error("[glamor] an unexpected rule cache miss occurred. This is probably a sign of multiple glamor instances in your app. See https://github.com/threepointone/glamor/issues/79");return t}return e}(t);if("css"!==n.type)throw new Error("cannot merge this rule");t=n.style}(t=(0,a.default)(t))&&t.composes&&U(e,{selector:r,mq:i,supp:l,src:t.composes}),Object.keys(t||{}).forEach(function(n){if(function(e){for(var t=[":",".","[",">"," "],n=!1,r=e.charAt(0),o=0;o<t.length;o++)if(r===t[o]){n=!0;break}return n||e.indexOf("&")>=0}(n))I[n]&&I[n].forEach(function(o){return U(e,{selector:M(r,o),mq:i,supp:l,src:t[n]})}),U(e,{selector:M(r,n),mq:i,supp:l,src:t[n]});else if(function(e){return 0===e.indexOf("@media")}(n))U(e,{selector:r,mq:(a=i,u=n,a?"@media "+a.substring(6)+" and "+u.substring(6):u),supp:l,src:t[n]});else if(function(e){return 0===e.indexOf("@supports")}(n))U(e,{selector:r,mq:i,supp:function(e,t){return e?"@supports "+e.substring(9)+" and "+t.substring(9):t}(l,n),src:t[n]});else if("composes"===n);else{var o=e;l&&(o[l]=o[l]||{},o=o[l]),i&&(o[i]=o[i]||{},o=o[i]),r&&(o[r]=o[r]||{},o=o[r]),"label"===n?y&&(e.label=e.label.concat(t.label)):o[n]=t[n]}var a,u})})}function j(e){var t={label:[]};return U(t,{src:e}),R({id:w(t),style:t,label:y?t.label.join("."):"",type:"css"})}var B={};Object.defineProperty(B,"toString",{enumerable:!1,value:function(){return"css-nil"}});var L="undefined"!=typeof WeakMap?[B,new WeakMap,new WeakMap,new WeakMap]:[B],z=!1;var W,H="undefined"!=typeof WeakMap?(W=j,function(e){if(L[e.length]){for(var t=L[e.length],n=0;n<e.length-1;)t.has(e[n])||t.set(e[n],new WeakMap),t=t.get(e[n]),n++;if(t.has(e[e.length-1])){var r=t.get(e[n]);if(N[r.toString().substring(4)])return r}}var o=W(e);if(L[e.length]){for(var i=0,a=L[e.length];i<e.length-1;)a=a.get(e[i]),i++;try{a.set(e[i],o)}catch(t){var u;p&&!z&&(z=!0,(u=console).warn.apply(u,["failed setting the WeakMap cache for args:"].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e))),console.warn("this should NOT happen, please file a bug on the github repo."))}}return o}):j;function V(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(t[0]&&t[0].length&&t[0].raw)throw new Error("you forgot to include glamor/babel in your babel plugins.");return(t=(0,a.default)(t))?H(t):B}V.insert=function(e){var t={id:w(e),css:e,type:"raw"};A(t),F[t.id]||(f.insert(t.css),F[t.id]=!!h||[t.css])};t.insertRule=V.insert;V.global=function(e,t){if(t=(0,a.default)(t))return V.insert(T({selector:e,style:t}))};t.insertGlobal=V.global;V.keyframes=function(e,t){t||(t=e,e="animation");var n={id:w({name:e,kfs:t=(0,a.default)(t)||{}}),type:"keyframes",name:e,keyframes:t};return A(n),function(e){if(!F[e.id]){var t=Object.keys(e.keyframes).map(function(t){var n=d.keyframes.transform({id:e.id,name:t,style:e.keyframes[t]});return n.name+"{"+(0,i.createMarkupForStyles)(n.style)+"}"}).join(""),n=["-webkit-","-moz-","-o-",""].map(function(n){return"@"+n+"keyframes "+e.name+"_"+e.id+"{"+t+"}"});n.forEach(function(e){return f.insert(e)}),F[e.id]=!!h||n}}(n),e+"_"+n.id},V.fontFace=function(e){var t={id:w(e=(0,a.default)(e)),type:"font-face",font:e};return A(t),function(e){if(!F[e.id]){var t="@font-face{"+(0,i.createMarkupForStyles)(e.font)+"}";f.insert(t),F[e.id]=!!h||[t]}}(t),e.fontFamily};t.fontFace=V.fontFace,t.keyframes=V.keyframes;t.presets={mobile:"(min-width: 400px)",Mobile:"@media (min-width: 400px)",phablet:"(min-width: 550px)",Phablet:"@media (min-width: 550px)",tablet:"(min-width: 750px)",Tablet:"@media (min-width: 750px)",desktop:"(min-width: 1000px)",Desktop:"@media (min-width: 1000px)",hd:"(min-width: 1200px)",Hd:"@media (min-width: 1200px)"};var q=t.style=V;function $(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e?V(s({},e,n)):q(n)}t.$=$;t.merge=V,t.compose=V;function G(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return V(s({},e,n))}},function(e,t,n){"use strict";var r=String.prototype.repeat&&function(e,t){return t.repeat(e)}||function(e,t){if(0==t.length||0==e)return"";if(t.length*e>=1<<28)throw new RangeError("repeat count must not overflow maximum string size");for(var n="";1==(1&e)&&(n+=t),0!=(e>>>=1);)t+=t;return n};t.repeat=r},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],s=!1,f=-1;function d(){s&&l&&(s=!1,l.length?c=l.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=u(d);s=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new m(e,t)),1!==c.length||s||u(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(2),o=n(108),i=n(107),a=n(106),u=n(12),l=n(17),c=n(104),s=n(0),f=n(103);var d=l.create("Pervasives.Exit");function p(e){for(var t=e.length,n=0;;){var r=n;if(r>=t)return e+".";var o=u.get(e,r);if(o>=48){if(o>=58)return e;n=r+1|0}else{if(45!==o)return e;n=r+1|0}}}var m=o.stdin,h=o.stdout,v=o.stderr;function g(e,t,n){return o.caml_ml_open_descriptor_out(c.not_implemented("caml_sys_open"))}function _(){for(var e=o.caml_ml_out_channels_list(0);;){var t=e;if(!t)return 0;try{o.caml_ml_flush(t[0])}catch(e){}e=t[1]}}function y(e,t){return o.caml_ml_output(e,t,0,t.length)}function b(e,t){return o.caml_ml_output(e,t,0,t.length)}function w(e,t,n){return o.caml_ml_open_descriptor_in(c.not_implemented("caml_sys_open"))}function x(e,t,n,r){for(;;){var o=r,i=n;if(o<=0)return 0;var a=c.not_implemented("caml_ml_input");if(0===a)throw s.end_of_file;r=o-a|0,n=i+a|0}}function C(e,t,n,r){if(n<0||r<0||n>(t.length-r|0))throw[s.invalid_argument,"really_input"];return x(0,0,n,r)}function E(e){var t=function(e,t,n){for(;;){var r=n,o=t;if(!r)return e;var i=r[0],a=i.length;u.caml_blit_bytes(i,0,e,o-a|0,a),n=r[1],t=o-a|0}};return u.bytes_to_string(function(n,r){for(;;){var i=r,a=n,l=c.not_implemented("caml_ml_input_scan_line");if(0===l){if(a)return t(u.caml_create_string(i),i,a);throw s.end_of_file}if(l>0){var f=u.caml_create_string(l-1|0);if(c.not_implemented("caml_ml_input"),o.caml_ml_input_char(e),a){var d=(i+l|0)-1|0;return t(u.caml_create_string(d),d,[f,a])}return f}var p=u.caml_create_string(0|-l);c.not_implemented("caml_ml_input"),r=i-l|0,n=[p,a]}}(0,0))}var k=[_];function S(){return r._1(k[0],0)}var T=o.caml_ml_flush,O=o.caml_ml_output_char,P=o.caml_ml_output_char;var F=o.caml_ml_input_char,N=o.caml_ml_input_char;var A=[function(e,t){return c.not_implemented("caml_ml_seek_out_64")},function(){return c.not_implemented("caml_ml_pos_out_64")},function(){return c.not_implemented("caml_ml_channel_size_64")},function(e,t){return c.not_implemented("caml_ml_seek_in_64")},function(){return c.not_implemented("caml_ml_pos_in_64")},function(){return c.not_implemented("caml_ml_channel_size_64")}];t.invalid_arg=function(e){throw[s.invalid_argument,e]},t.failwith=function(e){throw[s.failure,e]},t.Exit=d,t.abs=function(e){return e>=0?e:0|-e},t.max_int=2147483647,t.min_int=-2147483648,t.lnot=function(e){return-1^e},t.epsilon_float=2.220446049250313e-16,t.char_of_int=function(e){if(e<0||e>255)throw[s.invalid_argument,"char_of_int"];return e},t.string_of_bool=function(e){return e?"true":"false"},t.bool_of_string=function(e){switch(e){case"false":return!1;case"true":return!0;default:throw[s.invalid_argument,"bool_of_string"]}},t.string_of_float=function(e){return p(a.caml_format_float("%.12g",e))},t.$at=function e(t,n){return t?[t[0],e(t[1],n)]:n},t.stdin=m,t.stdout=h,t.stderr=v,t.print_char=function(e){return o.caml_ml_output_char(h,e)},t.print_string=function(e){return b(h,e)},t.print_bytes=function(e){return y(h,e)},t.print_int=function(e){return b(h,String(e))},t.print_float=function(e){return b(h,p(a.caml_format_float("%.12g",e)))},t.print_newline=function(){return o.caml_ml_output_char(h,10),o.caml_ml_flush(h)},t.prerr_char=function(e){return o.caml_ml_output_char(v,e)},t.prerr_string=function(e){return b(v,e)},t.prerr_bytes=function(e){return y(v,e)},t.prerr_int=function(e){return b(v,String(e))},t.prerr_float=function(e){return b(v,p(a.caml_format_float("%.12g",e)))},t.prerr_newline=function(){return o.caml_ml_output_char(v,10),o.caml_ml_flush(v)},t.read_line=function(){return o.caml_ml_flush(h),E(m)},t.read_int=function(){return a.caml_int_of_string((o.caml_ml_flush(h),E(m)))},t.read_float=function(){return a.caml_float_of_string((o.caml_ml_flush(h),E(m)))},t.open_out=function(e){return g()},t.open_out_bin=function(e){return g()},t.open_out_gen=g,t.flush=T,t.flush_all=_,t.output_char=O,t.output_string=b,t.output_bytes=y,t.output=function(e,t,n,r){if(n<0||r<0||n>(t.length-r|0))throw[s.invalid_argument,"output"];return o.caml_ml_output(e,t,n,r)},t.output_substring=function(e,t,n,r){if(n<0||r<0||n>(t.length-r|0))throw[s.invalid_argument,"output_substring"];return o.caml_ml_output(e,t,n,r)},t.output_byte=P,t.output_binary_int=function(e,t){return c.not_implemented("caml_ml_output_int")},t.output_value=function(e,t){return c.not_implemented("caml_output_value")},t.seek_out=function(e,t){return c.not_implemented("caml_ml_seek_out")},t.pos_out=function(){return c.not_implemented("caml_ml_pos_out")},t.out_channel_length=function(){return c.not_implemented("caml_ml_channel_size")},t.close_out=function(e){return o.caml_ml_flush(e),c.not_implemented("caml_ml_close_channel")},t.close_out_noerr=function(e){try{o.caml_ml_flush(e)}catch(e){}try{return c.not_implemented("caml_ml_close_channel")}catch(e){return 0}},t.set_binary_mode_out=function(e,t){return c.not_implemented("caml_ml_set_binary_mode")},t.open_in=function(e){return w()},t.open_in_bin=function(e){return w()},t.open_in_gen=w,t.input_char=F,t.input_line=E,t.input=function(e,t,n,r){if(n<0||r<0||n>(t.length-r|0))throw[s.invalid_argument,"input"];return c.not_implemented("caml_ml_input")},t.really_input=C,t.really_input_string=function(e,t){var n=u.caml_create_string(t);return C(0,n,0,t),u.bytes_to_string(n)},t.input_byte=N,t.input_binary_int=function(){return c.not_implemented("caml_ml_input_int")},t.input_value=function(){return c.not_implemented("caml_input_value")},t.seek_in=function(e,t){return c.not_implemented("caml_ml_seek_in")},t.pos_in=function(){return c.not_implemented("caml_ml_pos_in")},t.in_channel_length=function(){return c.not_implemented("caml_ml_channel_size")},t.close_in=function(){return c.not_implemented("caml_ml_close_channel")},t.close_in_noerr=function(){try{return c.not_implemented("caml_ml_close_channel")}catch(e){return 0}},t.set_binary_mode_in=function(e,t){return c.not_implemented("caml_ml_set_binary_mode")},t.LargeFile=A,t.string_of_format=function(e){return e[1]},t.$caret$caret=function(e,t){return[f.concat_fmt(e[0],t[0]),e[1]+"%,"+t[1]]},t.exit=function(e){return S(),i.caml_sys_exit(e)},t.at_exit=function(e){var t=k[0];return k[0]=function(){return r._1(e,0),r._1(t,0)},0},t.valid_float_lexem=p,t.unsafe_really_input=x,t.do_at_exit=S},function(e,t,n){"use strict";var r=n(18),o=n(7),i=n(0);var a=function(e,t){for(var n in e)t(n)};function u(e,t){for(;;){var n=t,r=e;if(r===n)return 0;var l=typeof r,c=typeof n;if("string"===l)return o.caml_string_compare(r,n);var s="number"===c;if("number"===l)return s?o.caml_int_compare(r,n):-1;if(s)return 1;if("boolean"===l||"undefined"===l||null===r){return r===n?0:r<n?-1:1}if("function"===l||"function"===c)throw[i.invalid_argument,"compare: functional value"];var f=0|r.tag,d=0|n.tag;if(250!==f)if(250!==d){if(248===f)return o.caml_int_compare(r[1],n[1]);if(251===f)throw[i.invalid_argument,"equal: abstract value"];if(f!==d)return f<d?-1:1;var p=0|r.length,m=0|n.length;if(p===m){if(!Array.isArray(r)){var h=r,v=n,g=[0],_=[0],y=function(e,t){var n=e[2],r=e[1];if(!r.hasOwnProperty(t)||u(e[0][t],r[t])>0){var o=n[0];return o?t<o[0]?(n[0]=[t],0):0:(n[0]=[t],0)}return 0},b=function(e){return function(t){return y(e,t)}}([h,v,_]),w=function(e){return function(t){return y(e,t)}}([v,h,g]);a(h,b),a(v,w);var x=g[0],C=_[0];return x?C?o.caml_string_compare(x[0],C[0]):-1:C?1:0}for(var E=r,k=n,S=0,T=p;;){var O=S;if(O===T)return 0;var P=u(E[O],k[O]);if(0!==P)return P;S=O+1|0}}else if(p<m)for(var F=r,N=n,A=0,D=p;;){var R=A;if(R===D)return-1;var M=u(F[R],N[R]);if(0!==M)return M;A=R+1|0}else for(var I=r,U=n,j=0,B=m;;){var L=j;if(L===B)return 1;var z=u(I[L],U[L]);if(0!==z)return z;j=L+1|0}}else t=n[0];else e=r[0]}}function l(e,t){for(;;){var n=t,r=e;if(r===n)return!0;var o=typeof r;if("string"===o||"number"===o||"boolean"===o||"undefined"===o||null===r)return!1;var u=typeof n;if("function"===o||"function"===u)throw[i.invalid_argument,"equal: functional value"];if("number"===u||"undefined"===u||null===n)return!1;var c=0|r.tag,s=0|n.tag;if(250!==c)if(250!==s){if(248===c)return r[1]===n[1];if(251===c)throw[i.invalid_argument,"equal: abstract value"];if(c!==s)return!1;var f=0|r.length;if(f!==(0|n.length))return!1;if(!Array.isArray(r)){var d=r,p=n,m=[!0],h=function(e,t){return function(n){return e.hasOwnProperty(n)?0:(t[0]=!1,0)}}(p,m),v=function(e,t,n){return function(r){return e.hasOwnProperty(r)&&l(t[r],e[r])?0:(n[0]=!1,0)}}(d,p,m);return a(d,h),m[0]&&a(p,v),m[0]}for(var g=r,_=n,y=0,b=f;;){var w=y;if(w===b)return!0;if(!l(g[w],_[w]))return!1;y=w+1|0}}else t=n[0];else e=r[0]}}t.caml_obj_block=function(e,t){var n=new Array(t);return n.tag=e,n},t.caml_obj_dup=function(e){for(var t=0|e.length,n=new Array(t),r=0,o=t-1|0;r<=o;++r)n[r]=e[r];return n.tag=0|e.tag,n},t.caml_obj_truncate=function(e,t){var n=0|e.length;if(t<=0||t>n)throw[i.invalid_argument,"Obj.truncate"];if(n!==t){for(var r=t,o=n-1|0;r<=o;++r)e[r]=0;return e.length=t,0}return 0},t.caml_lazy_make_forward=function(e){return r.__(250,[e])},t.caml_update_dummy=function(e,t){for(var n=0,r=(0|t.length)-1|0;n<=r;++n)e[n]=t[n];var o=0|t.tag;return 0!==o?(e.tag=o,0):0},t.caml_compare=u,t.caml_equal=l,t.caml_equal_null=function(e,t){return null!==t?l(e,t):e===t},t.caml_equal_undefined=function(e,t){return void 0!==t?l(e,t):e===t},t.caml_equal_nullable=function(e,t){return null==t?e===t:l(e,t)},t.caml_notequal=function(e,t){return!l(e,t)},t.caml_greaterequal=function(e,t){return u(e,t)>=0},t.caml_greaterthan=function(e,t){return u(e,t)>0},t.caml_lessthan=function(e,t){return u(e,t)<0},t.caml_lessequal=function(e,t){return u(e,t)<=0},t.caml_min=function(e,t){return u(e,t)<=0?e:t},t.caml_max=function(e,t){return u(e,t)>=0?e:t}},function(e,t,n){"use strict";var r=n(0);t.caml_array_dup=function(e){return e.slice(0)},t.caml_array_sub=function(e,t,n){for(var r=new Array(n),o=0,i=t;o<n;)r[o]=e[i],o=o+1|0,i=i+1|0;return r},t.caml_array_concat=function(e){var t=function(e,t){for(;;){var n=t,r=e;if(!n)return r;t=n[1],e=n[0].length+r|0}}(0,e),n=new Array(t);return function(e,t,n){for(;;){var r=n,o=t;if(!r)return 0;for(var i=r[0],a=i.length,u=o,l=0;l<a;)e[u]=i[l],u=u+1|0,l=l+1|0;n=r[1],t=u}}(n,0,e),n},t.caml_make_vect=function(e,t){for(var n=new Array(e),r=0,o=e-1|0;r<=o;++r)n[r]=t;return n},t.caml_make_float_vect=function(e){for(var t=new Array(e),n=0,r=e-1|0;n<=r;++n)t[n]=0;return t},t.caml_array_blit=function(e,t,n,r,o){if(r<=t){for(var i=0,a=o-1|0;i<=a;++i)n[i+r|0]=e[i+t|0];return 0}for(var u=o-1|0;u>=0;--u)n[u+r|0]=e[u+t|0];return 0},t.caml_array_get=function(e,t){if(t<0||t>=e.length)throw[r.invalid_argument,"index out of bounds"];return e[t]},t.caml_array_set=function(e,t,n){if(t<0||t>=e.length)throw[r.invalid_argument,"index out of bounds"];return e[t]=n,0}},function(e,t,n){"use strict";var r=n(14),o=n(0);function i(e,t){return Object.assign(Object.assign({},e),t)}var a=[i,function(e,t,n){var r={};return r[t]=n,i(e,r)}];t.renderToElementWithClassName=function(e,t){var n=document.getElementsByClassName(t);if(0!==n.length)return r.render(e,n[0]),0;throw[o.invalid_argument,"ReactDOMRe.renderToElementWithClassName: no element of class "+t+" found in the HTML."]},t.renderToElementWithId=function(e,t){var n=document.getElementById(t);if(null==n)throw[o.invalid_argument,"ReactDOMRe.renderToElementWithId : no element of id "+t+" found in the HTML."];return r.render(e,n),0},t.hydrateToElementWithClassName=function(e,t){var n=document.getElementsByClassName(t);if(0!==n.length)return r.hydrate(e,n[0]),0;throw[o.invalid_argument,"ReactDOMRe.hydrateToElementWithClassName: no element of class "+t+" found in the HTML."]},t.hydrateToElementWithId=function(e,t){var n=document.getElementById(t);if(null==n)throw[o.invalid_argument,"ReactDOMRe.hydrateToElementWithId : no element of id "+t+" found in the HTML."];return r.hydrate(e,n),0},t.Style=a},function(e,t,n){"use strict";var r=n(23),o=r.init,i=r.make_matrix,a=r.create_matrix,u=r.append,l=r.concat,c=r.sub,s=r.copy,f=r.fill,d=r.blit,p=r.to_list,m=r.of_list,h=r.iter,v=r.map,g=r.iteri,_=r.mapi,y=r.fold_left,b=r.fold_right,w=r.sort,x=r.stable_sort,C=r.fast_sort;t.init=o,t.make_matrix=i,t.create_matrix=a,t.append=u,t.concat=l,t.sub=c,t.copy=s,t.fill=f,t.blit=d,t.to_list=p,t.of_list=m,t.iter=h,t.map=v,t.iteri=g,t.mapi=_,t.fold_left=y,t.fold_right=b,t.sort=w,t.stable_sort=x,t.fast_sort=C},function(e,t,n){"use strict";var r=n(9),o=n(2),i=n(16),a=n(1),u=n(33),l=n(3).statelessComponent("ToolBar"),c=r.style([r.display(r.flexBox),[r.flexDirection(r.column),0]]),s=r.style([r.display(r.flexBox),[r.flexDirection(r.row),[r.justifyContent(r.center),[r.backgroundColor(r.darkolivegreen),[r.minHeight(r.pt(50)),[r.margin(r.px(10)),0]]]]]]),f=r.style([r.display(-1010954439),[r.flexDirection(-963948842),[r.alignItems(98248149),[r.justifyContent(98248149),[r.flexGrow(1),[r.width(r.pct(100)),[r.minHeight(r.pt(50)),[r.backgroundColor(r.white),[r.textAlign(r.center),[r.alignItems(r.center),0]]]]]]]]]]),d=r.style([r.display(r.flexBox),0]),p=r.style([r.display(r.flexBox),[r.justifyContent(r.center),[r.fontSize(r.px(100)),0]]]),m=r.style([r.display(r.flexBox),[r.justifyContent(r.flexEnd),0]]);var h=[c,s,f,d,p,m,function(e){return r.style([r.background(e?r.darkgray:r.white),[r.color(r.black),[r.border(r.px(1),r.solid,r.black),[r.borderRadius(r.px(3)),0]]]])}];t.component=l,t.Styles=h,t.make=function(e,t,n){return[l[0],l[1],l[2],l[3],l[4],l[5],l[6],l[7],l[8],function(){return a.createElement("div",void 0,a.createElement("div",{className:s},a.createElement("div",{className:f},a.createElement("h3",void 0,i.gameStateToString(t[2])),a.createElement("h3",void 0,String(i.calculateHand(t[0][0])))),a.createElement("div",{className:f},a.createElement("button",{className:f,disabled:!i.canDeal(t),onClick:function(){return o._1(e,0)}},a.createElement("h3",void 0,"Deal Cards"))),a.createElement("div",{className:f},a.createElement("button",{className:f,disabled:!i.canHit(t),onClick:function(){return o._1(e,1)}},a.createElement("h3",void 0,"Hit Me"))),a.createElement("div",{className:f},a.createElement("button",{className:f,disabled:!i.canStand(t),onClick:function(){return o._1(e,2)}},a.createElement("h3",void 0,"Stand")))),a.createElement("div",{className:s},a.createElement("div",{className:f},a.createElement("h3",void 0,u.string_of_float(t[4]))),a.createElement("div",{className:f},a.createElement("h3",void 0,"Bet: "),a.createElement("input",{type:"text",value:u.string_of_float(t[3])}))))},l[10],l[11],l[12],l[13],l[14]]}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),u=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),l=null,c=0,s=[],f=n(39);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(_(r.parts[a],t))}else{var u=[];for(a=0;a<r.parts.length;a++)u.push(_(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:u}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function m(e,t){var n=u(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),s.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=u(e.insertAt.before,n);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=s.indexOf(e);t>=0&&s.splice(t,1)}function v(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return g(t,e.attrs),m(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function _(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=l||(l=v(t)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),m(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,n,t),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(u=i[a.id]).refs--,r.push(u)}e&&d(p(e,t),t);for(o=0;o<r.length;o++){var u;if(0===(u=r[o]).refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete i[u.id]}}}};var y,b=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=b(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r=n(10);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},i=n(40)(r,o);r.locals&&(e.exports=r.locals),e.hot.accept(10,function(t){!function(){var t=n(10);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(t)}()}),e.hot.dispose(function(){i()})},function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=o,t.mergeChildMappings=i,t.getInitialChildMapping=function(e,t){return o(e.children,function(n){return(0,r.cloneElement)(n,{onExited:t.bind(null,n),in:!0,appear:a(n,"appear",e),enter:a(n,"enter",e),exit:a(n,"exit",e)})})},t.getNextChildMapping=function(e,t,n){var u=o(e.children),l=i(t,u);return Object.keys(l).forEach(function(o){var i=l[o];if((0,r.isValidElement)(i)){var c=o in t,s=o in u,f=t[o],d=(0,r.isValidElement)(f)&&!f.props.in;!s||c&&!d?s||!c||d?s&&c&&(0,r.isValidElement)(f)&&(l[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:f.props.in,exit:a(i,"exit",e),enter:a(i,"enter",e)})):l[o]=(0,r.cloneElement)(i,{in:!1}):l[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:!0,exit:a(i,"exit",e),enter:a(i,"enter",e)})}}),l};var r=n(1);function o(e,t){var n=Object.create(null);return e&&r.Children.map(e,function(e){return e}).forEach(function(e){n[e.key]=function(e){return t&&(0,r.isValidElement)(e)?t(e):e}(e)}),n}function i(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r=Object.create(null),o=[];for(var i in e)i in t?o.length&&(r[i]=o,o=[]):o.push(i);var a=void 0,u={};for(var l in t){if(r[l])for(a=0;a<r[l].length;a++){var c=r[l][a];u[r[l][a]]=n(c)}u[l]=n(l)}for(a=0;a<o.length;a++)u[o[a]]=n(o[a]);return u}function a(e,t,n){return null!=n[t]?n[t]:e.props[t]}},function(e,t,n){"use strict";t.__esModule=!0;var r=u(n(4)),o=u(n(1)),i=n(14),a=u(n(19));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}r.default.bool.isRequired;var c=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=l(this,e.call.apply(e,[this].concat(i))),s.call(r),l(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.handleLifecycle=function(e,t,n){var r,a=this.props.children,u=o.default.Children.toArray(a)[t];u.props[e]&&(r=u.props)[e].apply(r,n),this.props[e]&&this.props[e]((0,i.findDOMNode)(this))},t.prototype.render=function(){var e=this.props,t=e.children,n=e.in,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["children","in"]),i=o.default.Children.toArray(t),u=i[0],l=i[1];return delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,o.default.createElement(a.default,r,n?o.default.cloneElement(u,{key:"first",onEnter:this.handleEnter,onEntering:this.handleEntering,onEntered:this.handleEntered}):o.default.cloneElement(l,{key:"second",onEnter:this.handleExit,onEntering:this.handleExiting,onEntered:this.handleExited}))},t}(o.default.Component),s=function(){var e=this;this.handleEnter=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEnter",0,n)},this.handleEntering=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEntering",0,n)},this.handleEntered=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEntered",0,n)},this.handleExit=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExit",1,n)},this.handleExiting=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExiting",1,n)},this.handleExited=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExited",1,n)}};c.propTypes={},t.default=c,e.exports=t.default},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(45);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(46);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(26),o=n(1),i=n(50),a=n(6),u=n(24),l=n(49),c=n(48),s=n(47),f=n(25);function d(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||d("227");var p={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,u,l){(function(e,t,n,r,o,i,a,u,l){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(p,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,u,l){if(p.invokeGuardedCallback.apply(this,arguments),p.hasCaughtError()){var c=p.clearCaughtError();p._hasRethrowError||(p._hasRethrowError=!0,p._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(p._hasRethrowError){var e=p._rethrowError;throw p._rethrowError=null,p._hasRethrowError=!1,e}}.apply(p,arguments)},hasCaughtError:function(){return p._hasCaughtError},clearCaughtError:function(){if(p._hasCaughtError){var e=p._caughtError;return p._caughtError=null,p._hasCaughtError=!1,e}d("198")}};var m=null,h={};function v(){if(m)for(var e in h){var t=h[e],n=m.indexOf(e);if(-1<n||d("96",e),!_[n])for(var r in t.extractEvents||d("97",e),_[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,u=r;y.hasOwnProperty(u)&&d("99",u),y[u]=i;var l=i.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&g(l[o],a,u);o=!0}else i.registrationName?(g(i.registrationName,a,u),o=!0):o=!1;o||d("98",r,e)}}}function g(e,t,n){b[e]&&d("100",e),b[e]=t,w[e]=t.eventTypes[n].dependencies}var _=[],y={},b={},w={};function x(e){m&&d("101"),m=Array.prototype.slice.call(e),v()}function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&d("102",t),h[t]=r,n=!0)}n&&v()}var E=Object.freeze({plugins:_,eventNameDispatchConfigs:y,registrationNameModules:b,registrationNameDependencies:w,possibleRegistrationNames:null,injectEventPluginOrder:x,injectEventPluginsByName:C}),k=null,S=null,T=null;function O(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=T(r),p.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function P(e,t){return null==t&&d("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function F(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var N=null;function A(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)O(e,t,n[o],r[o]);else n&&O(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function D(e){return A(e,!0)}function R(e){return A(e,!1)}var M={injectEventPluginOrder:x,injectEventPluginsByName:C};function I(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&d("231",t,typeof n),n)}function U(e,t){null!==e&&(N=P(N,e)),e=N,N=null,e&&(F(e,t?D:R),N&&d("95"),p.rethrowCaughtError())}function j(e,t,n,r){for(var o=null,i=0;i<_.length;i++){var a=_[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=P(o,a))}U(o,!1)}var B=Object.freeze({injection:M,getListener:I,runEventsInBatch:U,runExtractedEventsInBatch:j}),L=Math.random().toString(36).slice(2),z="__reactInternalInstance$"+L,W="__reactEventHandlers$"+L;function H(e){if(e[z])return e[z];for(;!e[z];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[z]).tag||6===e.tag?e:null}function V(e){if(5===e.tag||6===e.tag)return e.stateNode;d("33")}function q(e){return e[W]||null}var $=Object.freeze({precacheFiberNode:function(e,t){t[z]=e},getClosestInstanceFromNode:H,getInstanceFromNode:function(e){return!(e=e[z])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:V,getFiberCurrentPropsFromNode:q,updateFiberProps:function(e,t){e[W]=t}});function G(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function K(e,t,n){for(var r=[];e;)r.push(e),e=G(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Y(e,t,n){(t=I(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.phasedRegistrationNames&&K(e._targetInst,Y,e)}function X(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;K(t=t?G(t):null,Y,e)}}function J(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=I(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&J(e._targetInst,null,e)}function ee(e){F(e,Q)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,u=o;u;u=G(u))a++;u=0;for(var l=i;l;l=G(l))u++;for(;0<a-u;)o=G(o),a--;for(;0<u-a;)i=G(i),u--;for(;a--;){if(o===i||o===i.alternate)break e;o=G(o),i=G(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=G(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=G(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",e);for(e=n.length;0<e--;)J(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){F(e,X)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){F(e,Z)}}),re=null;function oe(){return!re&&i.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var ie={_root:null,_startText:null,_fallbackText:null};function ae(){if(ie._fallbackText)return ie._fallbackText;var e,t,n=ie._startText,r=n.length,o=ue(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ie._fallbackText=o.slice(e,1<t?1-t:void 0),ie._fallbackText}function ue(){return"value"in ie._root?ie._root.value:ie._root[oe()]}var le="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),ce={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function se(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function de(e){e instanceof this||d("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function pe(e){e.eventPool=[],e.getPooled=fe,e.release=de}a(se.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<le.length;t++)this[le[t]]=null}}),se.Interface=ce,se.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,pe(n),n},pe(se);var me=se.extend({data:null}),he=se.extend({data:null}),ve=[9,13,27,32],ge=i.canUseDOM&&"CompositionEvent"in window,_e=null;i.canUseDOM&&"documentMode"in document&&(_e=document.documentMode);var ye=i.canUseDOM&&"TextEvent"in window&&!_e,be=i.canUseDOM&&(!ge||_e&&8<_e&&11>=_e),we=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},Ce=!1;function Ee(e,t){switch(e){case"topKeyUp":return-1!==ve.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function ke(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var Te={eventTypes:xe,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ge)e:{switch(e){case"topCompositionStart":o=xe.compositionStart;break e;case"topCompositionEnd":o=xe.compositionEnd;break e;case"topCompositionUpdate":o=xe.compositionUpdate;break e}o=void 0}else Se?Ee(e,n)&&(o=xe.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=xe.compositionStart);return o?(be&&(Se||o!==xe.compositionStart?o===xe.compositionEnd&&Se&&(i=ae()):(ie._root=r,ie._startText=ue(),Se=!0)),o=me.getPooled(o,t,n,r),i?o.data=i:null!==(i=ke(n))&&(o.data=i),ee(o),i=o):i=null,(e=ye?function(e,t){switch(e){case"topCompositionEnd":return ke(t);case"topKeyPress":return 32!==t.which?null:(Ce=!0,we);case"topTextInput":return(e=t.data)===we&&Ce?null:e;default:return null}}(e,n):function(e,t){if(Se)return"topCompositionEnd"===e||!ge&&Ee(e,t)?(e=ae(),ie._root=null,ie._startText=null,ie._fallbackText=null,Se=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return be?null:t.data;default:return null}}(e,n))?((t=he.getPooled(xe.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Oe=null,Pe={injectFiberControlledHostComponent:function(e){Oe=e}},Fe=null,Ne=null;function Ae(e){if(e=S(e)){Oe&&"function"==typeof Oe.restoreControlledState||d("194");var t=k(e.stateNode);Oe.restoreControlledState(e.stateNode,e.type,t)}}function De(e){Fe?Ne?Ne.push(e):Ne=[e]:Fe=e}function Re(){return null!==Fe||null!==Ne}function Me(){if(Fe){var e=Fe,t=Ne;if(Ne=Fe=null,Ae(e),t)for(e=0;e<t.length;e++)Ae(t[e])}}var Ie=Object.freeze({injection:Pe,enqueueStateRestore:De,needsStateRestore:Re,restoreStateIfNeeded:Me});function Ue(e,t){return e(t)}function je(e,t,n){return e(t,n)}function Be(){}var Le=!1;function ze(e,t){if(Le)return e(t);Le=!0;try{return Ue(e,t)}finally{Le=!1,Re()&&(Be(),Me())}}var We={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function He(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!We[e.type]:"textarea"===t}function Ve(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function qe(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function $e(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ge(e){e._valueTracker||(e._valueTracker=function(e){var t=$e(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function Ke(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$e(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ye=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Qe="function"==typeof Symbol&&Symbol.for,Xe=Qe?Symbol.for("react.element"):60103,Je=Qe?Symbol.for("react.call"):60104,Ze=Qe?Symbol.for("react.return"):60105,et=Qe?Symbol.for("react.portal"):60106,tt=Qe?Symbol.for("react.fragment"):60107,nt=Qe?Symbol.for("react.strict_mode"):60108,rt=Qe?Symbol.for("react.provider"):60109,ot=Qe?Symbol.for("react.context"):60110,it=Qe?Symbol.for("react.async_mode"):60111,at=Qe?Symbol.for("react.forward_ref"):60112,ut="function"==typeof Symbol&&Symbol.iterator;function lt(e){return null===e||void 0===e?null:"function"==typeof(e=ut&&e[ut]||e["@@iterator"])?e:null}function ct(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Je:return"ReactCall";case Ze:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function st(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=ct(e),i=null;n&&(i=ct(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,dt={},pt={};function mt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new mt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new mt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new mt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){ht[e]=new mt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new mt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new mt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){ht[e]=new mt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new mt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){ht[e]=new mt(e,5,!1,e.toLowerCase(),null)});var vt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function _t(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!pt.hasOwnProperty(e)||!dt.hasOwnProperty(e)&&(ft.test(e)?pt[e]=!0:(dt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function yt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function bt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=kt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&_t(e,"checked",t,!1)}function xt(e,t){wt(e,t);var n=kt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?Et(e,t.type,n):t.hasOwnProperty("defaultValue")&&Et(e,t.type,kt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ct(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function Et(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function kt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(vt,gt);ht[t]=new mt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(vt,gt);ht[t]=new mt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(vt,gt);ht[t]=new mt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new mt("tabIndex",1,!1,"tabindex",null);var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Tt(e,t,n){return(e=se.getPooled(St.change,e,t,n)).type="change",De(n),ee(e),e}var Ot=null,Pt=null;function Ft(e){U(e,!1)}function Nt(e){if(Ke(V(e)))return e}function At(e,t){if("topChange"===e)return t}var Dt=!1;function Rt(){Ot&&(Ot.detachEvent("onpropertychange",Mt),Pt=Ot=null)}function Mt(e){"value"===e.propertyName&&Nt(Pt)&&ze(Ft,e=Tt(Pt,e,Ve(e)))}function It(e,t,n){"topFocus"===e?(Rt(),Pt=n,(Ot=t).attachEvent("onpropertychange",Mt)):"topBlur"===e&&Rt()}function Ut(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Nt(Pt)}function jt(e,t){if("topClick"===e)return Nt(t)}function Bt(e,t){if("topInput"===e||"topChange"===e)return Nt(t)}i.canUseDOM&&(Dt=qe("input")&&(!document.documentMode||9<document.documentMode));var Lt={eventTypes:St,_isInputEventSupported:Dt,extractEvents:function(e,t,n,r){var o=t?V(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=At:He(o)?Dt?i=Bt:(i=Ut,a=It):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=jt),i&&(i=i(e,t)))return Tt(i,n,r);a&&a(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&Et(o,"number",o.value)}},zt=se.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Vt(){return Ht}var qt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Vt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),$t={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Gt={eventTypes:$t,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?H(t):null):e=null,e===t)return null;var i=null==e?o:V(e);o=null==t?o:V(t);var a=qt.getPooled($t.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=qt.getPooled($t.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,te(a,n,e,t),[a,n]}};function Kt(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Yt(e){return!!(e=e._reactInternalFiber)&&2===Kt(e)}function Qt(e){2!==Kt(e)&&d("188")}function Xt(e){var t=e.alternate;if(!t)return 3===(t=Kt(e))&&d("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Qt(o),e;if(a===r)return Qt(o),t;a=a.sibling}d("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||d("189")}}n.alternate!==r&&d("190")}return 3!==n.tag&&d("188"),n.stateNode.current===n?e:t}function Jt(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Zt=se.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=se.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=zt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=zt.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Vt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),un=qt.extend({dataTransfer:null}),ln=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Vt}),cn=se.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),sn=qt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},dn={};function pn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},fn[e]=t,dn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){pn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){pn(e,!1)});var mn={eventTypes:fn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=dn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=dn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=qt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=un;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=ln;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Zt;break;case"topTransitionEnd":e=cn;break;case"topScroll":e=zt;break;case"topWheel":e=sn;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=se}return ee(t=e.getPooled(o,t,n,r)),t}},hn=mn.isInteractiveTopLevelEventType,vn=[];function gn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=H(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],j(e.topLevelType,t,e.nativeEvent,Ve(e.nativeEvent))}var _n=!0;function yn(e){_n=!!e}function bn(e,t,n){if(!n)return null;e=(hn(e)?xn:Cn).bind(null,e),n.addEventListener(t,e,!1)}function wn(e,t,n){if(!n)return null;e=(hn(e)?xn:Cn).bind(null,e),n.addEventListener(t,e,!0)}function xn(e,t){je(Cn,e,t)}function Cn(e,t){if(_n){var n=Ve(t);if(null!==(n=H(n))&&"number"==typeof n.tag&&2!==Kt(n)&&(n=null),vn.length){var r=vn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{ze(gn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>vn.length&&vn.push(e)}}}var En=Object.freeze({get _enabled(){return _n},setEnabled:yn,isEnabled:function(){return _n},trapBubbledEvent:bn,trapCapturedEvent:wn,dispatchEvent:Cn});function kn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var Sn={animationend:kn("Animation","AnimationEnd"),animationiteration:kn("Animation","AnimationIteration"),animationstart:kn("Animation","AnimationStart"),transitionend:kn("Transition","TransitionEnd")},Tn={},On={};function Pn(e){if(Tn[e])return Tn[e];if(!Sn[e])return e;var t,n=Sn[e];for(t in n)if(n.hasOwnProperty(t)&&t in On)return Tn[e]=n[t];return e}i.canUseDOM&&(On=document.createElement("div").style,"AnimationEvent"in window||(delete Sn.animationend.animation,delete Sn.animationiteration.animation,delete Sn.animationstart.animation),"TransitionEvent"in window||delete Sn.transitionend.transition);var Fn={topAnimationEnd:Pn("animationend"),topAnimationIteration:Pn("animationiteration"),topAnimationStart:Pn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:Pn("transitionend"),topWheel:"wheel"},Nn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},An={},Dn=0,Rn="_reactListenersID"+(""+Math.random()).slice(2);function Mn(e){return Object.prototype.hasOwnProperty.call(e,Rn)||(e[Rn]=Dn++,An[e[Rn]]={}),An[e[Rn]]}function In(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Un(e,t){var n,r=In(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=In(r)}}function jn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Bn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Ln={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},zn=null,Wn=null,Hn=null,Vn=!1;function qn(e,t){if(Vn||null==zn||zn!==l())return null;var n=zn;return"selectionStart"in n&&jn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Hn&&c(Hn,n)?null:(Hn=n,(e=se.getPooled(Ln.select,Wn,e,t)).type="select",e.target=zn,ee(e),e)}var $n={eventTypes:Ln,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Mn(i),o=w.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?V(t):window,e){case"topFocus":(He(i)||"true"===i.contentEditable)&&(zn=i,Wn=t,Hn=null);break;case"topBlur":Hn=Wn=zn=null;break;case"topMouseDown":Vn=!0;break;case"topContextMenu":case"topMouseUp":return Vn=!1,qn(n,r);case"topSelectionChange":if(Bn)break;case"topKeyDown":case"topKeyUp":return qn(n,r)}return null}};function Gn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Kn(e,t,n){var r=e.alternate;return null===r?((r=new Gn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Yn(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case tt:return Qn(e.children,t,n,o);case it:i=11,t|=3;break;case nt:i=11,t|=2;break;case Je:i=7;break;case Ze:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:i=13;break;case ot:i=12;break;case at:i=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;d("130",null==r?r:typeof r,"")}else d("130",null==r?r:typeof r,"")}return(t=new Gn(i,e,o,t)).type=r,t.expirationTime=n,t}function Qn(e,t,n,r){return(e=new Gn(10,e,r,t)).expirationTime=n,e}function Xn(e,t,n){return(e=new Gn(6,e,null,t)).expirationTime=n,e}function Jn(e,t,n){return(t=new Gn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}M.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=$.getFiberCurrentPropsFromNode,S=$.getInstanceFromNode,T=$.getNodeFromInstance,M.injectEventPluginsByName({SimpleEventPlugin:mn,EnterLeaveEventPlugin:Gt,ChangeEventPlugin:Lt,SelectEventPlugin:$n,BeforeInputEventPlugin:Te});var Zn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Zn&&Zn(e)}function rr(e){"function"==typeof er&&er(e)}function or(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ir(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ar=void 0,ur=void 0;function lr(e){ar=ur=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=or(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=or(null)):e=null,ar=n,ur=e!==n?e:null}function cr(e,t){lr(e),e=ar;var n=ur;null===n?ir(e,t):null===e.last||null===n.last?(ir(e,t),ir(n,t)):(ir(e,t),n.last=t)}function sr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function fr(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var u=!0,l=n.first,c=!1;null!==l;){var s=l.expirationTime;if(s>i){var f=n.expirationTime;(0===f||f>s)&&(n.expirationTime=s),c||(c=!0,n.baseState=e)}else c||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(e=sr(l,r,e,o),u=!0):(s=sr(l,r,e,o))&&(e=u?a({},e,s):a(e,s),u=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(null===(s=n.callbackList)&&(s=n.callbackList=[]),s.push(l)),null!==l.capturedValue&&(null===(s=n.capturedValues)?n.capturedValues=[l.capturedValue]:s.push(l.capturedValue));l=l.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),c||(n.baseState=e),e}function dr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&d("191",o),o.call(t)}}var pr=Array.isArray;function mr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&d("110"),r=n.stateNode),r||d("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&d("148"),n._owner||d("254",e)}return e}function hr(e,t){"textarea"!==e.type&&d("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function vr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Kn(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Xn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=mr(e,t,n),r.return=e,r):((r=Yn(n,e.mode,r)).ref=mr(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function s(e,t,n,r,i){return null===t||10!==t.tag?((t=Qn(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Xe:return(n=Yn(t,e.mode,n)).ref=mr(e,null,t),n.return=e,n;case et:return(t=Jn(t,e.mode,n)).return=e,t}if(pr(t)||lt(t))return(t=Qn(t,e.mode,n,null)).return=e,t;hr(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Xe:return n.key===o?n.type===tt?s(e,t,n.props.children,r,o):l(e,t,n,r):null;case et:return n.key===o?c(e,t,n,r):null}if(pr(n)||lt(n))return null!==o?null:s(e,t,n,r,null);hr(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Xe:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?s(t,e,r.props.children,o,r.key):l(t,e,r,o);case et:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(pr(r)||lt(r))return s(t,e=e.get(n)||null,r,o,null);hr(t,r)}return null}function h(o,a,u,l){for(var c=null,s=null,d=a,h=a=0,v=null;null!==d&&h<u.length;h++){d.index>h?(v=d,d=null):v=d.sibling;var g=p(o,d,u[h],l);if(null===g){null===d&&(d=v);break}e&&d&&null===g.alternate&&t(o,d),a=i(g,a,h),null===s?c=g:s.sibling=g,s=g,d=v}if(h===u.length)return n(o,d),c;if(null===d){for(;h<u.length;h++)(d=f(o,u[h],l))&&(a=i(d,a,h),null===s?c=d:s.sibling=d,s=d);return c}for(d=r(o,d);h<u.length;h++)(v=m(d,o,h,u[h],l))&&(e&&null!==v.alternate&&d.delete(null===v.key?h:v.key),a=i(v,a,h),null===s?c=v:s.sibling=v,s=v);return e&&d.forEach(function(e){return t(o,e)}),c}function v(o,a,u,l){var c=lt(u);"function"!=typeof c&&d("150"),null==(u=c.call(u))&&d("151");for(var s=c=null,h=a,v=a=0,g=null,_=u.next();null!==h&&!_.done;v++,_=u.next()){h.index>v?(g=h,h=null):g=h.sibling;var y=p(o,h,_.value,l);if(null===y){h||(h=g);break}e&&h&&null===y.alternate&&t(o,h),a=i(y,a,v),null===s?c=y:s.sibling=y,s=y,h=g}if(_.done)return n(o,h),c;if(null===h){for(;!_.done;v++,_=u.next())null!==(_=f(o,_.value,l))&&(a=i(_,a,v),null===s?c=_:s.sibling=_,s=_);return c}for(h=r(o,h);!_.done;v++,_=u.next())null!==(_=m(h,o,v,_.value,l))&&(e&&null!==_.alternate&&h.delete(null===_.key?v:_.key),a=i(_,a,v),null===s?c=_:s.sibling=_,s=_);return e&&h.forEach(function(e){return t(o,e)}),c}return function(e,r,i,u){"object"==typeof i&&null!==i&&i.type===tt&&null===i.key&&(i=i.props.children);var l="object"==typeof i&&null!==i;if(l)switch(i.$$typeof){case Xe:e:{var c=i.key;for(l=r;null!==l;){if(l.key===c){if(10===l.tag?i.type===tt:l.type===i.type){n(e,l.sibling),(r=o(l,i.type===tt?i.props.children:i.props,u)).ref=mr(e,l,i),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===tt?((r=Qn(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Yn(i,e.mode,u)).ref=mr(e,r,i),u.return=e,e=u)}return a(e);case et:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jn(i,e.mode,u)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,u)).return=e,e=r):(n(e,r),(r=Xn(i,e.mode,u)).return=e,e=r),a(e);if(pr(i))return h(e,r,i,u);if(lt(i))return v(e,r,i,u);if(l&&hr(e,i),void 0===i)switch(e.tag){case 2:case 1:d("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var gr=vr(!0),_r=vr(!1);function yr(e,t,n,r,o,i,u){function l(e,t,n){s(e,t,n,t.expirationTime)}function s(e,t,n,r){t.child=null===e?_r(t,null,n,r):gr(t,e.child,n,r)}function p(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function m(e,t,n,r,o,i){if(p(e,t),!n&&!o)return r&&O(t,!1),g(e,t);n=t.stateNode,Ye.current=t;var a=o?null:n.render();return t.effectTag|=1,o&&(s(e,t,null,i),t.child=null),s(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,r&&O(t,!0),t.child}function h(e){var t=e.stateNode;t.pendingContext?T(e,t.pendingContext,t.pendingContext!==t.context):t.context&&T(e,t.context,!1),w(e,t.containerInfo)}function v(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function g(e,t){if(null!==e&&t.child!==e.child&&d("153"),null!==t.child){var n=Kn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Kn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var _=e.shouldSetTextContent,y=e.shouldDeprioritizeSubtree,b=t.pushHostContext,w=t.pushHostContainer,x=r.pushProvider,C=n.getMaskedContext,E=n.getUnmaskedContext,k=n.hasContextChanged,S=n.pushContextProvider,T=n.pushTopLevelContextObject,O=n.invalidateContextProvider,P=o.enterHydrationState,F=o.resetHydrationState,N=o.tryToClaimNextHydratableInstance,A=(e=function(e,t,n,r,o){function i(e,t,n,r,o,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(e.prototype&&e.prototype.isPureReactComponent&&c(t,n)&&c(r,o))}function u(e,t){t.updater=g,e.stateNode=t,t._reactInternalFiber=e}function l(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&g.enqueueReplaceState(t,t.state,null)}function s(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var d=e.cacheContext,p=e.getMaskedContext,m=e.getUnmaskedContext,h=e.isContextConsumer,v=e.hasContextChanged,g={isMounted:Yt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);cr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);cr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);cr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:u,callGetDerivedStateFromProps:s,constructClassInstance:function(e,t){var n=e.type,r=m(e),o=h(e),i=o?p(e,r):f,l=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return u(e,n),e.memoizedState=l,null!==(t=s(e,0,t,l))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&d(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,i=e.pendingProps,a=m(e);o.props=i,o.state=e.memoizedState,o.refs=f,o.context=p(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&g.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=fr(r,e,n,o,i,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,u=e.stateNode;u.props=e.memoizedProps,u.state=e.memoizedState;var c=e.memoizedProps,f=e.pendingProps,d=u.context,h=m(e);h=p(e,h),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(c!==f||d!==h)&&l(e,u,f,h),d=e.memoizedState,t=null!==e.updateQueue?fr(null,e,e.updateQueue,u,f,t):d;var g=void 0;if(c!==f&&(g=s(e,0,f,t)),null!==g&&void 0!==g){t=null===t||void 0===t?g:a({},t,g);var _=e.updateQueue;null!==_&&(_.baseState=a({},_.baseState,g))}return c!==f||d!==t||v()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((c=i(e,c,f,d,t,h))?(n||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(e.effectTag|=4)):("function"==typeof u.componentDidMount&&(e.effectTag|=4),r(e,f),o(e,t)),u.props=f,u.state=t,u.context=h,c):("function"==typeof u.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var u=t.type,c=t.stateNode;c.props=t.memoizedProps,c.state=t.memoizedState;var f=t.memoizedProps,d=t.pendingProps,h=c.context,g=m(t);g=p(t,g),(u="function"==typeof u.getDerivedStateFromProps||"function"==typeof c.getSnapshotBeforeUpdate)||"function"!=typeof c.UNSAFE_componentWillReceiveProps&&"function"!=typeof c.componentWillReceiveProps||(f!==d||h!==g)&&l(t,c,d,g),h=t.memoizedState,n=null!==t.updateQueue?fr(e,t,t.updateQueue,c,d,n):h;var _=void 0;if(f!==d&&(_=s(t,0,d,n)),null!==_&&void 0!==_){n=null===n||void 0===n?_:a({},n,_);var y=t.updateQueue;null!==y&&(y.baseState=a({},y.baseState,_))}return f!==d||h!==n||v()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((_=i(t,f,d,h,n,g))?(u||"function"!=typeof c.UNSAFE_componentWillUpdate&&"function"!=typeof c.componentWillUpdate||("function"==typeof c.componentWillUpdate&&c.componentWillUpdate(d,n,g),"function"==typeof c.UNSAFE_componentWillUpdate&&c.UNSAFE_componentWillUpdate(d,n,g)),"function"==typeof c.componentDidUpdate&&(t.effectTag|=4),"function"==typeof c.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof c.componentDidUpdate||f===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=2048),r(t,d),o(t,n)),c.props=d,c.state=n,c.context=g,_):("function"!=typeof c.componentDidUpdate||f===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,u,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,D=e.callGetDerivedStateFromProps,R=e.constructClassInstance,M=e.mountClassInstance,I=e.resumeMountClassInstance,U=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:h(t);break;case 2:S(t);break;case 4:w(t,t.stateNode.containerInfo);break;case 13:x(t)}return null}switch(t.tag){case 0:null!==e&&d("155");var r=t.type,o=t.pendingProps,i=E(t);return r=r(o,i=C(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=D(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=S(t),A(t,r),M(t,n),e=m(e,t,!0,o,!1,n)):(t.tag=1,l(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,k()||t.memoizedProps!==n?(r=E(t),o=o(n,r=C(t,r)),t.effectTag|=1,l(e,t,o),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 2:o=S(t),null===e?null===t.stateNode?(R(t,t.pendingProps),M(t,n),r=!0):r=I(t,n):r=U(e,t,n),i=!1;var u=t.updateQueue;return null!==u&&null!==u.capturedValues&&(i=r=!0),m(e,t,r,o,i,n);case 3:e:if(h(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=fr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){F(),e=g(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&P(t)?(t.effectTag|=2,t.child=_r(t,null,r,n)):(F(),l(e,t,r)),t.memoizedState=o,e=t.child}else F(),e=g(e,t);return e;case 5:return b(t),null===e&&N(t),o=t.type,u=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,k()||u!==r||((u=1&t.mode&&y(o,r))&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,_(o,r)?u=null:i&&_(o,i)&&(t.effectTag|=16),p(e,t),1073741823!==n&&1&t.mode&&y(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(l(e,t,u),t.memoizedProps=r,e=t.child)):e=g(e,t),e;case 6:return null===e&&N(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,k()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?_r(t,t.stateNode,r,n):gr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return w(t,t.stateNode.containerInfo),o=t.pendingProps,k()||t.memoizedProps!==o?(null===e?t.child=gr(t,null,o,n):l(e,t,o),t.memoizedProps=o,e=t.child):e=g(e,t),e;case 14:return l(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,k()||t.memoizedProps!==n?(l(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 11:return n=t.pendingProps.children,k()||null!==n&&t.memoizedProps!==n?(l(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps;if(!k()&&i===o)return t.stateNode=0,x(t),g(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return t.stateNode=0,x(t),g(e,t);a=0}else{var u=i.value;if(u===a&&(0!==u||1/u==1/a)||u!=u&&a!=a){if(i.children===o.children)return t.stateNode=0,x(t),g(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823,0==(a|=0)){if(i.children===o.children)return t.stateNode=0,x(t),g(e,t)}else v(t,r,a,n)}return t.stateNode=a,x(t),l(e,t,o.children),t.child}(e,t,n);case 12:e:{r=t.type,i=t.pendingProps,u=t.memoizedProps,o=r._currentValue;var c=r._changedBits;if(k()||0!==c||u!==i){t.memoizedProps=i;var s=i.unstable_observedBits;if(void 0!==s&&null!==s||(s=1073741823),t.stateNode=s,0!=(c&s))v(t,r,c,n);else if(u===i){e=g(e,t);break e}l(e,t,n=(n=i.children)(o)),e=t.child}else e=g(e,t)}return e;default:d("156")}}}}function br(e,t){var n=t.source;null===t.stack&&st(n),null!==n&&ct(n),t=t.value,null!==e&&2===e.tag&&ct(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var wr={};function xr(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)R(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=N(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ie=!0;break}e=n}else{if(null!==(e=D(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=F(e.alternate,e,ne);return null===t&&(t=r(e)),Ye.current=null,t}function i(e,n,i){Z&&d("243"),Z=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=Kn((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!E();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){a=!0,k(e);break}var u=(i=ee).return;if(null===u){a=!0,k(e);break}A(u,i,e),ee=r(i)}break}return Z=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void d("262")}function u(e,t,n,r){cr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:st(e)},next:null}),s(t,r)}function l(e,t){e:{Z&&!oe&&d("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){u(e,r,t,1),e=void 0;break e}break;case 3:u(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&u(e,e,t,1),e=void 0}return e}function c(e){return e=0!==J?J:Z?oe?1:ne:1&e.mode?we?10*(1+((p()+15)/10|0)):25*(1+((p()+500)/25|0)):1,we&&(0===me||e>me)&&(me=e),e}function s(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!Z&&0!==ne&&n<ne&&t(),Z&&!oe&&te===r||v(r,n),Ee>Ce&&d("185")}e=e.return}n=void 0}return n}function p(){return Q=V()-Y,2+(Q/10|0)}function m(e,t,n,r,o){var i=J;J=1;try{return e(t,n,r,o)}finally{J=i}}function h(e){if(0!==ce){if(e>ce)return;$(se)}var t=V()-Y;ce=e,se=q(_,{timeout:10*(e-2)-t})}function v(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===le?(ue=le=e,e.nextScheduledRoot=e):(le=le.nextScheduledRoot=e).nextScheduledRoot=ue;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(ye?be&&(de=e,pe=1,x(e,1,!1)):1===t?y():h(t))}function g(){var e=0,t=null;if(null!==le)for(var n=le,r=ue;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===le)&&d("244"),r===r.nextScheduledRoot){ue=le=r.nextScheduledRoot=null;break}if(r===ue)ue=o=r.nextScheduledRoot,le.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===le){(le=n).nextScheduledRoot=ue,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===le)break;n=r,r=r.nextScheduledRoot}}null!==(n=de)&&n===t&&1===e?Ee++:Ee=0,de=t,pe=e}function _(e){b(0,!0,e)}function y(){b(1,!1,null)}function b(e,t,n){if(_e=n,g(),t)for(;null!==de&&0!==pe&&(0===e||e>=pe)&&(!he||p()>=pe);)x(de,pe,!he),g();else for(;null!==de&&0!==pe&&(0===e||e>=pe);)x(de,pe,!1),g();null!==_e&&(ce=0,se=-1),0!==pe&&h(pe),_e=null,he=!1,w()}function w(){if(Ee=0,null!==xe){var e=xe;xe=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ve||(ve=!0,ge=e)}}}if(ve)throw e=ge,ge=null,ve=!1,e}function x(e,t,n){fe&&d("245"),fe=!0,n?null!==(n=e.finishedWork)?C(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(E()?e.finishedWork=n:C(e,n,t))):null!==(n=e.finishedWork)?C(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&C(e,n,t)),fe=!1}function C(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===xe?xe=[r]:xe.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=Z=!0,(n=t.stateNode).current===t&&d("177"),0===(r=n.pendingCommitExpirationTime)&&d("261"),n.pendingCommitExpirationTime=0;var o=p();if(Ye.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(G(n.containerInfo),re=i;null!==re;){var a=!1,u=void 0;try{for(;null!==re;)2048&re.effectTag&&M(re.alternate,re),re=re.nextEffect}catch(e){a=!0,u=e}a&&(null===re&&d("178"),l(re,u),null!==re&&(re=re.nextEffect))}for(re=i;null!==re;){a=!1,u=void 0;try{for(;null!==re;){var c=re.effectTag;if(16&c&&I(re),128&c){var s=re.alternate;null!==s&&H(s)}switch(14&c){case 2:U(re),re.effectTag&=-3;break;case 6:U(re),re.effectTag&=-3,B(re.alternate,re);break;case 4:B(re.alternate,re);break;case 8:j(re)}re=re.nextEffect}}catch(e){a=!0,u=e}a&&(null===re&&d("178"),l(re,u),null!==re&&(re=re.nextEffect))}for(K(n.containerInfo),n.current=t,re=i;null!==re;){c=!1,s=void 0;try{for(i=n,a=o,u=r;null!==re;){var f=re.effectTag;36&f&&L(i,re.alternate,re,a,u),256&f&&z(re,k),128&f&&W(re);var m=re.nextEffect;re.nextEffect=null,re=m}}catch(e){c=!0,s=e}c&&(null===re&&d("178"),l(re,s),null!==re&&(re=re.nextEffect))}Z=oe=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function E(){return!(null===_e||_e.timeRemaining()>ke)&&(he=!0)}function k(e){null===de&&d("246"),de.remainingExpirationTime=0,ve||(ve=!0,ge=e)}var S=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),T=function(e,t){function n(e){return e===wr&&d("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,u=e(wr),l=e(wr),c=e(wr);return{getHostContext:function(){return n(u.current)},getRootHostContainer:function(){return n(c.current)},popHostContainer:function(e){a(u,e),a(l,e),a(c,e)},popHostContext:function(e){l.current===e&&(a(u,e),a(l,e))},pushHostContainer:function(e,t){i(c,t,e),i(l,e,e),i(u,wr,e),t=o(t),a(u,e),i(u,t,e)},pushHostContext:function(e){var t=n(c.current),o=n(u.current);o!==(t=r(o,e.type,t))&&(i(l,e,e),i(u,t,e))}}}(e,S),O=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||d("108",ct(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,u=e.pop,l=o(f),c=o(!1),s=f;return{getUnmaskedContext:function(e){return n(e)?s:l.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return f;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&t(e,n,a),a},hasContextChanged:function(){return c.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(u(c,e),u(l,e))},popTopLevelContextObject:function(e){u(c,e),u(l,e)},pushTopLevelContextObject:function(e,t,n){null!=l.cursor&&d("168"),i(l,t,e),i(c,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,s=l.current,i(l,t,e),i(c,c.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||d("169"),t){var o=r(e,s);n.__reactInternalMemoizedMergedChildContext=o,u(c,e),u(l,e),i(l,o,e)}else u(c,e);i(c,t,e)},findCurrentUnmaskedContext:function(e){for((2!==Kt(e)||2!==e.tag)&&d("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||d("171")}return e.stateNode.context}}}(S);S=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;r(o,e),r(i,e),r(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(S);var P=function(e){function t(e,t){var n=new Gn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){d("175")},prepareToHydrateHostTextInstance:function(){d("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,u=e.getNextHydratableSibling,l=e.getFirstHydratableChild,c=e.hydrateInstance,s=e.hydrateTextInstance,f=null,p=null,m=!1;return{enterHydrationState:function(e){return p=l(e.stateNode.containerInfo),f=e,m=!0},resetHydrationState:function(){p=f=null,m=!1},tryToClaimNextHydratableInstance:function(e){if(m){var r=p;if(r){if(!n(e,r)){if(!(r=u(r))||!n(e,r))return e.effectTag|=2,m=!1,void(f=e);t(f,p)}f=e,p=l(r)}else e.effectTag|=2,m=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=c(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return s(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!m)return r(e),m=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=p;n;)t(e,n),n=u(n);return r(e),p=f?u(e.stateNode):null,!0}}}(e),F=yr(e,T,O,S,P,s,c).beginWork,N=function(e,t,n,r,o){function i(e){e.effectTag|=4}var a=e.createInstance,u=e.createTextInstance,l=e.appendInitialChild,c=e.finalizeInitialChildren,s=e.prepareUpdate,f=e.persistence,p=t.getRootHostContainer,m=t.popHostContext,h=t.getHostContext,v=t.popHostContainer,g=n.popContextProvider,_=n.popTopLevelContextObject,y=r.popProvider,b=o.prepareToHydrateHostInstance,w=o.prepareToHydrateHostTextInstance,x=o.popHydrationState,C=void 0,E=void 0,k=void 0;return e.mutation?(C=function(){},E=function(e,t,n){(t.updateQueue=n)&&i(t)},k=function(e,t,n,r){n!==r&&i(t)}):d(f?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return g(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return v(t),_(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(x(t),t.effectTag&=-3),C(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:m(t),n=p();var o=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,S=t.stateNode,T=h();S=s(S,o,f,r,n,T),E(e,t,S,o,f,r,n,T),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&d("166"),null;if(e=h(),x(t))b(t,n,e)&&i(t);else{f=a(o,r,n,e,t);e:for(T=t.child;null!==T;){if(5===T.tag||6===T.tag)l(f,T.stateNode);else if(4!==T.tag&&null!==T.child){T.child.return=T,T=T.child;continue}if(T===t)break;for(;null===T.sibling;){if(null===T.return||T.return===t)break e;T=T.return}T.sibling.return=T.return,T=T.sibling}c(f,o,r,n,e)&&i(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)k(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&d("166"),null;e=p(),n=h(),x(t)?w(t)&&i(t):t.stateNode=u(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||d("165"),t.tag=8,o=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)d("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),t.child=gr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return v(t),C(t),null;case 13:return y(t),null;case 12:return null;case 0:d("167");default:d("156")}}}}(e,T,O,S,P).completeWork,A=(T=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,u=t.popContextProvider,l=t.popTopLevelContextObject,c=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:st(t)};do{switch(e.tag){case 3:return lr(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){lr(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:u(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),l(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return c(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:u(e);break;case 3:i(e),l(e);break;case 5:a(e);break;case 4:i(e);break;case 13:c(e)}}}}(T,O,S,0,n)).throwException,D=T.unwindWork,R=T.unwindInterruptedWork,M=(T=function(e,t,n,r,o){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(rr(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:u(e.stateNode);break;case 4:f&&c(e)}}function u(e){for(var t=e;;)if(a(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function l(e){return 5===e.tag||3===e.tag||4===e.tag}function c(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&d("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)u(t),o?x(r,t.stateNode):w(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var s=e.getPublicInstance,f=e.mutation;e=e.persistence,f||d(e?"235":"236");var p=f.commitMount,m=f.commitUpdate,h=f.resetTextContent,v=f.commitTextUpdate,g=f.appendChild,_=f.appendChildToContainer,y=f.insertBefore,b=f.insertInContainerBefore,w=f.removeChild,x=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:d("163")}},commitResetTextContent:function(e){h(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(l(t)){var n=t;break e}t=t.return}d("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:d("161")}16&n.effectTag&&(h(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||l(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?b(t,o.stateNode,n):y(t,o.stateNode,n):r?_(t,o.stateNode):g(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){c(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&m(n,i,o,e,r,t)}break;case 6:null===t.stateNode&&d("162"),n=t.memoizedProps,v(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:d("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&dr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=s(n.child.stateNode);break;case 2:e=n.child.stateNode}dr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&p(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:d("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&d("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,u=r.stack;br(e,r),t.componentDidCatch(a,{componentStack:null!==u?u:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&d("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)br(e,r=i[n]),t(r.value);break;default:d("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=s(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,l,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,I=T.commitResetTextContent,U=T.commitPlacement,j=T.commitDeletion,B=T.commitWork,L=T.commitLifeCycles,z=T.commitErrorLogging,W=T.commitAttachRef,H=T.commitDetachRef,V=e.now,q=e.scheduleDeferredCallback,$=e.cancelDeferredCallback,G=e.prepareForCommit,K=e.resetAfterCommit,Y=V(),Q=Y,X=0,J=0,Z=!1,ee=null,te=null,ne=0,re=null,oe=!1,ie=!1,ae=null,ue=null,le=null,ce=0,se=-1,fe=!1,de=null,pe=0,me=0,he=!1,ve=!1,ge=null,_e=null,ye=!1,be=!1,we=!1,xe=null,Ce=1e3,Ee=0,ke=1;return{recalculateCurrentTime:p,computeExpirationForFiber:c,scheduleWork:s,requestWork:v,flushRoot:function(e,t){fe&&d("253"),de=e,pe=t,x(e,t,!1),y(),w()},batchedUpdates:function(e,t){var n=ye;ye=!0;try{return e(t)}finally{(ye=n)||fe||y()}},unbatchedUpdates:function(e,t){if(ye&&!be){be=!0;try{return e(t)}finally{be=!1}}return e(t)},flushSync:function(e,t){fe&&d("187");var n=ye;ye=!0;try{return m(e,t)}finally{ye=n,y()}},flushControlled:function(e){var t=ye;ye=!0;try{m(e)}finally{(ye=t)||fe||b(1,!1,null)}},deferredUpdates:function(e){var t=J;J=25*(1+((p()+500)/25|0));try{return e()}finally{J=t}},syncUpdates:m,interactiveUpdates:function(e,t,n){if(we)return e(t,n);ye||fe||0===me||(b(me,!1,null),me=0);var r=we,o=ye;ye=we=!0;try{return e(t,n)}finally{we=r,(ye=o)||fe||y()}},flushInteractiveUpdates:function(){fe||0===me||(b(me,!1,null),me=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((p()+500)/25|0));return e<=X&&(e=X+1),X=e},legacyContext:O}}function Cr(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var u=l(n);n=c(n)?s(n,u):u}else n=f;return null===t.context?t.context=n:t.pendingContext=n,cr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(r,o),o}var n=e.getPublicInstance,r=(e=xr(e)).recalculateCurrentTime,o=e.computeExpirationForFiber,i=e.scheduleWork,u=e.legacyContext,l=u.findCurrentUnmaskedContext,c=u.isContextProvider,s=u.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Gn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,i,a){var u=n.current;return t(e,n,i,r(),u=o(u),a)},updateContainerAtExpirationTime:function(e,n,o,i,a){return t(e,n,o,r(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?d("188"):d("268",Object.keys(e))),null===(e=Jt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Zn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=Jt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var Er=Object.freeze({default:Cr}),kr=Er&&Cr||Er,Sr=kr.default?kr.default:kr;var Tr="object"==typeof performance&&"function"==typeof performance.now,Or=void 0;Or=Tr?function(){return performance.now()}:function(){return Date.now()};var Pr=void 0,Fr=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Nr=null,Ar=!1,Dr=-1,Rr=!1,Mr=0,Ir=33,Ur=33,jr=void 0;jr=Tr?{didTimeout:!1,timeRemaining:function(){var e=Mr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Mr-Date.now();return 0<e?e:0}};var Br="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Br){if(Ar=!1,e=Or(),0>=Mr-e){if(!(-1!==Dr&&Dr<=e))return void(Rr||(Rr=!0,requestAnimationFrame(Lr)));jr.didTimeout=!0}else jr.didTimeout=!1;Dr=-1,e=Nr,Nr=null,null!==e&&e(jr)}},!1);var Lr=function(e){Rr=!1;var t=e-Mr+Ur;t<Ur&&Ir<Ur?(8>t&&(t=8),Ur=t<Ir?Ir:t):Ir=t,Mr=e+Ur,Ar||(Ar=!0,window.postMessage(Br,"*"))};Pr=function(e,t){return Nr=e,null!=t&&"number"==typeof t.timeout&&(Dr=Or()+t.timeout),Rr||(Rr=!0,requestAnimationFrame(Lr)),0},Fr=function(){Nr=null,Ar=!1,Dr=-1}}else Pr=window.requestIdleCallback,Fr=window.cancelIdleCallback;else Pr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Fr=function(e){clearTimeout(e)};function zr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Wr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Hr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Vr(e,t){return null!=t.dangerouslySetInnerHTML&&d("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function qr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&d("92"),Array.isArray(t)&&(1>=t.length||d("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function $r(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Gr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Kr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Yr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Qr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Yr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Xr,Jr=void 0,Zr=(Xr=function(e,t){if(e.namespaceURI!==Kr.svg||"innerHTML"in e)e.innerHTML=t;else{for((Jr=Jr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Jr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Xr(e,t)})}:Xr);function eo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var to={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||to.hasOwnProperty(o)&&to[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(to).forEach(function(e){no.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),to[t]=to[e]})});var oo=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(e,t,n){t&&(oo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&d("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&d("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||d("61")),null!=t.style&&"object"!=typeof t.style&&d("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var uo=u.thatReturns("");function lo(e,t){var n=Mn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?wn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(wn("topFocus","focus",e),wn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(qe("cancel",!0)&&wn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(qe("close",!0)&&wn("topClose","close",e),n.topClose=!0):Fn.hasOwnProperty(o)&&bn(o,Fn[o],e),n[o]=!0)}}function co(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Kr.html&&(r=Yr(e)),r===Kr.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function so(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":bn("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in Nn)Nn.hasOwnProperty(i)&&bn(i,Nn[i],e);i=n;break;case"source":bn("topError","error",e),i=n;break;case"img":case"image":case"link":bn("topError","error",e),bn("topLoad","load",e),i=n;break;case"form":bn("topReset","reset",e),bn("topSubmit","submit",e),i=n;break;case"details":bn("topToggle","toggle",e),i=n;break;case"input":bt(e,n),i=yt(e,n),bn("topInvalid","invalid",e),lo(r,"onChange");break;case"option":i=zr(e,n);break;case"select":Hr(e,n),i=a({},n,{value:void 0}),bn("topInvalid","invalid",e),lo(r,"onChange");break;case"textarea":qr(e,n),i=Vr(e,n),bn("topInvalid","invalid",e),lo(r,"onChange");break;default:i=n}io(t,i,uo);var l,c=i;for(l in c)if(c.hasOwnProperty(l)){var s=c[l];"style"===l?ro(e,s):"dangerouslySetInnerHTML"===l?null!=(s=s?s.__html:void 0)&&Zr(e,s):"children"===l?"string"==typeof s?("textarea"!==t||""!==s)&&eo(e,s):"number"==typeof s&&eo(e,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(b.hasOwnProperty(l)?null!=s&&lo(r,l):null!=s&&_t(e,l,s,o))}switch(t){case"input":Ge(e),Ct(e,n);break;case"textarea":Ge(e),Gr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Wr(e,!!n.multiple,t,!1):null!=n.defaultValue&&Wr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=u)}}function po(e,t,n,r,o){var i=null;switch(t){case"input":n=yt(e,n),r=yt(e,r),i=[];break;case"option":n=zr(e,n),r=zr(e,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=Vr(e,n),r=Vr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=u)}io(t,r,uo),t=e=void 0;var l=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var c=n[e];for(t in c)c.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(b.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var s=r[e];if(c=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&s!==c&&(null!=s||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||s&&s.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in s)s.hasOwnProperty(t)&&c[t]!==s[t]&&(l||(l={}),l[t]=s[t])}else l||(i||(i=[]),i.push(e,l)),l=s;else"dangerouslySetInnerHTML"===e?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(i=i||[]).push(e,""+s)):"children"===e?c===s||"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(e,""+s):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(b.hasOwnProperty(e)?(null!=s&&lo(o,e),i||c===s||(i=[])):(i=i||[]).push(e,s))}return l&&(i=i||[]).push("style",l),i}function mo(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&wt(e,o),ao(n,r),r=ao(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?ro(e,u):"dangerouslySetInnerHTML"===a?Zr(e,u):"children"===a?eo(e,u):_t(e,a,u,r)}switch(n){case"input":xt(e,o);break;case"textarea":$r(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Wr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Wr(e,!!o.multiple,o.defaultValue,!0):Wr(e,!!o.multiple,o.multiple?[]:"",!1))}}function ho(e,t,n,r,o){switch(t){case"iframe":case"object":bn("topLoad","load",e);break;case"video":case"audio":for(var i in Nn)Nn.hasOwnProperty(i)&&bn(i,Nn[i],e);break;case"source":bn("topError","error",e);break;case"img":case"image":case"link":bn("topError","error",e),bn("topLoad","load",e);break;case"form":bn("topReset","reset",e),bn("topSubmit","submit",e);break;case"details":bn("topToggle","toggle",e);break;case"input":bt(e,n),bn("topInvalid","invalid",e),lo(o,"onChange");break;case"select":Hr(e,n),bn("topInvalid","invalid",e),lo(o,"onChange");break;case"textarea":qr(e,n),bn("topInvalid","invalid",e),lo(o,"onChange")}for(var a in io(t,n,uo),r=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):b.hasOwnProperty(a)&&null!=i&&lo(o,a));switch(t){case"input":Ge(e),Ct(e,n);break;case"textarea":Ge(e),Gr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=u)}return r}function vo(e,t){return e.nodeValue!==t}var go=Object.freeze({createElement:co,createTextNode:so,setInitialProperties:fo,diffProperties:po,updateProperties:mo,diffHydratedProperties:ho,diffHydratedText:vo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(xt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=q(r);o||d("90"),Ke(r),xt(r,o)}}}break;case"textarea":$r(e,n);break;case"select":null!=(t=n.value)&&Wr(e,!!n.multiple,t,!1)}}});Pe.injectFiberControlledHostComponent(go);var _o=null,yo=null;function bo(e){this._expirationTime=ko.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function wo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function xo(e,t,n){this._internalRoot=ko.createContainer(e,t,n)}function Co(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Eo(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}bo.prototype.render=function(e){this._defer||d("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new wo;return ko.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},bo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},bo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||d("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&d("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,ko.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},bo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},wo.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},wo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&d("191",n),n()}}},xo.prototype.render=function(e,t){var n=this._internalRoot,r=new wo;return null!==(t=void 0===t?null:t)&&r.then(t),ko.updateContainer(e,n,null,r._onCommit),r},xo.prototype.unmount=function(e){var t=this._internalRoot,n=new wo;return null!==(e=void 0===e?null:e)&&n.then(e),ko.updateContainer(null,t,null,n._onCommit),n},xo.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new wo;return null!==(n=void 0===n?null:n)&&o.then(n),ko.updateContainer(t,r,e,o._onCommit),o},xo.prototype.createBatch=function(){var e=new bo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var ko=Sr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Qr(null,"");break;default:e=Qr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Qr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){_o=_n;var e=l();if(jn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,u=-1,c=0,s=0,f=e,d=null;t:for(;;){for(var p;f!==t||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==n&&3!==f.nodeType||(u=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(p=f.firstChild);)d=f,f=p;for(;;){if(f===e)break t;if(d===t&&++c===r&&(a=i),d===o&&++s===n&&(u=i),null!==(p=f.nextSibling))break;d=(f=d).parentNode}f=p}t=-1===a||-1===u?null:{start:a,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;yo={focusedElem:e,selectionRange:t},yn(!1)},resetAfterCommit:function(){var e=yo,t=l(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&s(document.documentElement,n)){if(jn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[oe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Un(n,e);var i=Un(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}yo=null,yn(_o),_o=null},createInstance:function(e,t,n,r,o){return(e=co(e,t,n,r))[z]=o,e[W]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),Eo(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=so(e,t))[z]=r,e},now:Or,mutation:{commitMount:function(e,t,n){Eo(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[W]=o,mo(e,t,n,r,o)},resetTextContent:function(e){eo(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[z]=i,e[W]=n,ho(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[z]=n,vo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Pr,cancelDeferredCallback:Fr}),So=ko;function To(e,t,n,r,o){Co(n)||d("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=ko.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new xo(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=ko.getPublicRootInstance(i._internalRoot);u.call(e)}}ko.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return ko.getPublicRootInstance(i._internalRoot)}function Oo(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Co(t)||d("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ue=So.batchedUpdates,je=So.interactiveUpdates,Be=So.flushInteractiveUpdates;var Po={createPortal:Oo,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:ko.findHostInstance(e)},hydrate:function(e,t,n){return To(null,e,t,!0,n)},render:function(e,t,n){return To(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&d("38"),To(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Co(e)||d("40"),!!e._reactRootContainer&&(ko.unbatchedUpdates(function(){To(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Oo.apply(void 0,arguments)},unstable_batchedUpdates:ko.batchedUpdates,unstable_deferredUpdates:ko.deferredUpdates,flushSync:ko.flushSync,unstable_flushControlled:ko.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:B,EventPluginRegistry:E,EventPropagators:ne,ReactControlledComponent:Ie,ReactDOMComponentTree:$,ReactDOMEventListener:En},unstable_createRoot:function(e,t){return new xo(e,!0,null!=t&&!0===t.hydrate)}};ko.injectIntoDevTools({findFiberByHostInstance:H,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Fo=Object.freeze({default:Po}),No=Fo&&Po||Fo;e.exports=No.default?No.default:No},function(e,t,n){"use strict";function r(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=r(e.className,t):e.setAttribute("class",r(e.className&&e.className.baseVal||"",t))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){e.classList?e.classList.add(t):(0,i.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var r,o=n(53),i=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(55);function o(){}e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(4)),i=s(n(54)),a=s(n(52)),u=s(n(1)),l=s(n(22)),c=n(20);function s(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e,t){return e&&t&&t.split(" ").forEach(function(t){return(0,i.default)(e,t)})},p=function(e,t){return e&&t&&t.split(" ").forEach(function(t){return(0,a.default)(e,t)})},m=(r({},l.default.propTypes,{classNames:c.classNamesShape,onEnter:o.func,onEntering:o.func,onEntered:o.func,onExit:o.func,onExiting:o.func,onExited:o.func}),function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=f(this,e.call.apply(e,[this].concat(i))),r.onEnter=function(e,t){var n=r.getClassNames(t?"appear":"enter").className;r.removeClasses(e,"exit"),d(e,n),r.props.onEnter&&r.props.onEnter(e)},r.onEntering=function(e,t){var n=r.getClassNames(t?"appear":"enter").activeClassName;r.reflowAndAddClass(e,n),r.props.onEntering&&r.props.onEntering(e)},r.onEntered=function(e,t){var n=r.getClassNames("enter").doneClassName;r.removeClasses(e,t?"appear":"enter"),d(e,n),r.props.onEntered&&r.props.onEntered(e)},r.onExit=function(e){var t=r.getClassNames("exit").className;r.removeClasses(e,"appear"),r.removeClasses(e,"enter"),d(e,t),r.props.onExit&&r.props.onExit(e)},r.onExiting=function(e){var t=r.getClassNames("exit").activeClassName;r.reflowAndAddClass(e,t),r.props.onExiting&&r.props.onExiting(e)},r.onExited=function(e){var t=r.getClassNames("exit").doneClassName;r.removeClasses(e,"exit"),d(e,t),r.props.onExited&&r.props.onExited(e)},r.getClassNames=function(e){var t=r.props.classNames,n="string"!=typeof t?t[e]:t+"-"+e;return{className:n,activeClassName:"string"!=typeof t?t[e+"Active"]:n+"-active",doneClassName:"string"!=typeof t?t[e+"Done"]:n+"-done"}},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.removeClasses=function(e,t){var n=this.getClassNames(t),r=n.className,o=n.activeClassName,i=n.doneClassName;r&&p(e,r),o&&p(e,o),i&&p(e,i)},t.prototype.reflowAndAddClass=function(e,t){t&&(e&&e.scrollTop,d(e,t))},t.prototype.render=function(){var e=r({},this.props);return delete e.classNames,u.default.createElement(l.default,r({},e,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},t}(u.default.Component));m.propTypes={},t.default=m,e.exports=t.default},function(e,t,n){"use strict";var r=u(n(57)),o=u(n(44)),i=u(n(19)),a=u(n(22));function u(e){return e&&e.__esModule?e:{default:e}}e.exports={Transition:a.default,TransitionGroup:i.default,ReplaceTransition:o.default,CSSTransition:r.default}},function(e,t,n){"use strict";var r=n(2),o=n(3),i=n(58);var a=[function(e,t,n,r){return o.wrapJsForReason(i.CSSTransition,{in:e,timeout:t,classNames:n},r)}];var u=[function(e,t,n){return o.wrapJsForReason(i.TransitionGroup,{component:"div",className:e},n)}];function l(e){switch(e){case"entered":return 1;case"entering":return 0;case"exited":return 3;case"exiting":return 2;default:return 4}}var c=[l,function(e){switch(e){case 0:return"entering";case 1:return"entered";case 2:return"exiting";case 3:return"exited";case 4:return"Not"}},function(e,t,n,a){return o.wrapJsForReason(i.Transition,{in:e,timeout:t,className:n},function(e,t){return r._1(a,l(e))})}];t.CSSTransition=a,t.TransitionGroup=u,t.Transition=c},function(e,t,n){"use strict";var r=n(2),o=n(11);function i(e,t){var n=e.length;if(0===n||1===n)return n;var r=e[0],o=e[1];if(!t(r,o))return t(o,r)?0|-function(e,t,n,r,o){for(;;){var i=n,a=t;if(i>=r)return i;var u=e[i];if(!o(u,a))return i;n=i+1|0,t=u}}(e,o,2,n,t):1;for(var i=e,a=o,u=2,l=n,c=t;;){var s=u,f=a;if(s>=l)return s;var d=i[s];if(!c(f,d))return s;u=s+1|0,a=d}}function a(e,t){var n=e.length;if(0===n)return!0;for(var r=e,o=0,i=t,a=n-1|0;;){var u=o;if(u===a)return!0;if(!(i(r[u],r[u+1|0])<=0))return!1;o=u+1|0}}function u(e,t,n,r,i,a,u,l,c){for(var s=t+n|0,f=i+a|0,d=t,p=e[t],m=i,h=r[i],v=l;;){var g=v,_=h,y=m,b=p,w=d;if(c(b,_)<=0){u[g]=b;var x=w+1|0;if(x<s){v=g+1|0,p=e[x],d=x;continue}return o.blitUnsafe(r,y,u,g+1|0,f-y|0)}u[g]=_;var C=y+1|0;if(!(C<f))return o.blitUnsafe(e,w,u,g+1|0,s-w|0);v=g+1|0,h=r[C],m=C}}function l(e,t,n,r,i,a,u,l,c){for(var s=t+n|0,f=i+a|0,d=t,p=e[t],m=i,h=r[i],v=l;;){var g=v,_=h,y=m,b=p,w=d,x=c(b,_);if(x<0){u[g]=b;var C=w+1|0,E=g+1|0;if(C<s){v=E,p=e[C],d=C;continue}return o.blitUnsafe(r,y,u,E,f-y|0),(E+f|0)-y|0}if(0===x){u[g]=b;var k=w+1|0,S=y+1|0,T=g+1|0;if(k<s&&S<f){v=T,h=r[S],m=S,p=e[k],d=k;continue}return k===s?(o.blitUnsafe(r,S,u,T,f-S|0),(T+f|0)-S|0):(o.blitUnsafe(e,k,u,T,s-k|0),(T+s|0)-k|0)}u[g]=_;var O=y+1|0,P=g+1|0;if(!(O<f))return o.blitUnsafe(e,w,u,P,s-w|0),(P+s|0)-w|0;v=P,h=r[O],m=O}}function c(e,t,n,r,o,i,a,u,l){for(var c=t+n|0,s=o+i|0,f=t,d=e[t],p=o,m=r[o],h=u;;){var v=h,g=p,_=d,y=f,b=l(_,m);if(b<0){var w=y+1|0;if(w<c){d=e[w],f=w;continue}return v}if(0===b){a[v]=_;var x=y+1|0,C=g+1|0,E=v+1|0;if(x<c&&C<s){h=E,m=r[C],p=C,d=e[x],f=x;continue}return E}var k=g+1|0;if(!(k<s))return v;m=r[k],p=k}}function s(e,t,n,r,i,a,u,l,c){for(var s=t+n|0,f=i+a|0,d=t,p=e[t],m=i,h=r[i],v=l;;){var g=v,_=m,y=p,b=d,w=c(y,h);if(w<0){u[g]=y;var x=g+1|0,C=b+1|0;if(C<s){v=x,p=e[C],d=C;continue}return x}if(0===w){var E=b+1|0,k=_+1|0;if(E<s&&k<f){h=r[k],m=k,p=e[E],d=E;continue}return E===s?g:(o.blitUnsafe(e,E,u,g,s-E|0),(g+s|0)-E|0)}var S=_+1|0;if(!(S<f))return o.blitUnsafe(e,b,u,g,s-b|0),(g+s|0)-b|0;h=r[S],m=S}}function f(e,t,n,r,o,i){for(var a=0,u=o-1|0;a<=u;++a){for(var l=e[t+a|0],c=(r+a|0)-1|0;c>=r&&i(n[c],l)>0;)n[c+1|0]=n[c],c=c-1|0;n[c+1|0]=l}return 0}function d(e,t,n,r,o,i){if(o<=5)return f(e,t,n,r,o,i);var a=o/2|0,l=o-a|0;return d(e,t+a|0,n,r+a|0,l,i),d(e,t,e,t+l|0,a,i),u(e,t+l|0,a,n,r+a|0,l,n,r,i)}function p(e,t){var n=e.length;if(n<=5)return f(e,0,e,0,n,t);var r=n/2|0,o=n-r|0,i=new Array(o);return d(e,r,i,0,o,t),d(e,0,e,o,r,t),u(e,o,r,i,0,o,e,0,t)}function m(e,t){var n=e.slice(0);return p(n,t),n}function h(e,t,n){var r=e.length;if(0===r)return-1;if(n(t,e[0])<0)return-1;if(n(t,e[r-1|0])>0)return 0|-(r+1|0);for(var o=e,i=0,a=r-1|0,u=t,l=n;;){var c=a,s=i,f=(s+c|0)/2|0,d=l(u,o[f]);if(0===d)return f;if(d<0){if(c===f)return 0===l(o[s],u)?s:0|-(c+1|0);a=f}else{if(s===f)return 0===l(o[c],u)?c:0|-(c+1|0);i=f}}}t.Int=0,t.$$String=0,t.strictlySortedLengthU=i,t.strictlySortedLength=function(e,t){return i(e,r.__2(t))},t.isSortedU=a,t.isSorted=function(e,t){return a(e,r.__2(t))},t.stableSortInPlaceByU=p,t.stableSortInPlaceBy=function(e,t){return p(e,r.__2(t))},t.stableSortByU=m,t.stableSortBy=function(e,t){return m(e,r.__2(t))},t.binarySearchByU=h,t.binarySearchBy=function(e,t,n){return h(e,t,r.__2(n))},t.unionU=l,t.union=function(e,t,n,o,i,a,u,c,s){return l(e,t,n,o,i,a,u,c,r.__2(s))},t.intersectU=c,t.intersect=function(e,t,n,o,i,a,u,l,s){return c(e,t,n,o,i,a,u,l,r.__2(s))},t.diffU=s,t.diff=function(e,t,n,o,i,a,u,l,c){return s(e,t,n,o,i,a,u,l,r.__2(c))}},function(e,t,n){"use strict";t.equal=function(e,t){return e===t},t.max=2147483647,t.min=-2147483648},function(e,t,n){"use strict";var r=n(61);function o(e){return e>r.max?r.max:e<r.min?r.min:Math.ceil(e)}function i(e){return e>r.max?r.max:e<r.min?r.min:Math.floor(e)}var a=o,u=i;t.unsafe_ceil=function(e){return Math.ceil(e)},t.ceil_int=o,t.ceil=a,t.unsafe_floor=function(e){return Math.floor(e)},t.floor_int=i,t.floor=u,t.random_int=function(e,t){return i(Math.random()*(t-e|0))+e|0}},function(e,t,n){"use strict";var r=n(17),o=r.create("Js_exn.Error");t.$$Error=o,t.internalToOCamlException=function(e){return r.isCamlExceptionOrOpenVariant(e)?e:[o,e]},t.raiseError=function(e){throw new Error(e)},t.raiseEvalError=function(e){throw new EvalError(e)},t.raiseRangeError=function(e){throw new RangeError(e)},t.raiseReferenceError=function(e){throw new ReferenceError(e)},t.raiseSyntaxError=function(e){throw new SyntaxError(e)},t.raiseTypeError=function(e){throw new TypeError(e)},t.raiseUriError=function(e){throw new URIError(e)}},function(e,t,n){"use strict";var r=n(1);function o(e,t){return Object.assign(e,t)}var i={},a="mixins";var u=function(e,t,n){var r=[],u={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},l={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)s(e,t[n])},childContextTypes:function(e,t){e.childContextTypes=o({},e.childContextTypes)},contextTypes:function(e,t){e.contextTypes=o({},e.contextTypes)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=d(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,t){e.propTypes=o({},e.propTypes)},statics:function(e,t){!function(e,t){if(!t)return;for(var n in t){var r=t[n];if(t.hasOwnProperty(n)){e[n]=r}}}(e,t)},autobind:function(){}};function c(e,t){u.hasOwnProperty(t)&&u[t];g.hasOwnProperty(t)}function s(e,t){if(t){var n=e.prototype,r=n.__reactAutoBindPairs;for(var o in t.hasOwnProperty(a)&&l.mixins(e,t.mixins),t)if(t.hasOwnProperty(o)&&o!==a){var i=t[o],s=n.hasOwnProperty(o);if(c(0,o),l.hasOwnProperty(o))l[o](e,i);else{var f=u.hasOwnProperty(o);if("function"==typeof i&&!f&&!s&&!1!==t.autobind)r.push(o,i),n[o]=i;else if(s){var m=u[o];"DEFINE_MANY_MERGED"===m?n[o]=d(n[o],i):"DEFINE_MANY"===m&&(n[o]=p(n[o],i))}else n[o]=i}}}}function f(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function d(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return f(o,n),f(o,r),o}}function p(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function m(e,t){return t.bind(e)}var h={componentDidMount:function(){this.__isMounted=!0}},v={componentWillUnmount:function(){this.__isMounted=!1}},g={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e,t)},isMounted:function(){return!!this.__isMounted}},_=function(){};return o(_.prototype,e.prototype),function(e){var t=function(e,t,r){this.__reactAutoBindPairs.length&&function(e){for(var t=e.__reactAutoBindPairs,n=0;n<t.length;n+=2){var r=t[n],o=t[n+1];e[r]=m(e,o)}}(this),this.props=e,this.context=t,this.refs=i,this.updater=r||n,this.state=null;var o=this.getInitialState?this.getInitialState():null;this.state=o};for(var o in t.prototype=new _,t.prototype.constructor=t,t.prototype.__reactAutoBindPairs=[],r.forEach(s.bind(null,t)),s(t,h),s(t,e),s(t,v),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),u)t.prototype[o]||(t.prototype[o]=null);return t}},l=(new r.Component).updater,c=u(r.Component,r.isValidElement,l);t._assign=o,t.emptyObject=i,t.factory=u,t.reactNoopUpdateQueue=l,t.createClass=c},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(6),o=n(26),i=n(25),a=n(24),u="function"==typeof Symbol&&Symbol.for,l=u?Symbol.for("react.element"):60103,c=u?Symbol.for("react.portal"):60106,s=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,d=u?Symbol.for("react.provider"):60109,p=u?Symbol.for("react.context"):60110,m=u?Symbol.for("react.async_mode"):60111,h=u?Symbol.for("react.forward_ref"):60112,v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var _={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function y(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||_}function b(){}function w(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||_}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=y.prototype;var x=w.prototype=new b;x.constructor=w,r(x,y.prototype),x.isPureReactComponent=!0;var C={current:null},E=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:l,type:e,key:i,ref:a,props:o,_owner:C.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var O=/\/+/g,P=[];function F(e,t,n,r){if(P.length){var o=P.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function A(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case l:case c:i=!0}}if(i)return n(r,e,""===t?"."+D(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var u=t+D(o=e[a],a);i+=A(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=v&&e[v]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),a=0;!(o=e.next()).done;)i+=A(o=o.value,u=t+D(o,a++),n,r);else"object"===o&&g("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function D(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function R(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,a.thatReturnsArgument):null!=e&&(T(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function I(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(O,"$&/")+"/"),t=F(t,i,r,o),null==e||A(e,"",M,t),N(t)}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=F(null,null,t,n),null==e||A(e,"",R,t),N(t)},count:function(e){return null==e?0:A(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return I(e,t,null,a.thatReturnsArgument),t},only:function(e){return T(e)||g("143"),e}},createRef:function(){return{current:null}},Component:y,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:p,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:h,render:e}},Fragment:s,StrictMode:f,unstable_AsyncMode:m,createElement:S,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var o=void 0,i=r({},e.props),a=e.key,u=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,c=C.current),void 0!==t.key&&(a=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)E.call(t,o)&&!k.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:l,type:e.type,key:a,ref:u,props:i,_owner:c}},createFactory:function(e){var t=S.bind(null,e);return t.type=e,t},isValidElement:T,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:C,assign:r}},j=Object.freeze({default:U}),B=j&&U||j;e.exports=B.default?B.default:B},function(e,t,n){"use strict";var r=n(9),o=n(8),i=n(1),a=n(3);a.statelessComponent("Card");var u=[r.backgroundColor(r.white),[r.display(r.flexBox),[r.flexDirection(r.column),[r.justifyContent(r.spaceBetween),[r.boxShadow(0,[r.px(4)],[r.px(6)],0,0,r.rgba(0,0,0,.3)),[r.borderStyle(r.solid),[r.borderRadius(r.px(5)),[r.borderWidth(r.px(3)),[r.padding(r.px(10)),[r.minWidth(r.px(75)),[r.backfaceVisibility(-862584982),0]]]]]]]]]]],l=r.style(o.concat([u,[[r.transition([1e3],0,0,"transform"),[r.transformStyle(589702045),[r.transform(r.rotateY(r.deg(0))),0]]],0]])),c=r.style(o.concat([u,[[r.transition([1e3],0,0,"transform"),[r.transformStyle(589702045),[r.transform(r.rotateY(r.deg(180))),0]]],0]])),s=r.style([r.display(r.flexBox),0]),f=r.style([r.display(r.flexBox),[r.justifyContent(r.center),[r.fontSize(r.px(100)),0]]]),d=r.style([r.display(r.flexBox),[r.justifyContent(r.flexEnd),0]]);var p=[u,l,c,s,f,d,function(e){return r.style([r.background(e?r.darkgray:r.white),[r.color(r.black),[r.border(r.px(1),r.solid,r.black),[r.borderRadius(r.px(3)),0]]]])}];function m(e){if("number"!=typeof e)return String(e[0]);switch(e){case 0:return"Jack";case 1:return"Queen";case 2:return"King";case 3:return"Ace"}}function h(e){switch(e){case 0:return"♥";case 1:return"♦";case 2:return"♠";case 3:return"♣"}}var v=a.statelessComponent("Card");t.Styles=p,t.styleToString=m,t.suitToSymbol=h,t.component=v,t.make=function(e,t,n,r,o){var a=!n||n[0];return[v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],function(){return i.createElement("div",{className:a?l:c},i.createElement("div",{className:s},i.createElement("div",void 0,m(t)),i.createElement("div",void 0,h(e))),i.createElement("div",{className:f},h(e)),i.createElement("div",{className:d},i.createElement("div",void 0,m(t)),i.createElement("div",void 0,h(e))))},v[10],v[11],v[12],v[13],v[14]]}},function(e,t,n){"use strict";var r=n(9),o=n(66),i=n(23),a=n(16),u=n(59),l=n(3);n(42);var c=l.statelessComponent("Hand"),s=r.style([r.display(r.flexBox),[r.justifyContent(r.center),[r.flex(1),0]]]),f=r.style([r.display(r.flexBox),0]),d=r.style([r.display(r.flexBox),[r.justifyContent(r.center),[r.fontSize(r.px(100)),0]]]),p=r.style([r.display(r.flexBox),[r.justifyContent(r.flexEnd),0]]);var m=[s,f,d,p,function(e){return r.style([r.background(e?r.darkgray:r.white),[r.color(r.black),[r.border(r.px(1),r.solid,r.black),[r.borderRadius(r.px(3)),0]]]])}];t.component=c,t.Styles=m,t.make=function(e,t,n){var r=!!t&&t[0];return[c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8],function(){return l.element(0,0,u.TransitionGroup[0]([s],0,[i.mapi(function(e,t){return l.element([a.suitToString(t[0])+a.styleToString(t[1])],0,u.Transition[2](!0,20,0,function(n){var i=(!r||1!==e)&&0!==n;return l.element([a.suitToString(t[0])+a.styleToString(t[1])],0,o.make(t[0],t[1],[i],0,[]))}))},e)]))},c[10],c[11],c[12],c[13],c[14]]}},function(e,t,n){"use strict";var r=n(9),o=n(67),i=n(1),a=n(3),u=a.statelessComponent("Board"),l=r.style([r.display(r.flexBox),[r.flexDirection(r.column),[r.justifyContent(r.center),[r.backgroundColor(r.darkolivegreen),[r.minHeight(r.vh(50)),0]]]]]),c=r.style([r.display(r.flexBox),0]),s=r.style([r.display(r.flexBox),[r.justifyContent(r.center),[r.fontSize(r.px(100)),0]]]),f=r.style([r.display(r.flexBox),[r.justifyContent(r.flexEnd),0]]);var d=[l,c,s,f,function(e){return r.style([r.background(e?r.darkgray:r.white),[r.color(r.black),[r.border(r.px(1),r.solid,r.black),[r.borderRadius(r.px(3)),0]]]])}];function p(e){return 1===e}t.component=u,t.Styles=d,t.shouldHideDealerCard=p,t.make=function(e,t,n,r){return[u[0],u[1],u[2],u[3],u[4],u[5],u[6],u[7],u[8],function(){return i.createElement("div",{className:l},a.element(0,0,o.make(t,[p(n)],[])),a.element(0,0,o.make(e,0,[])))},u[10],u[11],u[12],u[13],u[14]]}},function(e,t,n){"use strict";t.binarySearch=function(e,t,n){for(var r=0,o=e,i=n,a=t;;){var u=o,l=r;if(l>=u)throw new Error('File "js_mapperRt.ml", line 35, characters 4-10');var c=(l+u|0)/2|0,s=i[c],f=s[0];if(f===a)return s[1];f<a?r=c+1|0:o=c}},t.revSearch=function(e,t,n){for(var r=0,o=e,i=t,a=n;;){var u=r;if(u===o)return 0;var l=i[u];if(l[1]===a)return[l[0]];r=u+1|0}},t.revSearchAssert=function(e,t,n){for(var r=e,o=0,i=t,a=n;;){var u=o;if(u>=r)throw new Error('File "js_mapperRt.ml", line 64, characters 4-10');var l=i[u];if(l[1]===a)return l[0];o=u+1|0}},t.toInt=function(e,t){return t[e]},t.fromInt=function(e,t,n){for(var r=n,o=0,i=e,a=t;;){var u=o;if(u===i)return 0;if(a[u]===r)return[u];o=u+1|0}},t.fromIntAssert=function(e,t,n){for(var r=e,o=n,i=0,a=t;;){var u=i;if(u>=r)throw new Error('File "js_mapperRt.ml", line 88, characters 4-10');if(a[u]===o)return u;i=u+1|0}}},function(e,t,n){"use strict";function r(e,t){return t?t[0]:e}var o=r;t.some=function(e){return[e]},t.isSome=function(e){return!!e},t.isSomeValue=function(e,t,n){return!!n&&e(t,n[0])},t.isNone=function(e){return!e},t.getExn=function(e){if(e)return e[0];throw new Error("getExn")},t.equal=function(e,t,n){return t?!!n&&e(t[0],n[0]):0===n},t.andThen=function(e,t){return t?e(t[0]):0},t.map=function(e,t){return t?[e(t[0])]:0},t.getWithDefault=r,t.$$default=o,t.default=o,t.__esModule=!0,t.filter=function(e,t){if(t){var n=t[0];return e(n)?[n]:0}return 0},t.firstSome=function(e,t){return e||t||0}},function(e,t,n){"use strict";t.unsafeDeleteKey=function(e,t){return delete e[t],0},t.entries=function(e){for(var t=Object.keys(e),n=t.length,r=new Array(n),o=0,i=n-1|0;o<=i;++o){var a=t[o];r[o]=[a,e[a]]}return r},t.values=function(e){for(var t=Object.keys(e),n=t.length,r=new Array(n),o=0,i=n-1|0;o<=i;++o)r[o]=e[t[o]];return r},t.fromList=function(e){for(var t={},n=e;;){var r=n;if(!r)return t;var o=r[0];t[o[0]]=o[1],n=r[1]}},t.fromArray=function(e){for(var t={},n=0,r=e.length-1|0;n<=r;++n){var o=e[n];t[o[0]]=o[1]}return t},t.map=function(e,t){for(var n={},r=Object.keys(t),o=0,i=r.length-1|0;o<=i;++o){var a=r[o];n[a]=e(t[a])}return n}},function(e,t,n){"use strict";function r(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)+(e.charCodeAt(t++)<<16)+(e.charCodeAt(t)<<24)}function o(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)}function i(e,t){return(65535&(e|=0))*(t|=0)+(((e>>>16)*t&65535)<<16)|0}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=1540483477,a=t^e.length,u=e.length,l=0;for(;u>=4;){var c=r(e,l);c=i(c,n),c=i(c^=c>>>24,n),a=i(a,n),a^=c,l+=4,u-=4}switch(u){case 3:a^=o(e,l),a=i(a^=e.charCodeAt(l+2)<<16,n);break;case 2:a=i(a^=o(e,l),n);break;case 1:a=i(a^=e.charCodeAt(l),n)}return a=i(a^=a>>>13,n),(a^=a>>>15)>>>0}},function(e,t,n){"use strict";var r=/[A-Z]/g,o=/^ms-/,i={};e.exports=function(e){return e in i?i[e]:i[e]=e.replace(r,"-$&").toLowerCase().replace(o,"-ms-")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,i.default)(e)};var r,o=n(73),i=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,a){if("string"==typeof t&&u.hasOwnProperty(e)){var c=function(e,t){if((0,o.default)(e))return e;for(var n=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),i=0,a=n.length;i<a;++i){var u=n[i],c=[u];for(var s in t){var f=(0,r.default)(s);if(u.indexOf(f)>-1&&"order"!==f)for(var d=t[s],p=0,m=d.length;p<m;++p)c.unshift(u.replace(f,l[d[p]]+f))}n[i]=c.join(",")}return n.join(",")}(t,a),s=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-moz-|-ms-/.test(e)}).join(",");if(e.indexOf("Webkit")>-1)return s;var f=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-webkit-|-ms-/.test(e)}).join(",");return e.indexOf("Moz")>-1?f:(n["Webkit"+(0,i.default)(e)]=s,n["Moz"+(0,i.default)(e)]=f,c)}};var r=a(n(74)),o=a(n(5)),i=a(n(27));function a(e){return e&&e.__esModule?e:{default:e}}var u={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},l={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(o.hasOwnProperty(e)&&i.hasOwnProperty(t))return r.map(function(e){return e+t})};var r=["-webkit-","-moz-",""],o={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},i={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("position"===e&&"sticky"===t)return["-webkit-sticky","sticky"]},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&t.indexOf("image-set(")>-1)return a.map(function(e){return t.replace(/image-set\(/g,e+"image-set(")})};var r,o=n(5),i=(r=o)&&r.__esModule?r:{default:r};var a=["-webkit-",""];e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&u.test(t))return a.map(function(e){return e+t})};var r,o=n(5),i=(r=o)&&r.__esModule?r:{default:r};var a=["-webkit-","-moz-",""],u=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?n.WebkitBoxOrient="vertical":n.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?n.WebkitBoxDirection="reverse":n.WebkitBoxDirection="normal");o.hasOwnProperty(e)&&(n[o[e]]=r[t]||t)};var r={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple"},o={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("display"===e&&r.hasOwnProperty(t))return r[t]};var r={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&t.indexOf("filter(")>-1)return a.map(function(e){return t.replace(/filter\(/g,e+"filter(")})};var r,o=n(5),i=(r=o)&&r.__esModule?r:{default:r};var a=["-webkit-",""];e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&t.indexOf("cross-fade(")>-1)return a.map(function(e){return t.replace(/cross-fade\(/g,e+"cross-fade(")})};var r,o=n(5),i=(r=o)&&r.__esModule?r:{default:r};var a=["-webkit-",""];e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("cursor"===e&&o.hasOwnProperty(t))return r.map(function(e){return e+t})};var r=["-webkit-","-moz-",""],o={"zoom-in":!0,"zoom-out":!0,grab:!0,grabbing:!0};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,o){for(var i=0,a=e.length;i<a;++i){var u=e[i](t,n,r,o);if(u)return u}},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(e.hasOwnProperty(t))for(var r=e[t],o=0,a=r.length;o<a;++o)n[r[o]+(0,i.default)(t)]=n[t]};var r,o=n(27),i=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=["Webkit"],o=["Moz"],i=["ms"],a=["Webkit","Moz"],u=["Webkit","ms"],l=["Webkit","Moz","ms"];t.default={plugins:[],prefixMap:{appearance:a,userSelect:l,textEmphasisPosition:r,textEmphasis:r,textEmphasisStyle:r,textEmphasisColor:r,boxDecorationBreak:r,clipPath:r,maskImage:r,maskMode:r,maskRepeat:r,maskPosition:r,maskClip:r,maskOrigin:r,maskSize:r,maskComposite:r,mask:r,maskBorderSource:r,maskBorderMode:r,maskBorderSlice:r,maskBorderWidth:r,maskBorderOutset:r,maskBorderRepeat:r,maskBorder:r,maskType:r,textDecorationStyle:r,textDecorationSkip:r,textDecorationLine:r,textDecorationColor:r,filter:r,fontFeatureSettings:r,breakAfter:l,breakBefore:l,breakInside:l,columnCount:a,columnFill:a,columnGap:a,columnRule:a,columnRuleColor:a,columnRuleStyle:a,columnRuleWidth:a,columns:a,columnSpan:a,columnWidth:a,writingMode:u,flex:r,flexBasis:r,flexDirection:r,flexGrow:r,flexFlow:r,flexShrink:r,flexWrap:r,alignContent:r,alignItems:r,alignSelf:r,justifyContent:r,order:r,transform:r,transformOrigin:r,transformOriginX:r,transformOriginY:r,backfaceVisibility:r,perspective:r,perspectiveOrigin:r,transformStyle:r,transformOriginZ:r,animation:r,animationDelay:r,animationDirection:r,animationFillMode:r,animationDuration:r,animationIterationCount:r,animationName:r,animationPlayState:r,animationTimingFunction:r,backdropFilter:r,fontKerning:r,scrollSnapType:u,scrollSnapPointsX:u,scrollSnapPointsY:u,scrollSnapDestination:u,scrollSnapCoordinate:u,shapeImageThreshold:r,shapeImageMargin:r,shapeImageOutside:r,hyphens:l,flowInto:u,flowFrom:u,regionFragment:u,textAlignLast:o,tabSize:o,wrapFlow:i,wrapThrough:i,wrapMargin:i,gridTemplateColumns:i,gridTemplateRows:i,gridTemplateAreas:i,gridTemplate:i,gridAutoColumns:i,gridAutoRows:i,gridAutoFlow:i,grid:i,gridRowStart:i,gridColumnStart:i,gridRowEnd:i,gridRow:i,gridColumn:i,gridColumnEnd:i,gridColumnGap:i,gridRowGap:i,gridArea:i,gridGap:i,textSizeAdjust:u,borderImage:r,borderImageOutset:r,borderImageRepeat:r,borderImageSlice:r,borderImageSource:r,borderImageWidth:r,transitionDelay:r,transitionDuration:r,transitionProperty:r,transitionTimingFunction:r}},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t in e){var n=e[t],r=(0,i.default)(g,t,n,e,_);r&&(e[t]=r),(0,o.default)(_,t,e)}return e};var r=v(n(87)),o=v(n(86)),i=v(n(85)),a=v(n(84)),u=v(n(83)),l=v(n(82)),c=v(n(81)),s=v(n(80)),f=v(n(79)),d=v(n(78)),p=v(n(77)),m=v(n(76)),h=v(n(75));function v(e){return e&&e.__esModule?e:{default:e}}var g=[u.default,a.default,l.default,s.default,f.default,d.default,p.default,m.default,h.default,c.default],_=r.default.prefixMap},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.PluginSet=l,t.fallbacks=function(e){if(Object.keys(e.style).map(function(t){return Array.isArray(e.style[t])}).indexOf(!0)>=0){var t=e.style,n=Object.keys(t).reduce(function(e,n){return e[n]=Array.isArray(t[n])?t[n].join("; "+(0,i.processStyleName)(n)+": "):t[n],e},{});return(0,o.default)({},e,{style:n})}return e},t.contentWrap=function(e){if(e.style.content){var t=e.style.content;return c.indexOf(t)>=0?e:/^(attr|calc|counters?|url)\(/.test(t)?e:t.charAt(0)!==t.charAt(t.length-1)||'"'!==t.charAt(0)&&"'"!==t.charAt(0)?r({},e,{style:r({},e.style,{content:'"'+t+'"'})}):e}return e},t.prefixes=function(e){return(0,o.default)({},e,{style:(0,a.default)(r({},e.style))})};var o=u(n(6)),i=n(29),a=u(n(88));function u(e){return e&&e.__esModule?e:{default:e}}function l(e){this.fns=e||[]}(0,o.default)(l.prototype,{add:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];n.forEach(function(t){e.fns.indexOf(t)>=0||(e.fns=[t].concat(e.fns))})},remove:function(e){this.fns=this.fns.filter(function(t){return t!==e})},clear:function(){this.fns=[]},transform:function(e){return this.fns.reduce(function(e,t){return t(e)},e)}});var c=["normal","none","counter","open-quote","close-quote","no-open-quote","no-close-quote","initial","inherit"]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function o(e){if(function(e){return null===e||void 0===e||!1===e||"object"===(void 0===e?"undefined":r(e))&&0===Object.keys(e).length}(e))return null;if("object"!==(void 0===e?"undefined":r(e)))return e;for(var t={},n=Object.keys(e),o=!1,a=0;a<n.length;a++){var u=e[n[a]],l=i(u);null!==l&&l===u||(o=!0),null!==l&&(t[n[a]]=l)}return 0===Object.keys(t).length?null:o?t:e}function i(e){return Array.isArray(e)?(n=!1,r=[],(t=e).forEach(function(e){var t=i(e);null!==t&&t===e||(n=!0),null!==t&&r.push(t)}),0==r.length?null:n?r:t):o(e);var t,n,r}t.default=i},function(e,t,n){"use strict";e.exports=function(e){var t={};return function(n){return t.hasOwnProperty(n)||(t[n]=e.call(this,n)),t[n]}}},function(e,t,n){"use strict";var r=/([A-Z])/g;e.exports=function(e){return e.replace(r,"-$1").toLowerCase()}},function(e,t,n){"use strict";var r=n(92),o=/^ms-/;e.exports=function(e){return r(e).replace(o,"-ms-")}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowStart:!0,gridRowEnd:!0,gridColumn:!0,gridColumnStart:!0,gridColumnEnd:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var o=["Webkit","ms","Moz","O"];Object.keys(r).forEach(function(e){o.forEach(function(t){r[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=r[e]})});var i={isUnitlessNumber:r,shorthandPropertyExpansions:{background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}}};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(95));o(n(28));function o(e){return e&&e.__esModule?e:{default:e}}var i=r.default.isUnitlessNumber;t.default=function(e,t,n){return null==t||"boolean"==typeof t||""===t?"":isNaN(t)||0===t||i.hasOwnProperty(e)&&i[e]?""+t:("string"==typeof t&&(t=t.trim()),t+"px")}},function(e,t,n){"use strict";var r=/-(.)/g;e.exports=function(e){return e.replace(r,function(e,t){return t.toUpperCase()})}},function(e,t,n){"use strict";var r=n(97),o=/^-ms-/;e.exports=function(e){return r(e.replace(o,"ms-"))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StyleSheet=p;var r,o=n(6),i=(r=o)&&r.__esModule?r:{default:r};function a(e){return e[e.length-1]}function u(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}var l="undefined"!=typeof window,c=!1,s=!1,f=function(){if(l){var e=document.createElement("div");return e.innerHTML="\x3c!--[if lt IE 10]><i></i><![endif]--\x3e",1===e.getElementsByTagName("i").length}}();function d(){var e=document.createElement("style");return e.type="text/css",e.setAttribute("data-glamor",""),e.appendChild(document.createTextNode("")),(document.head||document.getElementsByTagName("head")[0]).appendChild(e),e}function p(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.speedy,n=void 0===t?!c&&!s:t,r=e.maxLength,o=void 0===r?l&&f?4e3:65e3:r;this.isSpeedy=n,this.sheet=void 0,this.tags=[],this.maxLength=o,this.ctr=0}(0,i.default)(p.prototype,{getSheet:function(){return u(a(this.tags))},inject:function(){var e=this;if(this.injected)throw new Error("already injected stylesheet!");l?this.tags[0]=d():this.sheet={cssRules:[],insertRule:function(t){e.sheet.cssRules.push({cssText:t})}},this.injected=!0},speedy:function(e){if(0!==this.ctr)throw new Error("cannot change speedy mode after inserting any rule to sheet. Either call speedy("+e+") earlier in your app, or call flush() before speedy("+e+")");this.isSpeedy=!!e},_insert:function(e){try{var t=this.getSheet();t.insertRule(e,-1!==e.indexOf("@import")?0:t.cssRules.length)}catch(t){c&&console.warn("whoops, illegal rule inserted",e)}},insert:function(e){if(l)if(this.isSpeedy&&this.getSheet().insertRule)this._insert(e);else if(-1!==e.indexOf("@import")){var t=a(this.tags);t.insertBefore(document.createTextNode(e),t.firstChild)}else a(this.tags).appendChild(document.createTextNode(e));else this.sheet.insertRule(e,-1!==e.indexOf("@import")?0:this.sheet.cssRules.length);return this.ctr++,l&&this.ctr%this.maxLength==0&&this.tags.push(d()),this.ctr-1},delete:function(e){return this.replace(e,"")},flush:function(){l?(this.tags.forEach(function(e){return e.parentNode.removeChild(e)}),this.tags=[],this.sheet=null,this.ctr=0):this.sheet.cssRules=[],this.injected=!1},rules:function(){if(!l)return this.sheet.cssRules;var e=[];return this.tags.forEach(function(t){return e.splice.apply(e,[e.length,0].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(Array.from(u(t).cssRules))))}),e}})},function(e,t,n){"use strict";var r=n(12),o=n(0);t.chr=function(e){if(e<0||e>255)throw[o.invalid_argument,"Char.chr"];return e},t.escaped=function(e){var t=0;if(e>=40){if(92===e)return"\\\\";t=e>=127?1:2}else if(e>=32){if(e>=39)return"\\'";t=2}else if(e>=14)t=1;else switch(e){case 8:return"\\b";case 9:return"\\t";case 10:return"\\n";case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 11:case 12:t=1;break;case 13:return"\\r"}switch(t){case 1:var n=r.caml_create_string(4);return n[0]=92,n[1]=48+(e/100|0)|0,n[2]=48+(e/10|0)%10|0,n[3]=48+e%10|0,r.bytes_to_string(n);case 2:var o=r.caml_create_string(1);return o[0]=e,r.bytes_to_string(o)}},t.lowercase=function(e){return e>=65&&e<=90||e>=192&&e<=214||e>=216&&e<=222?e+32|0:e},t.uppercase=function(e){return e>=97&&e<=122||e>=224&&e<=246||e>=248&&e<=254?e-32|0:e},t.compare=function(e,t){return e-t|0}},function(e,t,n){"use strict";var r=n(100),o=n(8),i=n(2),a=n(34),u=n(13),l=n(12),c=n(7),s=n(0);var f=[];function d(e){var t=e.length,n=l.caml_create_string(t);return l.caml_blit_bytes(e,0,n,0,t),n}function p(e,t,n){if(t<0||n<0||t>(e.length-n|0))throw[s.invalid_argument,"String.sub / Bytes.sub"];var r=l.caml_create_string(n);return l.caml_blit_bytes(e,t,r,0,n),r}function m(e){var t=e-9|0;return t>4||t<0?23===t:2!==t}function h(e,t){var n=t.length;if(0===n)return t;for(var r=l.caml_create_string(n),o=0,a=n-1|0;o<=a;++o)r[o]=i._1(e,t[o]);return r}function v(e,t){if(0===t.length)return t;var n=d(t);return n[0]=i._1(e,t[0]),n}function g(e,t,n,r){for(;;){var o=n;if(o>=t)throw s.not_found;if(e[o]===r)return o;n=o+1|0}}function _(e,t,n){for(;;){var r=t;if(r<0)throw s.not_found;if(e[r]===n)return r;t=r-1|0}}function y(e,t,n){var r=e.length;if(t<0||t>r)throw[s.invalid_argument,"String.contains_from / Bytes.contains_from"];try{return g(e,r,t,n),!0}catch(e){if(e===s.not_found)return!1;throw e}}var b=a.caml_compare,w=l.bytes_to_string,x=l.bytes_of_string;t.make=function(e,t){var n=l.caml_create_string(e);return l.caml_fill_string(n,0,e,t),n},t.init=function(e,t){for(var n=l.caml_create_string(e),r=0,o=e-1|0;r<=o;++r)n[r]=i._1(t,r);return n},t.empty=f,t.copy=d,t.of_string=function(e){return d(l.bytes_of_string(e))},t.to_string=function(e){return l.bytes_to_string(d(e))},t.sub=p,t.sub_string=function(e,t,n){return l.bytes_to_string(p(e,t,n))},t.extend=function(e,t,n){var r=(e.length+t|0)+n|0,o=l.caml_create_string(r),i=t<0?[0|-t,0]:[0,t],a=i[1],u=i[0],s=c.caml_int_min(e.length-u|0,r-a|0);return s>0&&l.caml_blit_bytes(e,u,o,a,s),o},t.fill=function(e,t,n,r){if(t<0||n<0||t>(e.length-n|0))throw[s.invalid_argument,"String.fill / Bytes.fill"];return l.caml_fill_string(e,t,n,r)},t.blit=function(e,t,n,r,o){if(o<0||t<0||t>(e.length-o|0)||r<0||r>(n.length-o|0))throw[s.invalid_argument,"Bytes.blit"];return l.caml_blit_bytes(e,t,n,r,o)},t.blit_string=function(e,t,n,r,o){if(o<0||t<0||t>(e.length-o|0)||r<0||r>(n.length-o|0))throw[s.invalid_argument,"String.blit / Bytes.blit_string"];return l.caml_blit_string(e,t,n,r,o)},t.concat=function(e,t){if(t){var n=t[0],r=[0],i=[0];o.iter(function(e){return r[0]=r[0]+1|0,i[0]=i[0]+e.length|0,0},t);var a=l.caml_create_string(i[0]+u.imul(e.length,r[0]-1|0)|0);l.caml_blit_bytes(n,0,a,0,n.length);var c=[n.length];return o.iter(function(t){return l.caml_blit_bytes(e,0,a,c[0],e.length),c[0]=c[0]+e.length|0,l.caml_blit_bytes(t,0,a,c[0],t.length),c[0]=c[0]+t.length|0,0},t[1]),a}return f},t.cat=function(e,t){var n=e.length,r=t.length,o=l.caml_create_string(n+r|0);return l.caml_blit_bytes(e,0,o,0,n),l.caml_blit_bytes(t,0,o,n,r),o},t.iter=function(e,t){for(var n=0,r=t.length-1|0;n<=r;++n)i._1(e,t[n]);return 0},t.iteri=function(e,t){for(var n=0,r=t.length-1|0;n<=r;++n)i._2(e,n,t[n]);return 0},t.map=h,t.mapi=function(e,t){var n=t.length;if(0===n)return t;for(var r=l.caml_create_string(n),o=0,a=n-1|0;o<=a;++o)r[o]=i._2(e,o,t[o]);return r},t.trim=function(e){for(var t=e.length,n=0;n<t&&m(e[n]);)n=n+1|0;for(var r=t-1|0;r>=n&&m(e[r]);)r=r-1|0;return r>=n?p(e,n,1+(r-n|0)|0):f},t.escaped=function(e){for(var t=0,n=0,r=e.length-1|0;n<=r;++n){var o,i=e[n];if(i>=32){var a=i-34|0;o=a>58||a<0?a>=93?4:1:a>57||a<1?2:1}else o=i>=11?13!==i?4:2:i>=8?2:4;t=t+o|0}if(t===e.length)return d(e);var u=l.caml_create_string(t);t=0;for(var c=0,s=e.length-1|0;c<=s;++c){var f=e[c],p=0;if(f>=35)92!==f?f>=127?p=1:u[t]=f:p=2;else if(f>=32)f>=34?p=2:u[t]=f;else if(f>=14)p=1;else switch(f){case 8:u[t]=92,u[t=t+1|0]=98;break;case 9:u[t]=92,u[t=t+1|0]=116;break;case 10:u[t]=92,u[t=t+1|0]=110;break;case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 11:case 12:p=1;break;case 13:u[t]=92,u[t=t+1|0]=114}switch(p){case 1:u[t]=92,u[t=t+1|0]=48+(f/100|0)|0,u[t=t+1|0]=48+(f/10|0)%10|0,u[t=t+1|0]=48+f%10|0;break;case 2:u[t]=92,u[t=t+1|0]=f}t=t+1|0}return u},t.index=function(e,t){return g(e,e.length,0,t)},t.rindex=function(e,t){return _(e,e.length-1|0,t)},t.index_from=function(e,t,n){var r=e.length;if(t<0||t>r)throw[s.invalid_argument,"String.index_from / Bytes.index_from"];return g(e,r,t,n)},t.rindex_from=function(e,t,n){if(t<-1||t>=e.length)throw[s.invalid_argument,"String.rindex_from / Bytes.rindex_from"];return _(e,t,n)},t.contains=function(e,t){return y(e,0,t)},t.contains_from=y,t.rcontains_from=function(e,t,n){if(t<0||t>=e.length)throw[s.invalid_argument,"String.rcontains_from / Bytes.rcontains_from"];try{return _(e,t,n),!0}catch(e){if(e===s.not_found)return!1;throw e}},t.uppercase=function(e){return h(r.uppercase,e)},t.lowercase=function(e){return h(r.lowercase,e)},t.capitalize=function(e){return v(r.uppercase,e)},t.uncapitalize=function(e){return v(r.lowercase,e)},t.compare=b,t.unsafe_to_string=w,t.unsafe_of_string=x},function(e,t,n){"use strict";var r=n(8),o=n(101),i=n(13),a=n(12);function u(e){var t=e-9|0;return t>4||t<0?23===t:2!==t}var l=n(7).caml_string_compare,c=o.fill,s=o.blit_string;t.make=function(e,t){return a.bytes_to_string(o.make(e,t))},t.init=function(e,t){return a.bytes_to_string(o.init(e,t))},t.copy=function(e){return a.bytes_to_string(o.copy(a.bytes_of_string(e)))},t.sub=function(e,t,n){return a.bytes_to_string(o.sub(a.bytes_of_string(e),t,n))},t.fill=c,t.blit=s,t.concat=function(e,t){if(t){var n=t[0],o=[0],u=[0];r.iter(function(e){return o[0]=o[0]+1|0,u[0]=u[0]+e.length|0,0},t);var l=a.caml_create_string(u[0]+i.imul(e.length,o[0]-1|0)|0);a.caml_blit_string(n,0,l,0,n.length);var c=[n.length];return r.iter(function(t){return a.caml_blit_string(e,0,l,c[0],e.length),c[0]=c[0]+e.length|0,a.caml_blit_string(t,0,l,c[0],t.length),c[0]=c[0]+t.length|0,0},t[1]),a.bytes_to_string(l)}return""},t.iter=function(e,t){return o.iter(e,a.bytes_of_string(t))},t.iteri=function(e,t){return o.iteri(e,a.bytes_of_string(t))},t.map=function(e,t){return a.bytes_to_string(o.map(e,a.bytes_of_string(t)))},t.mapi=function(e,t){return a.bytes_to_string(o.mapi(e,a.bytes_of_string(t)))},t.trim=function(e){return""===e||!u(e.charCodeAt(0))&&!u(e.charCodeAt(e.length-1|0))?e:a.bytes_to_string(o.trim(a.bytes_of_string(e)))},t.escaped=function(e){return function(t){for(;;){var n=t;if(n>=e.length)return!1;var r=e.charCodeAt(n);if(!(r>=32))return!0;var o=r-34|0;if(o>58||o<0){if(o>=93)return!0;t=n+1|0}else{if(o>57||o<1)return!0;t=n+1|0}}}(0)?a.bytes_to_string(o.escaped(a.bytes_of_string(e))):e},t.index=function(e,t){return o.index(a.bytes_of_string(e),t)},t.rindex=function(e,t){return o.rindex(a.bytes_of_string(e),t)},t.index_from=function(e,t,n){return o.index_from(a.bytes_of_string(e),t,n)},t.rindex_from=function(e,t,n){return o.rindex_from(a.bytes_of_string(e),t,n)},t.contains=function(e,t){return o.contains(a.bytes_of_string(e),t)},t.contains_from=function(e,t,n){return o.contains_from(a.bytes_of_string(e),t,n)},t.rcontains_from=function(e,t,n){return o.rcontains_from(a.bytes_of_string(e),t,n)},t.uppercase=function(e){return a.bytes_to_string(o.uppercase(a.bytes_of_string(e)))},t.lowercase=function(e){return a.bytes_to_string(o.lowercase(a.bytes_of_string(e)))},t.capitalize=function(e){return a.bytes_to_string(o.capitalize(a.bytes_of_string(e)))},t.uncapitalize=function(e){return a.bytes_to_string(o.uncapitalize(a.bytes_of_string(e)))},t.compare=l},function(e,t,n){"use strict";var r=n(18);t.concat_fmtty=function e(t,n){if("number"==typeof t)return n;switch(0|t.tag){case 0:return r.__(0,[e(t[0],n)]);case 1:return r.__(1,[e(t[0],n)]);case 2:return r.__(2,[e(t[0],n)]);case 3:return r.__(3,[e(t[0],n)]);case 4:return r.__(4,[e(t[0],n)]);case 5:return r.__(5,[e(t[0],n)]);case 6:return r.__(6,[e(t[0],n)]);case 7:return r.__(7,[e(t[0],n)]);case 8:return r.__(8,[t[0],e(t[1],n)]);case 9:return r.__(9,[t[0],t[1],e(t[2],n)]);case 10:return r.__(10,[e(t[0],n)]);case 11:return r.__(11,[e(t[0],n)]);case 12:return r.__(12,[e(t[0],n)]);case 13:return r.__(13,[e(t[0],n)]);case 14:return r.__(14,[e(t[0],n)])}},t.erase_rel=function e(t){if("number"==typeof t)return 0;switch(0|t.tag){case 0:return r.__(0,[e(t[0])]);case 1:return r.__(1,[e(t[0])]);case 2:return r.__(2,[e(t[0])]);case 3:return r.__(3,[e(t[0])]);case 4:return r.__(4,[e(t[0])]);case 5:return r.__(5,[e(t[0])]);case 6:return r.__(6,[e(t[0])]);case 7:return r.__(7,[e(t[0])]);case 8:return r.__(8,[t[0],e(t[1])]);case 9:var n=t[0];return r.__(9,[n,n,e(t[2])]);case 10:return r.__(10,[e(t[0])]);case 11:return r.__(11,[e(t[0])]);case 12:return r.__(12,[e(t[0])]);case 13:return r.__(13,[e(t[0])]);case 14:return r.__(14,[e(t[0])])}},t.concat_fmt=function e(t,n){if("number"==typeof t)return n;switch(0|t.tag){case 0:return r.__(0,[e(t[0],n)]);case 1:return r.__(1,[e(t[0],n)]);case 2:return r.__(2,[t[0],e(t[1],n)]);case 3:return r.__(3,[t[0],e(t[1],n)]);case 4:return r.__(4,[t[0],t[1],t[2],e(t[3],n)]);case 5:return r.__(5,[t[0],t[1],t[2],e(t[3],n)]);case 6:return r.__(6,[t[0],t[1],t[2],e(t[3],n)]);case 7:return r.__(7,[t[0],t[1],t[2],e(t[3],n)]);case 8:return r.__(8,[t[0],t[1],t[2],e(t[3],n)]);case 9:return r.__(9,[e(t[0],n)]);case 10:return r.__(10,[e(t[0],n)]);case 11:return r.__(11,[t[0],e(t[1],n)]);case 12:return r.__(12,[t[0],e(t[1],n)]);case 13:return r.__(13,[t[0],t[1],e(t[2],n)]);case 14:return r.__(14,[t[0],t[1],e(t[2],n)]);case 15:return r.__(15,[e(t[0],n)]);case 16:return r.__(16,[e(t[0],n)]);case 17:return r.__(17,[t[0],e(t[1],n)]);case 18:return r.__(18,[t[0],e(t[1],n)]);case 19:return r.__(19,[e(t[0],n)]);case 20:return r.__(20,[t[0],t[1],e(t[2],n)]);case 21:return r.__(21,[t[0],e(t[1],n)]);case 22:return r.__(22,[e(t[0],n)]);case 23:return r.__(23,[t[0],e(t[1],n)]);case 24:return r.__(24,[t[0],t[1],e(t[2],n)])}}},function(e,t,n){"use strict";t.not_implemented=function(e){throw new Error(e+" not implemented by BuckleScript yet\n")}},function(e,t,n){"use strict";var r=n(13),o=n(31),i=n(7),a=n(0),u=[-2147483648,0],l=[2147483647,1],c=[0,1],s=[0,0],f=[-1,4294967295];function d(e){return 0!=(2147483648&e)}function p(e,t){var n=t[1],r=e[1],o=r+n&4294967295,i=d(r)&&(d(n)||!d(o))||d(n)&&!d(o)?1:0;return[e[0]+t[0]+i&4294967295,o>>>0]}function m(e){return[-1^e[0],(-1^e[1])>>>0]}function h(e,t){return e[0]===t[0]&&e[1]===t[1]}function v(e){return h(e,u)?u:p(m(e),c)}function g(e,t){if(0===t)return e;var n=e[1];return t>=32?[n<<(t-32|0),0]:[n>>>(32-t|0)|e[0]<<t,n<<t>>>0]}function _(e,t){if(0===t)return e;var n=e[0];return t<32?[n>>t,(n<<(32-t|0)|e[1]>>>t)>>>0]:[n>=0?0:-1,n>>(t-32|0)>>>0]}function y(e){return 0===e[0]&&0===e[1]}function b(e,t){for(;;){var n,r=t,o=e,i=0,a=o[0],l=0,c=0;if(0===a&&0===o[1])return s;if(4===4){if(0===r[0]&&0===r[1])return s;c=3}if(3===c&&(-2147483648!==a||0!==o[1]?l=2:(n=r[1],i=1)),2===l){var f=r[0],d=o[1],p=0;if(-2147483648!==f||0!==r[1]?p=3:(n=d,i=1),3===p){var m=r[1];if(a<0){if(f<0){t=v(r),e=v(o);continue}return v(b(v(o),r))}if(f<0)return v(b(o,v(r)));var h=65535&a,g=d>>>16,_=65535&d,y=65535&f,w=m>>>16,x=65535&m,C=0,E=0,k=0,S=_*x;return C=(E=(E=(k=(S>>>16)+g*x)>>>16)+((k=(65535&k)+_*w)>>>16)+h*x)>>>16,C+=(E=(65535&E)+g*w)>>>16,C+=(E=(65535&E)+_*y)>>>16,[(E&=65535)|(C=C+((a>>>16)*x+h*w+g*y+_*(f>>>16))&65535)<<16,(65535&S|(65535&k)<<16)>>>0]}}if(1===i)return 0==(1&n)?s:u}}function w(e,t){var n=t[0],r=e[0];return r>n||!(r<n)&&e[1]>=t[1]}function x(e,t){return e[0]>t[0]||!(e[0]<t[0])&&e[1]>t[1]}function C(e){return 4294967296*e[0]+e[1]}var E=Math.pow(2,32),k=Math.pow(2,63),S=-Math.pow(2,63);function T(e){return isNaN(e)||!isFinite(e)?s:e<=S?u:e+1>=k?l:e<0?v(T(-e)):[e/E|0,(e%E|0)>>>0]}function O(e,t){for(;;){var n=t,r=e,o=r[0],l=0;if(0===n[0]&&0===n[1])throw a.division_by_zero;if(2===2)if(-2147483648!==o){if(0===o&&0===r[1])return s;l=1}else if(0!==r[1])l=1;else{if(h(n,c)||h(n,f))return r;if(h(n,u))return c;var d=n[0],m=g(O(_(r,1),n),1);if(0===m[0]&&0===m[1])return d<0?c:v(c);if(3===3)return p(m,O(p(r,v(b(n,m))),n))}if(1===l){var E=n[0];if(-2147483648===E&&0===n[1])return s;if(2===2){if(o<0){if(E<0){t=v(n),e=v(r);continue}return v(O(v(r),n))}if(E<0)return v(O(r,v(n)));for(var k=s,S=r;w(S,n);){for(var P=i.caml_float_max(1,Math.floor(C(S)/C(n))),F=Math.ceil(Math.log(P)/Math.LN2),N=F<=48?1:Math.pow(2,F-48),A=T(P),D=b(A,n);D[0]<0||x(D,S);)D=b(A=T(P-=N),n);y(A)&&(A=c),k=p(k,A),S=p(S,v(D))}return k}}}}t.min_int=u,t.max_int=l,t.one=c,t.zero=s,t.not=m,t.of_int32=function(e){return[e<0?-1:0,e>>>0]},t.to_int32=function(e){return 0|e[1]},t.add=p,t.neg=v,t.sub=function(e,t){return p(e,v(t))},t.lsl_=g,t.lsr_=function(e,t){if(0===t)return e;var n=e[0],r=t-32|0;return 0===r?[0,n>>>0]:r>0?[0,n>>>r>>>0]:[n>>>t,(n<<(0|-r)|e[1]>>>t)>>>0]},t.asr_=_,t.is_zero=y,t.mul=b,t.xor=function(e,t){return[e[0]^t[0],(e[1]^t[1])>>>0]},t.or_=function(e,t){return[e[0]|t[0],(e[1]|t[1])>>>0]},t.and_=function(e,t){return[e[0]&t[0],(e[1]&t[1])>>>0]},t.swap=function(e){return[r.caml_int32_bswap(e[1]),r.caml_int32_bswap(e[0])>>>0]},t.ge=w,t.eq=h,t.neq=function(e,t){return!h(e,t)},t.lt=function(e,t){return!w(e,t)},t.gt=x,t.le=function(e,t){return!x(e,t)},t.equal_null=function(e,t){return null!==t&&h(e,t)},t.equal_undefined=function(e,t){return void 0!==t&&h(e,t)},t.equal_nullable=function(e,t){return null!=t&&h(e,t)},t.min=function(e,t){return w(e,t)?t:e},t.max=function(e,t){return x(e,t)?e:t},t.to_float=C,t.of_float=T,t.div=O,t.mod_=function(e,t){return p(e,v(b(O(e,t),t)))},t.div_mod=function(e,t){var n=O(e,t);return[n,p(e,v(b(n,t)))]},t.compare=function(e,t){var n=i.caml_nativeint_compare(e[0],t[0]);return 0===n?i.caml_nativeint_compare(e[1],t[1]):n},t.to_hex=function(e){var t=function(e){return(e>>>0).toString(16)},n=e[0],r=e[1];if(0===n&&0===r)return"0";if(0!==r){if(0!==n){var i=t(e[1]),a=8-i.length|0;return a<=0?t(e[0])+i:t(e[0])+(o.repeat(a,"0")+i)}return t(e[1])}return t(e[0])+"00000000"},t.discard_sign=function(e){return[2147483647&e[0],e[1]]},t.float_of_bits=function(e){var t=new Int32Array([e[1],e[0]]);return new Float64Array(t.buffer)[0]},t.bits_of_float=function(e){var t=new Float64Array([e]),n=new Int32Array(t.buffer);return[n[1],n[0]>>>0]},t.get64=function(e,t){return[e.charCodeAt(t+4|0)<<32|e.charCodeAt(t+5|0)<<40|e.charCodeAt(t+6|0)<<48|e.charCodeAt(t+7|0)<<56,(e.charCodeAt(t)|e.charCodeAt(t+1|0)<<8|e.charCodeAt(t+2|0)<<16|e.charCodeAt(t+3|0)<<24)>>>0]}},function(e,t,n){"use strict";var r=n(2),o=n(13),i=n(105),a=n(31),u=n(0);function l(e){throw[u.failure,e]}function c(e){return e>=65?e>=97?e>=123?-1:e-87|0:e>=91?-1:e-55|0:e>57||e<48?-1:e-48|0}function s(e){switch(e){case 0:return 8;case 1:return 16;case 2:return 10;case 3:return 2}}function f(e){var t=1,n=2,r=0;"-"===e[r]&&(t=-1,r=r+1|0);var o=e.charCodeAt(r),i=e.charCodeAt(r+1|0);return 48===o&&(i>=89?98!==i?111!==i?120===i&&(n=1,r=r+2|0):(n=0,r=r+2|0):(n=3,r=r+2|0):66!==i?79!==i?i>=88&&(n=1,r=r+2|0):(n=0,r=r+2|0):(n=3,r=r+2|0)),[r,t,n]}function d(e){var t=f(e),n=t[0],r=s(t[2]),o=e.length,i=c(n<o?e.charCodeAt(n):0);if(i<0||i>=r)throw[u.failure,"int_of_string"];var a=t[1]*function(t,n){for(;;){var i=n,a=t;if(i===o)return a;var l=e.charCodeAt(i);if(95!==l){var s=c(l);if(s<0||s>=r)throw[u.failure,"int_of_string"];var f=r*a+s;if(f>4294967295)throw[u.failure,"int_of_string"];n=i+1|0,t=f}else n=i+1|0}}(i,n+1|0),l=0|a;if(10===r&&a!==l)throw[u.failure,"int_of_string"];return l}function p(e){return e>=65&&e<=90||e>=192&&e<=214||e>=216&&e<=222?e+32|0:e}function m(e){var t=e.length;if(t>31)throw[u.invalid_argument,"format_int: format too long"];for(var n=["+","-"," ",!1,2,!1,0,!1,1,-1,"f"],r=0;;){var i=r;if(i>=t)return n;var a=e.charCodeAt(i),l=0;if(a>=69)if(a>=88)if(a>=121)l=1;else switch(a-88|0){case 0:n[4]=1,n[7]=!0,r=i+1|0;continue;case 13:case 14:case 15:l=5;break;case 12:case 17:l=4;break;case 23:n[4]=0,r=i+1|0;continue;case 29:n[4]=2,r=i+1|0;continue;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 16:case 18:case 19:case 20:case 21:case 22:case 24:case 25:case 26:case 27:case 28:case 30:case 31:l=1;break;case 32:n[4]=1,r=i+1|0;continue}else{if(!(a>=72)){n[5]=!0,n[7]=!0,n[10]=String.fromCharCode(p(a)),r=i+1|0;continue}l=1}else{var c=a-32|0;if(c>25||c<0)l=1;else switch(c){case 3:n[3]=!0,r=i+1|0;continue;case 0:case 11:l=2;break;case 13:n[0]="-",r=i+1|0;continue;case 14:n[9]=0;for(var s=i+1|0;function(t){return function(){var n=e.charCodeAt(t)-48|0;return n>=0&&n<=9}}(s)();)n[9]=(o.imul(n[9],10)+e.charCodeAt(s)|0)-48|0,s=s+1|0;r=s;continue;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 12:case 15:l=1;break;case 16:n[2]="0",r=i+1|0;continue;case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:l=3}}switch(l){case 1:r=i+1|0;continue;case 2:n[1]=String.fromCharCode(a),r=i+1|0;continue;case 3:n[6]=0;for(var f=i;function(t){return function(){var n=e.charCodeAt(t)-48|0;return n>=0&&n<=9}}(f)();)n[6]=(o.imul(n[6],10)+e.charCodeAt(f)|0)-48|0,f=f+1|0;r=f;continue;case 4:n[5]=!0,n[4]=2,r=i+1|0;continue;case 5:n[5]=!0,n[10]=String.fromCharCode(a),r=i+1|0;continue}}}function h(e,t){var n=e[0],r=e[1],o=e[2],i=e[3],a=e[4],u=e[5],l=e[6],c=e[7],s=e[8],f=t.length;u&&(s<0||"-"!==r)&&(f=f+1|0),i&&(0===a?f=f+1|0:1===a&&(f=f+2|0));var d="";if("+"===n&&" "===o)for(var p=f,m=l-1|0;p<=m;++p)d+=o;if(u&&(s<0?d+="-":"-"!==r&&(d+=r)),i&&0===a&&(d+="0"),i&&1===a&&(d+="0x"),"+"===n&&"0"===o)for(var h=f,v=l-1|0;h<=v;++h)d+=o;if(d=c?d+t.toUpperCase():d+t,"-"===n)for(var g=f,_=l-1|0;g<=_;++g)d+=" ";return d}function v(e,t){if("%d"===e)return String(t);var n=m(e),r=t,o=(r<0?n[5]?(n[8]=-1,-r):r>>>0:r).toString(function(e){switch(e){case 0:return 8;case 1:return 16;case 2:return 10}}(n[4]));if(n[9]>=0){n[2]=" ";var i=n[9]-o.length|0;i>0&&(o=a.repeat(i,"0")+o)}return h(n,o)}var g=function(e,t){var n=+e;if(e.length>0&&n==n)return n;if(n=+(e=e.replace(/_/g,"")),e.length>0&&n==n||/^[+-]?nan$/i.test(e))return n;if(/^ *0x[0-9a-f_]+p[+-]?[0-9_]+/i.test(e)){var r=e.indexOf("p");r=-1==r?e.indexOf("P"):r;var o=+e.substring(r+1);return(n=+e.substring(0,r))*Math.pow(2,o)}return/^\+?inf(inity)?$/i.test(e)?1/0:/^-inf(inity)?$/i.test(e)?-1/0:void t("float_of_string")};var _=v,y=v,b=d,w=d;t.caml_format_float=function(e,t){var n=m(e),r=n[9]<0?6:n[9],o=t<0?(n[8]=-1,-t):t,i="";if(isNaN(o))i="nan",n[2]=" ";else if(isFinite(o))switch(n[10]){case"e":var a=(i=o.toExponential(r)).length;"e"===i[a-3|0]&&(i=i.slice(0,a-1|0)+"0"+i.slice(a-1|0));break;case"f":i=o.toFixed(r);break;case"g":var u=0!==r?r:1,l=(i=o.toExponential(u-1|0)).indexOf("e"),c=0|Number(i.slice(l+1|0));if(c<-4||o>=1e21||o.toFixed().length>u){for(var s=l-1|0;"0"===i[s];)s=s-1|0;"."===i[s]&&(s=s-1|0);var f=(i=i.slice(0,s+1|0)+i.slice(l)).length;"e"===i[f-3|0]&&(i=i.slice(0,f-1|0)+"0"+i.slice(f-1|0))}else{var d=u;if(c<0)d=d-(c+1|0)|0,i=o.toFixed(d);else for(;(i=o.toFixed(d)).length>(u+1|0);)d=d-1|0;if(0!==d){for(var p=i.length-1|0;"0"===i[p];)p=p-1|0;"."===i[p]&&(p=p-1|0),i=i.slice(0,p+1|0)}}}else i="inf",n[2]=" ";return h(n,i)},t.caml_format_int=v,t.caml_nativeint_format=_,t.caml_int32_format=y,t.caml_float_of_string=function(e){return r._2(g,e,l)},t.caml_int64_format=function(e,t){var n=m(e),r=n[5]&&i.lt(t,[0,0])?(n[8]=-1,i.neg(t)):t,o="";switch(n[4]){case 0:var u=[0,8],l="01234567";if(i.lt(r,[0,0])){var c=i.discard_sign(r),s=i.div_mod(c,u),f=i.add([268435456,0],s[0]),d=s[1];for(o=String.fromCharCode(l.charCodeAt(0|d[1]))+o;i.neq(f,[0,0]);){var p=i.div_mod(f,u);f=p[0],d=p[1],o=String.fromCharCode(l.charCodeAt(0|d[1]))+o}}else{var v=i.div_mod(r,u),g=v[0],_=v[1];for(o=String.fromCharCode(l.charCodeAt(0|_[1]))+o;i.neq(g,[0,0]);){var y=i.div_mod(g,u);g=y[0],_=y[1],o=String.fromCharCode(l.charCodeAt(0|_[1]))+o}}break;case 1:o=i.to_hex(r)+o;break;case 2:var b=[0,10];if(i.lt(r,[0,0])){var w=i.discard_sign(r),x=i.div_mod(w,b),C=i.div_mod(i.add([0,8],x[1]),b),E=i.add(i.add([214748364,3435973836],x[0]),C[0]),k=C[1];for(o=String.fromCharCode("0123456789".charCodeAt(0|k[1]))+o;i.neq(E,[0,0]);){var S=i.div_mod(E,b);E=S[0],k=S[1],o=String.fromCharCode("0123456789".charCodeAt(0|k[1]))+o}}else{var T=i.div_mod(r,b),O=T[0],P=T[1];for(o=String.fromCharCode("0123456789".charCodeAt(0|P[1]))+o;i.neq(O,[0,0]);){var F=i.div_mod(O,b);O=F[0],P=F[1],o=String.fromCharCode("0123456789".charCodeAt(0|P[1]))+o}}}if(n[9]>=0){n[2]=" ";var N=n[9]-o.length|0;N>0&&(o=a.repeat(N,"0")+o)}return h(n,o)},t.caml_int_of_string=d,t.caml_int32_of_string=b,t.caml_int64_of_string=function(e){var t,n=f(e),r=n[2],o=n[0],a=i.of_int32(s(r)),l=i.of_int32(n[1]);switch(r){case 0:t=[536870911,4294967295];break;case 1:t=[268435455,4294967295];break;case 2:t=[429496729,2576980377];break;case 3:t=[2147483647,4294967295]}var d=e.length,p=o<d?e.charCodeAt(o):0,m=i.of_int32(c(p));if(i.lt(m,[0,0])||i.ge(m,a))throw[u.failure,"int64_of_string"];var h=i.mul(l,function(n,r){for(;;){var o=r,l=n;if(o===d)return l;var s=e.charCodeAt(o);if(95!==s){var f=i.of_int32(c(s));if(i.lt(f,[0,0])||i.ge(f,a)||i.gt(l,t))throw[u.failure,"int64_of_string"];r=o+1|0,n=i.add(i.mul(a,l),f)}else r=o+1|0}}(m,o+1|0)),v=i.or_(h,[0,0]);if(i.eq(a,[0,10])&&i.neq(h,v))throw[u.failure,"int64_of_string"];return v},t.caml_nativeint_of_string=w},function(e,t,n){"use strict";(function(e){var r=n(0);t.caml_sys_getenv=function(t){var n=void 0===e?void 0:e;if(void 0!==n){var o=n.env[t];if(void 0!==o)return o;throw r.not_found}throw r.not_found},t.caml_sys_time=function(){var t=void 0===e?void 0:e;return void 0!==t?t.uptime():-1},t.caml_sys_random_seed=function(){return[(4294967295^(0|Date.now()))*Math.random()|0]},t.caml_sys_system_command=function(){return 127},t.caml_sys_getcwd=function(){var t=void 0===e?void 0:e;return void 0!==t?t.cwd():"/"},t.caml_sys_get_argv=function(){var t=void 0===e?void 0:e;return void 0!==t?null==t.argv?["",[""]]:[t.argv[0],t.argv]:["",[""]]},t.caml_sys_exit=function(t){var n=void 0===e?void 0:e;return void 0!==n?n.exit(t):0},t.caml_sys_is_directory=function(){throw[r.failure,"caml_sys_is_directory not implemented"]},t.caml_sys_file_exists=function(){throw[r.failure,"caml_sys_file_exists not implemented"]}}).call(this,n(32))},function(e,t,n){"use strict";(function(e){var r=n(2),o=n(0);var i=["",function(t,n){var r=n.length-1|0;return void 0!==e&&e.stdout&&e.stdout.write?e.stdout.write(n):"\n"===n[r]?(console.log(n.slice(0,r)),0):(console.log(n),0)}],a=["",function(e,t){var n=t.length-1|0;return"\n"===t[n]?(console.log(t.slice(0,n)),0):(console.log(t),0)}];function u(e){return""!==e[0]?(r._2(e[1],e,e[0]),e[0]="",0):0}function l(t,n,r,o){var a=0===r&&o===n.length?n:n.slice(r,o);if(void 0!==e&&e.stdout&&e.stdout.write&&t===i)return e.stdout.write(a);var l=a.lastIndexOf("\n");return l<0?(t[0]=t[0]+a,0):(t[0]=t[0]+a.slice(0,l+1|0),u(t),t[0]=t[0]+a.slice(l+1|0),0)}t.$caret=function(e,t){return e+t},t.stdin=void 0,t.stdout=i,t.stderr=a,t.caml_ml_open_descriptor_in=function(){throw[o.failure,"caml_ml_open_descriptor_in not implemented"]},t.caml_ml_open_descriptor_out=function(){throw[o.failure,"caml_ml_open_descriptor_out not implemented"]},t.caml_ml_flush=u,t.node_std_output=function(t){return void 0!==e&&e.stdout&&(e.stdout.write(t),!0)},t.caml_ml_output=l,t.caml_ml_output_char=function(e,t){return l(e,String.fromCharCode(t),0,1)},t.caml_ml_input=function(e,t,n,r){throw[o.failure,"caml_ml_input ic not implemented"]},t.caml_ml_input_char=function(){throw[o.failure,"caml_ml_input_char not implemnted"]},t.caml_ml_out_channels_list=function(){return[i,[a,0]]}}).call(this,n(32))},function(e,t,n){"use strict";var r=n(9),o=n(68),i=n(1),a=n(38),u=n(15),l=n(11),c=n(3),s=c.statelessComponent("Game"),f=r.style([r.display(r.flexBox),[r.flexDirection(r.column),[r.justifyContent(r.center),[r.backgroundColor(r.darkolivegreen),[r.minHeight(r.px(500)),0]]]]]),d=r.style([r.display(r.flexBox),0]),p=r.style([r.display(r.flexBox),[r.justifyContent(r.center),[r.fontSize(r.px(100)),0]]]),m=r.style([r.display(r.flexBox),[r.justifyContent(r.flexEnd),0]]);var h=[f,d,p,m,function(e){return r.style([r.background(e?r.darkgray:r.white),[r.color(r.black),[r.border(r.px(1),r.solid,r.black),[r.borderRadius(r.px(3)),0]]]])}];t.component=s,t.Styles=h,t.make=function(e,t,n){return[s[0],s[1],s[2],s[3],s[4],s[5],s[6],s[7],s[8],function(){return i.createElement("div",{className:f},c.element(0,0,o.make(l.reverse(u.toArray(e[0][0])),l.reverse(u.toArray(e[0][1])),e[2],[])),c.element(0,0,a.make(t,e,[])))},s[10],s[11],s[12],s[13],s[14]]}},function(e,t,n){"use strict";var r=n(109),o=n(18),i=n(2),a=n(16),u=n(1),l=n(15),c=n(11),s=n(37),f=n(3),d=f.reducerComponent("Blackjack");function p(e,t){return o.__(0,[[a.runPlayerTurn(t[0],e[0]),t[1]]])}function m(e,t){var n=e?e[0]:0;return n>=t?0:[n,m([n+1|0],t)]}function h(e,t){return c.map(s.of_list(m(0,e)),function(){return t})}t.component=d,t.appReducer=p,t.range=m,t.repeat=h,t.cycle=function(e,t){return l.concatMany(h(e,t))},t.make=function(){return[d[0],d[1],d[2],d[3],d[4],d[5],d[6],d[7],d[8],function(e){var t=e[3];return u.createElement("div",void 0,f.element(0,0,r.make(e[1][0],function(e){return i._1(t,[e])},[])))},function(){var e=l.shuffle(l.concatMany(h(100,a.defaultDeck)));return[[a.emptyBoard,e,0,200,1e4],200]},d[11],p,d[13],d[14]]}},function(e,t,n){"use strict";var r=n(110),o=n(36),i=n(3);o.renderToElementWithId(i.element(0,0,r.make([])),"root")},function(e,t,n){e.exports=n(111)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jdXJyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhc29uLXJlYWN0L2xpYi9qcy9zcmMvUmVhc29uUmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvY2FtbF9wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9saXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1jc3MvbGliL2pzL3NyYy9Dc3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvYmVsdF9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvY2FtbF9pbnQzMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvYmVsdF9MaXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9sb2dpYy5yZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfZXhjZXB0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2Jsb2NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL2NhcGl0YWxpemVTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsYW1vci9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xhbW9yL2xpYi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsYW1vci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jYW1sX3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9wZXJ2YXNpdmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvY2FtbF9vYmouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jYW1sX2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFzb24tcmVhY3QvbGliL2pzL3NyYy9SZWFjdERPTVJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvYXJyYXlMYWJlbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rvb2xCYXIucmUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmNzcz9lMGQzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9SZXBsYWNlVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc1RleHROb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2FkZENsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVHJhbnNpdGlvbi5yZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2JlbHRfU29ydEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvanNfaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvanNfbWF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2pzX2V4bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhc29uLXJlYWN0L2xpYi9qcy9zcmMvUmVhc29uUmVhY3RPcHRpbWl6ZWRDcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9DYXJkLnJlIiwid2VicGFjazovLy8uL3NyYy9IYW5kLnJlIiwid2VicGFjazovLy8uL3NyYy9Cb2FyZC5yZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2pzX21hcHBlclJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvanNfb3B0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvanNfZGljdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xhbW9yL2xpYi9oYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWluLWpzLXV0aWxzL2xpYi9oeXBoZW5hdGVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9zaXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9wb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ltYWdlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZ3JhZGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4Ym94T2xkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2Nyb3NzRmFkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2N1cnNvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL3ByZWZpeFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvcHJlZml4UHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvc3RhdGljRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xhbW9yL2xpYi9wcmVmaXhlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xhbW9yL2xpYi9wbHVnaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbGFtb3IvbGliL2NsZWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbGFtb3Ivbm9kZV9tb2R1bGVzL2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbGFtb3Ivbm9kZV9tb2R1bGVzL2ZianMvbGliL2h5cGhlbmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xhbW9yL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsYW1vci9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xhbW9yL2xpYi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMvQ1NTUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsYW1vci9saWIvQ1NTUHJvcGVydHlPcGVyYXRpb25zL2Rhbmdlcm91c1N0eWxlVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsYW1vci9ub2RlX21vZHVsZXMvZmJqcy9saWIvY2FtZWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsYW1vci9ub2RlX21vZHVsZXMvZmJqcy9saWIvY2FtZWxpemVTdHlsZU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsYW1vci9saWIvc2hlZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jaGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvYnl0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jYW1sX21pc3NpbmdfcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jYW1sX2ludDY0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvY2FtbF9mb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jYW1sX3N5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfaW8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dhbWUucmUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5yZSIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5yZSJdLCJuYW1lcyI6WyJwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayIsIndpbmRvdyIsImNodW5rSWQiLCJtb3JlTW9kdWxlcyIsImhvdEF2YWlsYWJsZUZpbGVzTWFwIiwiaG90UmVxdWVzdGVkRmlsZXNNYXAiLCJtb2R1bGVJZCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImhvdFVwZGF0ZSIsImhvdFdhaXRpbmdGaWxlcyIsImhvdENodW5rc0xvYWRpbmciLCJob3RVcGRhdGVEb3dubG9hZGVkIiwiaG90QWRkVXBkYXRlQ2h1bmsiLCJob3RDdXJyZW50Q2hpbGRNb2R1bGUiLCJob3RBcHBseU9uVXBkYXRlIiwiaG90Q3VycmVudEhhc2giLCJob3RSZXF1ZXN0VGltZW91dCIsImhvdEN1cnJlbnRNb2R1bGVEYXRhIiwiaG90Q3VycmVudFBhcmVudHMiLCJob3RDdXJyZW50UGFyZW50c1RlbXAiLCJob3RDcmVhdGVSZXF1aXJlIiwibWUiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImZuIiwicmVxdWVzdCIsImhvdCIsImFjdGl2ZSIsInBhcmVudHMiLCJpbmRleE9mIiwicHVzaCIsImNoaWxkcmVuIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3RGYWN0b3J5IiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZSIsImhvdFN0YXR1cyIsImhvdFNldFN0YXR1cyIsInRoZW4iLCJmaW5pc2hDaHVua0xvYWRpbmciLCJlcnIiLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsImhvdFN0YXR1c0hhbmRsZXJzIiwibmV3U3RhdHVzIiwiaSIsImxlbmd0aCIsImhvdERlZmVycmVkIiwiaG90VXBkYXRlTmV3SGFzaCIsInRvTW9kdWxlSWQiLCJpZCIsImhvdENoZWNrIiwiYXBwbHkiLCJFcnJvciIsInJlcXVlc3RUaW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJYTUxIdHRwUmVxdWVzdCIsInJlcXVlc3RQYXRoIiwicCIsIm9wZW4iLCJ0aW1lb3V0Iiwic2VuZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJ1cGRhdGUiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJjIiwiaCIsInByb21pc2UiLCJoZWFkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0Iiwic3JjIiwiYXBwZW5kQ2hpbGQiLCJob3REb3dubG9hZFVwZGF0ZUNodW5rIiwiZGVmZXJyZWQiLCJob3RBcHBseSIsInJlc3VsdCIsIm91dGRhdGVkTW9kdWxlcyIsIm9wdGlvbnMiLCJjYiIsImoiLCJtb2R1bGUiLCJnZXRBZmZlY3RlZFN0dWZmIiwidXBkYXRlTW9kdWxlSWQiLCJvdXRkYXRlZERlcGVuZGVuY2llcyIsInF1ZXVlIiwic2xpY2UiLCJtYXAiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBvcCIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwidHlwZSIsIl9tYWluIiwicGFyZW50SWQiLCJwYXJlbnQiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJjb25jYXQiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJhZGRBbGxUb1NldCIsImEiLCJiIiwiaXRlbSIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsImpvaW4iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJpZHgiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJlcnJvckhhbmRsZXIiLCJrZXlzIiwiZm9yRWFjaCIsImluc3RhbGxlZENodW5rcyIsImhvdERpc3Bvc2VDaHVuayIsImRlcGVuZGVuY3kiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsImRhdGEiLCJkaXNwb3NlSGFuZGxlcnMiLCJfZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJzcGxpY2UiLCJtb2R1bGVzIiwiZXJyb3IiLCJjYWxsYmFja3MiLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yaWdpbmFsRXJyb3IiLCJleHBvcnRzIiwibCIsImFjY2VwdCIsImRlcCIsImNhbGxiYWNrIiwiZGVjbGluZSIsImRpc3Bvc2UiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiY2hlY2siLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsInVuZGVmaW5lZCIsImhvdENyZWF0ZU1vZHVsZSIsIm0iLCJkIiwiZ2V0dGVyIiwibyIsInIiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicyIsIm91dF9vZl9tZW1vcnkiLCJzeXNfZXJyb3IiLCJmYWlsdXJlIiwiaW52YWxpZF9hcmd1bWVudCIsImVuZF9vZl9maWxlIiwiZGl2aXNpb25fYnlfemVybyIsIm5vdF9mb3VuZCIsIm1hdGNoX2ZhaWx1cmUiLCJzdGFja19vdmVyZmxvdyIsInN5c19ibG9ja2VkX2lvIiwiYXNzZXJ0X2ZhaWx1cmUiLCJ1bmRlZmluZWRfcmVjdXJzaXZlX21vZHVsZSIsInRhZyIsIkNhbWxfYXJyYXkiLCJhcHAiLCJfZiIsIl9hcmdzIiwiYXJncyIsImYiLCJhcml0eSIsImFyaXR5JDEiLCJ4IiwiY2FtbF9hcnJheV9zdWIiLCJjdXJyeV8xIiwiYTAiLCJwYXJhbSIsInBhcmFtJDEiLCJwYXJhbSQyIiwicGFyYW0kMyIsInBhcmFtJDQiLCJwYXJhbSQ1IiwiXzEiLCJjdXJyeV8yIiwiYTEiLCJfMiIsImN1cnJ5XzMiLCJhMiIsImV4aXQiLCJfMyIsImN1cnJ5XzQiLCJhMyIsIl80IiwiY3VycnlfNSIsImE0IiwiXzUiLCJjdXJyeV82IiwiYTUiLCJfNiIsImN1cnJ5XzciLCJhNiIsIl83IiwiY3VycnlfOCIsImE3IiwiXzgiLCJfXzEiLCJfXzIiLCJfXzMiLCJfXzQiLCJfXzUiLCJfXzYiLCJfXzciLCJfXzgiLCJDdXJyeSIsIlJlYWN0IiwiQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMiLCJSZWFzb25SZWFjdE9wdGltaXplZENyZWF0ZUNsYXNzIiwiYW55VG9Vbml0IiwiYW55VG9UcnVlIiwid2lsbFJlY2VpdmVQcm9wc0RlZmF1bHQiLCJyZW5kZXJEZWZhdWx0IiwiaW5pdGlhbFN0YXRlRGVmYXVsdCIsInJlZHVjZXJEZWZhdWx0IiwiXyIsIl8kMSIsInN1YnNjcmlwdGlvbnNEZWZhdWx0IiwiY29udmVydFByb3BzSWZUaGV5cmVGcm9tSnMiLCJwcm9wcyIsImpzUHJvcHNUb1JlYXNvbiIsImRlYnVnTmFtZSIsIm1hdGNoIiwicmVhc29uUHJvcHMiLCJiYXNpY0NvbXBvbmVudCIsImNyZWF0ZUNsYXNzIiwiZGlzcGxheU5hbWUiLCJzdWJzY3JpcHRpb25zIiwic2VsZiIsInN0YXRlIiwicmV0YWluZWRQcm9wcyIsInRoaXMiLCJoYW5kbGVNZXRob2QiLCJzZW5kTWV0aG9kIiwib25Vbm1vdW50TWV0aG9kIiwidHJhbnNpdGlvbk5leHRUb3RhbFN0YXRlIiwiY3VyVG90YWxTdGF0ZSIsInJlYXNvblN0YXRlVXBkYXRlIiwicmVhc29uU3RhdGUiLCJnZXRJbml0aWFsU3RhdGUiLCJjb252ZXJ0ZWRSZWFzb25Qcm9wcyIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50IiwiY3VyUmVhc29uU3RhdGUiLCJfbCIsImFjYyIsImwkMSIsInJldmVyc2UiLCJhcnJheU9mTGlzdCIsInVuc3Vic2NyaWJlIiwidG9rZW4iLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJuZXdKc1Byb3BzIiwibmV3Q29udmVydGVkUmVhc29uUHJvcHMiLCJuZXdDb21wb25lbnQiLCJvbGRDb252ZXJ0ZWRSZWFzb25Qcm9wcyIsInByZXZSZWFzb25TdGF0ZSIsIm5ld1NlbGYiLCJvbGRTZWxmIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwibmV4dFByb3BzIiwibmV4dFN0YXRlIiwib2xkSnNQcm9wcyIsIm5leHRSZWFzb25TdGF0ZSIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCIkJHRoaXMiLCJvbGRDb21wb25lbnQiLCJzZXRTdGF0ZSIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIm5leHRKc1Byb3BzIiwiY3VySnNQcm9wcyIsInN1YnNjcmlwdGlvbiIsInRoaXNKcyIsImNhbGxiYWNrUGF5bG9hZCIsImFjdGlvbiIsInNpZGVFZmZlY3RzIiwicGFydGlhbFN0YXRlQXBwbGljYXRpb24iLCJuZXh0VG90YWxTdGF0ZSIsInBlcmZvcm1TaWRlRWZmZWN0cyIsInJlbmRlciIsImNyZWF0ZWQiLCJzdGF0ZWxlc3NDb21wb25lbnQiLCJzdGF0ZWxlc3NDb21wb25lbnRXaXRoUmV0YWluZWRQcm9wcyIsInJlZHVjZXJDb21wb25lbnQiLCJyZWR1Y2VyQ29tcG9uZW50V2l0aFJldGFpbmVkUHJvcHMiLCJkdW1teUludGVyb3BDb21wb25lbnQiLCJ1cmwiLCJyYXciLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwicmF3JDEiLCJzcGxpdCIsIl9pIiwiX3JlcyIsInJlcyIsInBhdGgiLCJoYXNoIiwic2VhcmNoIiwiQ2FsbGJhY2siLCJoYW5kbGVyT25lIiwiaGFuZGxlclR3byIsInBheWxvYWQiLCJSb3V0ZXIiLCJtYXRjaCQxIiwicHVzaFN0YXRlIiwiZGlzcGF0Y2hFdmVudCIsImV2ZW50TmFtZSIsIkV2ZW50IiwiJCRldmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50Iiwic2FmZU1ha2VFdmVudCIsIndhdGNoZXJJRCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZWxlbWVudCIsIiRzdGFyb3B0JHN0YXIiLCIkc3Rhcm9wdCRzdGFyJDEiLCJrZXkiLCJyZWYiLCJlbGVtZW50JDEiLCJ3cmFwUmVhc29uRm9ySnMiLCJjcmVhdGVEb21FbGVtZW50IiwidmFyYXJnIiwid3JhcEpzRm9yUmVhc29uIiwicmVhY3RDbGFzcyIsImpzRWxlbWVudFdyYXBwZWQiLCJwcm9wcyQxIiwiY2hpbGRyZW4kMSIsInZhcmFyZ3MiLCJhc3NpZ24iLCJkZWZhdWx0IiwicmVnZXgiLCJ0ZXN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInRhcmdldCIsInNvdXJjZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ2YWwiLCJUeXBlRXJyb3IiLCJ0b09iamVjdCIsImFyZ3VtZW50cyIsImNhbWxfaW50X2NvbXBhcmUiLCJ5IiwiY2FtbF9uYXRpdmVpbnRfY29tcGFyZSIsImNhbWxfaW50MzJfY29tcGFyZSIsImNhbWxfYm9vbF9jb21wYXJlIiwiY2FtbF9mbG9hdF9jb21wYXJlIiwiY2FtbF9zdHJpbmdfY29tcGFyZSIsInMxIiwiczIiLCJjYW1sX2Jvb2xfbWluIiwiY2FtbF9pbnRfbWluIiwiY2FtbF9mbG9hdF9taW4iLCJjYW1sX3N0cmluZ19taW4iLCJjYW1sX25hdGl2ZWludF9taW4iLCJjYW1sX2ludDMyX21pbiIsImNhbWxfYm9vbF9tYXgiLCJjYW1sX2ludF9tYXgiLCJjYW1sX2Zsb2F0X21heCIsImNhbWxfc3RyaW5nX21heCIsImNhbWxfbmF0aXZlaW50X21heCIsImNhbWxfaW50MzJfbWF4IiwiQ2FtbF9vYmoiLCJQZXJ2YXNpdmVzIiwiX2xlbiIsIl9wYXJhbSIsImxlbiIsInJldl9hcHBlbmQiLCJfbDEiLCJfbDIiLCJsMiIsImwxIiwiZmxhdHRlbiIsIiRhdCIsImZpbmRfYWxsIiwiX2FjY3UiLCJhY2N1IiwiY2hvcCIsIl9rIiwiayIsInN0YWJsZV9zb3J0IiwiY21wIiwic29ydCIsIngzIiwieDIiLCJ4MSIsIm1hdGNoJDIiLCJ4MiQxIiwieDEkMSIsIm4xIiwibjIiLCJyZXZfc29ydCIsImwyJDEiLCJoMiIsImgxIiwiYXBwZW5kIiwiZmlsdGVyIiwiZmFzdF9zb3J0IiwiaGQiLCJ0bCIsIm50aCIsIl9uIiwibiQxIiwicmV2IiwiaXRlciIsIml0ZXJpIiwiZiQxIiwibWFwaSIsInJldl9tYXAiLCJmb2xkX2xlZnQiLCJmb2xkX3JpZ2h0IiwiaXRlcjIiLCJtYXAyIiwicmV2X21hcDIiLCJsMSQxIiwiZm9sZF9sZWZ0MiIsImZvbGRfcmlnaHQyIiwiZm9yX2FsbCIsImV4aXN0cyIsImZvcl9hbGwyIiwiZXhpc3RzMiIsIm1lbSIsImNhbWxfZXF1YWwiLCJtZW1xIiwiZmluZCIsInBhcnRpdGlvbiIsIl95ZXMiLCJfbm8iLCJubyIsInllcyIsImFzc29jIiwiYXNzcSIsIm1lbV9hc3NvYyIsIm1lbV9hc3NxIiwicmVtb3ZlX2Fzc29jIiwicGFpciIsInJlbW92ZV9hc3NxIiwiY29tYmluZSIsInNvcnRfdW5pcSIsImMkMSIsImMkMiIsImMkMyIsImMkNCIsImMkNSIsImMkNiIsInQyIiwidDEiLCJjJDciLCJtZXJnZSIsIkxpc3QiLCIkJFN0cmluZyIsIkdsYW1vciIsIkpzX2RpY3QiLCJKc19vcHRpb24iLCJKc19tYXBwZXJSdCIsInNlcGFyYXRvciIsInN0cmluZ3MiLCJfYWNjIiwiX3N0cmluZ3MiLCJzdHJpbmdzJDEiLCJ4cyIsIm1ha2VEaWN0IiwicnVsZXNldCIsImZyb21MaXN0IiwicnVsZSIsInZhcmlhbnQiLCJmdW5jMSIsImFyZyIsImZ1bmMyIiwiYXJnJHByaW1lIiwiZnVuY0FueSIsInN0cmluZ19vZl9mbG9hdCIsInN0cmluZ19vZl9hbmdsZSIsInN0cmluZ19vZl9jb2xvciIsIm1hdGNoJDMiLCJzdHJpbmdfb2Zfc3RvcHMiLCJzdG9wcyIsInN0cmluZ19vZl9sZW5ndGgiLCJDYWxjIiwic3RyaW5nX29mX21hcmdpbiIsInN0cmluZ19vZl9kaW1lbnNpb24iLCJzdHJpbmdfb2ZfZGltZW5zaW9ucyIsImRpbWVuc2lvbnMiLCJzdHJpbmdfb2ZfYWxpZ24iLCJzdHJpbmdfb2ZfanVzdGlmeSIsInN0cmluZ19vZl9vdmVyZmxvdyIsInN0cmluZ19vZl9zaGFkb3ciLCJzdHJpbmdfb2ZfYm9yZGVyc3R5bGUiLCJzdHJpbmdfb2ZfbGlzdFN0eWxlVHlwZSIsInN0cmluZ19vZl9saXN0U3R5bGVQb3NpdGlvbiIsInN0cmluZ19vZl9saXN0U3R5bGVJbWFnZSIsInN0cmluZ19vZl9vdXRsaW5lU3R5bGUiLCJqc01hcHBlckNvbnN0YW50QXJyYXkiLCJzdHJpbmdfb2ZfdHJhbnNmb3JtIiwibWF0Y2gkNSIsIm1hdGNoJDQiLCJzdHJpbmdfb2ZfdGltaW5nRnVuY3Rpb24iLCJzdHJpbmdfb2ZfYW5pbWF0aW9uRGlyZWN0aW9uIiwic3RyaW5nX29mX2FuaW1hdGlvbkZpbGxNb2RlIiwic3RyaW5nX29mX2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50Iiwic3RyaW5nX29mX2FuaW1hdGlvblBsYXlTdGF0ZSIsInN0cmluZ19vZl9hbmltYXRpb24iLCJzZWxlY3RvciIsInNlbGVjdG9yJDEiLCJydWxlcyIsIiQkZGVmYXVsdCIsInVuc2FmZSIsIlNWRyIsImNvbG9yIiwib3BhY2l0eSIsImVtcHR5Iiwic3R5bGUiLCJjc3MiLCJ0b1N0cmluZyIsIiQkZ2xvYmFsIiwiZ2xvYmFsIiwiaW1wb3J0YW50IiwidiIsImxhYmVsIiwibGFiZWwkMSIsImRlZyIsInJhZCIsImdyYWQiLCJ0dXJuIiwicmdiIiwiZyIsInJnYmEiLCJoc2wiLCJoc2xhIiwiaGV4IiwidHJhbnNwYXJlbnQiLCJjdXJyZW50Q29sb3IiLCJsaW5lYXJHcmFkaWVudCIsImFuZ2xlIiwicmVwZWF0aW5nTGluZWFyR3JhZGllbnQiLCJyYWRpYWxHcmFkaWVudCIsInJlcGVhdGluZ1JhZGlhbEdyYWRpZW50IiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZXkiLCJkYXJrZ3JlZW4iLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JleSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmV5IiwibGlnaHRncmVlbiIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjaCIsImNtIiwiZW0iLCJleCIsImZyIiwibW0iLCJwY3QiLCJwdCIsInB4IiwicmVtIiwidmgiLCJ2bWF4Iiwidm1pbiIsInZ3IiwiemVybyIsInNpemUiLCJzb2xpZCIsImRvdHRlZCIsImRhc2hlZCIsImxvY2FsVXJsIiwibm9uZSIsImF1dG8iLCJoaWRkZW4iLCJ2aXNpYmxlIiwibG9jYWwiLCJzY3JvbGwiLCJwYWRkaW5nQm94IiwiYm9yZGVyQm94IiwiY29udGVudEJveCIsIm5vUmVwZWF0IiwicmVwZWF0IiwicmVwZWF0WCIsInJlcGVhdFkiLCJjb250YWluIiwiY292ZXIiLCJyb3ciLCJyb3dSZXZlcnNlIiwiY29sdW1uIiwiY29sdW1uUmV2ZXJzZSIsIndyYXAiLCJub3dyYXAiLCJ3cmFwUmV2ZXJzZSIsImZsZXhCb3giLCJncmlkIiwiaW5saW5lR3JpZCIsImJsb2NrIiwiaW5saW5lIiwiaW5saW5lQmxvY2siLCJpbmxpbmVGbGV4IiwiYWJzb2x1dGUiLCJyZWxhdGl2ZSIsIiQkc3RhdGljIiwiZml4ZWQiLCJzdGlja3kiLCJmbGV4U3RhcnQiLCJmbGV4RW5kIiwiY2VudGVyIiwic3RyZXRjaCIsInNwYWNlQmV0d2VlbiIsInNwYWNlQXJvdW5kIiwiYmFzZWxpbmUiLCJmb3J3YXJkcyIsImJhY2t3YXJkcyIsImJvdGgiLCJpbmZpbml0ZSIsImNvdW50IiwicGF1c2VkIiwicnVubmluZyIsImluc2lkZSIsIm91dHNpZGUiLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGUzZCIsInoiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJzY2FsZSIsInNjYWxlM2QiLCJzY2FsZVgiLCJzY2FsZVkiLCJzY2FsZVoiLCJyb3RhdGUiLCJyb3RhdGUzZCIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInNrZXciLCJza2V3WCIsInNrZXdZIiwiaXRhbGljIiwib2JsaXF1ZSIsInVuZGVybGluZSIsIm92ZXJsaW5lIiwibGluZVRocm91Z2giLCJjbGlwIiwiZWxsaXBzaXMiLCJ3YXZ5IiwiJCRkb3VibGUiLCJ1cHBlcmNhc2UiLCJsb3dlcmNhc2UiLCJjYXBpdGFsaXplIiwic3ViIiwiJCRzdXBlciIsInRleHRUb3AiLCJ0ZXh0Qm90dG9tIiwibWlkZGxlIiwibm9ybWFsIiwiYnJlYWtBbGwiLCJrZWVwQWxsIiwiYnJlYWtXb3JkIiwiYWx0ZXJuYXRlIiwiYWx0ZXJuYXRlUmV2ZXJzZSIsImZpbGwiLCJjb250ZW50IiwibWF4Q29udGVudCIsIm1pbkNvbnRlbnQiLCJmaXRDb250ZW50IiwiYWxsIiwidGV4dCIsImxpbmVhciIsImVhc2UiLCJlYXNlSW4iLCJlYXNlT3V0IiwiZWFzZUluT3V0Iiwic3RlcFN0YXJ0Iiwic3RlcEVuZCIsInN0ZXBzIiwiZGlyIiwiY3ViaWNCZXNpZXIiLCJyb3VuZCIsIm1pdGVyIiwiYmV2ZWwiLCJidXR0Iiwic3F1YXJlIiwiZGlzcGxheSIsInBvc2l0aW9uIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwiZmxleCIsImZsZXhHcm93IiwiZmxleFNocmluayIsImZsZXhCYXNpcyIsInRtcCIsImZsZXhEaXJlY3Rpb24iLCJmbGV4V3JhcCIsIm9yZGVyIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImdyaWRUZW1wbGF0ZVJvd3MiLCJncmlkQXV0b1Jvd3MiLCJncmlkQ29sdW1uIiwic3RhcnQiLCJlbmQkcHJpbWUiLCJncmlkUm93IiwiZ3JpZENvbHVtblN0YXJ0IiwiZ3JpZENvbHVtbkVuZCIsImdyaWRSb3dTdGFydCIsImdyaWRSb3dFbmQiLCJncmlkQ29sdW1uR2FwIiwiZ3JpZFJvd0dhcCIsImdyaWRHYXAiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJoZWlnaHQiLCJtaW5IZWlnaHQiLCJtYXhIZWlnaHQiLCJtYXJnaW4iLCJtYXJnaW4yIiwibWFyZ2luMyIsIm1hcmdpbjQiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJwYWRkaW5nIiwicGFkZGluZzIiLCJwYWRkaW5nMyIsInBhZGRpbmc0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsImFsaWduQ29udGVudCIsImFsaWduSXRlbXMiLCJhbGlnblNlbGYiLCJqdXN0aWZ5Q29udGVudCIsImJveFNpemluZyIsIiQkZmxvYXQiLCJjbGVhciIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiekluZGV4IiwiYmFja2ZhY2VWaXNpYmlsaXR5IiwidmlzaWJpbGl0eSIsImJvcmRlciIsImJvcmRlcldpZHRoIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyVG9wU3R5bGUiLCJib3JkZXJUb3BDb2xvciIsImJvcmRlckJvdHRvbSIsImJvcmRlckJvdHRvbVdpZHRoIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckxlZnQiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJMZWZ0U3R5bGUiLCJib3JkZXJMZWZ0Q29sb3IiLCJib3JkZXJSaWdodCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJSaWdodFN0eWxlIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlclJhZGl1cyIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsInRhYmxlTGF5b3V0IiwiYm9yZGVyQ29sbGFwc2UiLCJib3JkZXJTcGFjaW5nIiwiYm94U2hhZG93IiwiJHN0YXJvcHQkc3RhciQyIiwiJHN0YXJvcHQkc3RhciQzIiwiJHN0YXJvcHQkc3RhciQ0IiwiYmx1ciIsInNwcmVhZCIsImluc2V0IiwiYm94U2hhZG93cyIsInNoYWRvd3MiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZEltYWdlIiwiYmFja2dyb3VuZEF0dGFjaG1lbnQiLCJiYWNrZ3JvdW5kQ2xpcCIsImJhY2tncm91bmRPcmlnaW4iLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYmFja2dyb3VuZFNpemUiLCJjdXJzb3IiLCJjbGlwUGF0aCIsImxpc3RTdHlsZSIsInBvcyIsImltZyIsImxpc3RTdHlsZVR5cGUiLCJsaXN0U3R5bGVQb3NpdGlvbiIsImxpc3RTdHlsZUltYWdlIiwib3V0bGluZSIsIm91dGxpbmVTdHlsZSIsIm91dGxpbmVXaWR0aCIsIm91dGxpbmVDb2xvciIsIm91dGxpbmVPZmZzZXQiLCJwb2ludGVyRXZlbnRzIiwiZm9udEZhbWlseSIsImZvbnRGYWNlIiwiZm9udFN0eWxlIiwiZm9udFdlaWdodCIsImZvbnRTdHlsZSQxIiwiYmluYXJ5U2VhcmNoIiwiZm9udFNpemUiLCJmb250VmFyaWFudCIsImxldHRlclNwYWNpbmciLCJsaW5lSGVpZ2h0IiwidGV4dEFsaWduIiwidGV4dERlY29yYXRpb24iLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwidGV4dERlY29yYXRpb25TdHlsZSIsInRleHRJbmRlbnQiLCJ0ZXh0T3ZlcmZsb3ciLCJ0ZXh0U2hhZG93IiwidGV4dFRyYW5zZm9ybSIsInVzZXJTZWxlY3QiLCJ2ZXJ0aWNhbEFsaWduIiwid2hpdGVTcGFjZSIsIndvcmRCcmVhayIsIndvcmRTcGFjaW5nIiwid29yZFdyYXAiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1zIiwidHJhbnNmb3JtT3JpZ2luIiwidHJhbnNmb3JtT3JpZ2luM2QiLCJ0cmFuc2Zvcm1TdHlsZSIsInBlcnNwZWN0aXZlIiwicGVyc3BlY3RpdmVPcmlnaW4iLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJkZWxheSIsInRpbWluZ0Z1bmN0aW9uIiwidHJhbnNpdGlvbnMiLCJ0cmFuc2l0aW9uRGVsYXkiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24iLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJrZXlmcmFtZXMiLCJmcmFtZXMiLCJkaWN0IiwiYW5pbWF0aW9uIiwiJHN0YXJvcHQkc3RhciQ1IiwiJHN0YXJvcHQkc3RhciQ2IiwiZGlyZWN0aW9uIiwiZmlsbE1vZGUiLCJwbGF5U3RhdGUiLCJpdGVyYXRpb25Db3VudCIsImFuaW1hdGlvbnMiLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvbkRpcmVjdGlvbiIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uRmlsbE1vZGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFuaW1hdGlvbk5hbWUiLCJhbmltYXRpb25QbGF5U3RhdGUiLCJhbmltYXRpb25UaW1pbmdGdW5jdGlvbiIsImFmdGVyIiwiYmVmb3JlIiwiY2hlY2tlZCIsImRpcmVjdFNpYmxpbmciLCJkaXNhYmxlZCIsImZpcnN0Q2hpbGQiLCJmaXJzdE9mVHlwZSIsImZvY3VzIiwiaG92ZXIiLCJsYXN0Q2hpbGQiLCJsYXN0T2ZUeXBlIiwibGluayIsInJlYWRPbmx5IiwicmVxdWlyZWQiLCJ2aXNpdGVkIiwiZW5hYmxlZCIsIm5vQ29udGVudCIsImFueUxpbmsiLCJvbmx5Q2hpbGQiLCJvbmx5T2ZUeXBlIiwib3B0aW9uYWwiLCJpbnZhbGlkIiwib3V0T2ZSYW5nZSIsInNpYmxpbmdzIiwiZmlyc3RMaW5lIiwiZmlyc3RMZXR0ZXIiLCJzZWxlY3Rpb24iLCJwbGFjZWhvbGRlciIsIm1lZGlhIiwicXVlcnkiLCJKc19tYXRoIiwiQ2FtbF9wcmltaXRpdmUiLCJzd2FwVW5zYWZlIiwic2h1ZmZsZUluUGxhY2UiLCJpX2ZpbmlzaCIsInJhbmRvbV9pbnQiLCJtYWtlQnlVIiwiQXJyYXkiLCJtYWtlQnlBbmRTaHVmZmxlVSIsInUiLCJ6aXBCeVUiLCJ5cyIsImxlbngiLCJsZW55IiwiZm9yRWFjaFUiLCJtYXBVIiwia2VlcFUiLCJrZWVwTWFwVSIsImZvckVhY2hXaXRoSW5kZXhVIiwibWFwV2l0aEluZGV4VSIsInJlZHVjZVUiLCJyZWR1Y2VSZXZlcnNlVSIsInJlZHVjZVJldmVyc2UyVSIsImV2ZXJ5VSIsImFyciIsImFyciQxIiwiYiQxIiwibGVuJDEiLCJzb21lVSIsImV2ZXJ5QXV4MiIsImFycjEiLCJhcnIyIiwiZXZlcnkyVSIsInNvbWUyVSIsImVxVSIsImxlbmEiLCJjbXBVIiwibGVuYiIsImdldEV4biIsInNldEV4biIsInNodWZmbGUiLCJyZXZlcnNlSW5QbGFjZSIsInhzJDEiLCJtYWtlIiwicmFuZ2UiLCJmaW5pc2giLCJjdXQiLCJyYW5nZUJ5Iiwic3RlcCIsIm5iIiwiY3VyIiwibWFrZUJ5IiwibWFrZUJ5QW5kU2h1ZmZsZSIsInppcCIsInppcEJ5IiwiYTFhMiIsImkkMSIsImlfZmluaXNoJDEiLCJjb25jYXRNYW55IiwiYXJycyIsImxlbkFycnMiLCJ0b3RhbExlbiIsImpfZmluaXNoIiwia19maW5pc2giLCJvZmZzZXQiLCJvZnMiLCJoYXNMZW4iLCJjb3B5TGVuZ3RoIiwiZmlsbExlbmd0aCIsImJsaXQiLCJvZnMxIiwib2ZzMiIsImxlbmExIiwibGVuYTIiLCJzcmNvZnMxIiwic3Jjb2ZzMiIsImJsaXRMZW5ndGgiLCJqJDEiLCJibGl0VW5zYWZlIiwia2VlcCIsImtlZXBNYXAiLCJmb3JFYWNoV2l0aEluZGV4IiwibWFwV2l0aEluZGV4IiwicmVkdWNlIiwicmVkdWNlUmV2ZXJzZSIsInJlZHVjZVJldmVyc2UyIiwic29tZSIsImV2ZXJ5IiwiZXZlcnkyIiwic29tZTIiLCJlcSIsImNhbWxfYmxpdF9ieXRlcyIsImkxIiwiaTIiLCJzMSQxIiwiaTEkMSIsImkyJDEiLCJyYW5nZV9hIiwicmFuZ2VfYiIsInJhbmdlX2EkMSIsInJhbmdlX2IkMSIsInJhbmdlJDEiLCJvZmYxIiwiaSQyIiwiaV9maW5pc2gkMiIsImJ5dGVzX3RvX3N0cmluZyIsImJ5dGVzIiwic19sZW4iLCJuZXh0IiwidG1wX2J5dGVzIiwiYnl0ZXNfb2Zfc3RyaW5nIiwiY2hhckNvZGVBdCIsImNhbWxfaXNfcHJpbnRhYmxlIiwiY2FtbF9zdHJpbmdfb2ZfY2hhcl9hcnJheSIsImNoYXJzIiwiY2FtbF9zdHJpbmdfZ2V0IiwiY2FtbF9jcmVhdGVfc3RyaW5nIiwiY2FtbF9maWxsX3N0cmluZyIsImNhbWxfYmxpdF9zdHJpbmciLCJjYW1sX3N0cmluZ19nZXQxNiIsImNhbWxfc3RyaW5nX2dldDMyIiwic3RyaW5nX29mX2NoYXIiLCJwcmltIiwiY2FtbF9pbnQzMl9ic3dhcCIsImltdWwiLCJNYXRoIiwiY2FtbF9uYXRpdmVpbnRfYnN3YXAiLCJkaXYiLCJtb2RfIiwiY2FtbF9ic3dhcDE2IiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJCZWx0X0FycmF5IiwiQmVsdF9Tb3J0QXJyYXkiLCJjb3B5QXV4Q29udCIsIl9jZWxsWCIsIl9wcmVjIiwicHJlYyIsImNlbGxYIiwiY29weUF1eFdpdEZpbHRlciIsInQiLCJjb3B5QXV4V2l0RmlsdGVyTWFwIiwiY2VsbCIsImNvcHlBdXhXaXRoTWFwIiwiX2NlbGxZIiwiY2VsbFkiLCJjb3B5QXV4V2l0aE1hcDIiLCJjb3B5QXV4V2l0aE1hcEkiLCJoZWFkWCIsIl94IiwiZnJvbUFycmF5IiwiYSQxIiwidG9BcnJheSIsImZpbGxBdXgiLCJyZXZlcnNlQ29uY2F0IiwiZmxhdHRlbkF1eCIsIl94cyIsIm1hcFJldmVyc2VVIiwicmVkdWNlUmV2ZXJzZVVuc2FmZVUiLCJtYXBSZXZlcnNlMlUiLCJmb3JFYWNoMlUiLCJyZWR1Y2UyVSIsInJlZHVjZVJldmVyc2UyVW5zYWZlVSIsImhhc1UiLCJnZXRBc3NvY1UiLCJoYXNBc3NvY1UiLCJyZW1vdmVBc3NvY1UiLCJyZW1vdmVBc3NvY0F1eFdpdGhNYXAiLCJzZXRBc3NvY1UiLCJzZXRBc3NvY0F1eFdpdGhNYXAiLCJzb3J0VSIsInN0YWJsZVNvcnRJblBsYWNlQnlVIiwiZ2V0QnlVIiwicGFydGl0aW9uVSIsIm5leHRYIiwibmV4dFkiLCJfY2VsbCIsIl9wcmVjWCIsIl9wcmVjWSIsInByZWNZIiwicHJlY1giLCJwYXJ0aXRpb25BdXgiLCJvZkFycmF5IiwiaGVhZEV4biIsInRhaWwiLCJ0YWlsRXhuIiwiYWRkIiwieCQxIiwidiQxIiwiZHJvcCIsImxzdCIsInRha2UiLCJjZWxsJDEiLCJ0YWtlQXV4Iiwic3BsaXRBdCIsInJlc3QiLCJzcGxpdEF0QXV4IiwiemlwQXV4IiwibWFwUmV2ZXJzZSIsIm1hcFJldmVyc2UyIiwiZm9yRWFjaDIiLCJyZWR1Y2UyIiwiY21wQnlMZW5ndGgiLCJoYXMiLCJnZXRCeSIsInVuemlwIiwibmV4dEEiLCJuZXh0QiIsInNwbGl0QXV4IiwiZ2V0QXNzb2MiLCJoYXNBc3NvYyIsInJlbW92ZUFzc29jIiwic2V0QXNzb2MiLCJCZWx0X0xpc3QiLCJjYXJkVmFsdWUiLCJhZGRBY2VzIiwic3VtU29GYXIiLCJhY2VzIiwiY2FsY3VsYXRlSGFuZCIsImhhbmQiLCJub0FjZUhhbmQiLCJwcmltJDEiLCJlbmRfIiwic3VpdHMiLCJmYWNlQ2FyZHMiLCJzaW1wbGVDYXJkcyIsInN0eWxlcyIsImRlZmF1bHREZWNrIiwic3VpdCIsImNhbGN1bGF0ZVBheW91dCIsImdhbWUiLCJkZWFsSW5pdGlhbENhcmRzIiwicmVzdERlY2siLCJwbGF5ZXJIYW5kIiwiZGVhbGVySGFuZCIsImluaXRpYWxHYW1lU3RhdGUiLCJkZWFsdEdhbWVTdGF0ZV8wMDAiLCJkZWFsdEdhbWVTdGF0ZV8wMDMiLCJkZWFsdEdhbWVTdGF0ZV8wMDQiLCJydW5EZWFsZXJUdXJuIiwibmV3RGVhbGVySGFuZCIsImZpbmRXaW5uZXIiLCJib2FyZCIsInBsYXllclRvdGFsIiwiZGVhbGVyVG90YWwiLCJzdHlsZVRvU3RyaW5nIiwic3VpdFRvU3RyaW5nIiwiZmFjZUNhcmRWYWx1ZSIsImFjZUhpZ2hWYWx1ZSIsImFjZUxvd1ZhbHVlIiwibWF4VmFsdWUiLCJ0ZXN0SGFuZCIsImVtcHR5Qm9hcmQiLCJnYW1lU3RhdGVUb1N0cmluZyIsImRlYWxlckhpdFZhbHVlIiwiZGVhbGVyQ2FuUGxheSIsInJ1blBsYXllclR1cm4iLCJuZXdQbGF5ZXJIYW5kIiwiZ2FtZVJlc3VsdCIsImRlYWxlckdhbWUiLCJ3aW5uZXIiLCJjYW5IaXQiLCJjYW5TdGFuZCIsImNhbkRlYWwiLCJnZXRfaWQiLCJjYW1sX3NldF9vb19pZCIsImNyZWF0ZSIsInN0ciIsImlzQ2FtbEV4Y2VwdGlvbk9yT3BlblZhcmlhbnQiLCJzbG90IiwiX18iLCJfZXh0ZW5kcyIsIl9wcm9wVHlwZXMyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdDIiLCJfcmVhY3RMaWZlY3ljbGVzQ29tcGF0IiwiX0NoaWxkTWFwcGluZyIsIm9iaiIsInZhbHVlcyIsIlRyYW5zaXRpb25Hcm91cCIsImFueSIsIm5vZGUiLCJib29sIiwiZnVuYyIsIl9SZWFjdCRDb21wb25lbnQiLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsIl90aGlzIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImhhbmRsZUV4aXRlZCIsImJpbmQiLCJmaXJzdFJlbmRlciIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsImdldENoaWxkQ29udGV4dCIsInRyYW5zaXRpb25Hcm91cCIsImlzTW91bnRpbmciLCJhcHBlYXJlZCIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIl9yZWYiLCJwcmV2Q2hpbGRNYXBwaW5nIiwiZ2V0SW5pdGlhbENoaWxkTWFwcGluZyIsImdldE5leHRDaGlsZE1hcHBpbmciLCJjdXJyZW50Q2hpbGRNYXBwaW5nIiwiZ2V0Q2hpbGRNYXBwaW5nIiwib25FeGl0ZWQiLCJfcHJvcHMiLCJDb21wb25lbnQiLCJjaGlsZEZhY3RvcnkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJhcHBlYXIiLCJlbnRlciIsImNoaWxkQ29udGV4dFR5cGVzIiwiaXNSZXF1aXJlZCIsInByb3BUeXBlcyIsImRlZmF1bHRQcm9wcyIsInBvbHlmaWxsIiwiY2xhc3NOYW1lc1NoYXBlIiwidGltZW91dHNTaGFwZSIsInRyYW5zaXRpb25UaW1lb3V0IiwidHJhbnNpdGlvblR5cGUiLCJ0aW1lb3V0UHJvcE5hbWUiLCJlbmFibGVkUHJvcE5hbWUiLCJfcHJvcFR5cGVzIiwib25lT2ZUeXBlIiwibnVtYmVyIiwic2hhcGUiLCJzdHJpbmciLCJlbnRlckRvbmUiLCJlbnRlckFjdGl2ZSIsImV4aXREb25lIiwiZXhpdEFjdGl2ZSIsImNvbXBvbmVudFdpbGxNb3VudCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJpc1JlYWN0Q29tcG9uZW50IiwiZm91bmRXaWxsTW91bnROYW1lIiwiZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSIsImZvdW5kV2lsbFVwZGF0ZU5hbWUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudE5hbWUiLCJuZXdBcGlOYW1lIiwibWF5YmVTbmFwc2hvdCIsInNuYXBzaG90IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmciLCJFWElUSU5HIiwiRU5URVJFRCIsIkVOVEVSSU5HIiwiRVhJVEVEIiwiVU5NT1VOVEVEIiwiUHJvcFR5cGVzIiwibmV3T2JqIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVhY3REb20yIiwiVHJhbnNpdGlvbiIsInBhcmVudEdyb3VwIiwiaW5pdGlhbFN0YXR1cyIsImFwcGVhclN0YXR1cyIsImluIiwidW5tb3VudE9uRXhpdCIsIm1vdW50T25FbnRlciIsIm5leHRDYWxsYmFjayIsInVwZGF0ZVN0YXR1cyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsIm1vdW50aW5nIiwiZmluZERPTU5vZGUiLCJwZXJmb3JtRW50ZXIiLCJwZXJmb3JtRXhpdCIsIl90aGlzMiIsImFwcGVhcmluZyIsInRpbWVvdXRzIiwib25FbnRlciIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJvbkVudGVyZWQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJjYW5jZWwiLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczQiLCJldmVudCIsImhhbmRsZXIiLCJhZGRFbmRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJjaGlsZFByb3BzIiwiQ2hpbGRyZW4iLCJvbmx5IiwiY2xvbmVFbGVtZW50Iiwibm9vcCIsImNvbnRleHRUeXBlcyIsIkpzX2V4biIsIkNhbWxfZXhjZXB0aW9ucyIsIm1ha2VfbWF0cml4Iiwic3giLCJzeSIsImluaXQiLCJjYW1sX21ha2VfdmVjdCIsInhfZmluaXNoIiwiY29weSIsImNhbWxfYXJyYXlfYmxpdCIsIkJvdHRvbSIsInNyYzFvZnMiLCJzcmMxbGVuIiwic3JjMiIsInNyYzJvZnMiLCJzcmMybGVuIiwiZHN0IiwiZHN0b2ZzIiwic3JjMXIiLCJzcmMyciIsIl9pMSIsIl9zMSIsImNhbWxfYXJyYXlfZ2V0IiwiX2kyIiwiX3MyIiwiX2QiLCJjYW1sX2FycmF5X3NldCIsImlzb3J0dG8iLCJzcmNvZnMiLCJzb3J0dG8iLCJjcmVhdGVfbWF0cml4IiwiY2FtbF9hcnJheV9jb25jYXQiLCJ0b19saXN0Iiwib2ZfbGlzdCIsImxpc3RfbGVuZ3RoIiwibWF4c29uIiwiaTMxIiwidHJpY2tsZSIsImUkMSIsInJhd19leG4iLCJleG4iLCJpbnRlcm5hbFRvT0NhbWxFeGNlcHRpb24iLCJidWJibGUiLCJ0cmlja2xldXAiLCJmYXRoZXIiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwidmFsaWRhdGVGb3JtYXQiLCJmb3JtYXQiLCJjb25kaXRpb24iLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwid2FybmluZyIsInByb2Nlc3NTdHlsZU5hbWUiLCJjcmVhdGVNYXJrdXBGb3JTdHlsZXMiLCJzZXJpYWxpemVkIiwic3R5bGVOYW1lIiwiaXNDdXN0b21Qcm9wIiwic3R5bGVWYWx1ZSIsIl9kYW5nZXJvdXNTdHlsZVZhbHVlMiIsIl9oeXBoZW5hdGVTdHlsZU5hbWUyIiwiX21lbW9pemVTdHJpbmdPbmx5MiIsImNvbXBvc2UiLCIkIiwicHJlc2V0cyIsImluc2VydEdsb2JhbCIsImluc2VydFJ1bGUiLCJwbHVnaW5zIiwic3R5bGVTaGVldCIsInNwZWVkeSIsInNpbXVsYXRpb25zIiwiY2FuU2ltdWxhdGUiLCJzaW11bGF0ZSIsInBzZXVkb3MiLCJfa2V5IiwiX2NsZWFuMiIsIndhcm5lZDEiLCJpc0RldiIsImlzVGVzdCIsIndhcm5lZDIiLCJzaW1wbGUiLCJjc3NMYWJlbHMiLCJoYXNMYWJlbHMiLCJpc0xpa2VSdWxlIiwiaWRGb3IiLCJyZWh5ZHJhdGUiLCJpZHMiLCJfb2JqZWN0QXNzaWduMiIsImluc2VydGVkIiwiZmx1c2giLCJyZWdpc3RlcmVkIiwicnVsZUNhY2hlIiwiaW5qZWN0Iiwic2VsZWN0IiwiX2xlbjQiLCJfa2V5NCIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9sZW41IiwiX2tleTUiLCJwc2V1ZG8iLCJfZGVmYXVsdCIsImZpcnN0IiwiZnVsbHNjcmVlbiIsImluZGV0ZXJtaW5hdGUiLCJpblJhbmdlIiwicmVhZFdyaXRlIiwicm9vdCIsInNjb3BlIiwidmFsaWQiLCJsYW5nIiwibm90IiwidHJpbSIsIm50aENoaWxkIiwibnRoTGFzdENoaWxkIiwibnRoTGFzdE9mVHlwZSIsIm50aE9mVHlwZSIsImJhY2tkcm9wIiwiOjpwbGFjZWhvbGRlciIsImNzc0ZvciIsIl9sZW43IiwiX2tleTciLCJidWlsZCIsImRlY29uc3RydWN0ZWRTdHlsZVRvQ1NTIiwiaGFzaGlmeSIsImRlY29uc3RydWN0IiwiYXR0cmlic0ZvciIsIl9sZW44IiwiX2tleTgiLCJfc2hlZXQiLCJfQ1NTUHJvcGVydHlPcGVyYXRpb25zIiwiX3BsdWdpbnMiLCJfaGFzaDIiLCJTdHlsZVNoZWV0IiwiUGx1Z2luU2V0IiwicHJlZml4ZXMiLCJjb250ZW50V3JhcCIsImZhbGxiYWNrcyIsImlzQnJvd3NlciIsImNoYXIiLCJ0b0xvd2VyQ2FzZSIsInN0cmluZ2lmeSIsInRvUmV0IiwiZXhlYyIsInNlbGVjdG9yVG9rZW5pemVyIiwic3BsaXRTZWxlY3RvciIsImluZGljZXMiLCJpblBhcmVuIiwiaW5kZXgiLCJ1bnNoaWZ0IiwidG9DU1MiLCJwbGFpbiIsInNlbGVjdHMiLCJtZWRpYXMiLCJzdXBwb3J0cyIsInJlZ2lzdGVyIiwic3BlYyIsInRvUnVsZSIsImRlY29uc3RydWN0ZWQiLCJjc3NSdWxlIiwiaW5zZXJ0IiwicmV0Iiwiam9pblNlbGVjdG9ycyIsImFzIiwicHJlZml4ZWRQc2V1ZG9TZWxlY3RvcnMiLCI6ZnVsbHNjcmVlbiIsImRlc3QiLCJfcmVmMiIsIl9yZWYyJHNlbGVjdG9yIiwiX3JlZjIkbXEiLCJtcSIsIl9yZWYyJHN1cHAiLCJzdXBwIiwiX3JlZjIkc3JjIiwiaXNBcnJheSIsImluQXJyIiwiX3NyYyIsInJlZyIsIl9nZXRSZWdpc3RlcmVkIiwiY29tcG9zZXMiLCJwb3NzaWJsZXMiLCJmb3VuZCIsImlzU2VsZWN0b3IiLCJpc01lZGlhUXVlcnkiLCJzdWJzdHJpbmciLCJpc1N1cHBvcnRzIiwiam9pblN1cHBvcnRzIiwiX2Rlc3QiLCJfY3NzIiwibnVsbHJ1bGUiLCJpbnB1dENhY2hlcyIsIldlYWtNYXAiLCJ3YXJuZWRXZWFrTWFwRXJyb3IiLCJjYWNoZWRDc3MiLCJjb2kiLCJjdHIiLCJfY3RyIiwiX2NvaSIsIl9jb25zb2xlIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2xlbjIiLCJfa2V5MiIsImtmcyIsImlubmVyIiwia2YiLCJwcmVmaXgiLCJpbnNlcnRLZXlmcmFtZSIsImZvbnQiLCJpbnNlcnRGb250RmFjZSIsIm1vYmlsZSIsIk1vYmlsZSIsInBoYWJsZXQiLCJQaGFibGV0IiwidGFibGV0IiwiVGFibGV0IiwiZGVza3RvcCIsIkRlc2t0b3AiLCJIZCIsIl9sZW4zIiwiX2tleTMiLCJfbGVuNiIsIl9rZXk2IiwiUmFuZ2VFcnJvciIsInJwdCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiQ2FtbF9pbyIsIkNhbWxfc3lzIiwiQ2FtbF9mb3JtYXQiLCJDYW1sX3N0cmluZyIsIkNhbWxfbWlzc2luZ19wb2x5ZmlsbCIsIkNhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcyIsIkV4aXQiLCJ2YWxpZF9mbG9hdF9sZXhlbSIsInN0ZGluIiwic3Rkb3V0Iiwic3RkZXJyIiwib3Blbl9vdXRfZ2VuIiwiXyQyIiwiY2FtbF9tbF9vcGVuX2Rlc2NyaXB0b3Jfb3V0Iiwibm90X2ltcGxlbWVudGVkIiwiZmx1c2hfYWxsIiwiY2FtbF9tbF9vdXRfY2hhbm5lbHNfbGlzdCIsImNhbWxfbWxfZmx1c2giLCJvdXRwdXRfYnl0ZXMiLCJvYyIsImNhbWxfbWxfb3V0cHV0Iiwib3V0cHV0X3N0cmluZyIsIm9wZW5faW5fZ2VuIiwiY2FtbF9tbF9vcGVuX2Rlc2NyaXB0b3JfaW4iLCJ1bnNhZmVfcmVhbGx5X2lucHV0IiwiX29mcyIsInJlYWxseV9pbnB1dCIsImljIiwiaW5wdXRfbGluZSIsImNoYW4iLCJidWlsZF9yZXN1bHQiLCJidWYiLCJfcG9zIiwiY2FtbF9tbF9pbnB1dF9jaGFyIiwiYmVnIiwic2NhbiIsImV4aXRfZnVuY3Rpb24iLCJkb19hdF9leGl0Iiwib3V0cHV0X2NoYXIiLCJjYW1sX21sX291dHB1dF9jaGFyIiwib3V0cHV0X2J5dGUiLCJpbnB1dF9jaGFyIiwiaW5wdXRfYnl0ZSIsIkxhcmdlRmlsZSIsImludmFsaWRfYXJnIiwiZmFpbHdpdGgiLCJhYnMiLCJtYXhfaW50IiwibWluX2ludCIsImxub3QiLCJlcHNpbG9uX2Zsb2F0IiwiY2hhcl9vZl9pbnQiLCJzdHJpbmdfb2ZfYm9vbCIsImJvb2xfb2Zfc3RyaW5nIiwiY2FtbF9mb3JtYXRfZmxvYXQiLCJwcmludF9jaGFyIiwicHJpbnRfc3RyaW5nIiwicHJpbnRfYnl0ZXMiLCJwcmludF9pbnQiLCJwcmludF9mbG9hdCIsInByaW50X25ld2xpbmUiLCJwcmVycl9jaGFyIiwicHJlcnJfc3RyaW5nIiwicHJlcnJfYnl0ZXMiLCJwcmVycl9pbnQiLCJwcmVycl9mbG9hdCIsInByZXJyX25ld2xpbmUiLCJyZWFkX2xpbmUiLCJyZWFkX2ludCIsImNhbWxfaW50X29mX3N0cmluZyIsInJlYWRfZmxvYXQiLCJjYW1sX2Zsb2F0X29mX3N0cmluZyIsIm9wZW5fb3V0Iiwib3Blbl9vdXRfYmluIiwib3V0cHV0Iiwib3V0cHV0X3N1YnN0cmluZyIsIm91dHB1dF9iaW5hcnlfaW50Iiwib3V0cHV0X3ZhbHVlIiwic2Vla19vdXQiLCJwb3Nfb3V0Iiwib3V0X2NoYW5uZWxfbGVuZ3RoIiwiY2xvc2Vfb3V0IiwiY2xvc2Vfb3V0X25vZXJyIiwiZXhuJDEiLCJzZXRfYmluYXJ5X21vZGVfb3V0Iiwib3Blbl9pbiIsIm9wZW5faW5fYmluIiwiaW5wdXQiLCJyZWFsbHlfaW5wdXRfc3RyaW5nIiwiaW5wdXRfYmluYXJ5X2ludCIsImlucHV0X3ZhbHVlIiwic2Vla19pbiIsInBvc19pbiIsImluX2NoYW5uZWxfbGVuZ3RoIiwiY2xvc2VfaW4iLCJjbG9zZV9pbl9ub2VyciIsInNldF9iaW5hcnlfbW9kZV9pbiIsInN0cmluZ19vZl9mb3JtYXQiLCIkY2FyZXQkY2FyZXQiLCJjb25jYXRfZm10IiwicmV0Y29kZSIsImNhbWxfc3lzX2V4aXQiLCJhdF9leGl0IiwiQmxvY2siLCJmb3JfaW4iLCJmb28iLCJjYW1sX2NvbXBhcmUiLCJfYSIsIl9iIiwiYV90eXBlIiwiYl90eXBlIiwiaXNfYl9udW1iZXIiLCJ0YWdfYSIsInRhZ19iIiwibGVuX2EiLCJsZW5fYiIsImEkMiIsImIkMiIsIm1pbl9rZXlfbGhzIiwibWluX2tleV9yaHMiLCJkb19rZXkiLCJtaW5fa2V5IiwiZG9fa2V5X2EiLCJwYXJ0aWFsX2FyZyIsImRvX2tleV9iIiwicGFydGlhbF9hcmckMSIsInNhbWVfbGVuZ3RoIiwiYSQzIiwiYiQzIiwiX2kkMSIsInNob3J0X2xlbmd0aCIsInJlcyQxIiwiYSQ0IiwiYiQ0IiwiX2kkMiIsInNob3J0X2xlbmd0aCQxIiwicmVzJDIiLCJjYW1sX29ial9ibG9jayIsImNhbWxfb2JqX2R1cCIsImNhbWxfb2JqX3RydW5jYXRlIiwibmV3X3NpemUiLCJjYW1sX2xhenlfbWFrZV9mb3J3YXJkIiwiY2FtbF91cGRhdGVfZHVtbXkiLCJ5X3RhZyIsImNhbWxfZXF1YWxfbnVsbCIsImNhbWxfZXF1YWxfdW5kZWZpbmVkIiwiY2FtbF9lcXVhbF9udWxsYWJsZSIsImNhbWxfbm90ZXF1YWwiLCJjYW1sX2dyZWF0ZXJlcXVhbCIsImNhbWxfZ3JlYXRlcnRoYW4iLCJjYW1sX2xlc3N0aGFuIiwiY2FtbF9sZXNzZXF1YWwiLCJjYW1sX21pbiIsImNhbWxfbWF4IiwiY2FtbF9hcnJheV9kdXAiLCJjYW1sX21ha2VfZmxvYXRfdmVjdCIsIm5ld3ZhbCIsIlJlYWN0RG9tIiwiU3R5bGUiLCJyZW5kZXJUb0VsZW1lbnRXaXRoQ2xhc3NOYW1lIiwicmVhY3RFbGVtZW50IiwiY2xhc3NOYW1lIiwiZWxlbWVudHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicmVuZGVyVG9FbGVtZW50V2l0aElkIiwiZ2V0RWxlbWVudEJ5SWQiLCJoeWRyYXRlVG9FbGVtZW50V2l0aENsYXNzTmFtZSIsImh5ZHJhdGUiLCJoeWRyYXRlVG9FbGVtZW50V2l0aElkIiwiJCRBcnJheSIsIkNzcyIsIkxvZ2ljIiwidG9vbEJhciIsInRvb2xCYXJSb3ciLCJ0b29sQmFySXRlbSIsInRvcFN0eWxlIiwibWlkZGxlU3R5bGUiLCJib3R0b21TdHlsZSIsIlN0eWxlcyIsIm9uQ2xpY2siLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsInJlZnMiLCJwYXJ0cyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibGlzdCIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0Iiwic291cmNlTWFwIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwibm9uY2UiLCJuYyIsImdldE5vbmNlIiwiYWRkQXR0cnMiLCJlbCIsInNldEF0dHJpYnV0ZSIsInJlbW92ZSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImJ0b2EiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImhtciIsImxvY2FscyIsIl9fV0VCUEFDS19PVVREQVRFRF9ERVBFTkRFTkNJRVNfXyIsIm5ld0NvbnRlbnQiLCJtZXJnZUNoaWxkTWFwcGluZ3MiLCJfcmVhY3QiLCJnZXRQcm9wIiwibmV4dENoaWxkTWFwcGluZyIsImlzVmFsaWRFbGVtZW50IiwiaGFzUHJldiIsImhhc05leHQiLCJwcmV2Q2hpbGQiLCJpc0xlYXZpbmciLCJtYXBGbiIsIm1hcHBlciIsInByZXYiLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsInByb3AiLCJfcmVhY3REb20iLCJfVHJhbnNpdGlvbkdyb3VwMiIsIlJlcGxhY2VUcmFuc2l0aW9uIiwiX3RlbXAiLCJfaW5pdGlhbGlzZVByb3BzIiwiaGFuZGxlTGlmZWN5Y2xlIiwib3JpZ2luYWxBcmdzIiwiX2NoaWxkJHByb3BzIiwiaW5Qcm9wIiwiX1JlYWN0JENoaWxkcmVuJHRvQXJyIiwic2Vjb25kIiwiaGFuZGxlRW50ZXIiLCJoYW5kbGVFbnRlcmluZyIsImhhbmRsZUVudGVyZWQiLCJoYW5kbGVFeGl0IiwiaGFuZGxlRXhpdGluZyIsImRlZmF1bHRWaWV3Iiwib3duZXJEb2N1bWVudCIsIk5vZGUiLCJub2RlVHlwZSIsIm5vZGVOYW1lIiwiaXNOb2RlIiwiaXNUZXh0Tm9kZSIsImNvbnRhaW5zTm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJpcyIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImRvYyIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiY2FuVXNlRE9NIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJhdHRhY2hFdmVudCIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsImJhIiwiZWEiLCJBIiwiQyIsImZhIiwiaGEiLCJqYSIsImthIiwiRCIsIkUiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsIm9hIiwicGEiLCJxYSIsInJhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJzYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidGEiLCJyZWdpc3RyYXRpb25OYW1lIiwidWEiLCJ2YSIsImRlcGVuZGVuY2llcyIsIndhIiwieGEiLCJDYSIsImZyZWV6ZSIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJjdXJyZW50VGFyZ2V0IiwiSGEiLCJJYSIsIkphIiwiS2EiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJMYSIsIk1hIiwiTmEiLCJPYSIsInN0YXRlTm9kZSIsIlBhIiwiUWEiLCJSYSIsImluamVjdGlvbiIsImdldExpc3RlbmVyIiwicnVuRXZlbnRzSW5CYXRjaCIsInJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2giLCJTYSIsInJhbmRvbSIsIkYiLCJUYSIsIlVhIiwiVmEiLCJYYSIsImJiIiwicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJMIiwiZGIiLCJkaXNwYXRjaENvbmZpZyIsImViIiwiX3RhcmdldEluc3QiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImxiIiwibWIiLCJkb2N1bWVudEVsZW1lbnQiLCJNIiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm9iIiwicGIiLCJxYiIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJkZWZhdWx0UHJldmVudGVkIiwiaXNUcnVzdGVkIiwiTiIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJzYiIsImV2ZW50UG9vbCIsInRiIiwiZGVzdHJ1Y3RvciIsInJiIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXh0ZW5kIiwidWIiLCJ2YiIsIndiIiwieGIiLCJ5YiIsImRvY3VtZW50TW9kZSIsInpiIiwiQWIiLCJCYiIsIktiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIkxiIiwiTWIiLCJrZXlDb2RlIiwiTmIiLCJkZXRhaWwiLCJPYiIsIlJiIiwid2hpY2giLCJQYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiUWIiLCJTYiIsIlRiIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsIlViIiwiVmIiLCJXYiIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJYYiIsIlliIiwiWmIiLCIkYiIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJ0ZWwiLCJ0aW1lIiwid2VlayIsImdjIiwiaGMiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsImpjIiwibGMiLCJfdmFsdWVUcmFja2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsImtjIiwibWMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiTyIsIlN5bWJvbCIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiaXRlcmF0b3IiLCJ6YyIsIkFjIiwiJCR0eXBlb2YiLCJCYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiQ2MiLCJEYyIsIkVjIiwiVSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJWIiwiU2MiLCJUYyIsIlVjIiwiR2MiLCJpc05hTiIsIkhjIiwiRmMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIlZjIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJXYyIsIlhjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIlljIiwiWmMiLCIkYyIsImFkIiwidGFiSW5kZXgiLCJiZCIsImNoYW5nZSIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJqZCIsImRldGFjaEV2ZW50Iiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsInBkIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsInFkIiwidmlldyIsInJkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsInNkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInRkIiwidWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInNyY0VsZW1lbnQiLCJ0b0VsZW1lbnQiLCJ2ZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwid2QiLCJwYXJlbnRXaW5kb3ciLCJ4ZCIsImVmZmVjdFRhZyIsInlkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsInpkIiwiQWQiLCJzaWJsaW5nIiwiY3VycmVudCIsIkJkIiwiRGQiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJFZCIsImNsaXBib2FyZERhdGEiLCJGZCIsIkdkIiwiY2hhckNvZGUiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiSWQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiSmQiLCJsb2NhbGUiLCJLZCIsImRhdGFUcmFuc2ZlciIsIkxkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIk1kIiwiTmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIk9kIiwiUGQiLCJRZCIsImlzSW50ZXJhY3RpdmUiLCJSZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIlNkIiwiVGQiLCJVZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiVmQiLCJXZCIsIlciLCJYZCIsIllkIiwiWmQiLCIkZCIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImFlIiwiYmUiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJjZSIsImRlIiwiZWUiLCJmZSIsInRvcEFuaW1hdGlvbkVuZCIsInRvcEFuaW1hdGlvbkl0ZXJhdGlvbiIsInRvcEFuaW1hdGlvblN0YXJ0IiwidG9wQmx1ciIsInRvcENhbmNlbCIsInRvcENoYW5nZSIsInRvcENsaWNrIiwidG9wQ2xvc2UiLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcEZvY3VzIiwidG9wSW5wdXQiLCJ0b3BLZXlEb3duIiwidG9wS2V5UHJlc3MiLCJ0b3BLZXlVcCIsInRvcExvYWQiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFNjcm9sbCIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFRleHRJbnB1dCIsInRvcFRvZ2dsZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFdoZWVsIiwiZ2UiLCJ0b3BBYm9ydCIsInRvcENhblBsYXkiLCJ0b3BDYW5QbGF5VGhyb3VnaCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BQYXVzZSIsInRvcFBsYXkiLCJ0b3BQbGF5aW5nIiwidG9wUHJvZ3Jlc3MiLCJ0b3BSYXRlQ2hhbmdlIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFN0YWxsZWQiLCJ0b3BTdXNwZW5kIiwidG9wVGltZVVwZGF0ZSIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwidGV4dENvbnRlbnQiLCJuZSIsImNvbnRlbnRFZGl0YWJsZSIsIm9lIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJ2ZSIsIm9uU2VsZWN0IiwieGUiLCJwZW5kaW5nUHJvcHMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibW9kZSIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJleHBpcmF0aW9uVGltZSIsInplIiwiQWUiLCJCZSIsIkNlIiwiRGUiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJFZSIsIkZlIiwiR2UiLCJJZSIsIkplIiwiS2UiLCJiYXNlU3RhdGUiLCJsYXN0IiwiY2FsbGJhY2tMaXN0IiwiaGFzRm9yY2VVcGRhdGUiLCJpc0luaXRpYWxpemVkIiwiY2FwdHVyZWRWYWx1ZXMiLCJMZSIsIlNldCIsIk1lIiwiTmUiLCJPZSIsIlBlIiwiUWUiLCJwYXJ0aWFsU3RhdGUiLCJSZSIsImlzUmVwbGFjZSIsImlzRm9yY2VkIiwiY2FwdHVyZWRWYWx1ZSIsIlNlIiwiVWUiLCJWZSIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJXZSIsIlhlIiwiTWFwIiwiQiIsInEiLCJRIiwiZG9uZSIsIkgiLCJZZSIsIlplIiwiJGUiLCJwZW5kaW5nQ29udGV4dCIsIlkiLCJzaG91bGRTZXRUZXh0Q29udGVudCIsInNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUiLCJwdXNoSG9zdENvbnRleHQiLCJwdXNoSG9zdENvbnRhaW5lciIsIkciLCJwdXNoUHJvdmlkZXIiLCJSIiwiZ2V0TWFza2VkQ29udGV4dCIsIlMiLCJnZXRVbm1hc2tlZENvbnRleHQiLCJoYXNDb250ZXh0Q2hhbmdlZCIsInB1c2hDb250ZXh0UHJvdmlkZXIiLCJwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0IiwiaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlciIsImVudGVySHlkcmF0aW9uU3RhdGUiLCJXYSIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJDYiIsInRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiSmMiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInVwZGF0ZXIiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiY2FjaGVDb250ZXh0IiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc01vdW50ZWQiLCJlbnF1ZXVlU2V0U3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJhZG9wdENsYXNzSW5zdGFuY2UiLCJjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29uc3RydWN0Q2xhc3NJbnN0YW5jZSIsIm1vdW50Q2xhc3NJbnN0YW5jZSIsInJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSIsInVwZGF0ZUNsYXNzSW5zdGFuY2UiLCJUZSIsIktjIiwiTGMiLCJEYiIsIk1jIiwiRWIiLCJiZWdpbldvcmsiLCJfY29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJjZiIsInN0YWNrIiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsImVmIiwibGYiLCJJIiwiWWEiLCJaIiwiTmMiLCJ5YSIsImNhIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiT2MiLCJaYSIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsImNvbXBvbmVudERpZENhdGNoIiwiaWEiLCJ6YSIsImRhIiwiRmIiLCJ4ZyIsInllIiwiSWMiLCJQYyIsIkdiIiwibWciLCJRYyIsImxnIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsIksiLCJsYSIsIlQiLCJKIiwiSGIiLCJhYSIsIlAiLCIkYSIsIkliIiwiQWEiLCJfb25Db21wbGV0ZSIsIndnIiwiQmEiLCJKYiIsImZpbmlzaGVkV29yayIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJ6ZyIsInciLCJhYiIsImtnIiwid2UiLCJnZyIsIkFnIiwiaGciLCJpZyIsImpnIiwidGltZVJlbWFpbmluZyIsIkJnIiwiY3JlYXRlQ3Vyc29yIiwiaXNFbXB0eSIsImNoZWNrVGhhdFN0YWNrSXNFbXB0eSIsInJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldiIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwiZmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciIsInBvcENvbnRleHRQcm92aWRlciIsInBvcFRvcExldmVsQ29udGV4dE9iamVjdCIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0IiwiaGYiLCJwb3BQcm92aWRlciIsImpmIiwiaHlkcmF0aW9uIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwicG9wSHlkcmF0aW9uU3RhdGUiLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2YiLCJjcmVhdGVJbnN0YW5jZSIsImNyZWF0ZVRleHRJbnN0YW5jZSIsImFwcGVuZEluaXRpYWxDaGlsZCIsImZpbmFsaXplSW5pdGlhbENoaWxkcmVuIiwicHJlcGFyZVVwZGF0ZSIsInBlcnNpc3RlbmNlIiwibXV0YXRpb24iLCJjb21wbGV0ZVdvcmsiLCJhZiIsInRocm93RXhjZXB0aW9uIiwidW53aW5kV29yayIsInVud2luZEludGVycnVwdGVkV29yayIsImJmIiwiZ2V0UHVibGljSW5zdGFuY2UiLCJjb21taXRNb3VudCIsImNvbW1pdFVwZGF0ZSIsInJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRUZXh0VXBkYXRlIiwiYXBwZW5kQ2hpbGRUb0NvbnRhaW5lciIsImluc2VydEluQ29udGFpbmVyQmVmb3JlIiwicmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyIiwiY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJjb21taXRSZXNldFRleHRDb250ZW50IiwiY29tbWl0UGxhY2VtZW50IiwiY29tbWl0RGVsZXRpb24iLCJjb21taXRXb3JrIiwiY29tbWl0TGlmZUN5Y2xlcyIsImNvbW1pdEVycm9yTG9nZ2luZyIsImNvbXBvbmVudFN0YWNrIiwiY29tbWl0QXR0YWNoUmVmIiwiY29tbWl0RGV0YWNoUmVmIiwiZGYiLCJzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2siLCJjYW5jZWxEZWZlcnJlZENhbGxiYWNrIiwicHJlcGFyZUZvckNvbW1pdCIsInJlc2V0QWZ0ZXJDb21taXQiLCJSYyIsInJlY2FsY3VsYXRlQ3VycmVudFRpbWUiLCJjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyIiwic2NoZWR1bGVXb3JrIiwicmVxdWVzdFdvcmsiLCJmbHVzaFJvb3QiLCJiYXRjaGVkVXBkYXRlcyIsInVuYmF0Y2hlZFVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJmbHVzaENvbnRyb2xsZWQiLCJkZWZlcnJlZFVwZGF0ZXMiLCJzeW5jVXBkYXRlcyIsImludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzIiwiY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbiIsImxlZ2FjeUNvbnRleHQiLCJtZiIsImNyZWF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUiLCJnZXRQdWJsaWNSb290SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJDZCIsImluamVjdEludG9EZXZUb29scyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiSGUiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsIm5mIiwib2YiLCJwZiIsInJmIiwicGVyZm9ybWFuY2UiLCJzZiIsInRmIiwidWYiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsImRpZFRpbWVvdXQiLCJEZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkVmIiwicG9zdE1lc3NhZ2UiLCJJbmZpbml0eSIsIkdmIiwiRmYiLCJIZiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiSWYiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiSmYiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIktmIiwiTGYiLCJNZiIsIk5mIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsIk9mIiwiUGYiLCJRZiIsIlJmIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIlNmIiwibm9kZVZhbHVlIiwiVGYiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXhQb3NpdGl2ZSIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3dTcGFuIiwiZ3JpZENvbHVtblNwYW4iLCJsaW5lQ2xhbXAiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJVZiIsIlZmIiwic2V0UHJvcGVydHkiLCJXZiIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImtleWdlbiIsIm1ldGEiLCJ0cmFjayIsIndiciIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJjcmVhdGVFbGVtZW50TlMiLCJiZyIsImNnIiwiX19odG1sIiwib25jbGljayIsImRnIiwiZWciLCJmZyIsIm5nIiwib2ciLCJzZXRJbml0aWFsUHJvcGVydGllcyIsImRpZmZQcm9wZXJ0aWVzIiwidXBkYXRlUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRUZXh0Iiwid2FybkZvclVubWF0Y2hlZFRleHQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwicGciLCJxZyIsInJnIiwiWCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsInNnIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsInRnIiwiX2ludGVybmFsUm9vdCIsInVnIiwidmciLCJhdXRvRm9jdXMiLCJjb21taXQiLCJ1bm1vdW50IiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY3JlYXRlQmF0Y2giLCJ0YWdOYW1lIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJtaW4iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UiLCJDZyIsIkVnIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsIkRnIiwiRmciLCJxZiIsIkdnIiwiY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiSGciLCJJZyIsInJlcGxhY2VDbGFzc05hbWUiLCJvcmlnQ2xhc3MiLCJjbGFzc1RvUmVtb3ZlIiwiUmVnRXhwIiwiY2xhc3NMaXN0IiwiYmFzZVZhbCIsIl9oYXNDbGFzczIiLCJfaGFzQ2xhc3MiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJwcm9wTmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsInN5bWJvbCIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJfYWRkQ2xhc3MyIiwiX3JlbW92ZUNsYXNzMiIsIl9UcmFuc2l0aW9uMiIsIl9Qcm9wVHlwZXMiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJyZW1vdmVDbGFzcyIsIkNTU1RyYW5zaXRpb24iLCJjbGFzc05hbWVzIiwiZ2V0Q2xhc3NOYW1lcyIsInJlbW92ZUNsYXNzZXMiLCJhY3RpdmVDbGFzc05hbWUiLCJyZWZsb3dBbmRBZGRDbGFzcyIsImRvbmVDbGFzc05hbWUiLCJfZ2V0Q2xhc3NOYW1lcyIsIl9DU1NUcmFuc2l0aW9uMiIsIl9SZXBsYWNlVHJhbnNpdGlvbjIiLCJSZWFzb25SZWFjdCIsIlJlYWN0VHJhbnNpdGlvbkdyb3VwIiwic2hvdyIsInN0YXRlT2ZTdHJpbmciLCJpbl8iLCJzdHJTdGF0ZSIsInN0cmljdGx5U29ydGVkTGVuZ3RoVSIsImx0IiwieDAiLCJzb3J0ZWRMZW5ndGhBdXhNb3JlIiwibHQkMSIsImlzU29ydGVkVSIsImNtcCQxIiwibGFzdF9ib3VuZCIsInVuaW9uVSIsImQkMSIsImkxJDIiLCJkJDIiLCJpMiQyIiwiZCQzIiwiaW50ZXJzZWN0VSIsImRpZmZVIiwiaW5zZXJ0aW9uU29ydCIsInNvcnRUbyIsInN0YWJsZVNvcnRCeVUiLCJiaW5hcnlTZWFyY2hCeVUiLCJzb3J0ZWQiLCJfbG8iLCJfaGkiLCJrZXkkMSIsImhpJDEiLCJsbyQxIiwibWlkIiwiSW50Iiwic3RyaWN0bHlTb3J0ZWRMZW5ndGgiLCJpc1NvcnRlZCIsInN0YWJsZVNvcnRJblBsYWNlQnkiLCJzdGFibGVTb3J0QnkiLCJiaW5hcnlTZWFyY2hCeSIsInVuaW9uIiwiaW50ZXJzZWN0IiwiZGlmZiIsImVxdWFsIiwibWF4IiwiSnNfaW50IiwiY2VpbF9pbnQiLCJjZWlsIiwiZmxvb3JfaW50IiwiZmxvb3IiLCJ1bnNhZmVfY2VpbCIsInVuc2FmZV9mbG9vciIsIiQkRXJyb3IiLCJyYWlzZUVycm9yIiwicmFpc2VFdmFsRXJyb3IiLCJFdmFsRXJyb3IiLCJyYWlzZVJhbmdlRXJyb3IiLCJyYWlzZVJlZmVyZW5jZUVycm9yIiwicmFpc2VTeW50YXhFcnJvciIsIlN5bnRheEVycm9yIiwicmFpc2VUeXBlRXJyb3IiLCJyYWlzZVVyaUVycm9yIiwiVVJJRXJyb3IiLCJfYXNzaWduIiwiZW1wdHlPYmplY3QiLCJNSVhJTlNfS0VZIiwiZmFjdG9yeSIsIlJlYWN0Q29tcG9uZW50IiwiUmVhY3ROb29wVXBkYXRlUXVldWUiLCJpbmplY3RlZE1peGlucyIsIlJlYWN0Q2xhc3NJbnRlcmZhY2UiLCJtaXhpbnMiLCJzdGF0aWNzIiwiZ2V0RGVmYXVsdFByb3BzIiwidXBkYXRlQ29tcG9uZW50IiwiUkVTRVJWRURfU1BFQ19LRVlTIiwibWl4U3BlY0ludG9Db21wb25lbnQiLCJjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbiIsIm1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50IiwiYXV0b2JpbmQiLCJ2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlIiwiaXNBbHJlYWR5RGVmaW5lZCIsIlJlYWN0Q2xhc3NNaXhpbiIsInByb3RvIiwiYXV0b0JpbmRQYWlycyIsIl9fcmVhY3RBdXRvQmluZFBhaXJzIiwiaXNSZWFjdENsYXNzTWV0aG9kIiwic3BlY1BvbGljeSIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsIm1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMiLCJvbmUiLCJ0d28iLCJiaW5kQXV0b0JpbmRNZXRob2QiLCJtZXRob2QiLCJJc01vdW50ZWRQcmVNaXhpbiIsIl9faXNNb3VudGVkIiwiSXNNb3VudGVkUG9zdE1peGluIiwicmVwbGFjZVN0YXRlIiwibmV3U3RhdGUiLCJSZWFjdENsYXNzQ29tcG9uZW50IiwicGFpcnMiLCJhdXRvQmluZEtleSIsImJpbmRBdXRvQmluZE1ldGhvZHMiLCJpbml0aWFsU3RhdGUiLCJtZXRob2ROYW1lIiwicmVhY3ROb29wVXBkYXRlUXVldWUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwia2V5UHJlZml4IiwiPSIsIjoiLCJlc2NhcGUiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9kZWZhdWx0VmFsdWUiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiZm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsInVuc3RhYmxlX0FzeW5jTW9kZSIsImNyZWF0ZUZhY3RvcnkiLCJjYXJkIiwiY2FyZEZsaXBwZWQiLCJjYXJkVW5GbGlwcGVkIiwic3VpdFRvU3ltYm9sIiwiY2FyZFN0eWxlIiwiZmxpcHBlZCIsIkNhcmQiLCJoYW5kJDEiLCJoaWRlU2Vjb25kQ2FyZCIsInNob3VsZEZsaXAiLCJIYW5kIiwic2hvdWxkSGlkZURlYWxlckNhcmQiLCJnYW1lU3RhdGUiLCJ1cHBlciIsIl9sb3dlciIsIl91cHBlciIsInVwcGVyJDEiLCJsb3dlciIsInJldlNlYXJjaCIsInJldlNlYXJjaEFzc2VydCIsInRvSW50IiwiZnJvbUludCIsIiQkZW51bSIsIiQkZW51bSQxIiwiZnJvbUludEFzc2VydCIsImdldFdpdGhEZWZhdWx0IiwiaXNTb21lIiwiaXNTb21lVmFsdWUiLCJpc05vbmUiLCJhbmRUaGVuIiwiZmlyc3RTb21lIiwidW5zYWZlRGVsZXRlS2V5IiwiZW50cmllcyIsInZhbHVlcyQxIiwiVUludDMyIiwiVUludDE2IiwiVW11bDMyIiwic2VlZCIsImN1cnJlbnRJbmRleCIsInVwcGVyY2FzZVBhdHRlcm4iLCJtc1BhdHRlcm4iLCJjYWNoZSIsIl9oeXBoZW5hdGVTdHlsZU5hbWUiLCJwcm9wZXJ0eVByZWZpeE1hcCIsInByb3BlcnRpZXMiLCJvdXRwdXRWYWx1ZSIsIl9pc1ByZWZpeGVkVmFsdWUyIiwibXVsdGlwbGVWYWx1ZXMiLCJzaW5nbGVWYWx1ZSIsImRhc2hDYXNlUHJvcGVydHkiLCJfaHlwaGVuYXRlUHJvcGVydHkyIiwicExlbiIsInByZWZpeE1hcHBpbmciLCJwcmVmaXhWYWx1ZSIsIndlYmtpdE91dHB1dCIsIm1vek91dHB1dCIsIl9jYXBpdGFsaXplU3RyaW5nMiIsIldlYmtpdFRyYW5zaXRpb24iLCJXZWJraXRUcmFuc2l0aW9uUHJvcGVydHkiLCJNb3pUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvblByb3BlcnR5IiwiV2Via2l0IiwiTW96IiwibXMiLCJjb2x1bW5XaWR0aCIsIm1pbi1jb250ZW50IiwibWF4LWNvbnRlbnQiLCJmaWxsLWF2YWlsYWJsZSIsImZpdC1jb250ZW50IiwiY29udGFpbi1mbG9hdHMiLCJfaXNQcmVmaXhlZFZhbHVlIiwiV2Via2l0Qm94T3JpZW50IiwiV2Via2l0Qm94RGlyZWN0aW9uIiwiYWx0ZXJuYXRpdmVQcm9wcyIsImFsdGVybmF0aXZlVmFsdWVzIiwic3BhY2UtYXJvdW5kIiwic3BhY2UtYmV0d2VlbiIsImZsZXgtc3RhcnQiLCJmbGV4LWVuZCIsIndyYXAtcmV2ZXJzZSIsImlubGluZS1mbGV4Iiwiem9vbS1pbiIsInpvb20tb3V0IiwiZ3JhYiIsImdyYWJiaW5nIiwibWV0YURhdGEiLCJwcm9jZXNzZWRWYWx1ZSIsInByZWZpeFByb3BlcnRpZXMiLCJyZXF1aXJlZFByZWZpeGVzIiwiX2NhcGl0YWxpemVTdHJpbmciLCJ3bSIsIndtcyIsIndtbXMiLCJwcmVmaXhNYXAiLCJhcHBlYXJhbmNlIiwidGV4dEVtcGhhc2lzUG9zaXRpb24iLCJ0ZXh0RW1waGFzaXMiLCJ0ZXh0RW1waGFzaXNTdHlsZSIsInRleHRFbXBoYXNpc0NvbG9yIiwiYm94RGVjb3JhdGlvbkJyZWFrIiwibWFza0ltYWdlIiwibWFza01vZGUiLCJtYXNrUmVwZWF0IiwibWFza1Bvc2l0aW9uIiwibWFza0NsaXAiLCJtYXNrT3JpZ2luIiwibWFza1NpemUiLCJtYXNrQ29tcG9zaXRlIiwibWFzayIsIm1hc2tCb3JkZXJTb3VyY2UiLCJtYXNrQm9yZGVyTW9kZSIsIm1hc2tCb3JkZXJTbGljZSIsIm1hc2tCb3JkZXJXaWR0aCIsIm1hc2tCb3JkZXJPdXRzZXQiLCJtYXNrQm9yZGVyUmVwZWF0IiwibWFza0JvcmRlciIsIm1hc2tUeXBlIiwidGV4dERlY29yYXRpb25Ta2lwIiwidGV4dERlY29yYXRpb25MaW5lIiwiZm9udEZlYXR1cmVTZXR0aW5ncyIsImJyZWFrQWZ0ZXIiLCJicmVha0JlZm9yZSIsImJyZWFrSW5zaWRlIiwiY29sdW1uRmlsbCIsImNvbHVtbkdhcCIsImNvbHVtblJ1bGUiLCJjb2x1bW5SdWxlQ29sb3IiLCJjb2x1bW5SdWxlU3R5bGUiLCJjb2x1bW5SdWxlV2lkdGgiLCJjb2x1bW5TcGFuIiwid3JpdGluZ01vZGUiLCJmbGV4RmxvdyIsInRyYW5zZm9ybU9yaWdpblgiLCJ0cmFuc2Zvcm1PcmlnaW5ZIiwidHJhbnNmb3JtT3JpZ2luWiIsImJhY2tkcm9wRmlsdGVyIiwiZm9udEtlcm5pbmciLCJzY3JvbGxTbmFwVHlwZSIsInNjcm9sbFNuYXBQb2ludHNYIiwic2Nyb2xsU25hcFBvaW50c1kiLCJzY3JvbGxTbmFwRGVzdGluYXRpb24iLCJzY3JvbGxTbmFwQ29vcmRpbmF0ZSIsInNoYXBlSW1hZ2VUaHJlc2hvbGQiLCJzaGFwZUltYWdlTWFyZ2luIiwic2hhcGVJbWFnZU91dHNpZGUiLCJoeXBoZW5zIiwiZmxvd0ludG8iLCJmbG93RnJvbSIsInJlZ2lvbkZyYWdtZW50IiwidGV4dEFsaWduTGFzdCIsIndyYXBGbG93Iiwid3JhcFRocm91Z2giLCJ3cmFwTWFyZ2luIiwiZ3JpZFRlbXBsYXRlQXJlYXMiLCJncmlkVGVtcGxhdGUiLCJncmlkQXV0b0NvbHVtbnMiLCJncmlkQXV0b0Zsb3ciLCJncmlkQXJlYSIsInRleHRTaXplQWRqdXN0IiwiYm9yZGVySW1hZ2UiLCJib3JkZXJJbWFnZVJlcGVhdCIsImJvcmRlckltYWdlU291cmNlIiwiX3ByZWZpeFZhbHVlMiIsIl9wcmVmaXhQcm9wZXJ0eTIiLCJfc3RhdGljRGF0YTIiLCJfY3Vyc29yMiIsIl9jcm9zc0ZhZGUyIiwiX2ZpbHRlcjIiLCJfZmxleDIiLCJfZmxleGJveE9sZDIiLCJfZ3JhZGllbnQyIiwiX2ltYWdlU2V0MiIsIl9wb3NpdGlvbjIiLCJfc2l6aW5nMiIsIl90cmFuc2l0aW9uMiIsImZsYXR0ZW5lZCIsImNvbnQiLCJjb250ZW50VmFsdWVzIiwiX3ByZWZpeGVyMiIsImluaXRpYWwiLCJmbnMiLCJfdHlwZW9mIiwiY2xlYW5PYmplY3QiLCJpc0ZhbHN5IiwiaGFzRmFsc3kiLCJmaWx0ZXJlZFZhbHVlIiwiY2xlYW4iLCJmaWx0ZXJlZCIsImZpbHRlcmVkUnVsZSIsIl91cHBlcmNhc2VQYXR0ZXJuIiwiaHlwaGVuYXRlIiwiaXNVbml0bGVzc051bWJlciIsInByZWZpeEtleSIsIkNTU1Byb3BlcnR5Iiwic2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zIiwiYmFja2dyb3VuZFBvc2l0aW9uWCIsImJhY2tncm91bmRQb3NpdGlvblkiLCJfQ1NTUHJvcGVydHkyIiwiX2h5cGhlblBhdHRlcm4iLCJjaGFyYWN0ZXIiLCJjYW1lbGl6ZSIsIl9vYmplY3RBc3NpZ24iLCJzaGVldEZvclRhZyIsInNoZWV0Iiwic3R5bGVTaGVldHMiLCJvd25lck5vZGUiLCJvbGRJRSIsIm1ha2VTdHlsZVRhZyIsIl9yZWYkc3BlZWR5IiwiX3JlZiRtYXhMZW5ndGgiLCJtYXhMZW5ndGgiLCJpc1NwZWVkeSIsInRhZ3MiLCJnZXRTaGVldCIsImluamVjdGVkIiwiY3NzUnVsZXMiLCJfaW5zZXJ0IiwiZGVsZXRlIiwiY2hyIiwiZXNjYXBlZCIsInMkMSIsImNvbXBhcmUiLCJjMSIsImMyIiwiQ2hhciIsIkNhbWxfaW50MzIiLCJpc19zcGFjZSIsInN3aXRjaGVyIiwiYXBwbHkxIiwiaW5kZXhfcmVjIiwibGltIiwicmluZGV4X3JlYyIsImNvbnRhaW5zX2Zyb20iLCJ1bnNhZmVfdG9fc3RyaW5nIiwidW5zYWZlX29mX3N0cmluZyIsIm9mX3N0cmluZyIsInRvX3N0cmluZyIsInN1Yl9zdHJpbmciLCJkc3RvZmYiLCJzcmNvZmYiLCJjcHlsZW4iLCJibGl0X3N0cmluZyIsInNlcCIsIm51bSIsImNhdCIsInMkcHJpbWUiLCJyaW5kZXgiLCJpbmRleF9mcm9tIiwicmluZGV4X2Zyb20iLCJyY29udGFpbnNfZnJvbSIsInVuY2FwaXRhbGl6ZSIsIkJ5dGVzIiwibmVlZHNfZXNjYXBlIiwiY29uY2F0X2ZtdHR5IiwiZm10dHkxIiwiZm10dHkyIiwiZXJhc2VfcmVsIiwidHkxIiwiZm10MSIsImZtdDIiLCJDYW1sX3V0aWxzIiwibmVnX29uZSIsIm5lZ19zaWduZWQiLCJvdGhlcl9sb3dfIiwidGhpc19sb3dfIiwibG8iLCJuZWciLCJsc2xfIiwibnVtQml0cyIsImFzcl8iLCJoaSIsImlzX3plcm8iLCJtdWwiLCJfb3RoZXIiLCJvdGhlciIsInRoaXNfaGkiLCJleGl0JDEiLCJleGl0JDIiLCJvdGhlcl9oaSIsImV4aXQkNCIsIm90aGVyX2xvIiwiYTMyIiwiYTE2IiwiYTAwIiwiYjMyIiwiYjE2IiwiYjAwIiwiYzQ4IiwiYzMyIiwiYzE2IiwiYzAwIiwiZ3QiLCJ0b19mbG9hdCIsInR3b19wdHJfMzJfZGJsIiwicG93IiwidHdvX3B0cl82M19kYmwiLCJuZWdfdHdvX3B0cl82MyIsIm9mX2Zsb2F0IiwiaXNGaW5pdGUiLCJfc2VsZiIsInNlbGZfaGkiLCJhcHByb3giLCJvdGhlcl9oaSQxIiwicmVtJDEiLCJhcHByb3gkMSIsImxvZzIiLCJsb2ciLCJMTjIiLCJkZWx0YSIsImFwcHJveFJlcyIsImFwcHJveFJlbSIsIm9mX2ludDMyIiwidG9faW50MzIiLCJsc3JfIiwieG9yIiwib3JfIiwiYW5kXyIsInN3YXAiLCJuZXEiLCJlcXVhbF9udWxsIiwiZXF1YWxfdW5kZWZpbmVkIiwiZXF1YWxfbnVsbGFibGUiLCJkaXZfbW9kIiwicXVvdGllbnQiLCJ0b19oZXgiLCJhdXgiLCJwYWQiLCJkaXNjYXJkX3NpZ24iLCJmbG9hdF9vZl9iaXRzIiwiaW50MzIiLCJJbnQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiYnVmZmVyIiwiYml0c19vZl9mbG9hdCIsImdldDY0IiwiQ2FtbF9pbnQ2NCIsImNhbWxfZmFpbHdpdGgiLCJwYXJzZV9kaWdpdCIsImludF9vZl9zdHJpbmdfYmFzZSIsInBhcnNlX3NpZ25fYW5kX2Jhc2UiLCJzaWduIiwiYWNjJDEiLCJvcl9yZXMiLCJwYXJzZV9mb3JtYXQiLCJmbXQiLCJmaW5pc2hfZm9ybWF0dGluZyIsInJhd2J1ZmZlciIsImp1c3RpZnkiLCJzaWduc3R5bGUiLCJzaWduZWRjb252IiwiY2FtbF9mb3JtYXRfaW50IiwiaW50X29mX2Jhc2UiLCJmbG9hdF9vZl9zdHJpbmciLCJwaWR4IiwiZXhwIiwiY2FtbF9uYXRpdmVpbnRfZm9ybWF0IiwiY2FtbF9pbnQzMl9mb3JtYXQiLCJjYW1sX2ludDMyX29mX3N0cmluZyIsImNhbWxfbmF0aXZlaW50X29mX3N0cmluZyIsInRvRXhwb25lbnRpYWwiLCJ0b0ZpeGVkIiwicHJlYyQxIiwiTnVtYmVyIiwiY2FtbF9pbnQ2NF9mb3JtYXQiLCJ3YmFzZSIsImN2dGJsIiwibW9kdWx1cyIsInF1b3RpZW50JDEiLCJtb2R1bHVzJDEiLCJ3YmFzZSQxIiwieSQxIiwibWF0Y2gkNiIsInF1b3RpZW50JDIiLCJtb2R1bHVzJDIiLCJtYXRjaCQ3IiwibWF0Y2gkOCIsInF1b3RpZW50JDMiLCJtb2R1bHVzJDMiLCJtYXRjaCQ5IiwiY2FtbF9pbnQ2NF9vZl9zdHJpbmciLCJ0aHJlc2hvbGQiLCJoYmFzZSIsImNhbWxfc3lzX2dldGVudiIsImNhbWxfc3lzX3RpbWUiLCJ1cHRpbWUiLCJjYW1sX3N5c19yYW5kb21fc2VlZCIsImNhbWxfc3lzX3N5c3RlbV9jb21tYW5kIiwiY2FtbF9zeXNfZ2V0Y3dkIiwiY2FtbF9zeXNfZ2V0X2FyZ3YiLCJleGl0X2NvZGUiLCJjYW1sX3N5c19pc19kaXJlY3RvcnkiLCJjYW1sX3N5c19maWxlX2V4aXN0cyIsIndyaXRlIiwic3RyJDEiLCJsYXN0SW5kZXhPZiIsIiRjYXJldCIsIm5vZGVfc3RkX291dHB1dCIsIiQkY2hhciIsImNhbWxfbWxfaW5wdXQiLCJfJDMiLCJCb2FyZCIsIlRvb2xCYXIiLCJHYW1lIiwiQXJyYXlMYWJlbHMiLCJhcHBSZWR1Y2VyIiwidGltZXMiLCJjeWNsZSIsInNodWZmbGVkRGVjayIsIkFwcCIsIlJlYWN0RE9NUmUiXSwibWFwcGluZ3MiOiJhQUdBLElBQUFBLEVBQUFDLE9BQUEsaUJBQ0FBLE9BQUEsaUJBQ0EsU0FBQUMsRUFBQUMsSUFvUUEsU0FBQUQsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRixLQUFBRyxFQUFBSCxHQUNBLE9BRUEsUUFBQUksS0FEQUQsRUFBQUgsSUFBQSxFQUNBQyxFQUNBSSxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBUCxFQUFBRyxLQUNBSyxFQUFBTCxHQUFBSCxFQUFBRyxJQUdBLEtBQUFNLEdBQUEsSUFBQUMsR0FDQUMsSUE3UUFDLENBQUFiLEVBQUFDLEdBQ0FILEtBQUFFLEVBQUFDLElBdURBLElBSUFhLEVBSkFDLEdBQUEsRUFDQUMsRUFBQSx1QkFDQUMsRUFBQSxJQUNBQyxLQUVBQyxLQUNBQyxLQUdBLFNBQUFDLEVBQUFqQixHQUNBLElBQUFrQixF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bEQsRUFBQTlmLEdBQUEsR0FDQXVsRSxFQUFBLEdBQ0FBLEVBQUEsR0FDQUEsRUFBQSxHQUNBN2xELEVBQUE2bEQsRUFBQSxHQUFBQyxLQUVBLE9BQ0EsT0FBQTFsRCxFQUFBOWYsR0FBQSxHQUNBdWxFLEVBQUEsR0FDQUEsRUFBQSxHQUNBQSxFQUFBLEdBQ0E3bEQsRUFBQTZsRCxFQUFBLEdBQUFDLEtBRUEsT0FDQSxPQUFBMWxELEVBQUE5ZixHQUFBLEdBQUEwZixFQUFBNmxELEVBQUEsR0FBQUMsS0FDQSxRQUNBLE9BQUExbEQsRUFBQTlmLEdBQUEsSUFBQTBmLEVBQUE2bEQsRUFBQSxHQUFBQyxLQUNBLFFBQ0EsT0FBQTFsRCxFQUFBOWYsR0FBQSxJQUNBdWxFLEVBQUEsR0FDQTdsRCxFQUFBNmxELEVBQUEsR0FBQUMsS0FFQSxRQUNBLE9BQUExbEQsRUFBQTlmLEdBQUEsSUFDQXVsRSxFQUFBLEdBQ0E3bEQsRUFBQTZsRCxFQUFBLEdBQUFDLEtBRUEsUUFDQSxPQUFBMWxELEVBQUE5ZixHQUFBLElBQ0F1bEUsRUFBQSxHQUNBQSxFQUFBLEdBQ0E3bEQsRUFBQTZsRCxFQUFBLEdBQUFDLEtBRUEsUUFDQSxPQUFBMWxELEVBQUE5ZixHQUFBLElBQ0F1bEUsRUFBQSxHQUNBQSxFQUFBLEdBQ0E3bEQsRUFBQTZsRCxFQUFBLEdBQUFDLEtBRUEsUUFDQSxPQUFBMWxELEVBQUE5ZixHQUFBLElBQUEwZixFQUFBNmxELEVBQUEsR0FBQUMsS0FDQSxRQUNBLE9BQUExbEQsRUFBQTlmLEdBQUEsSUFBQTBmLEVBQUE2bEQsRUFBQSxHQUFBQyxLQUNBLFFBQ0EsT0FBQTFsRCxFQUFBOWYsR0FBQSxJQUNBdWxFLEVBQUEsR0FDQTdsRCxFQUFBNmxELEVBQUEsR0FBQUMsS0FFQSxRQUNBLE9BQUExbEQsRUFBQTlmLEdBQUEsSUFDQXVsRSxFQUFBLEdBQ0E3bEQsRUFBQTZsRCxFQUFBLEdBQUFDLEtBRUEsUUFDQSxPQUFBMWxELEVBQUE5ZixHQUFBLElBQUEwZixFQUFBNmxELEVBQUEsR0FBQUMsS0FDQSxRQUNB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QUNBZ2lILEVBQUFoaUgsRUFBQSxJQUNBNGdHLEVBQUE1Z0csRUFBQSxHQUVBZ2lILEVBQUFuckQsc0JBQUErcEMsRUFBQWpzRixRQUFBLElBQUFvdEcsRUFBQWg5RSxVQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0fVxuIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gd2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXTtcbiBcdHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIHdlYnBhY2tIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHRcdGlmIChwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0fSA7XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG4gXHRcdDtcbiBcdFx0aGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHtcbiBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpXG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydFwiKSk7XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcbiBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XG4gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbiBcdFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuIFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4gXHRcdFx0XHRcdHJlamVjdChcbiBcdFx0XHRcdFx0XHRuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpXG4gXHRcdFx0XHRcdCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcbiBcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuIFx0XHRcdFx0XHRyZXNvbHZlKCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xuIFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXG4gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdC8vIHN1Y2Nlc3NcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcbiBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XG4gXHRcdFx0XHRcdFx0cmV0dXJuO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCJlYzRhM2UwNzkwNTcwNmY3ODQxZFwiOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdGlmICghbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xuIFx0XHR2YXIgZm4gPSBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gXHRcdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcbiBcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG4gXHRcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKVxuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkgbWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG4gXHRcdFx0XHRcdFx0cmVxdWVzdCArXG4gXHRcdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0KTtcbiBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xuIFx0XHR9O1xuIFx0XHR2YXIgT2JqZWN0RmFjdG9yeSA9IGZ1bmN0aW9uIE9iamVjdEZhY3RvcnkobmFtZSkge1xuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XG4gXHRcdFx0XHR9LFxuIFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuIFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fTtcbiBcdFx0Zm9yICh2YXIgbmFtZSBpbiBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcImVcIlxuIFx0XHRcdCkge1xuIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInJlYWR5XCIpIGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XG4gXHRcdFx0XHR0aHJvdyBlcnI7XG4gXHRcdFx0fSk7XG5cbiBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XG4gXHRcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xuIFx0XHRcdFx0XHRpZiAoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fTtcbiBcdFx0cmV0dXJuIGZuO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgaG90ID0ge1xuIFx0XHRcdC8vIHByaXZhdGUgc3R1ZmZcbiBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG4gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG4gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG4gXHRcdFx0X21haW46IGhvdEN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXG5cbiBcdFx0XHQvLyBNb2R1bGUgQVBJXG4gXHRcdFx0YWN0aXZlOiB0cnVlLFxuIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdFx0ZWxzZSBob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGRlcCA9PT0gXCJ1bmRlZmluZWRcIikgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXG4gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxuIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcbiBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGlmICghbCkgcmV0dXJuIGhvdFN0YXR1cztcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcbiBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cbiBcdFx0fTtcbiBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuIFx0XHRyZXR1cm4gaG90O1xuIFx0fVxuXG4gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcblxuIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XG4gXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaG90U3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG4gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuIFx0fVxuXG4gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XG4gXHR2YXIgaG90Q2h1bmtzTG9hZGluZyA9IDA7XG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RBdmFpbGFibGVGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdERlZmVycmVkO1xuXG4gXHQvLyBUaGUgdXBkYXRlIGluZm9cbiBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcbiBcdFx0dmFyIGlzTnVtYmVyID0gK2lkICsgXCJcIiA9PT0gaWQ7XG4gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcImlkbGVcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcbiBcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xuIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcbiBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XG4gXHRcdFx0aWYgKCF1cGRhdGUpIHtcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdFx0XHRyZXR1cm4gbnVsbDtcbiBcdFx0XHR9XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcblxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xuIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxuIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHRob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XG4gXHRcdFx0e1xuIFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb25lLWJsb2Nrc1xuIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cbiBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmXG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nID09PSAwICYmXG4gXHRcdFx0XHRob3RXYWl0aW5nRmlsZXMgPT09IDBcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIHByb21pc2U7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxuIFx0XHRcdHJldHVybjtcbiBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcbiBcdFx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmICgtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XG4gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcbiBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4gXHRcdHZhciBkZWZlcnJlZCA9IGhvdERlZmVycmVkO1xuIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XG4gXHRcdGlmICghZGVmZXJyZWQpIHJldHVybjtcbiBcdFx0aWYgKGhvdEFwcGx5T25VcGRhdGUpIHtcbiBcdFx0XHQvLyBXcmFwIGRlZmVycmVkIG9iamVjdCBpbiBQcm9taXNlIHRvIG1hcmsgaXQgYXMgYSB3ZWxsLWhhbmRsZWQgUHJvbWlzZSB0b1xuIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxuIFx0XHRcdC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NjU2NjZcbiBcdFx0XHRQcm9taXNlLnJlc29sdmUoKVxuIFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBob3RBcHBseShob3RBcHBseU9uVXBkYXRlKTtcbiBcdFx0XHRcdH0pXG4gXHRcdFx0XHQudGhlbihcbiBcdFx0XHRcdFx0ZnVuY3Rpb24ocmVzdWx0KSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuIFx0XHRcdFx0XHR9LFxuIFx0XHRcdFx0XHRmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0KTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKVxuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbiBcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiBcdFx0dmFyIGNiO1xuIFx0XHR2YXIgaTtcbiBcdFx0dmFyIGo7XG4gXHRcdHZhciBtb2R1bGU7XG4gXHRcdHZhciBtb2R1bGVJZDtcblxuIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKS5tYXAoZnVuY3Rpb24oaWQpIHtcbiBcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdGNoYWluOiBbaWRdLFxuIFx0XHRcdFx0XHRpZDogaWRcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcbiBcdFx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKCFtb2R1bGUgfHwgbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG4gXHRcdFx0XHRcdHZhciBwYXJlbnQgPSBpbnN0YWxsZWRNb2R1bGVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG4gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0XHRjb250aW51ZTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG4gXHRcdFx0XHRcdHF1ZXVlLnB1c2goe1xuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0aWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cblxuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG4gXHRcdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG4gXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcbiBcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuIFx0XHRcdH07XG4gXHRcdH1cblxuIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG4gXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHR2YXIgaXRlbSA9IGJbaV07XG4gXHRcdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG4gXHRcdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cbiBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG4gXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuIFx0XHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKCkge1xuIFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG4gXHRcdFx0KTtcbiBcdFx0fTtcblxuIFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVJZCA9IHRvTW9kdWxlSWQoaWQpO1xuIFx0XHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuIFx0XHRcdFx0dmFyIHJlc3VsdDtcbiBcdFx0XHRcdGlmIChob3RVcGRhdGVbaWRdKSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlSWQpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogaWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG4gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuIFx0XHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4gXHRcdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRkZWZhdWx0OlxuIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbiBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvQXBwbHkpIHtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdFx0XHRcdGlmIChcbiBcdFx0XHRcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0XHRcdFx0KVxuIFx0XHRcdFx0XHRcdCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiZcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0KVxuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuIFx0XHRPYmplY3Qua2V5cyhob3RBdmFpbGFibGVGaWxlc01hcCkuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xuIFx0XHRcdFx0aG90RGlzcG9zZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0fSk7XG5cbiBcdFx0dmFyIGlkeDtcbiBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4gXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cbiBcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG4gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG4gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcbiBcdFx0XHRcdGNiKGRhdGEpO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xuXG4gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcbiBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG4gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuIFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcbiBcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG4gXHRcdHZhciBkZXBlbmRlbmN5O1xuIFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG4gXHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG4gXHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG4gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4gXHRcdFx0XHRcdFx0aWYgKGNiKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoY2IpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcbiBcdFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuIFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG4gXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjI7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcbiBcdFx0aWYgKGVycm9yKSB7XG4gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuIFx0XHR9XG5cbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4gXHRcdFx0cGFyZW50czogKGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IGhvdEN1cnJlbnRQYXJlbnRzLCBob3RDdXJyZW50UGFyZW50cyA9IFtdLCBob3RDdXJyZW50UGFyZW50c1RlbXApLFxuIFx0XHRcdGNoaWxkcmVuOiBbXVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiLi9cIjtcblxuIFx0Ly8gX193ZWJwYWNrX2hhc2hfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKDExMikoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTEyKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgb3V0X29mX21lbW9yeSA9IC8qIHR1cGxlICovW1xuICBcIk91dF9vZl9tZW1vcnlcIixcbiAgMFxuXTtcblxudmFyIHN5c19lcnJvciA9IC8qIHR1cGxlICovW1xuICBcIlN5c19lcnJvclwiLFxuICAtMVxuXTtcblxudmFyIGZhaWx1cmUgPSAvKiB0dXBsZSAqL1tcbiAgXCJGYWlsdXJlXCIsXG4gIC0yXG5dO1xuXG52YXIgaW52YWxpZF9hcmd1bWVudCA9IC8qIHR1cGxlICovW1xuICBcIkludmFsaWRfYXJndW1lbnRcIixcbiAgLTNcbl07XG5cbnZhciBlbmRfb2ZfZmlsZSA9IC8qIHR1cGxlICovW1xuICBcIkVuZF9vZl9maWxlXCIsXG4gIC00XG5dO1xuXG52YXIgZGl2aXNpb25fYnlfemVybyA9IC8qIHR1cGxlICovW1xuICBcIkRpdmlzaW9uX2J5X3plcm9cIixcbiAgLTVcbl07XG5cbnZhciBub3RfZm91bmQgPSAvKiB0dXBsZSAqL1tcbiAgXCJOb3RfZm91bmRcIixcbiAgLTZcbl07XG5cbnZhciBtYXRjaF9mYWlsdXJlID0gLyogdHVwbGUgKi9bXG4gIFwiTWF0Y2hfZmFpbHVyZVwiLFxuICAtN1xuXTtcblxudmFyIHN0YWNrX292ZXJmbG93ID0gLyogdHVwbGUgKi9bXG4gIFwiU3RhY2tfb3ZlcmZsb3dcIixcbiAgLThcbl07XG5cbnZhciBzeXNfYmxvY2tlZF9pbyA9IC8qIHR1cGxlICovW1xuICBcIlN5c19ibG9ja2VkX2lvXCIsXG4gIC05XG5dO1xuXG52YXIgYXNzZXJ0X2ZhaWx1cmUgPSAvKiB0dXBsZSAqL1tcbiAgXCJBc3NlcnRfZmFpbHVyZVwiLFxuICAtMTBcbl07XG5cbnZhciB1bmRlZmluZWRfcmVjdXJzaXZlX21vZHVsZSA9IC8qIHR1cGxlICovW1xuICBcIlVuZGVmaW5lZF9yZWN1cnNpdmVfbW9kdWxlXCIsXG4gIC0xMVxuXTtcblxub3V0X29mX21lbW9yeS50YWcgPSAyNDg7XG5cbnN5c19lcnJvci50YWcgPSAyNDg7XG5cbmZhaWx1cmUudGFnID0gMjQ4O1xuXG5pbnZhbGlkX2FyZ3VtZW50LnRhZyA9IDI0ODtcblxuZW5kX29mX2ZpbGUudGFnID0gMjQ4O1xuXG5kaXZpc2lvbl9ieV96ZXJvLnRhZyA9IDI0ODtcblxubm90X2ZvdW5kLnRhZyA9IDI0ODtcblxubWF0Y2hfZmFpbHVyZS50YWcgPSAyNDg7XG5cbnN0YWNrX292ZXJmbG93LnRhZyA9IDI0ODtcblxuc3lzX2Jsb2NrZWRfaW8udGFnID0gMjQ4O1xuXG5hc3NlcnRfZmFpbHVyZS50YWcgPSAyNDg7XG5cbnVuZGVmaW5lZF9yZWN1cnNpdmVfbW9kdWxlLnRhZyA9IDI0ODtcblxuZXhwb3J0cy5vdXRfb2ZfbWVtb3J5ID0gb3V0X29mX21lbW9yeTtcbmV4cG9ydHMuc3lzX2Vycm9yID0gc3lzX2Vycm9yO1xuZXhwb3J0cy5mYWlsdXJlID0gZmFpbHVyZTtcbmV4cG9ydHMuaW52YWxpZF9hcmd1bWVudCA9IGludmFsaWRfYXJndW1lbnQ7XG5leHBvcnRzLmVuZF9vZl9maWxlID0gZW5kX29mX2ZpbGU7XG5leHBvcnRzLmRpdmlzaW9uX2J5X3plcm8gPSBkaXZpc2lvbl9ieV96ZXJvO1xuZXhwb3J0cy5ub3RfZm91bmQgPSBub3RfZm91bmQ7XG5leHBvcnRzLm1hdGNoX2ZhaWx1cmUgPSBtYXRjaF9mYWlsdXJlO1xuZXhwb3J0cy5zdGFja19vdmVyZmxvdyA9IHN0YWNrX292ZXJmbG93O1xuZXhwb3J0cy5zeXNfYmxvY2tlZF9pbyA9IHN5c19ibG9ja2VkX2lvO1xuZXhwb3J0cy5hc3NlcnRfZmFpbHVyZSA9IGFzc2VydF9mYWlsdXJlO1xuZXhwb3J0cy51bmRlZmluZWRfcmVjdXJzaXZlX21vZHVsZSA9IHVuZGVmaW5lZF9yZWN1cnNpdmVfbW9kdWxlO1xuLyogIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbWxfYXJyYXkgPSByZXF1aXJlKFwiLi9jYW1sX2FycmF5LmpzXCIpO1xuXG5mdW5jdGlvbiBhcHAoX2YsIF9hcmdzKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYXJncyA9IF9hcmdzO1xuICAgIHZhciBmID0gX2Y7XG4gICAgdmFyIGFyaXR5ID0gZi5sZW5ndGg7XG4gICAgdmFyIGFyaXR5JDEgPSBhcml0eSA9PT0gMCA/IDEgOiBhcml0eTtcbiAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gICAgdmFyIGQgPSBhcml0eSQxIC0gbGVuIHwgMDtcbiAgICBpZiAoZCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSBlbHNlIGlmIChkIDwgMCkge1xuICAgICAgX2FyZ3MgPSBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc3ViKGFyZ3MsIGFyaXR5JDEsIC1kIHwgMCk7XG4gICAgICBfZiA9IGYuYXBwbHkobnVsbCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3N1YihhcmdzLCAwLCBhcml0eSQxKSk7XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoZnVuY3Rpb24oZixhcmdzKXtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gYXBwKGYsIGFyZ3MuY29uY2F0KC8qIGFycmF5ICovW3hdKSk7XG4gICAgICB9XG4gICAgICB9KGYsYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3VycnlfMShvLCBhMCwgYXJpdHkpIHtcbiAgaWYgKGFyaXR5ID4gNyB8fCBhcml0eSA8IDApIHtcbiAgICByZXR1cm4gYXBwKG8sIC8qIGFycmF5ICovW2EwXSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChhcml0eSkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICBjYXNlIDEgOiBcbiAgICAgICAgICByZXR1cm4gbyhhMCk7XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDMgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDQgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMikge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDUgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMykge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMywgcGFyYW0kNCkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMsIHBhcmFtJDQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDcgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMywgcGFyYW0kNCwgcGFyYW0kNSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMsIHBhcmFtJDQsIHBhcmFtJDUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gXzEobywgYTApIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gMSkge1xuICAgIHJldHVybiBvKGEwKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3VycnlfMShvLCBhMCwgYXJpdHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9fMShvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDEpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCkge1xuICAgICAgICByZXR1cm4gXzEobywgYTApO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3VycnlfMihvLCBhMCwgYTEsIGFyaXR5KSB7XG4gIGlmIChhcml0eSA+IDcgfHwgYXJpdHkgPCAwKSB7XG4gICAgcmV0dXJuIGFwcChvLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICBhMCxcbiAgICAgICAgICAgICAgICBhMVxuICAgICAgICAgICAgICBdKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGFyaXR5KSB7XG4gICAgICBjYXNlIDAgOiBcbiAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCksIC8qIGFycmF5ICovW2ExXSk7XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICByZXR1cm4gbyhhMCwgYTEpO1xuICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBwYXJhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgNCA6IFxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDUgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMikge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA2IDogXG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzLCBwYXJhbSQ0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMsIHBhcmFtJDQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gXzIobywgYTAsIGExKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDIpIHtcbiAgICByZXR1cm4gbyhhMCwgYTEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjdXJyeV8yKG8sIGEwLCBhMSwgYXJpdHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9fMihvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDIpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCwgYTEpIHtcbiAgICAgICAgcmV0dXJuIF8yKG8sIGEwLCBhMSk7XG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjdXJyeV8zKG8sIGEwLCBhMSwgYTIsIGFyaXR5KSB7XG4gIHZhciBleGl0ID0gMDtcbiAgaWYgKGFyaXR5ID4gNyB8fCBhcml0eSA8IDApIHtcbiAgICByZXR1cm4gYXBwKG8sIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgIGEyXG4gICAgICAgICAgICAgIF0pO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoYXJpdHkpIHtcbiAgICAgIGNhc2UgMCA6IFxuICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExKSwgLyogYXJyYXkgKi9bYTJdKTtcbiAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIpO1xuICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgcGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDUgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgNiA6IFxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBcbiAgICB9XG4gIH1cbiAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICByZXR1cm4gYXBwKG8oYTApLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICBhMlxuICAgICAgICAgICAgICBdKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gXzMobywgYTAsIGExLCBhMikge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSAzKSB7XG4gICAgcmV0dXJuIG8oYTAsIGExLCBhMik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGN1cnJ5XzMobywgYTAsIGExLCBhMiwgYXJpdHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9fMyhvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDMpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCwgYTEsIGEyKSB7XG4gICAgICAgIHJldHVybiBfMyhvLCBhMCwgYTEsIGEyKTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGN1cnJ5XzQobywgYTAsIGExLCBhMiwgYTMsIGFyaXR5KSB7XG4gIHZhciBleGl0ID0gMDtcbiAgaWYgKGFyaXR5ID4gNyB8fCBhcml0eSA8IDApIHtcbiAgICByZXR1cm4gYXBwKG8sIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgIGEzXG4gICAgICAgICAgICAgIF0pO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoYXJpdHkpIHtcbiAgICAgIGNhc2UgMCA6IFxuICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgICAgYTNcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDMgOiBcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiksIC8qIGFycmF5ICovW2EzXSk7XG4gICAgICBjYXNlIDQgOiBcbiAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMyk7XG4gICAgICBjYXNlIDUgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgcGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDcgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMikge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBcbiAgICB9XG4gIH1cbiAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICByZXR1cm4gYXBwKG8oYTApLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICBhM1xuICAgICAgICAgICAgICBdKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gXzQobywgYTAsIGExLCBhMiwgYTMpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNCkge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3VycnlfNChvLCBhMCwgYTEsIGEyLCBhMywgYXJpdHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9fNChvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDQpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMykge1xuICAgICAgICByZXR1cm4gXzQobywgYTAsIGExLCBhMiwgYTMpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3VycnlfNShvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGFyaXR5KSB7XG4gIHZhciBleGl0ID0gMDtcbiAgaWYgKGFyaXR5ID4gNyB8fCBhcml0eSA8IDApIHtcbiAgICByZXR1cm4gYXBwKG8sIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgIGE0XG4gICAgICAgICAgICAgIF0pO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoYXJpdHkpIHtcbiAgICAgIGNhc2UgMCA6IFxuICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTRcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDMgOiBcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICAgIGE0XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzKSwgLyogYXJyYXkgKi9bYTRdKTtcbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgYTQsIHBhcmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIFxuICAgIH1cbiAgfVxuICBpZiAoZXhpdCA9PT0gMSkge1xuICAgIHJldHVybiBhcHAobyhhMCksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgIGE0XG4gICAgICAgICAgICAgIF0pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBfNShvLCBhMCwgYTEsIGEyLCBhMywgYTQpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNSkge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGN1cnJ5XzUobywgYTAsIGExLCBhMiwgYTMsIGE0LCBhcml0eSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX181KG8pIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNSkge1xuICAgIHJldHVybiBvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKGEwLCBhMSwgYTIsIGEzLCBhNCkge1xuICAgICAgICByZXR1cm4gXzUobywgYTAsIGExLCBhMiwgYTMsIGE0KTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGN1cnJ5XzYobywgYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYXJpdHkpIHtcbiAgdmFyIGV4aXQgPSAwO1xuICBpZiAoYXJpdHkgPiA3IHx8IGFyaXR5IDwgMCkge1xuICAgIHJldHVybiBhcHAobywgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgYTAsXG4gICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgYTVcbiAgICAgICAgICAgICAgXSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChhcml0eSkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICBjYXNlIDEgOiBcbiAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgICAgYTVcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDQgOiBcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMywgYTQpLCAvKiBhcnJheSAqL1thNV0pO1xuICAgICAgY2FzZSA2IDogXG4gICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gICAgICBjYXNlIDcgOiBcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBwYXJhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIFxuICAgIH1cbiAgfVxuICBpZiAoZXhpdCA9PT0gMSkge1xuICAgIHJldHVybiBhcHAobyhhMCksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgIGE1XG4gICAgICAgICAgICAgIF0pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBfNihvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDYpIHtcbiAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3VycnlfNihvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhcml0eSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX182KG8pIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNikge1xuICAgIHJldHVybiBvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgICAgICAgcmV0dXJuIF82KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3VycnlfNyhvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYXJpdHkpIHtcbiAgdmFyIGV4aXQgPSAwO1xuICBpZiAoYXJpdHkgPiA3IHx8IGFyaXR5IDwgMCkge1xuICAgIHJldHVybiBhcHAobywgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgYTAsXG4gICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgYTZcbiAgICAgICAgICAgICAgXSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChhcml0eSkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICBjYXNlIDEgOiBcbiAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNlxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgICAgYTZcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDQgOiBcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNlxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMywgYTQpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNlxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNiA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgLyogYXJyYXkgKi9bYTZdKTtcbiAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiAgICAgIFxuICAgIH1cbiAgfVxuICBpZiAoZXhpdCA9PT0gMSkge1xuICAgIHJldHVybiBhcHAobyhhMCksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgIGE1LFxuICAgICAgICAgICAgICAgIGE2XG4gICAgICAgICAgICAgIF0pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBfNyhvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSA3KSB7XG4gICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjdXJyeV83KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhcml0eSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX183KG8pIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNykge1xuICAgIHJldHVybiBvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XG4gICAgICAgIHJldHVybiBfNyhvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNik7XG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjdXJyeV84KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYXJpdHkpIHtcbiAgdmFyIGV4aXQgPSAwO1xuICBpZiAoYXJpdHkgPiA3IHx8IGFyaXR5IDwgMCkge1xuICAgIHJldHVybiBhcHAobywgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgYTAsXG4gICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgXSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChhcml0eSkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICBjYXNlIDEgOiBcbiAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNixcbiAgICAgICAgICAgICAgICAgICAgICBhN1xuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDQgOiBcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNixcbiAgICAgICAgICAgICAgICAgICAgICBhN1xuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMywgYTQpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNixcbiAgICAgICAgICAgICAgICAgICAgICBhN1xuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNiA6IFxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDcgOiBcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpLCAvKiBhcnJheSAqL1thN10pO1xuICAgICAgXG4gICAgfVxuICB9XG4gIGlmIChleGl0ID09PSAxKSB7XG4gICAgcmV0dXJuIGFwcChvKGEwKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgXSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIF84KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSA4KSB7XG4gICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3VycnlfOChvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGFyaXR5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfXzgobykge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSA4KSB7XG4gICAgcmV0dXJuIG87XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gICAgICAgIHJldHVybiBfOChvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0cy5hcHAgPSBhcHA7XG5leHBvcnRzLmN1cnJ5XzEgPSBjdXJyeV8xO1xuZXhwb3J0cy5fMSA9IF8xO1xuZXhwb3J0cy5fXzEgPSBfXzE7XG5leHBvcnRzLmN1cnJ5XzIgPSBjdXJyeV8yO1xuZXhwb3J0cy5fMiA9IF8yO1xuZXhwb3J0cy5fXzIgPSBfXzI7XG5leHBvcnRzLmN1cnJ5XzMgPSBjdXJyeV8zO1xuZXhwb3J0cy5fMyA9IF8zO1xuZXhwb3J0cy5fXzMgPSBfXzM7XG5leHBvcnRzLmN1cnJ5XzQgPSBjdXJyeV80O1xuZXhwb3J0cy5fNCA9IF80O1xuZXhwb3J0cy5fXzQgPSBfXzQ7XG5leHBvcnRzLmN1cnJ5XzUgPSBjdXJyeV81O1xuZXhwb3J0cy5fNSA9IF81O1xuZXhwb3J0cy5fXzUgPSBfXzU7XG5leHBvcnRzLmN1cnJ5XzYgPSBjdXJyeV82O1xuZXhwb3J0cy5fNiA9IF82O1xuZXhwb3J0cy5fXzYgPSBfXzY7XG5leHBvcnRzLmN1cnJ5XzcgPSBjdXJyeV83O1xuZXhwb3J0cy5fNyA9IF83O1xuZXhwb3J0cy5fXzcgPSBfXzc7XG5leHBvcnRzLmN1cnJ5XzggPSBjdXJyeV84O1xuZXhwb3J0cy5fOCA9IF84O1xuZXhwb3J0cy5fXzggPSBfXzg7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3VycnkgPSByZXF1aXJlKFwiYnMtcGxhdGZvcm0vbGliL2pzL2N1cnJ5LmpzXCIpO1xudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIENhbWxfYnVpbHRpbl9leGNlcHRpb25zID0gcmVxdWlyZShcImJzLXBsYXRmb3JtL2xpYi9qcy9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcbnZhciBSZWFzb25SZWFjdE9wdGltaXplZENyZWF0ZUNsYXNzID0gcmVxdWlyZShcIi4vUmVhc29uUmVhY3RPcHRpbWl6ZWRDcmVhdGVDbGFzcy5qc1wiKTtcblxuZnVuY3Rpb24gY3JlYXRlRG9tRWxlbWVudChzLCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgdmFyIHZhcmFyZyA9IC8qIGFycmF5ICovW1xuICAgICAgcyxcbiAgICAgIHByb3BzXG4gICAgXS5jb25jYXQoY2hpbGRyZW4pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseShudWxsLCB2YXJhcmcpO1xufVxuXG5mdW5jdGlvbiBhbnlUb1VuaXQoKSB7XG4gIHJldHVybiAvKiAoKSAqLzA7XG59XG5cbmZ1bmN0aW9uIGFueVRvVHJ1ZSgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHdpbGxSZWNlaXZlUHJvcHNEZWZhdWx0KHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbVsvKiBzdGF0ZSAqLzFdO1xufVxuXG5mdW5jdGlvbiByZW5kZXJEZWZhdWx0KCkge1xuICByZXR1cm4gXCJSZW5kZXJOb3RJbXBsZW1lbnRlZFwiO1xufVxuXG5mdW5jdGlvbiBpbml0aWFsU3RhdGVEZWZhdWx0KCkge1xuICByZXR1cm4gLyogKCkgKi8wO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VyRGVmYXVsdChfLCBfJDEpIHtcbiAgcmV0dXJuIC8qIE5vVXBkYXRlICovMDtcbn1cblxuZnVuY3Rpb24gc3Vic2NyaXB0aW9uc0RlZmF1bHQoKSB7XG4gIHJldHVybiAvKiBbXSAqLzA7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRQcm9wc0lmVGhleXJlRnJvbUpzKHByb3BzLCBqc1Byb3BzVG9SZWFzb24sIGRlYnVnTmFtZSkge1xuICB2YXIgbWF0Y2ggPSBwcm9wcy5yZWFzb25Qcm9wcztcbiAgaWYgKG1hdGNoID09IG51bGwpIHtcbiAgICBpZiAoanNQcm9wc1RvUmVhc29uKSB7XG4gICAgICByZXR1cm4gLyogRWxlbWVudCAqL1tDdXJyeS5fMShqc1Byb3BzVG9SZWFzb25bMF0sIHByb3BzKV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICBcIkEgSlMgY29tcG9uZW50IGNhbGxlZCB0aGUgUmVhc29uIGNvbXBvbmVudCBcIiArIChkZWJ1Z05hbWUgKyBcIiB3aGljaCBkaWRuJ3QgaW1wbGVtZW50IHRoZSBKUy0+UmVhc29uIFJlYWN0IHByb3BzIGNvbnZlcnNpb24uXCIpXG4gICAgICAgICAgXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1hdGNoO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFycmF5T2ZMaXN0KGwpIHtcbiAgdmFyIF9sID0gbDtcbiAgdmFyIGFjYyA9IC8qIGFycmF5ICovW107XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbCQxID0gX2w7XG4gICAgaWYgKGwkMSkge1xuICAgICAgYWNjLnB1c2gobCQxWzBdKTtcbiAgICAgIF9sID0gbCQxWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYWNjLnJldmVyc2UoKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNsYXNzKGRlYnVnTmFtZSkge1xuICByZXR1cm4gUmVhc29uUmVhY3RPcHRpbWl6ZWRDcmVhdGVDbGFzcy5jcmVhdGVDbGFzcyh7XG4gICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBkZWJ1Z05hbWUsXG4gICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnM6IG51bGwsXG4gICAgICAgICAgICAgIHNlbGY6IChmdW5jdGlvbiAoc3RhdGUsIHJldGFpbmVkUHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgIHZhciAkJHRoaXMgPSB0aGlzIDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGhhbmRsZSAqLyQkdGhpcy5oYW5kbGVNZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHN0YXRlICovc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHJldGFpbmVkUHJvcHMgKi9yZXRhaW5lZFByb3BzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzZW5kICovJCR0aGlzLnNlbmRNZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG9uVW5tb3VudCAqLyQkdGhpcy5vblVubW91bnRNZXRob2RcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHRyYW5zaXRpb25OZXh0VG90YWxTdGF0ZTogKGZ1bmN0aW9uIChjdXJUb3RhbFN0YXRlLCByZWFzb25TdGF0ZVVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWFzb25TdGF0ZVVwZGF0ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9uZSAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyVG90YWxTdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChyZWFzb25TdGF0ZVVwZGF0ZS50YWcgfCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb25lICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb25TdGF0ZTogcmVhc29uU3RhdGVVcGRhdGVbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTb21lICovW3JlYXNvblN0YXRlVXBkYXRlWzBdXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3RhbFN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTb21lICovW3JlYXNvblN0YXRlVXBkYXRlWzFdXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb25TdGF0ZTogcmVhc29uU3RhdGVVcGRhdGVbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgZ2V0SW5pdGlhbFN0YXRlOiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHRoaXNKcyA9ICh0aGlzKTtcbiAgICAgICAgICAgICAgICAgIHZhciBjb252ZXJ0ZWRSZWFzb25Qcm9wcyA9IGNvbnZlcnRQcm9wc0lmVGhleXJlRnJvbUpzKHRoaXNKcy5wcm9wcywgdGhpc0pzLmpzUHJvcHNUb1JlYXNvbiwgZGVidWdOYW1lKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvblN0YXRlOiBDdXJyeS5fMShjb252ZXJ0ZWRSZWFzb25Qcm9wc1swXVsvKiBpbml0aWFsU3RhdGUgKi8xMF0sIC8qICgpICovMClcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIGNvbXBvbmVudERpZE1vdW50OiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyICQkdGhpcyA9IHRoaXMgO1xuICAgICAgICAgICAgICAgICAgdmFyIHRoaXNKcyA9ICh0aGlzKTtcbiAgICAgICAgICAgICAgICAgIHZhciBjb252ZXJ0ZWRSZWFzb25Qcm9wcyA9IGNvbnZlcnRQcm9wc0lmVGhleXJlRnJvbUpzKHRoaXNKcy5wcm9wcywgdGhpc0pzLmpzUHJvcHNUb1JlYXNvbiwgZGVidWdOYW1lKTtcbiAgICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBjb252ZXJ0ZWRSZWFzb25Qcm9wc1swXTtcbiAgICAgICAgICAgICAgICAgIHZhciBjdXJUb3RhbFN0YXRlID0gdGhpc0pzLnN0YXRlO1xuICAgICAgICAgICAgICAgICAgdmFyIGN1clJlYXNvblN0YXRlID0gY3VyVG90YWxTdGF0ZS5yZWFzb25TdGF0ZTtcbiAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gJCR0aGlzLnNlbGYoY3VyUmVhc29uU3RhdGUsIGNvbXBvbmVudFsvKiByZXRhaW5lZFByb3BzICovMTFdKTtcbiAgICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnRbLyogc3Vic2NyaXB0aW9ucyAqLzEzXSAhPT0gc3Vic2NyaXB0aW9uc0RlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBhcnJheU9mTGlzdChDdXJyeS5fMShjb21wb25lbnRbLyogc3Vic2NyaXB0aW9ucyAqLzEzXSwgc2VsZikpLm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gcGFyYW1bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuID0gQ3VycnkuXzEocGFyYW1bMF0sIC8qICgpICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMSh1bnN1YnNjcmliZSwgdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgJCR0aGlzLnN1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudFsvKiBkaWRNb3VudCAqLzRdICE9PSBhbnlUb1VuaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGNvbXBvbmVudFsvKiBkaWRNb3VudCAqLzRdLCBzZWxmKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBjb21wb25lbnREaWRVcGRhdGU6IChmdW5jdGlvbiAocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciAkJHRoaXMgPSB0aGlzIDtcbiAgICAgICAgICAgICAgICAgIHZhciB0aGlzSnMgPSAodGhpcyk7XG4gICAgICAgICAgICAgICAgICB2YXIgY3VyU3RhdGUgPSB0aGlzSnMuc3RhdGU7XG4gICAgICAgICAgICAgICAgICB2YXIgY3VyUmVhc29uU3RhdGUgPSBjdXJTdGF0ZS5yZWFzb25TdGF0ZTtcbiAgICAgICAgICAgICAgICAgIHZhciBuZXdKc1Byb3BzID0gdGhpc0pzLnByb3BzO1xuICAgICAgICAgICAgICAgICAgdmFyIG5ld0NvbnZlcnRlZFJlYXNvblByb3BzID0gY29udmVydFByb3BzSWZUaGV5cmVGcm9tSnMobmV3SnNQcm9wcywgdGhpc0pzLmpzUHJvcHNUb1JlYXNvbiwgZGVidWdOYW1lKTtcbiAgICAgICAgICAgICAgICAgIHZhciBuZXdDb21wb25lbnQgPSBuZXdDb252ZXJ0ZWRSZWFzb25Qcm9wc1swXTtcbiAgICAgICAgICAgICAgICAgIGlmIChuZXdDb21wb25lbnRbLyogZGlkVXBkYXRlICovNV0gIT09IGFueVRvVW5pdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBwcmV2UHJvcHMgPT09IG5ld0pzUHJvcHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRDb252ZXJ0ZWRSZWFzb25Qcm9wcyA9IG1hdGNoID8gbmV3Q29udmVydGVkUmVhc29uUHJvcHMgOiBjb252ZXJ0UHJvcHNJZlRoZXlyZUZyb21KcyhwcmV2UHJvcHMsIHRoaXNKcy5qc1Byb3BzVG9SZWFzb24sIGRlYnVnTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2UmVhc29uU3RhdGUgPSBwcmV2U3RhdGUucmVhc29uU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdTZWxmID0gJCR0aGlzLnNlbGYoY3VyUmVhc29uU3RhdGUsIG5ld0NvbXBvbmVudFsvKiByZXRhaW5lZFByb3BzICovMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFNlbGZfMDAwID0gLyogaGFuZGxlICovbmV3U2VsZlsvKiBoYW5kbGUgKi8wXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFNlbGZfMDAyID0gLyogcmV0YWluZWRQcm9wcyAqL29sZENvbnZlcnRlZFJlYXNvblByb3BzWzBdWy8qIHJldGFpbmVkUHJvcHMgKi8xMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRTZWxmXzAwMyA9IC8qIHNlbmQgKi9uZXdTZWxmWy8qIHNlbmQgKi8zXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFNlbGZfMDA0ID0gLyogb25Vbm1vdW50ICovbmV3U2VsZlsvKiBvblVubW91bnQgKi80XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFNlbGYgPSAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgb2xkU2VsZl8wMDAsXG4gICAgICAgICAgICAgICAgICAgICAgLyogc3RhdGUgKi9wcmV2UmVhc29uU3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgb2xkU2VsZl8wMDIsXG4gICAgICAgICAgICAgICAgICAgICAgb2xkU2VsZl8wMDMsXG4gICAgICAgICAgICAgICAgICAgICAgb2xkU2VsZl8wMDRcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG5ld0NvbXBvbmVudFsvKiBkaWRVcGRhdGUgKi81XSwgLyogcmVjb3JkICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBvbGRTZWxmICovb2xkU2VsZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbmV3U2VsZiAqL25ld1NlbGZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyICQkdGhpcyA9IHRoaXMgO1xuICAgICAgICAgICAgICAgICAgdmFyIHRoaXNKcyA9ICh0aGlzKTtcbiAgICAgICAgICAgICAgICAgIHZhciBjb252ZXJ0ZWRSZWFzb25Qcm9wcyA9IGNvbnZlcnRQcm9wc0lmVGhleXJlRnJvbUpzKHRoaXNKcy5wcm9wcywgdGhpc0pzLmpzUHJvcHNUb1JlYXNvbiwgZGVidWdOYW1lKTtcbiAgICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBjb252ZXJ0ZWRSZWFzb25Qcm9wc1swXTtcbiAgICAgICAgICAgICAgICAgIHZhciBjdXJTdGF0ZSA9IHRoaXNKcy5zdGF0ZTtcbiAgICAgICAgICAgICAgICAgIHZhciBjdXJSZWFzb25TdGF0ZSA9IGN1clN0YXRlLnJlYXNvblN0YXRlO1xuICAgICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudFsvKiB3aWxsVW5tb3VudCAqLzZdICE9PSBhbnlUb1VuaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoY29tcG9uZW50Wy8qIHdpbGxVbm1vdW50ICovNl0sICQkdGhpcy5zZWxmKGN1clJlYXNvblN0YXRlLCBjb21wb25lbnRbLyogcmV0YWluZWRQcm9wcyAqLzExXSkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gJCR0aGlzLnN1YnNjcmlwdGlvbnM7XG4gICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2guZm9yRWFjaCgoZnVuY3Rpb24gKHVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHVuc3Vic2NyaWJlLCAvKiAoKSAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBjb21wb25lbnRXaWxsVXBkYXRlOiAoZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgJCR0aGlzID0gdGhpcyA7XG4gICAgICAgICAgICAgICAgICB2YXIgdGhpc0pzID0gKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgdmFyIG5ld0NvbnZlcnRlZFJlYXNvblByb3BzID0gY29udmVydFByb3BzSWZUaGV5cmVGcm9tSnMobmV4dFByb3BzLCB0aGlzSnMuanNQcm9wc1RvUmVhc29uLCBkZWJ1Z05hbWUpO1xuICAgICAgICAgICAgICAgICAgdmFyIG5ld0NvbXBvbmVudCA9IG5ld0NvbnZlcnRlZFJlYXNvblByb3BzWzBdO1xuICAgICAgICAgICAgICAgICAgaWYgKG5ld0NvbXBvbmVudFsvKiB3aWxsVXBkYXRlICovN10gIT09IGFueVRvVW5pdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkSnNQcm9wcyA9IHRoaXNKcy5wcm9wcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbmV4dFByb3BzID09PSBvbGRKc1Byb3BzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkQ29udmVydGVkUmVhc29uUHJvcHMgPSBtYXRjaCA/IG5ld0NvbnZlcnRlZFJlYXNvblByb3BzIDogY29udmVydFByb3BzSWZUaGV5cmVGcm9tSnMob2xkSnNQcm9wcywgdGhpc0pzLmpzUHJvcHNUb1JlYXNvbiwgZGVidWdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1clN0YXRlID0gdGhpc0pzLnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyUmVhc29uU3RhdGUgPSBjdXJTdGF0ZS5yZWFzb25TdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRSZWFzb25TdGF0ZSA9IG5leHRTdGF0ZS5yZWFzb25TdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1NlbGYgPSAkJHRoaXMuc2VsZihuZXh0UmVhc29uU3RhdGUsIG5ld0NvbXBvbmVudFsvKiByZXRhaW5lZFByb3BzICovMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFNlbGZfMDAwID0gLyogaGFuZGxlICovbmV3U2VsZlsvKiBoYW5kbGUgKi8wXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFNlbGZfMDAyID0gLyogcmV0YWluZWRQcm9wcyAqL29sZENvbnZlcnRlZFJlYXNvblByb3BzWzBdWy8qIHJldGFpbmVkUHJvcHMgKi8xMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRTZWxmXzAwMyA9IC8qIHNlbmQgKi9uZXdTZWxmWy8qIHNlbmQgKi8zXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFNlbGZfMDA0ID0gLyogb25Vbm1vdW50ICovbmV3U2VsZlsvKiBvblVubW91bnQgKi80XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFNlbGYgPSAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgb2xkU2VsZl8wMDAsXG4gICAgICAgICAgICAgICAgICAgICAgLyogc3RhdGUgKi9jdXJSZWFzb25TdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICBvbGRTZWxmXzAwMixcbiAgICAgICAgICAgICAgICAgICAgICBvbGRTZWxmXzAwMyxcbiAgICAgICAgICAgICAgICAgICAgICBvbGRTZWxmXzAwNFxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEobmV3Q29tcG9uZW50Wy8qIHdpbGxVcGRhdGUgKi83XSwgLyogcmVjb3JkICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBvbGRTZWxmICovb2xkU2VsZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbmV3U2VsZiAqL25ld1NlbGZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IChmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgJCR0aGlzID0gdGhpcyA7XG4gICAgICAgICAgICAgICAgICB2YXIgdGhpc0pzID0gKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgdmFyIG5ld0NvbnZlcnRlZFJlYXNvblByb3BzID0gY29udmVydFByb3BzSWZUaGV5cmVGcm9tSnMobmV4dFByb3BzLCB0aGlzSnMuanNQcm9wc1RvUmVhc29uLCBkZWJ1Z05hbWUpO1xuICAgICAgICAgICAgICAgICAgdmFyIG5ld0NvbXBvbmVudCA9IG5ld0NvbnZlcnRlZFJlYXNvblByb3BzWzBdO1xuICAgICAgICAgICAgICAgICAgaWYgKG5ld0NvbXBvbmVudFsvKiB3aWxsUmVjZWl2ZVByb3BzICovM10gIT09IHdpbGxSZWNlaXZlUHJvcHNEZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRKc1Byb3BzID0gdGhpc0pzLnByb3BzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBuZXh0UHJvcHMgPT09IG9sZEpzUHJvcHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRDb252ZXJ0ZWRSZWFzb25Qcm9wcyA9IG1hdGNoID8gbmV3Q29udmVydGVkUmVhc29uUHJvcHMgOiBjb252ZXJ0UHJvcHNJZlRoZXlyZUZyb21KcyhvbGRKc1Byb3BzLCB0aGlzSnMuanNQcm9wc1RvUmVhc29uLCBkZWJ1Z05hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkQ29tcG9uZW50ID0gb2xkQ29udmVydGVkUmVhc29uUHJvcHNbMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzSnMuc2V0U3RhdGUoKGZ1bmN0aW9uIChjdXJUb3RhbFN0YXRlLCBfKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1clJlYXNvblN0YXRlID0gY3VyVG90YWxTdGF0ZS5yZWFzb25TdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2xkU2VsZiA9ICQkdGhpcy5zZWxmKGN1clJlYXNvblN0YXRlLCBvbGRDb21wb25lbnRbLyogcmV0YWluZWRQcm9wcyAqLzExXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRSZWFzb25TdGF0ZSA9IEN1cnJ5Ll8xKG5ld0NvbXBvbmVudFsvKiB3aWxsUmVjZWl2ZVByb3BzICovM10sIG9sZFNlbGYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0UmVhc29uU3RhdGUgIT09IGN1clRvdGFsU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvblN0YXRlOiBuZXh0UmVhc29uU3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJUb3RhbFN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIG51bGwpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogKGZ1bmN0aW9uIChuZXh0SnNQcm9wcywgbmV4dFN0YXRlLCBfKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgJCR0aGlzID0gdGhpcyA7XG4gICAgICAgICAgICAgICAgICB2YXIgdGhpc0pzID0gKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgdmFyIGN1ckpzUHJvcHMgPSB0aGlzSnMucHJvcHM7XG4gICAgICAgICAgICAgICAgICB2YXIgb2xkQ29udmVydGVkUmVhc29uUHJvcHMgPSBjb252ZXJ0UHJvcHNJZlRoZXlyZUZyb21Kcyh0aGlzSnMucHJvcHMsIHRoaXNKcy5qc1Byb3BzVG9SZWFzb24sIGRlYnVnTmFtZSk7XG4gICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBuZXh0SnNQcm9wcyA9PT0gY3VySnNQcm9wcztcbiAgICAgICAgICAgICAgICAgIHZhciBuZXdDb252ZXJ0ZWRSZWFzb25Qcm9wcyA9IG1hdGNoID8gb2xkQ29udmVydGVkUmVhc29uUHJvcHMgOiBjb252ZXJ0UHJvcHNJZlRoZXlyZUZyb21KcyhuZXh0SnNQcm9wcywgdGhpc0pzLmpzUHJvcHNUb1JlYXNvbiwgZGVidWdOYW1lKTtcbiAgICAgICAgICAgICAgICAgIHZhciBuZXdDb21wb25lbnQgPSBuZXdDb252ZXJ0ZWRSZWFzb25Qcm9wc1swXTtcbiAgICAgICAgICAgICAgICAgIHZhciBuZXh0UmVhc29uU3RhdGUgPSBuZXh0U3RhdGUucmVhc29uU3RhdGU7XG4gICAgICAgICAgICAgICAgICB2YXIgbmV3U2VsZiA9ICQkdGhpcy5zZWxmKG5leHRSZWFzb25TdGF0ZSwgbmV3Q29tcG9uZW50Wy8qIHJldGFpbmVkUHJvcHMgKi8xMV0pO1xuICAgICAgICAgICAgICAgICAgaWYgKG5ld0NvbXBvbmVudFsvKiBzaG91bGRVcGRhdGUgKi84XSAhPT0gYW55VG9UcnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJTdGF0ZSA9IHRoaXNKcy5zdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1clJlYXNvblN0YXRlID0gY3VyU3RhdGUucmVhc29uU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRTZWxmXzAwMCA9IC8qIGhhbmRsZSAqL25ld1NlbGZbLyogaGFuZGxlICovMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRTZWxmXzAwMiA9IC8qIHJldGFpbmVkUHJvcHMgKi9vbGRDb252ZXJ0ZWRSZWFzb25Qcm9wc1swXVsvKiByZXRhaW5lZFByb3BzICovMTFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkU2VsZl8wMDMgPSAvKiBzZW5kICovbmV3U2VsZlsvKiBzZW5kICovM107XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRTZWxmXzAwNCA9IC8qIG9uVW5tb3VudCAqL25ld1NlbGZbLyogb25Vbm1vdW50ICovNF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRTZWxmID0gLyogcmVjb3JkICovW1xuICAgICAgICAgICAgICAgICAgICAgIG9sZFNlbGZfMDAwLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIHN0YXRlICovY3VyUmVhc29uU3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgb2xkU2VsZl8wMDIsXG4gICAgICAgICAgICAgICAgICAgICAgb2xkU2VsZl8wMDMsXG4gICAgICAgICAgICAgICAgICAgICAgb2xkU2VsZl8wMDRcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG5ld0NvbXBvbmVudFsvKiBzaG91bGRVcGRhdGUgKi84XSwgLyogcmVjb3JkICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBvbGRTZWxmICovb2xkU2VsZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbmV3U2VsZiAqL25ld1NlbGZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIG9uVW5tb3VudE1ldGhvZDogKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgIHZhciAkJHRoaXMgPSB0aGlzIDtcbiAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9ICQkdGhpcy5zdWJzY3JpcHRpb25zO1xuICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoLnB1c2goc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQkdGhpcy5zdWJzY3JpcHRpb25zID0gLyogYXJyYXkgKi9bc3Vic2NyaXB0aW9uXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgaGFuZGxlTWV0aG9kOiAoZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgJCR0aGlzID0gdGhpcyA7XG4gICAgICAgICAgICAgICAgICB2YXIgdGhpc0pzID0gKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoY2FsbGJhY2tQYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGN1clN0YXRlID0gdGhpc0pzLnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJSZWFzb25TdGF0ZSA9IGN1clN0YXRlLnJlYXNvblN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBjb252ZXJ0ZWRSZWFzb25Qcm9wcyA9IGNvbnZlcnRQcm9wc0lmVGhleXJlRnJvbUpzKHRoaXNKcy5wcm9wcywgdGhpc0pzLmpzUHJvcHNUb1JlYXNvbiwgZGVidWdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoY2FsbGJhY2ssIGNhbGxiYWNrUGF5bG9hZCwgJCR0aGlzLnNlbGYoY3VyUmVhc29uU3RhdGUsIGNvbnZlcnRlZFJlYXNvblByb3BzWzBdWy8qIHJldGFpbmVkUHJvcHMgKi8xMV0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHNlbmRNZXRob2Q6IChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgJCR0aGlzID0gdGhpcyA7XG4gICAgICAgICAgICAgICAgICB2YXIgdGhpc0pzID0gKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgdmFyIGNvbnZlcnRlZFJlYXNvblByb3BzID0gY29udmVydFByb3BzSWZUaGV5cmVGcm9tSnModGhpc0pzLnByb3BzLCB0aGlzSnMuanNQcm9wc1RvUmVhc29uLCBkZWJ1Z05hbWUpO1xuICAgICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IGNvbnZlcnRlZFJlYXNvblByb3BzWzBdO1xuICAgICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudFsvKiByZWR1Y2VyICovMTJdICE9PSByZWR1Y2VyRGVmYXVsdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2lkZUVmZmVjdHMgPSBbKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxTdGF0ZUFwcGxpY2F0aW9uID0gQ3VycnkuXzEoY29tcG9uZW50Wy8qIHJlZHVjZXIgKi8xMl0sIGFjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzSnMuc2V0U3RhdGUoKGZ1bmN0aW9uIChjdXJUb3RhbFN0YXRlLCBfKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1clJlYXNvblN0YXRlID0gY3VyVG90YWxTdGF0ZS5yZWFzb25TdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVhc29uU3RhdGVVcGRhdGUgPSBDdXJyeS5fMShwYXJ0aWFsU3RhdGVBcHBsaWNhdGlvbiwgY3VyUmVhc29uU3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWFzb25TdGF0ZVVwZGF0ZSA9PT0gLyogTm9VcGRhdGUgKi8wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gJCR0aGlzLnRyYW5zaXRpb25OZXh0VG90YWxTdGF0ZShjdXJUb3RhbFN0YXRlLCByZWFzb25TdGF0ZVVwZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFRvdGFsU3RhdGUgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwZXJmb3JtU2lkZUVmZmVjdHMgPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJmb3JtU2lkZUVmZmVjdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZUVmZmVjdHNbLyogY29udGVudHMgKi8wXSA9IHBlcmZvcm1TaWRlRWZmZWN0c1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0VG90YWxTdGF0ZSAhPT0gY3VyVG90YWxTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFRvdGFsU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAkJHRoaXMuaGFuZGxlTWV0aG9kKChmdW5jdGlvbiAoXywgc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoc2lkZUVmZmVjdHNbLyogY29udGVudHMgKi8wXSwgc2VsZik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHJlbmRlcjogKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciAkJHRoaXMgPSB0aGlzIDtcbiAgICAgICAgICAgICAgICAgIHZhciB0aGlzSnMgPSAodGhpcyk7XG4gICAgICAgICAgICAgICAgICB2YXIgY29udmVydGVkUmVhc29uUHJvcHMgPSBjb252ZXJ0UHJvcHNJZlRoZXlyZUZyb21Kcyh0aGlzSnMucHJvcHMsIHRoaXNKcy5qc1Byb3BzVG9SZWFzb24sIGRlYnVnTmFtZSk7XG4gICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZCA9IGNvbnZlcnRlZFJlYXNvblByb3BzWzBdO1xuICAgICAgICAgICAgICAgICAgdmFyIGN1clN0YXRlID0gdGhpc0pzLnN0YXRlO1xuICAgICAgICAgICAgICAgICAgdmFyIGN1clJlYXNvblN0YXRlID0gY3VyU3RhdGUucmVhc29uU3RhdGU7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoY3JlYXRlZFsvKiByZW5kZXIgKi85XSwgJCR0aGlzLnNlbGYoY3VyUmVhc29uU3RhdGUsIGNyZWF0ZWRbLyogcmV0YWluZWRQcm9wcyAqLzExXSkpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gYmFzaWNDb21wb25lbnQoZGVidWdOYW1lKSB7XG4gIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgLyogZGVidWdOYW1lICovZGVidWdOYW1lLFxuICAgICAgICAgIC8qIHJlYWN0Q2xhc3NJbnRlcm5hbCAqL2NyZWF0ZUNsYXNzKGRlYnVnTmFtZSksXG4gICAgICAgICAgLyogaGFuZGVkT2ZmU3RhdGUgOiByZWNvcmQgKi9bLyogY29udGVudHMgOiBOb25lICovMF0sXG4gICAgICAgICAgLyogd2lsbFJlY2VpdmVQcm9wcyAqL3dpbGxSZWNlaXZlUHJvcHNEZWZhdWx0LFxuICAgICAgICAgIC8qIGRpZE1vdW50ICovYW55VG9Vbml0LFxuICAgICAgICAgIC8qIGRpZFVwZGF0ZSAqL2FueVRvVW5pdCxcbiAgICAgICAgICAvKiB3aWxsVW5tb3VudCAqL2FueVRvVW5pdCxcbiAgICAgICAgICAvKiB3aWxsVXBkYXRlICovYW55VG9Vbml0LFxuICAgICAgICAgIC8qIHNob3VsZFVwZGF0ZSAqL2FueVRvVHJ1ZSxcbiAgICAgICAgICAvKiByZW5kZXIgKi9yZW5kZXJEZWZhdWx0LFxuICAgICAgICAgIC8qIGluaXRpYWxTdGF0ZSAqL2luaXRpYWxTdGF0ZURlZmF1bHQsXG4gICAgICAgICAgLyogcmV0YWluZWRQcm9wcyA6ICgpICovMCxcbiAgICAgICAgICAvKiByZWR1Y2VyICovcmVkdWNlckRlZmF1bHQsXG4gICAgICAgICAgLyogc3Vic2NyaXB0aW9ucyAqL3N1YnNjcmlwdGlvbnNEZWZhdWx0LFxuICAgICAgICAgIC8qIGpzRWxlbWVudFdyYXBwZWQgOiBOb25lICovMFxuICAgICAgICBdO1xufVxuXG52YXIgc3RhdGVsZXNzQ29tcG9uZW50ID0gYmFzaWNDb21wb25lbnQ7XG5cbnZhciBzdGF0ZWxlc3NDb21wb25lbnRXaXRoUmV0YWluZWRQcm9wcyA9IGJhc2ljQ29tcG9uZW50O1xuXG52YXIgcmVkdWNlckNvbXBvbmVudCA9IGJhc2ljQ29tcG9uZW50O1xuXG52YXIgcmVkdWNlckNvbXBvbmVudFdpdGhSZXRhaW5lZFByb3BzID0gYmFzaWNDb21wb25lbnQ7XG5cbmZ1bmN0aW9uIGVsZW1lbnQoJHN0YXJvcHQkc3RhciwgJHN0YXJvcHQkc3RhciQxLCBjb21wb25lbnQpIHtcbiAgdmFyIGtleSA9ICRzdGFyb3B0JHN0YXIgPyAkc3Rhcm9wdCRzdGFyWzBdIDogdW5kZWZpbmVkO1xuICB2YXIgcmVmID0gJHN0YXJvcHQkc3RhciQxID8gJHN0YXJvcHQkc3RhciQxWzBdIDogdW5kZWZpbmVkO1xuICB2YXIgZWxlbWVudCQxID0gLyogRWxlbWVudCAqL1tjb21wb25lbnRdO1xuICB2YXIgbWF0Y2ggPSBjb21wb25lbnRbLyoganNFbGVtZW50V3JhcHBlZCAqLzE0XTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKG1hdGNoWzBdLCBrZXksIHJlZik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50Wy8qIHJlYWN0Q2xhc3NJbnRlcm5hbCAqLzFdLCB7XG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgcmVmOiByZWYsXG4gICAgICAgICAgICAgICAgcmVhc29uUHJvcHM6IGVsZW1lbnQkMVxuICAgICAgICAgICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3cmFwUmVhc29uRm9ySnMoY29tcG9uZW50LCBqc1Byb3BzVG9SZWFzb24pIHtcbiAgdmFyIHRtcCA9IGNvbXBvbmVudFsvKiByZWFjdENsYXNzSW50ZXJuYWwgKi8xXS5wcm90b3R5cGU7XG4gIHRtcC5qc1Byb3BzVG9SZWFzb24gPSAvKiBTb21lICovW2pzUHJvcHNUb1JlYXNvbl07XG4gIHJldHVybiBjb21wb25lbnRbLyogcmVhY3RDbGFzc0ludGVybmFsICovMV07XG59XG5cbnZhciBkdW1teUludGVyb3BDb21wb25lbnQgPSBiYXNpY0NvbXBvbmVudChcImludGVyb3BcIik7XG5cbmZ1bmN0aW9uIHdyYXBKc0ZvclJlYXNvbihyZWFjdENsYXNzLCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgdmFyIGpzRWxlbWVudFdyYXBwZWQgPSAvKiBTb21lICovWyhmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgdmFyIHJlYWN0Q2xhc3MkMSA9IHJlYWN0Q2xhc3M7XG4gICAgICAgIHZhciBwcm9wcyQxID0gcHJvcHM7XG4gICAgICAgIHZhciBjaGlsZHJlbiQxID0gY2hpbGRyZW47XG4gICAgICAgIHZhciBrZXkgPSBwYXJhbTtcbiAgICAgICAgdmFyIHJlZiA9IHBhcmFtJDE7XG4gICAgICAgIHZhciBwcm9wcyQyID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgfSwgcHJvcHMkMSksIHtcbiAgICAgICAgICAgICAgcmVmOiByZWYsXG4gICAgICAgICAgICAgIGtleToga2V5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdmFyIHZhcmFyZ3MgPSAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgIHJlYWN0Q2xhc3MkMSxcbiAgICAgICAgICAgIHByb3BzJDJcbiAgICAgICAgICBdLmNvbmNhdChjaGlsZHJlbiQxKTtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkobnVsbCwgdmFyYXJncyk7XG4gICAgICB9KV07XG4gIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgLyogZGVidWdOYW1lICovZHVtbXlJbnRlcm9wQ29tcG9uZW50Wy8qIGRlYnVnTmFtZSAqLzBdLFxuICAgICAgICAgIC8qIHJlYWN0Q2xhc3NJbnRlcm5hbCAqL2R1bW15SW50ZXJvcENvbXBvbmVudFsvKiByZWFjdENsYXNzSW50ZXJuYWwgKi8xXSxcbiAgICAgICAgICAvKiBoYW5kZWRPZmZTdGF0ZSAqL2R1bW15SW50ZXJvcENvbXBvbmVudFsvKiBoYW5kZWRPZmZTdGF0ZSAqLzJdLFxuICAgICAgICAgIC8qIHdpbGxSZWNlaXZlUHJvcHMgKi9kdW1teUludGVyb3BDb21wb25lbnRbLyogd2lsbFJlY2VpdmVQcm9wcyAqLzNdLFxuICAgICAgICAgIC8qIGRpZE1vdW50ICovZHVtbXlJbnRlcm9wQ29tcG9uZW50Wy8qIGRpZE1vdW50ICovNF0sXG4gICAgICAgICAgLyogZGlkVXBkYXRlICovZHVtbXlJbnRlcm9wQ29tcG9uZW50Wy8qIGRpZFVwZGF0ZSAqLzVdLFxuICAgICAgICAgIC8qIHdpbGxVbm1vdW50ICovZHVtbXlJbnRlcm9wQ29tcG9uZW50Wy8qIHdpbGxVbm1vdW50ICovNl0sXG4gICAgICAgICAgLyogd2lsbFVwZGF0ZSAqL2R1bW15SW50ZXJvcENvbXBvbmVudFsvKiB3aWxsVXBkYXRlICovN10sXG4gICAgICAgICAgLyogc2hvdWxkVXBkYXRlICovZHVtbXlJbnRlcm9wQ29tcG9uZW50Wy8qIHNob3VsZFVwZGF0ZSAqLzhdLFxuICAgICAgICAgIC8qIHJlbmRlciAqL2R1bW15SW50ZXJvcENvbXBvbmVudFsvKiByZW5kZXIgKi85XSxcbiAgICAgICAgICAvKiBpbml0aWFsU3RhdGUgKi9kdW1teUludGVyb3BDb21wb25lbnRbLyogaW5pdGlhbFN0YXRlICovMTBdLFxuICAgICAgICAgIC8qIHJldGFpbmVkUHJvcHMgKi9kdW1teUludGVyb3BDb21wb25lbnRbLyogcmV0YWluZWRQcm9wcyAqLzExXSxcbiAgICAgICAgICAvKiByZWR1Y2VyICovZHVtbXlJbnRlcm9wQ29tcG9uZW50Wy8qIHJlZHVjZXIgKi8xMl0sXG4gICAgICAgICAgLyogc3Vic2NyaXB0aW9ucyAqL2R1bW15SW50ZXJvcENvbXBvbmVudFsvKiBzdWJzY3JpcHRpb25zICovMTNdLFxuICAgICAgICAgIC8qIGpzRWxlbWVudFdyYXBwZWQgKi9qc0VsZW1lbnRXcmFwcGVkXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNhZmVNYWtlRXZlbnQoZXZlbnROYW1lKSB7XG4gIGlmICh0eXBlb2YgRXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBuZXcgRXZlbnQoZXZlbnROYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgJCRldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgJCRldmVudC5pbml0RXZlbnQoZXZlbnROYW1lLCB0cnVlLCB0cnVlKTtcbiAgICByZXR1cm4gJCRldmVudDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICB2YXIgbWF0Y2ggPSB0eXBlb2YgKHdpbmRvdykgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQgOiAod2luZG93KTtcbiAgaWYgKG1hdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcmF3ID0gbWF0Y2gubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgc3dpdGNoIChyYXcpIHtcbiAgICAgIGNhc2UgXCJcIiA6IFxuICAgICAgY2FzZSBcIi9cIiA6IFxuICAgICAgICAgIHJldHVybiAvKiBbXSAqLzA7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgcmF3JDEgPSByYXcuc2xpY2UoMSk7XG4gICAgICAgIHZhciBtYXRjaCQxID0gcmF3JDFbcmF3JDEubGVuZ3RoIC0gMSB8IDBdO1xuICAgICAgICB2YXIgcmF3JDIgPSBtYXRjaCQxID09PSBcIi9cIiA/IHJhdyQxLnNsaWNlKDAsIC0xKSA6IHJhdyQxO1xuICAgICAgICB2YXIgYSA9IHJhdyQyLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgdmFyIF9pID0gYS5sZW5ndGggLSAxIHwgMDtcbiAgICAgICAgdmFyIF9yZXMgPSAvKiBbXSAqLzA7XG4gICAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgICB2YXIgcmVzID0gX3JlcztcbiAgICAgICAgICB2YXIgaSA9IF9pO1xuICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3JlcyA9IC8qIDo6ICovW1xuICAgICAgICAgICAgICBhW2ldLFxuICAgICAgICAgICAgICByZXNcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzaCgpIHtcbiAgdmFyIG1hdGNoID0gdHlwZW9mICh3aW5kb3cpID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkIDogKHdpbmRvdyk7XG4gIGlmIChtYXRjaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHJhdyA9IG1hdGNoLmxvY2F0aW9uLmhhc2g7XG4gICAgc3dpdGNoIChyYXcpIHtcbiAgICAgIGNhc2UgXCJcIiA6IFxuICAgICAgY2FzZSBcIiNcIiA6IFxuICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHJhdy5zbGljZSgxKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2VhcmNoKCkge1xuICB2YXIgbWF0Y2ggPSB0eXBlb2YgKHdpbmRvdykgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQgOiAod2luZG93KTtcbiAgaWYgKG1hdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcmF3ID0gbWF0Y2gubG9jYXRpb24uc2VhcmNoO1xuICAgIHN3aXRjaCAocmF3KSB7XG4gICAgICBjYXNlIFwiXCIgOiBcbiAgICAgIGNhc2UgXCI/XCIgOiBcbiAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiByYXcuc2xpY2UoMSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1c2gocGF0aCkge1xuICB2YXIgbWF0Y2ggPSB0eXBlb2YgKGhpc3RvcnkpID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkIDogKGhpc3RvcnkpO1xuICB2YXIgbWF0Y2gkMSA9IHR5cGVvZiAod2luZG93KSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCA6ICh3aW5kb3cpO1xuICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBtYXRjaCQxICE9PSB1bmRlZmluZWQpIHtcbiAgICBtYXRjaC5wdXNoU3RhdGUobnVsbCwgXCJcIiwgcGF0aCk7XG4gICAgbWF0Y2gkMS5kaXNwYXRjaEV2ZW50KHNhZmVNYWtlRXZlbnQoXCJwb3BzdGF0ZVwiKSk7XG4gICAgcmV0dXJuIC8qICgpICovMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVybCgpIHtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBwYXRoICovcGF0aCgvKiAoKSAqLzApLFxuICAgICAgICAgIC8qIGhhc2ggKi9oYXNoKC8qICgpICovMCksXG4gICAgICAgICAgLyogc2VhcmNoICovc2VhcmNoKC8qICgpICovMClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gd2F0Y2hVcmwoY2FsbGJhY2spIHtcbiAgdmFyIG1hdGNoID0gdHlwZW9mICh3aW5kb3cpID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkIDogKHdpbmRvdyk7XG4gIGlmIChtYXRjaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHdhdGNoZXJJRCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMShjYWxsYmFjaywgdXJsKC8qICgpICovMCkpO1xuICAgIH07XG4gICAgbWF0Y2guYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIHdhdGNoZXJJRCk7XG4gICAgcmV0dXJuIHdhdGNoZXJJRDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVud2F0Y2hVcmwod2F0Y2hlcklEKSB7XG4gIHZhciBtYXRjaCA9IHR5cGVvZiAod2luZG93KSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCA6ICh3aW5kb3cpO1xuICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgIG1hdGNoLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCB3YXRjaGVySUQpO1xuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qICgpICovMDtcbiAgfVxufVxuXG5mdW5jdGlvbiAkJGRlZmF1bHQoKSB7XG4gIHJldHVybiAvKiAoKSAqLzA7XG59XG5cbmZ1bmN0aW9uIGNoYWluKGhhbmRsZXJPbmUsIGhhbmRsZXJUd28sIHBheWxvYWQpIHtcbiAgQ3VycnkuXzEoaGFuZGxlck9uZSwgcGF5bG9hZCk7XG4gIHJldHVybiBDdXJyeS5fMShoYW5kbGVyVHdvLCBwYXlsb2FkKTtcbn1cblxudmFyIENhbGxiYWNrID0gLyogbW9kdWxlICovW1xuICAvKiBkZWZhdWx0ICovJCRkZWZhdWx0LFxuICAvKiBjaGFpbiAqL2NoYWluXG5dO1xuXG52YXIgUm91dGVyID0gW1xuICBwdXNoLFxuICB3YXRjaFVybCxcbiAgdW53YXRjaFVybCxcbiAgdXJsXG5dO1xuXG5leHBvcnRzLnN0YXRlbGVzc0NvbXBvbmVudCA9IHN0YXRlbGVzc0NvbXBvbmVudDtcbmV4cG9ydHMuc3RhdGVsZXNzQ29tcG9uZW50V2l0aFJldGFpbmVkUHJvcHMgPSBzdGF0ZWxlc3NDb21wb25lbnRXaXRoUmV0YWluZWRQcm9wcztcbmV4cG9ydHMucmVkdWNlckNvbXBvbmVudCA9IHJlZHVjZXJDb21wb25lbnQ7XG5leHBvcnRzLnJlZHVjZXJDb21wb25lbnRXaXRoUmV0YWluZWRQcm9wcyA9IHJlZHVjZXJDb21wb25lbnRXaXRoUmV0YWluZWRQcm9wcztcbmV4cG9ydHMuZWxlbWVudCA9IGVsZW1lbnQ7XG5leHBvcnRzLndyYXBSZWFzb25Gb3JKcyA9IHdyYXBSZWFzb25Gb3JKcztcbmV4cG9ydHMuY3JlYXRlRG9tRWxlbWVudCA9IGNyZWF0ZURvbUVsZW1lbnQ7XG5leHBvcnRzLndyYXBKc0ZvclJlYXNvbiA9IHdyYXBKc0ZvclJlYXNvbjtcbmV4cG9ydHMuUm91dGVyID0gUm91dGVyO1xuZXhwb3J0cy5DYWxsYmFjayA9IENhbGxiYWNrO1xuLyogZHVtbXlJbnRlcm9wQ29tcG9uZW50IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ByZWZpeGVkVmFsdWU7XG52YXIgcmVnZXggPSAvLXdlYmtpdC18LW1vei18LW1zLS87XG5cbmZ1bmN0aW9uIGlzUHJlZml4ZWRWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiByZWdleC50ZXN0KHZhbHVlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gY2FtbF9pbnRfY29tcGFyZSh4LCB5KSB7XG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9ib29sX2NvbXBhcmUoeCwgeSkge1xuICBpZiAoeCkge1xuICAgIGlmICh5KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICB9IGVsc2UgaWYgKHkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9mbG9hdF9jb21wYXJlKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4gMDtcbiAgfSBlbHNlIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmICh4ID4geSB8fCB4ID09PSB4KSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiAoeSA9PT0geSkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX3N0cmluZ19jb21wYXJlKHMxLCBzMikge1xuICBpZiAoczEgPT09IHMyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSBpZiAoczEgPCBzMikge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Jvb2xfbWluKHgsIHkpIHtcbiAgaWYgKHgpIHtcbiAgICByZXR1cm4geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2ludF9taW4oeCwgeSkge1xuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Zsb2F0X21pbih4LCB5KSB7XG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3RyaW5nX21pbih4LCB5KSB7XG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfbmF0aXZlaW50X21pbih4LCB5KSB7XG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfaW50MzJfbWluKHgsIHkpIHtcbiAgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9ib29sX21heCh4LCB5KSB7XG4gIGlmICh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9pbnRfbWF4KHgsIHkpIHtcbiAgaWYgKHggPiB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9mbG9hdF9tYXgoeCwgeSkge1xuICBpZiAoeCA+IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX3N0cmluZ19tYXgoeCwgeSkge1xuICBpZiAoeCA+IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX25hdGl2ZWludF9tYXgoeCwgeSkge1xuICBpZiAoeCA+IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2ludDMyX21heCh4LCB5KSB7XG4gIGlmICh4ID4geSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbnZhciBjYW1sX25hdGl2ZWludF9jb21wYXJlID0gY2FtbF9pbnRfY29tcGFyZTtcblxudmFyIGNhbWxfaW50MzJfY29tcGFyZSA9IGNhbWxfaW50X2NvbXBhcmU7XG5cbmV4cG9ydHMuY2FtbF9pbnRfY29tcGFyZSA9IGNhbWxfaW50X2NvbXBhcmU7XG5leHBvcnRzLmNhbWxfYm9vbF9jb21wYXJlID0gY2FtbF9ib29sX2NvbXBhcmU7XG5leHBvcnRzLmNhbWxfZmxvYXRfY29tcGFyZSA9IGNhbWxfZmxvYXRfY29tcGFyZTtcbmV4cG9ydHMuY2FtbF9uYXRpdmVpbnRfY29tcGFyZSA9IGNhbWxfbmF0aXZlaW50X2NvbXBhcmU7XG5leHBvcnRzLmNhbWxfc3RyaW5nX2NvbXBhcmUgPSBjYW1sX3N0cmluZ19jb21wYXJlO1xuZXhwb3J0cy5jYW1sX2ludDMyX2NvbXBhcmUgPSBjYW1sX2ludDMyX2NvbXBhcmU7XG5leHBvcnRzLmNhbWxfYm9vbF9taW4gPSBjYW1sX2Jvb2xfbWluO1xuZXhwb3J0cy5jYW1sX2ludF9taW4gPSBjYW1sX2ludF9taW47XG5leHBvcnRzLmNhbWxfZmxvYXRfbWluID0gY2FtbF9mbG9hdF9taW47XG5leHBvcnRzLmNhbWxfc3RyaW5nX21pbiA9IGNhbWxfc3RyaW5nX21pbjtcbmV4cG9ydHMuY2FtbF9uYXRpdmVpbnRfbWluID0gY2FtbF9uYXRpdmVpbnRfbWluO1xuZXhwb3J0cy5jYW1sX2ludDMyX21pbiA9IGNhbWxfaW50MzJfbWluO1xuZXhwb3J0cy5jYW1sX2Jvb2xfbWF4ID0gY2FtbF9ib29sX21heDtcbmV4cG9ydHMuY2FtbF9pbnRfbWF4ID0gY2FtbF9pbnRfbWF4O1xuZXhwb3J0cy5jYW1sX2Zsb2F0X21heCA9IGNhbWxfZmxvYXRfbWF4O1xuZXhwb3J0cy5jYW1sX3N0cmluZ19tYXggPSBjYW1sX3N0cmluZ19tYXg7XG5leHBvcnRzLmNhbWxfbmF0aXZlaW50X21heCA9IGNhbWxfbmF0aXZlaW50X21heDtcbmV4cG9ydHMuY2FtbF9pbnQzMl9tYXggPSBjYW1sX2ludDMyX21heDtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDdXJyeSA9IHJlcXVpcmUoXCIuL2N1cnJ5LmpzXCIpO1xudmFyIENhbWxfb2JqID0gcmVxdWlyZShcIi4vY2FtbF9vYmouanNcIik7XG52YXIgUGVydmFzaXZlcyA9IHJlcXVpcmUoXCIuL3BlcnZhc2l2ZXMuanNcIik7XG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gbGVuZ3RoKGwpIHtcbiAgdmFyIF9sZW4gPSAwO1xuICB2YXIgX3BhcmFtID0gbDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICB2YXIgbGVuID0gX2xlbjtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgX2xlbiA9IGxlbiArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbGVuO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaGQocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIHBhcmFtWzBdO1xuICB9IGVsc2Uge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgIFwiaGRcIlxuICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRsKHBhcmFtKSB7XG4gIGlmIChwYXJhbSkge1xuICAgIHJldHVybiBwYXJhbVsxXTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICBcInRsXCJcbiAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBudGgobCwgbikge1xuICBpZiAobiA8IDApIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkxpc3QubnRoXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX2wgPSBsO1xuICAgIHZhciBfbiA9IG47XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIG4kMSA9IF9uO1xuICAgICAgdmFyIGwkMSA9IF9sO1xuICAgICAgaWYgKGwkMSkge1xuICAgICAgICBpZiAobiQxID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGwkMVswXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfbiA9IG4kMSAtIDEgfCAwO1xuICAgICAgICAgIF9sID0gbCQxWzFdO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgICAgICBcIm50aFwiXG4gICAgICAgICAgICBdO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gcmV2X2FwcGVuZChfbDEsIF9sMikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICBpZiAobDEpIHtcbiAgICAgIF9sMiA9IC8qIDo6ICovW1xuICAgICAgICBsMVswXSxcbiAgICAgICAgbDJcbiAgICAgIF07XG4gICAgICBfbDEgPSBsMVsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGwyO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmV2KGwpIHtcbiAgcmV0dXJuIHJldl9hcHBlbmQobCwgLyogW10gKi8wKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbihwYXJhbSkge1xuICBpZiAocGFyYW0pIHtcbiAgICByZXR1cm4gUGVydmFzaXZlcy4kYXQocGFyYW1bMF0sIGZsYXR0ZW4ocGFyYW1bMV0pKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcChmLCBwYXJhbSkge1xuICBpZiAocGFyYW0pIHtcbiAgICB2YXIgciA9IEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKTtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbWFwKGYsIHBhcmFtWzFdKVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBpKGksIGYsIHBhcmFtKSB7XG4gIGlmIChwYXJhbSkge1xuICAgIHZhciByID0gQ3VycnkuXzIoZiwgaSwgcGFyYW1bMF0pO1xuICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBtYXBpKGkgKyAxIHwgMCwgZiwgcGFyYW1bMV0pXG4gICAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcGkkMShmLCBsKSB7XG4gIHJldHVybiBtYXBpKDAsIGYsIGwpO1xufVxuXG5mdW5jdGlvbiByZXZfbWFwKGYsIGwpIHtcbiAgdmFyIF9hY2N1ID0gLyogW10gKi8wO1xuICB2YXIgX3BhcmFtID0gbDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIGlmIChwYXJhbSkge1xuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICBDdXJyeS5fMShmLCBwYXJhbVswXSksXG4gICAgICAgIGFjY3VcbiAgICAgIF07XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhY2N1O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaXRlcihmLCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKTtcbiAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaXRlcmkoZiwgbCkge1xuICB2YXIgX2kgPSAwO1xuICB2YXIgZiQxID0gZjtcbiAgdmFyIF9wYXJhbSA9IGw7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIEN1cnJ5Ll8yKGYkMSwgaSwgcGFyYW1bMF0pO1xuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvbGRfbGVmdChmLCBfYWNjdSwgX2wpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsID0gX2w7XG4gICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICBpZiAobCkge1xuICAgICAgX2wgPSBsWzFdO1xuICAgICAgX2FjY3UgPSBDdXJyeS5fMihmLCBhY2N1LCBsWzBdKTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBmb2xkX3JpZ2h0KGYsIGwsIGFjY3UpIHtcbiAgaWYgKGwpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoZiwgbFswXSwgZm9sZF9yaWdodChmLCBsWzFdLCBhY2N1KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFjY3U7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwMihmLCBsMSwgbDIpIHtcbiAgaWYgKGwxKSB7XG4gICAgaWYgKGwyKSB7XG4gICAgICB2YXIgciA9IEN1cnJ5Ll8yKGYsIGwxWzBdLCBsMlswXSk7XG4gICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgIG1hcDIoZiwgbDFbMV0sIGwyWzFdKVxuICAgICAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgIFwiTGlzdC5tYXAyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgfSBlbHNlIGlmIChsMikge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5tYXAyXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJldl9tYXAyKGYsIGwxLCBsMikge1xuICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gIHZhciBfbDEgPSBsMTtcbiAgdmFyIF9sMiA9IGwyO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyJDEgPSBfbDI7XG4gICAgdmFyIGwxJDEgPSBfbDE7XG4gICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICBpZiAobDEkMSkge1xuICAgICAgaWYgKGwyJDEpIHtcbiAgICAgICAgX2wyID0gbDIkMVsxXTtcbiAgICAgICAgX2wxID0gbDEkMVsxXTtcbiAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICBDdXJyeS5fMihmLCBsMSQxWzBdLCBsMiQxWzBdKSxcbiAgICAgICAgICBhY2N1XG4gICAgICAgIF07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgICAgXCJMaXN0LnJldl9tYXAyXCJcbiAgICAgICAgICAgIF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsMiQxKSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0LnJldl9tYXAyXCJcbiAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYWNjdTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGl0ZXIyKGYsIF9sMSwgX2wyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmIChsMSkge1xuICAgICAgaWYgKGwyKSB7XG4gICAgICAgIEN1cnJ5Ll8yKGYsIGwxWzBdLCBsMlswXSk7XG4gICAgICAgIF9sMiA9IGwyWzFdO1xuICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICBcIkxpc3QuaXRlcjJcIlxuICAgICAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGwyKSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0Lml0ZXIyXCJcbiAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9sZF9sZWZ0MihmLCBfYWNjdSwgX2wxLCBfbDIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICBpZiAobDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICBfbDIgPSBsMlsxXTtcbiAgICAgICAgX2wxID0gbDFbMV07XG4gICAgICAgIF9hY2N1ID0gQ3VycnkuXzMoZiwgYWNjdSwgbDFbMF0sIGwyWzBdKTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICBcIkxpc3QuZm9sZF9sZWZ0MlwiXG4gICAgICAgICAgICBdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobDIpIHtcbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICBcIkxpc3QuZm9sZF9sZWZ0MlwiXG4gICAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBmb2xkX3JpZ2h0MihmLCBsMSwgbDIsIGFjY3UpIHtcbiAgaWYgKGwxKSB7XG4gICAgaWYgKGwyKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzMoZiwgbDFbMF0sIGwyWzBdLCBmb2xkX3JpZ2h0MihmLCBsMVsxXSwgbDJbMV0sIGFjY3UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgIFwiTGlzdC5mb2xkX3JpZ2h0MlwiXG4gICAgICAgICAgXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobDIpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkxpc3QuZm9sZF9yaWdodDJcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhY2N1O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcl9hbGwocCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICBpZiAoQ3VycnkuXzEocCwgcGFyYW1bMF0pKSB7XG4gICAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhpc3RzKHAsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmIChwYXJhbSkge1xuICAgICAgaWYgKEN1cnJ5Ll8xKHAsIHBhcmFtWzBdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvcl9hbGwyKHAsIF9sMSwgX2wyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmIChsMSkge1xuICAgICAgaWYgKGwyKSB7XG4gICAgICAgIGlmIChDdXJyeS5fMihwLCBsMVswXSwgbDJbMF0pKSB7XG4gICAgICAgICAgX2wyID0gbDJbMV07XG4gICAgICAgICAgX2wxID0gbDFbMV07XG4gICAgICAgICAgY29udGludWUgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICBcIkxpc3QuZm9yX2FsbDJcIlxuICAgICAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGwyKSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0LmZvcl9hbGwyXCJcbiAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4aXN0czIocCwgX2wxLCBfbDIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKGwxKSB7XG4gICAgICBpZiAobDIpIHtcbiAgICAgICAgaWYgKEN1cnJ5Ll8yKHAsIGwxWzBdLCBsMlswXSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfbDIgPSBsMlsxXTtcbiAgICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgICAgXCJMaXN0LmV4aXN0czJcIlxuICAgICAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGwyKSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0LmV4aXN0czJcIlxuICAgICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lbSh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKHBhcmFtWzBdLCB4KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lbXEoeCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICBpZiAocGFyYW1bMF0gPT09IHgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhc3NvYyh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIHZhciBtYXRjaCA9IHBhcmFtWzBdO1xuICAgICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwobWF0Y2hbMF0sIHgpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaFsxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzc3EoeCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBwYXJhbVswXTtcbiAgICAgIGlmIChtYXRjaFswXSA9PT0geCkge1xuICAgICAgICByZXR1cm4gbWF0Y2hbMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBtZW1fYXNzb2MoeCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChwYXJhbVswXVswXSwgeCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBtZW1fYXNzcSh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIGlmIChwYXJhbVswXVswXSA9PT0geCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlbW92ZV9hc3NvYyh4LCBwYXJhbSkge1xuICBpZiAocGFyYW0pIHtcbiAgICB2YXIgbCA9IHBhcmFtWzFdO1xuICAgIHZhciBwYWlyID0gcGFyYW1bMF07XG4gICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwocGFpclswXSwgeCkpIHtcbiAgICAgIHJldHVybiBsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgIHBhaXIsXG4gICAgICAgICAgICAgIHJlbW92ZV9hc3NvYyh4LCBsKVxuICAgICAgICAgICAgXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVfYXNzcSh4LCBwYXJhbSkge1xuICBpZiAocGFyYW0pIHtcbiAgICB2YXIgbCA9IHBhcmFtWzFdO1xuICAgIHZhciBwYWlyID0gcGFyYW1bMF07XG4gICAgaWYgKHBhaXJbMF0gPT09IHgpIHtcbiAgICAgIHJldHVybiBsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgIHBhaXIsXG4gICAgICAgICAgICAgIHJlbW92ZV9hc3NxKHgsIGwpXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmQocCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICB2YXIgeCA9IHBhcmFtWzBdO1xuICAgICAgaWYgKEN1cnJ5Ll8xKHAsIHgpKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZF9hbGwocCkge1xuICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIF9hY2N1ID0gLyogW10gKi8wO1xuICAgICAgdmFyIF9wYXJhbSA9IHBhcmFtO1xuICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICB2YXIgcGFyYW0kMSA9IF9wYXJhbTtcbiAgICAgICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICAgICAgaWYgKHBhcmFtJDEpIHtcbiAgICAgICAgICB2YXIgbCA9IHBhcmFtJDFbMV07XG4gICAgICAgICAgdmFyIHggPSBwYXJhbSQxWzBdO1xuICAgICAgICAgIGlmIChDdXJyeS5fMShwLCB4KSkge1xuICAgICAgICAgICAgX3BhcmFtID0gbDtcbiAgICAgICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgIGFjY3VcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9wYXJhbSA9IGw7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXZfYXBwZW5kKGFjY3UsIC8qIFtdICovMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbihwLCBsKSB7XG4gIHZhciBfeWVzID0gLyogW10gKi8wO1xuICB2YXIgX25vID0gLyogW10gKi8wO1xuICB2YXIgX3BhcmFtID0gbDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICB2YXIgbm8gPSBfbm87XG4gICAgdmFyIHllcyA9IF95ZXM7XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICB2YXIgbCQxID0gcGFyYW1bMV07XG4gICAgICB2YXIgeCA9IHBhcmFtWzBdO1xuICAgICAgaWYgKEN1cnJ5Ll8xKHAsIHgpKSB7XG4gICAgICAgIF9wYXJhbSA9IGwkMTtcbiAgICAgICAgX3llcyA9IC8qIDo6ICovW1xuICAgICAgICAgIHgsXG4gICAgICAgICAgeWVzXG4gICAgICAgIF07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9wYXJhbSA9IGwkMTtcbiAgICAgICAgX25vID0gLyogOjogKi9bXG4gICAgICAgICAgeCxcbiAgICAgICAgICBub1xuICAgICAgICBdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgcmV2X2FwcGVuZCh5ZXMsIC8qIFtdICovMCksXG4gICAgICAgICAgICAgIHJldl9hcHBlbmQobm8sIC8qIFtdICovMClcbiAgICAgICAgICAgIF07XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzcGxpdChwYXJhbSkge1xuICBpZiAocGFyYW0pIHtcbiAgICB2YXIgbWF0Y2ggPSBwYXJhbVswXTtcbiAgICB2YXIgbWF0Y2gkMSA9IHNwbGl0KHBhcmFtWzFdKTtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgbWF0Y2hbMF0sXG4gICAgICAgICAgICAgIG1hdGNoJDFbMF1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgbWF0Y2hbMV0sXG4gICAgICAgICAgICAgIG1hdGNoJDFbMV1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIC8qIFtdICovMCxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tYmluZShsMSwgbDIpIHtcbiAgaWYgKGwxKSB7XG4gICAgaWYgKGwyKSB7XG4gICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgIGwxWzBdLFxuICAgICAgICAgICAgICAgIGwyWzBdXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGNvbWJpbmUobDFbMV0sIGwyWzFdKVxuICAgICAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgIFwiTGlzdC5jb21iaW5lXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgfSBlbHNlIGlmIChsMikge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5jb21iaW5lXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlKGNtcCwgbDEsIGwyKSB7XG4gIGlmIChsMSkge1xuICAgIGlmIChsMikge1xuICAgICAgdmFyIGgyID0gbDJbMF07XG4gICAgICB2YXIgaDEgPSBsMVswXTtcbiAgICAgIGlmIChDdXJyeS5fMihjbXAsIGgxLCBoMikgPD0gMCkge1xuICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgaDEsXG4gICAgICAgICAgICAgICAgbWVyZ2UoY21wLCBsMVsxXSwgbDIpXG4gICAgICAgICAgICAgIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgaDIsXG4gICAgICAgICAgICAgICAgbWVyZ2UoY21wLCBsMSwgbDJbMV0pXG4gICAgICAgICAgICAgIF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsMTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGwyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNob3AoX2ssIF9sKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbCA9IF9sO1xuICAgIHZhciBrID0gX2s7XG4gICAgaWYgKGsgPT09IDApIHtcbiAgICAgIHJldHVybiBsO1xuICAgIH0gZWxzZSBpZiAobCkge1xuICAgICAgX2wgPSBsWzFdO1xuICAgICAgX2sgPSBrIC0gMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBcImxpc3QubWxcIixcbiAgICAgICAgICAgICAgMjIzLFxuICAgICAgICAgICAgICAxMVxuICAgICAgICAgICAgXVxuICAgICAgICAgIF07XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzdGFibGVfc29ydChjbXAsIGwpIHtcbiAgdmFyIHNvcnQgPSBmdW5jdGlvbiAobiwgbCkge1xuICAgIHZhciBleGl0ID0gMDtcbiAgICBpZiAobiAhPT0gMikge1xuICAgICAgaWYgKG4gIT09IDMgfHwgIWwpIHtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF0Y2ggPSBsWzFdO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gkMSA9IG1hdGNoWzFdO1xuICAgICAgICAgIGlmIChtYXRjaCQxKSB7XG4gICAgICAgICAgICB2YXIgeDMgPSBtYXRjaCQxWzBdO1xuICAgICAgICAgICAgdmFyIHgyID0gbWF0Y2hbMF07XG4gICAgICAgICAgICB2YXIgeDEgPSBsWzBdO1xuICAgICAgICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgyKSA8PSAwKSB7XG4gICAgICAgICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgyLCB4MykgPD0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoQ3VycnkuXzIoY21wLCB4MSwgeDMpIDw9IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQ3VycnkuXzIoY21wLCB4MSwgeDMpIDw9IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQ3VycnkuXzIoY21wLCB4MiwgeDMpIDw9IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobCkge1xuICAgICAgdmFyIG1hdGNoJDIgPSBsWzFdO1xuICAgICAgaWYgKG1hdGNoJDIpIHtcbiAgICAgICAgdmFyIHgyJDEgPSBtYXRjaCQyWzBdO1xuICAgICAgICB2YXIgeDEkMSA9IGxbMF07XG4gICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgxJDEsIHgyJDEpIDw9IDApIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDIkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGl0ID0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZXhpdCA9IDE7XG4gICAgfVxuICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICB2YXIgbjEgPSAobiA+PiAxKTtcbiAgICAgIHZhciBuMiA9IG4gLSBuMSB8IDA7XG4gICAgICB2YXIgbDIgPSBjaG9wKG4xLCBsKTtcbiAgICAgIHZhciBzMSA9IHJldl9zb3J0KG4xLCBsKTtcbiAgICAgIHZhciBzMiA9IHJldl9zb3J0KG4yLCBsMik7XG4gICAgICB2YXIgX2wxID0gczE7XG4gICAgICB2YXIgX2wyID0gczI7XG4gICAgICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgICAgIHZhciBsMiQxID0gX2wyO1xuICAgICAgICB2YXIgbDEgPSBfbDE7XG4gICAgICAgIGlmIChsMSkge1xuICAgICAgICAgIGlmIChsMiQxKSB7XG4gICAgICAgICAgICB2YXIgaDIgPSBsMiQxWzBdO1xuICAgICAgICAgICAgdmFyIGgxID0gbDFbMF07XG4gICAgICAgICAgICBpZiAoQ3VycnkuXzIoY21wLCBoMSwgaDIpID4gMCkge1xuICAgICAgICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIGgxLFxuICAgICAgICAgICAgICAgIGFjY3VcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgX2wxID0gbDFbMV07XG4gICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgaDIsXG4gICAgICAgICAgICAgICAgYWNjdVxuICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICBfbDIgPSBsMiQxWzFdO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwxLCBhY2N1KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJldl9hcHBlbmQobDIkMSwgYWNjdSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIFxuICB9O1xuICB2YXIgcmV2X3NvcnQgPSBmdW5jdGlvbiAobiwgbCkge1xuICAgIHZhciBleGl0ID0gMDtcbiAgICBpZiAobiAhPT0gMikge1xuICAgICAgaWYgKG4gIT09IDMgfHwgIWwpIHtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF0Y2ggPSBsWzFdO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gkMSA9IG1hdGNoWzFdO1xuICAgICAgICAgIGlmIChtYXRjaCQxKSB7XG4gICAgICAgICAgICB2YXIgeDMgPSBtYXRjaCQxWzBdO1xuICAgICAgICAgICAgdmFyIHgyID0gbWF0Y2hbMF07XG4gICAgICAgICAgICB2YXIgeDEgPSBsWzBdO1xuICAgICAgICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgyKSA+IDApIHtcbiAgICAgICAgICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgeDIsIHgzKSA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKSA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQ3VycnkuXzIoY21wLCB4MSwgeDMpID4gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChDdXJyeS5fMihjbXAsIHgyLCB4MykgPiAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGwpIHtcbiAgICAgIHZhciBtYXRjaCQyID0gbFsxXTtcbiAgICAgIGlmIChtYXRjaCQyKSB7XG4gICAgICAgIHZhciB4MiQxID0gbWF0Y2gkMlswXTtcbiAgICAgICAgdmFyIHgxJDEgPSBsWzBdO1xuICAgICAgICBpZiAoQ3VycnkuXzIoY21wLCB4MSQxLCB4MiQxKSA+IDApIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDIkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGl0ID0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZXhpdCA9IDE7XG4gICAgfVxuICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICB2YXIgbjEgPSAobiA+PiAxKTtcbiAgICAgIHZhciBuMiA9IG4gLSBuMSB8IDA7XG4gICAgICB2YXIgbDIgPSBjaG9wKG4xLCBsKTtcbiAgICAgIHZhciBzMSA9IHNvcnQobjEsIGwpO1xuICAgICAgdmFyIHMyID0gc29ydChuMiwgbDIpO1xuICAgICAgdmFyIF9sMSA9IHMxO1xuICAgICAgdmFyIF9sMiA9IHMyO1xuICAgICAgdmFyIF9hY2N1ID0gLyogW10gKi8wO1xuICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgICAgICB2YXIgbDIkMSA9IF9sMjtcbiAgICAgICAgdmFyIGwxID0gX2wxO1xuICAgICAgICBpZiAobDEpIHtcbiAgICAgICAgICBpZiAobDIkMSkge1xuICAgICAgICAgICAgdmFyIGgyID0gbDIkMVswXTtcbiAgICAgICAgICAgIHZhciBoMSA9IGwxWzBdO1xuICAgICAgICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgaDEsIGgyKSA8PSAwKSB7XG4gICAgICAgICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgaDEsXG4gICAgICAgICAgICAgICAgYWNjdVxuICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBoMixcbiAgICAgICAgICAgICAgICBhY2N1XG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIF9sMiA9IGwyJDFbMV07XG4gICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJldl9hcHBlbmQobDEsIGFjY3UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMiQxLCBhY2N1KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgXG4gIH07XG4gIHZhciBsZW4gPSBsZW5ndGgobCk7XG4gIGlmIChsZW4gPCAyKSB7XG4gICAgcmV0dXJuIGw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNvcnQobGVuLCBsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzb3J0X3VuaXEoY21wLCBsKSB7XG4gIHZhciBzb3J0ID0gZnVuY3Rpb24gKG4sIGwpIHtcbiAgICB2YXIgZXhpdCA9IDA7XG4gICAgaWYgKG4gIT09IDIpIHtcbiAgICAgIGlmIChuICE9PSAzIHx8ICFsKSB7XG4gICAgICAgIGV4aXQgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoID0gbFsxXTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSBtYXRjaFsxXTtcbiAgICAgICAgICBpZiAobWF0Y2gkMSkge1xuICAgICAgICAgICAgdmFyIHgzID0gbWF0Y2gkMVswXTtcbiAgICAgICAgICAgIHZhciB4MiA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdmFyIHgxID0gbFswXTtcbiAgICAgICAgICAgIHZhciBjID0gQ3VycnkuXzIoY21wLCB4MSwgeDIpO1xuICAgICAgICAgICAgaWYgKGMgPT09IDApIHtcbiAgICAgICAgICAgICAgdmFyIGMkMSA9IEN1cnJ5Ll8yKGNtcCwgeDIsIHgzKTtcbiAgICAgICAgICAgICAgaWYgKGMkMSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjJDEgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA8IDApIHtcbiAgICAgICAgICAgICAgdmFyIGMkMiA9IEN1cnJ5Ll8yKGNtcCwgeDIsIHgzKTtcbiAgICAgICAgICAgICAgaWYgKGMkMiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMkMiA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBjJDMgPSBDdXJyeS5fMihjbXAsIHgxLCB4Myk7XG4gICAgICAgICAgICAgICAgaWYgKGMkMyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjJDMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGMkNCA9IEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKTtcbiAgICAgICAgICAgICAgaWYgKGMkNCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMkNCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBjJDUgPSBDdXJyeS5fMihjbXAsIHgyLCB4Myk7XG4gICAgICAgICAgICAgICAgaWYgKGMkNSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjJDUgPCAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGwpIHtcbiAgICAgIHZhciBtYXRjaCQyID0gbFsxXTtcbiAgICAgIGlmIChtYXRjaCQyKSB7XG4gICAgICAgIHZhciB4MiQxID0gbWF0Y2gkMlswXTtcbiAgICAgICAgdmFyIHgxJDEgPSBsWzBdO1xuICAgICAgICB2YXIgYyQ2ID0gQ3VycnkuXzIoY21wLCB4MSQxLCB4MiQxKTtcbiAgICAgICAgaWYgKGMkNiA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHgxJDEsXG4gICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2UgaWYgKGMkNiA8IDApIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDIkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGl0ID0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZXhpdCA9IDE7XG4gICAgfVxuICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICB2YXIgbjEgPSAobiA+PiAxKTtcbiAgICAgIHZhciBuMiA9IG4gLSBuMSB8IDA7XG4gICAgICB2YXIgbDIgPSBjaG9wKG4xLCBsKTtcbiAgICAgIHZhciBzMSA9IHJldl9zb3J0KG4xLCBsKTtcbiAgICAgIHZhciBzMiA9IHJldl9zb3J0KG4yLCBsMik7XG4gICAgICB2YXIgX2wxID0gczE7XG4gICAgICB2YXIgX2wyID0gczI7XG4gICAgICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgICAgIHZhciBsMiQxID0gX2wyO1xuICAgICAgICB2YXIgbDEgPSBfbDE7XG4gICAgICAgIGlmIChsMSkge1xuICAgICAgICAgIGlmIChsMiQxKSB7XG4gICAgICAgICAgICB2YXIgdDIgPSBsMiQxWzFdO1xuICAgICAgICAgICAgdmFyIGgyID0gbDIkMVswXTtcbiAgICAgICAgICAgIHZhciB0MSA9IGwxWzFdO1xuICAgICAgICAgICAgdmFyIGgxID0gbDFbMF07XG4gICAgICAgICAgICB2YXIgYyQ3ID0gQ3VycnkuXzIoY21wLCBoMSwgaDIpO1xuICAgICAgICAgICAgaWYgKGMkNyA9PT0gMCkge1xuICAgICAgICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIGgxLFxuICAgICAgICAgICAgICAgIGFjY3VcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgX2wyID0gdDI7XG4gICAgICAgICAgICAgIF9sMSA9IHQxO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMkNyA+IDApIHtcbiAgICAgICAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBoMSxcbiAgICAgICAgICAgICAgICBhY2N1XG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIF9sMSA9IHQxO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIGgyLFxuICAgICAgICAgICAgICAgIGFjY3VcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgX2wyID0gdDI7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJldl9hcHBlbmQobDEsIGFjY3UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMiQxLCBhY2N1KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgXG4gIH07XG4gIHZhciByZXZfc29ydCA9IGZ1bmN0aW9uIChuLCBsKSB7XG4gICAgdmFyIGV4aXQgPSAwO1xuICAgIGlmIChuICE9PSAyKSB7XG4gICAgICBpZiAobiAhPT0gMyB8fCAhbCkge1xuICAgICAgICBleGl0ID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGxbMV07XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHZhciBtYXRjaCQxID0gbWF0Y2hbMV07XG4gICAgICAgICAgaWYgKG1hdGNoJDEpIHtcbiAgICAgICAgICAgIHZhciB4MyA9IG1hdGNoJDFbMF07XG4gICAgICAgICAgICB2YXIgeDIgPSBtYXRjaFswXTtcbiAgICAgICAgICAgIHZhciB4MSA9IGxbMF07XG4gICAgICAgICAgICB2YXIgYyA9IEN1cnJ5Ll8yKGNtcCwgeDEsIHgyKTtcbiAgICAgICAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgICAgICAgIHZhciBjJDEgPSBDdXJyeS5fMihjbXAsIHgyLCB4Myk7XG4gICAgICAgICAgICAgIGlmIChjJDEgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQxID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPiAwKSB7XG4gICAgICAgICAgICAgIHZhciBjJDIgPSBDdXJyeS5fMihjbXAsIHgyLCB4Myk7XG4gICAgICAgICAgICAgIGlmIChjJDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjJDIgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYyQzID0gQ3VycnkuXzIoY21wLCB4MSwgeDMpO1xuICAgICAgICAgICAgICAgIGlmIChjJDMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQzID4gMCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBjJDQgPSBDdXJyeS5fMihjbXAsIHgxLCB4Myk7XG4gICAgICAgICAgICAgIGlmIChjJDQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjJDQgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYyQ1ID0gQ3VycnkuXzIoY21wLCB4MiwgeDMpO1xuICAgICAgICAgICAgICAgIGlmIChjJDUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQ1ID4gMCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsKSB7XG4gICAgICB2YXIgbWF0Y2gkMiA9IGxbMV07XG4gICAgICBpZiAobWF0Y2gkMikge1xuICAgICAgICB2YXIgeDIkMSA9IG1hdGNoJDJbMF07XG4gICAgICAgIHZhciB4MSQxID0gbFswXTtcbiAgICAgICAgdmFyIGMkNiA9IEN1cnJ5Ll8yKGNtcCwgeDEkMSwgeDIkMSk7XG4gICAgICAgIGlmIChjJDYgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIGlmIChjJDYgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MiQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXQgPSAxO1xuICAgIH1cbiAgICBpZiAoZXhpdCA9PT0gMSkge1xuICAgICAgdmFyIG4xID0gKG4gPj4gMSk7XG4gICAgICB2YXIgbjIgPSBuIC0gbjEgfCAwO1xuICAgICAgdmFyIGwyID0gY2hvcChuMSwgbCk7XG4gICAgICB2YXIgczEgPSBzb3J0KG4xLCBsKTtcbiAgICAgIHZhciBzMiA9IHNvcnQobjIsIGwyKTtcbiAgICAgIHZhciBfbDEgPSBzMTtcbiAgICAgIHZhciBfbDIgPSBzMjtcbiAgICAgIHZhciBfYWNjdSA9IC8qIFtdICovMDtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICAgICAgdmFyIGwyJDEgPSBfbDI7XG4gICAgICAgIHZhciBsMSA9IF9sMTtcbiAgICAgICAgaWYgKGwxKSB7XG4gICAgICAgICAgaWYgKGwyJDEpIHtcbiAgICAgICAgICAgIHZhciB0MiA9IGwyJDFbMV07XG4gICAgICAgICAgICB2YXIgaDIgPSBsMiQxWzBdO1xuICAgICAgICAgICAgdmFyIHQxID0gbDFbMV07XG4gICAgICAgICAgICB2YXIgaDEgPSBsMVswXTtcbiAgICAgICAgICAgIHZhciBjJDcgPSBDdXJyeS5fMihjbXAsIGgxLCBoMik7XG4gICAgICAgICAgICBpZiAoYyQ3ID09PSAwKSB7XG4gICAgICAgICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgaDEsXG4gICAgICAgICAgICAgICAgYWNjdVxuICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICBfbDIgPSB0MjtcbiAgICAgICAgICAgICAgX2wxID0gdDE7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQ3IDwgMCkge1xuICAgICAgICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIGgxLFxuICAgICAgICAgICAgICAgIGFjY3VcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgX2wxID0gdDE7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgaDIsXG4gICAgICAgICAgICAgICAgYWNjdVxuICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICBfbDIgPSB0MjtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMSwgYWNjdSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwyJDEsIGFjY3UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgfTtcbiAgdmFyIGxlbiA9IGxlbmd0aChsKTtcbiAgaWYgKGxlbiA8IDIpIHtcbiAgICByZXR1cm4gbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc29ydChsZW4sIGwpO1xuICB9XG59XG5cbnZhciBhcHBlbmQgPSBQZXJ2YXNpdmVzLiRhdDtcblxudmFyIGNvbmNhdCA9IGZsYXR0ZW47XG5cbnZhciBmaWx0ZXIgPSBmaW5kX2FsbDtcblxudmFyIHNvcnQgPSBzdGFibGVfc29ydDtcblxudmFyIGZhc3Rfc29ydCA9IHN0YWJsZV9zb3J0O1xuXG5leHBvcnRzLmxlbmd0aCA9IGxlbmd0aDtcbmV4cG9ydHMuaGQgPSBoZDtcbmV4cG9ydHMudGwgPSB0bDtcbmV4cG9ydHMubnRoID0gbnRoO1xuZXhwb3J0cy5yZXYgPSByZXY7XG5leHBvcnRzLmFwcGVuZCA9IGFwcGVuZDtcbmV4cG9ydHMucmV2X2FwcGVuZCA9IHJldl9hcHBlbmQ7XG5leHBvcnRzLmNvbmNhdCA9IGNvbmNhdDtcbmV4cG9ydHMuZmxhdHRlbiA9IGZsYXR0ZW47XG5leHBvcnRzLml0ZXIgPSBpdGVyO1xuZXhwb3J0cy5pdGVyaSA9IGl0ZXJpO1xuZXhwb3J0cy5tYXAgPSBtYXA7XG5leHBvcnRzLm1hcGkgPSBtYXBpJDE7XG5leHBvcnRzLnJldl9tYXAgPSByZXZfbWFwO1xuZXhwb3J0cy5mb2xkX2xlZnQgPSBmb2xkX2xlZnQ7XG5leHBvcnRzLmZvbGRfcmlnaHQgPSBmb2xkX3JpZ2h0O1xuZXhwb3J0cy5pdGVyMiA9IGl0ZXIyO1xuZXhwb3J0cy5tYXAyID0gbWFwMjtcbmV4cG9ydHMucmV2X21hcDIgPSByZXZfbWFwMjtcbmV4cG9ydHMuZm9sZF9sZWZ0MiA9IGZvbGRfbGVmdDI7XG5leHBvcnRzLmZvbGRfcmlnaHQyID0gZm9sZF9yaWdodDI7XG5leHBvcnRzLmZvcl9hbGwgPSBmb3JfYWxsO1xuZXhwb3J0cy5leGlzdHMgPSBleGlzdHM7XG5leHBvcnRzLmZvcl9hbGwyID0gZm9yX2FsbDI7XG5leHBvcnRzLmV4aXN0czIgPSBleGlzdHMyO1xuZXhwb3J0cy5tZW0gPSBtZW07XG5leHBvcnRzLm1lbXEgPSBtZW1xO1xuZXhwb3J0cy5maW5kID0gZmluZDtcbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyO1xuZXhwb3J0cy5maW5kX2FsbCA9IGZpbmRfYWxsO1xuZXhwb3J0cy5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG5leHBvcnRzLmFzc29jID0gYXNzb2M7XG5leHBvcnRzLmFzc3EgPSBhc3NxO1xuZXhwb3J0cy5tZW1fYXNzb2MgPSBtZW1fYXNzb2M7XG5leHBvcnRzLm1lbV9hc3NxID0gbWVtX2Fzc3E7XG5leHBvcnRzLnJlbW92ZV9hc3NvYyA9IHJlbW92ZV9hc3NvYztcbmV4cG9ydHMucmVtb3ZlX2Fzc3EgPSByZW1vdmVfYXNzcTtcbmV4cG9ydHMuc3BsaXQgPSBzcGxpdDtcbmV4cG9ydHMuY29tYmluZSA9IGNvbWJpbmU7XG5leHBvcnRzLnNvcnQgPSBzb3J0O1xuZXhwb3J0cy5zdGFibGVfc29ydCA9IHN0YWJsZV9zb3J0O1xuZXhwb3J0cy5mYXN0X3NvcnQgPSBmYXN0X3NvcnQ7XG5leHBvcnRzLnNvcnRfdW5pcSA9IHNvcnRfdW5pcTtcbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBUIFZFUlNJT04gMy4wLjAsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTGlzdCA9IHJlcXVpcmUoXCJicy1wbGF0Zm9ybS9saWIvanMvbGlzdC5qc1wiKTtcbnZhciAkJFN0cmluZyA9IHJlcXVpcmUoXCJicy1wbGF0Zm9ybS9saWIvanMvc3RyaW5nLmpzXCIpO1xudmFyIEdsYW1vciA9IHJlcXVpcmUoXCJnbGFtb3JcIik7XG52YXIgSnNfZGljdCA9IHJlcXVpcmUoXCJicy1wbGF0Zm9ybS9saWIvanMvanNfZGljdC5qc1wiKTtcbnZhciBKc19vcHRpb24gPSByZXF1aXJlKFwiYnMtcGxhdGZvcm0vbGliL2pzL2pzX29wdGlvbi5qc1wiKTtcbnZhciBKc19tYXBwZXJSdCA9IHJlcXVpcmUoXCJicy1wbGF0Zm9ybS9saWIvanMvanNfbWFwcGVyUnQuanNcIik7XG5cbmZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yLCBzdHJpbmdzKSB7XG4gIHZhciBfYWNjID0gXCJcIjtcbiAgdmFyIF9zdHJpbmdzID0gc3RyaW5ncztcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBzdHJpbmdzJDEgPSBfc3RyaW5ncztcbiAgICB2YXIgYWNjID0gX2FjYztcbiAgICBpZiAoc3RyaW5ncyQxKSB7XG4gICAgICB2YXIgeHMgPSBzdHJpbmdzJDFbMV07XG4gICAgICB2YXIgeCA9IHN0cmluZ3MkMVswXTtcbiAgICAgIGlmICh4cykge1xuICAgICAgICBfc3RyaW5ncyA9IHhzO1xuICAgICAgICBfYWNjID0gYWNjICsgKHggKyBzZXBhcmF0b3IpO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYWNjICsgeDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gIH07XG59XG5cbigoXHJcbiAgICAgIGZ1bmN0aW9uIChzdHlsZXMpIHtcclxuICAgICAgICAgIGNvbnN0IGdsYW1vciA9IHJlcXVpcmUoJ2dsYW1vcicpO1xyXG4gICAgICAgICAgcmV0dXJuIGdsYW1vci5jc3MuYXBwbHkoZ2xhbW9yLCBzdHlsZXMpXHJcbiAgICAgIH1cclxuICApKTtcblxuZnVuY3Rpb24gbWFrZURpY3QocnVsZXNldCkge1xuICB2YXIgdG9KcyA9IGZ1bmN0aW9uIChydWxlKSB7XG4gICAgdmFyIHZhcmlhbnQgPSBydWxlWzBdO1xuICAgIGlmICh2YXJpYW50ICE9PSAtNjU5NTgzNTk1KSB7XG4gICAgICBpZiAodmFyaWFudCA+PSA0ODg2ODc1ODQpIHtcbiAgICAgICAgaWYgKHZhcmlhbnQgPj0gODI5MjQwMDk1KSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gcnVsZVsxXTtcbiAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgICAgICAgIG1ha2VEaWN0KG1hdGNoWzFdKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgXCJib3hTaGFkb3dcIixcbiAgICAgICAgICAgICAgICAgIHJ1bGVbMV1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTQzNDk1Mjk2Nikge1xuICAgICAgICB2YXIgbWF0Y2gkMSA9IHJ1bGVbMV07XG4gICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICBtYXRjaCQxWzBdLFxuICAgICAgICAgICAgICAgIG1hdGNoJDFbMV1cbiAgICAgICAgICAgICAgXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICBcImFuaW1hdGlvblwiLFxuICAgICAgICAgICAgICAgIHJ1bGVbMV1cbiAgICAgICAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBcInRyYW5zaXRpb25cIixcbiAgICAgICAgICAgICAgcnVsZVsxXVxuICAgICAgICAgICAgXTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBKc19kaWN0LmZyb21MaXN0KExpc3QubWFwKHRvSnMsIHJ1bGVzZXQpKTtcbn1cblxuZnVuY3Rpb24gJCRnbG9iYWwoc2VsZWN0b3IsIHJ1bGVzKSB7XG4gIEdsYW1vci5jc3MuZ2xvYmFsKHNlbGVjdG9yLCBtYWtlRGljdChydWxlcykpO1xuICByZXR1cm4gLyogKCkgKi8wO1xufVxuXG5mdW5jdGlvbiBrZXlmcmFtZXMoZnJhbWVzKSB7XG4gIHZhciBhZGRTdG9wID0gZnVuY3Rpb24gKGRpY3QsIHBhcmFtKSB7XG4gICAgZGljdFtTdHJpbmcocGFyYW1bMF0pICsgXCIlXCJdID0gbWFrZURpY3QocGFyYW1bMV0pO1xuICAgIHJldHVybiBkaWN0O1xuICB9O1xuICByZXR1cm4gR2xhbW9yLmNzcy5rZXlmcmFtZXMoTGlzdC5mb2xkX2xlZnQoYWRkU3RvcCwgeyB9LCBmcmFtZXMpKTtcbn1cblxuZnVuY3Rpb24gc3R5bGUocnVsZXMpIHtcbiAgcmV0dXJuIEdsYW1vci5jc3MobWFrZURpY3QoTGlzdC5yZXYocnVsZXMpKSkudG9TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gZChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIC8qIGBkZWNsYXJhdGlvbiAqL1tcbiAgICAgICAgICAtNDM0OTUyOTY2LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZnVuYzEobmFtZSwgYXJnKSB7XG4gIHJldHVybiBuYW1lICsgKFwiKFwiICsgKGFyZyArIFwiKVwiKSk7XG59XG5cbmZ1bmN0aW9uIGZ1bmMyKG5hbWUsIGFyZywgYXJnJHByaW1lKSB7XG4gIHJldHVybiBuYW1lICsgKFwiKFwiICsgKGFyZyArIChcIiwgXCIgKyAoYXJnJHByaW1lICsgXCIpXCIpKSkpO1xufVxuXG5mdW5jdGlvbiBmdW5jQW55KG5hbWUsIGFyZ3MpIHtcbiAgcmV0dXJuIG5hbWUgKyAoXCIoXCIgKyAoam9pbihcIiwgXCIsIGFyZ3MpICsgXCIpXCIpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2Zsb2F0KGYpIHtcbiAgcmV0dXJuIFwiXCIgKyAoU3RyaW5nKGYpICsgXCJcIik7XG59XG5cbmZ1bmN0aW9uIGltcG9ydGFudCh2KSB7XG4gIGlmICh0eXBlb2YgdiA9PT0gXCJudW1iZXJcIiB8fCB2WzBdICE9PSAtNDM0OTUyOTY2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1hdGNoID0gdlsxXTtcbiAgICByZXR1cm4gLyogYGRlY2xhcmF0aW9uICovW1xuICAgICAgICAgICAgLTQzNDk1Mjk2NixcbiAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgICAgbWF0Y2hbMV0gKyBcIiAhaW1wb3J0YW50XCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxhYmVsKGxhYmVsJDEpIHtcbiAgcmV0dXJuIC8qIGBkZWNsYXJhdGlvbiAqL1tcbiAgICAgICAgICAtNDM0OTUyOTY2LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgXCJsYWJlbFwiLFxuICAgICAgICAgICAgbGFiZWwkMVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2FuZ2xlKHBhcmFtKSB7XG4gIHZhciB2YXJpYW50ID0gcGFyYW1bMF07XG4gIGlmICh2YXJpYW50ID49IDQ5OTU1MjYpIHtcbiAgICBpZiAodmFyaWFudCA+PSA1NjkwODM3KSB7XG4gICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwicmFkXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBTdHJpbmcocGFyYW1bMV0pICsgXCJkZWdcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAodmFyaWFudCA+PSAtODU1MjUwMDUxKSB7XG4gICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcInR1cm5cIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwiZ3JhZFwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlZyh4KSB7XG4gIHJldHVybiAvKiBgZGVnICovW1xuICAgICAgICAgIDQ5OTU1MjYsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByYWQoeCkge1xuICByZXR1cm4gLyogYHJhZCAqL1tcbiAgICAgICAgICA1NjkwODM3LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZ3JhZCh4KSB7XG4gIHJldHVybiAvKiBgZ3JhZCAqL1tcbiAgICAgICAgICAtOTk5NTY3NDEwLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdHVybih4KSB7XG4gIHJldHVybiAvKiBgdHVybiAqL1tcbiAgICAgICAgICAtODU1MjUwMDUxLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2NvbG9yKHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gNTgyNjI2MTMwKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc3BhcmVudFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjdXJyZW50Q29sb3JcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHZhcmlhbnQgPSBwYXJhbVswXTtcbiAgICBpZiAodmFyaWFudCAhPT0gLTg3ODEyODk3Mikge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gNTE5NzU2OSkge1xuICAgICAgICBpZiAodmFyaWFudCA+PSA1NjkyMTczKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gcGFyYW1bMV07XG4gICAgICAgICAgcmV0dXJuIFwicmdiKFwiICsgKGpvaW4oXCIsIFwiLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaFswXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKG1hdGNoWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKG1hdGNoWzJdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF0pICsgXCIpXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtYXRjaCQxID0gcGFyYW1bMV07XG4gICAgICAgICAgcmV0dXJuIFwiaHNsKFwiICsgKGpvaW4oXCIsIFwiLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaCQxWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcobWF0Y2gkMVsxXSkgKyBcIiVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKG1hdGNoJDFbMl0pICsgXCIlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdKSArIFwiKVwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2YXJpYW50ID49IDUxOTQ0NTkpIHtcbiAgICAgICAgcmV0dXJuIFwiI1wiICsgcGFyYW1bMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF0Y2gkMiA9IHBhcmFtWzFdO1xuICAgICAgICByZXR1cm4gXCJoc2xhKFwiICsgKGpvaW4oXCIsIFwiLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcobWF0Y2gkMlswXSksXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcobWF0Y2gkMlsxXSkgKyBcIiVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcobWF0Y2gkMlsyXSkgKyBcIiVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2Zsb2F0KG1hdGNoJDJbM10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdKSArIFwiKVwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG1hdGNoJDMgPSBwYXJhbVsxXTtcbiAgICAgIHJldHVybiBcInJnYmEoXCIgKyAoam9pbihcIiwgXCIsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBTdHJpbmcobWF0Y2gkM1swXSksXG4gICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaCQzWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaCQzWzJdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfZmxvYXQobWF0Y2gkM1szXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgXSkgKyBcIilcIik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJnYihyLCBnLCBiKSB7XG4gIHJldHVybiAvKiBgcmdiICovW1xuICAgICAgICAgIDU2OTIxNzMsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgZyxcbiAgICAgICAgICAgIGJcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICByZXR1cm4gLyogYHJnYmEgKi9bXG4gICAgICAgICAgLTg3ODEyODk3MixcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBnLFxuICAgICAgICAgICAgYixcbiAgICAgICAgICAgIGFcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGhzbChoLCBzLCBsKSB7XG4gIHJldHVybiAvKiBgaHNsICovW1xuICAgICAgICAgIDUxOTc1NjksXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBoLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIGxcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICByZXR1cm4gLyogYGhzbGEgKi9bXG4gICAgICAgICAgLTk4ODQyNTY2NCxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGgsXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGFcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGhleCh4KSB7XG4gIHJldHVybiAvKiBgaGV4ICovW1xuICAgICAgICAgIDUxOTQ0NTksXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2Zfc3RvcHMoc3RvcHMpIHtcbiAgcmV0dXJuIGpvaW4oXCIsIFwiLCBMaXN0Lm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBqb2luKFwiIFwiLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2NvbG9yKHBhcmFtWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKHBhcmFtWzBdKSArIFwiJVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgIH0pLCBzdG9wcykpO1xufVxuXG5mdW5jdGlvbiBsaW5lYXJHcmFkaWVudChhbmdsZSwgc3RvcHMpIHtcbiAgcmV0dXJuIC8qIGBsaW5lYXJHcmFkaWVudCAqL1tcbiAgICAgICAgICA2MTYzNzk2MzcsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBhbmdsZSxcbiAgICAgICAgICAgIHN0b3BzXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByZXBlYXRpbmdMaW5lYXJHcmFkaWVudChhbmdsZSwgc3RvcHMpIHtcbiAgcmV0dXJuIC8qIGByZXBlYXRpbmdMaW5lYXJHcmFkaWVudCAqL1tcbiAgICAgICAgICAtMTYwMjgwNjQ0LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgYW5nbGUsXG4gICAgICAgICAgICBzdG9wc1xuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcmFkaWFsR3JhZGllbnQoc3RvcHMpIHtcbiAgcmV0dXJuIC8qIGByYWRpYWxHcmFkaWVudCAqL1tcbiAgICAgICAgICAxMTk1NDg5MTEsXG4gICAgICAgICAgc3RvcHNcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcmVwZWF0aW5nUmFkaWFsR3JhZGllbnQoc3RvcHMpIHtcbiAgcmV0dXJuIC8qIGByZXBlYXRpbmdSYWRpYWxHcmFkaWVudCAqL1tcbiAgICAgICAgICAtNjU3MTExMzcwLFxuICAgICAgICAgIHN0b3BzXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9sZW5ndGgocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBcIjBcIjtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmFyaWFudCA9IHBhcmFtWzBdO1xuICAgIGlmICh2YXJpYW50ID49IDIyNjQzKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAyNTA5Nikge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAyNjQzMykge1xuICAgICAgICAgIGlmICh2YXJpYW50ID49IDU2OTE3MzgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCJyZW1cIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcInZ3XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gMjY0MTgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwidmhcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKHBhcmFtWzFdKSArIFwicHhcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2YXJpYW50ICE9PSAyNDQxNikge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAyNTA5Mikge1xuICAgICAgICAgIHJldHVybiBTdHJpbmcocGFyYW1bMV0pICsgXCJwdFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCJleFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwibW1cIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTExOTg4NzE2Mykge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gMjIxODYpIHtcbiAgICAgICAgaWYgKHZhcmlhbnQgPj0gMjI2MzIpIHtcbiAgICAgICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwiZW1cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwiY21cIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2YXJpYW50ID49IDIyMTgxKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCJjaFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcIiVcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgIT09IC04MzM0NzI1MzApIHtcbiAgICAgIGlmICh2YXJpYW50ID49IC04MzM0NzA3NTYpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcInZtaW5cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHBhcmFtWzFdO1xuICAgICAgICBpZiAobWF0Y2hbMF0gPj0gNTc0NTAyNCkge1xuICAgICAgICAgIHJldHVybiBcImNhbGMoXCIgKyAoc3RyaW5nX29mX2xlbmd0aChtYXRjaFsxXSkgKyAoXCIgLSBcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzJdKSArIFwiKVwiKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImNhbGMoXCIgKyAoc3RyaW5nX29mX2xlbmd0aChtYXRjaFsxXSkgKyAoXCIgKyBcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzJdKSArIFwiKVwiKSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCJ2bWF4XCI7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoKHgpIHtcbiAgcmV0dXJuIC8qIGBjaCAqL1tcbiAgICAgICAgICAyMjE4MSxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGNtKHgpIHtcbiAgcmV0dXJuIC8qIGBjbSAqL1tcbiAgICAgICAgICAyMjE4NixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGVtKHgpIHtcbiAgcmV0dXJuIC8qIGBlbSAqL1tcbiAgICAgICAgICAyMjYzMixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGV4KHgpIHtcbiAgcmV0dXJuIC8qIGBleCAqL1tcbiAgICAgICAgICAyMjY0MyxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGZyKHgpIHtcbiAgcmV0dXJuIC8qIGBmciAqL1tcbiAgICAgICAgICAyMjg2MCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIG1tKHgpIHtcbiAgcmV0dXJuIC8qIGBtbSAqL1tcbiAgICAgICAgICAyNDQxNixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHBjdCh4KSB7XG4gIHJldHVybiAvKiBgcGVyY2VudCAqL1tcbiAgICAgICAgICAtMTE5ODg3MTYzLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcHQoeCkge1xuICByZXR1cm4gLyogYHB0ICovW1xuICAgICAgICAgIDI1MDkyLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcHgoeCkge1xuICByZXR1cm4gLyogYHB4ICovW1xuICAgICAgICAgIDI1MDk2LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcmVtKHgpIHtcbiAgcmV0dXJuIC8qIGByZW0gKi9bXG4gICAgICAgICAgNTY5MTczOCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHZoKHgpIHtcbiAgcmV0dXJuIC8qIGB2aCAqL1tcbiAgICAgICAgICAyNjQxOCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHZtYXgoeCkge1xuICByZXR1cm4gLyogYHZtYXggKi9bXG4gICAgICAgICAgLTgzMzQ3MjUzMCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHZtaW4oeCkge1xuICByZXR1cm4gLyogYHZtaW4gKi9bXG4gICAgICAgICAgLTgzMzQ3MDc1NixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHZ3KHgpIHtcbiAgcmV0dXJuIC8qIGB2dyAqL1tcbiAgICAgICAgICAyNjQzMyxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uICRuZWcoYSwgYikge1xuICByZXR1cm4gLyogYGNhbGMgKi9bXG4gICAgICAgICAgLTEwNDQ3Njg2MTksXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAvKiBzdWIgKi81NzQ1MDI0LFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGJcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uICRwbHVzKGEsIGIpIHtcbiAgcmV0dXJuIC8qIGBjYWxjICovW1xuICAgICAgICAgIC0xMDQ0NzY4NjE5LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgLyogYWRkICovNDg0NjExMyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBiXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG52YXIgQ2FsYyA9IC8qIG1vZHVsZSAqL1tcbiAgLyogLSAqLyRuZWcsXG4gIC8qICsgKi8kcGx1c1xuXTtcblxuZnVuY3Rpb24gc2l6ZSh4LCB5KSB7XG4gIHJldHVybiAvKiBgc2l6ZSAqL1tcbiAgICAgICAgICAtODY2OTM0NTkxLFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHlcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGNvdW50KHgpIHtcbiAgcmV0dXJuIC8qIGBjb3VudCAqL1tcbiAgICAgICAgICAtODk5NDYzOTg1LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gY3ViaWNCZXNpZXIoYSwgYiwgYywgZCkge1xuICByZXR1cm4gLyogYGN1YmljQmV6aWVyICovW1xuICAgICAgICAgIC01NTQ3ODU1MjcsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgYixcbiAgICAgICAgICAgIGMsXG4gICAgICAgICAgICBkXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBsb2NhbFVybCh4KSB7XG4gIHJldHVybiAvKiBgbG9jYWxVcmwgKi9bXG4gICAgICAgICAgLTUzODA3OTU0OCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZShhKSB7XG4gIHJldHVybiAvKiBgcm90YXRlICovW1xuICAgICAgICAgIC04ODcwNzcyODUsXG4gICAgICAgICAgYVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByb3RhdGUzZCh4LCB5LCB6LCBhKSB7XG4gIHJldHVybiAvKiBgcm90YXRlM2QgKi9bXG4gICAgICAgICAgMTQyODAyOTI0LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICB6LFxuICAgICAgICAgICAgYVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcm90YXRlWChhKSB7XG4gIHJldHVybiAvKiBgcm90YXRlWCAqL1tcbiAgICAgICAgICAtMjQ5NzM4ODUxLFxuICAgICAgICAgIGFcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcm90YXRlWShhKSB7XG4gIHJldHVybiAvKiBgcm90YXRlWSAqL1tcbiAgICAgICAgICAtMjQ5NzM4ODUwLFxuICAgICAgICAgIGFcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcm90YXRlWihhKSB7XG4gIHJldHVybiAvKiBgcm90YXRlWiAqL1tcbiAgICAgICAgICAtMjQ5NzM4ODQ5LFxuICAgICAgICAgIGFcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc2NhbGUoeCwgeSkge1xuICByZXR1cm4gLyogYHNjYWxlICovW1xuICAgICAgICAgIC0xMjA2NjQ0MzgsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc2NhbGUzZCh4LCB5LCB6KSB7XG4gIHJldHVybiAvKiBgc2NhbGUzZCAqL1tcbiAgICAgICAgICAtNDUyNTEzMzE3LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICB6XG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBzY2FsZVgoeCkge1xuICByZXR1cm4gLyogYHNjYWxlWCAqL1tcbiAgICAgICAgICAxMDA5MTE3ODM4LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc2NhbGVZKHgpIHtcbiAgcmV0dXJuIC8qIGBzY2FsZVkgKi9bXG4gICAgICAgICAgMTAwOTExNzgzOSxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNjYWxlWih4KSB7XG4gIHJldHVybiAvKiBgc2NhbGVaICovW1xuICAgICAgICAgIDEwMDkxMTc4NDAsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBza2V3KHgsIHkpIHtcbiAgcmV0dXJuIC8qIGBza2V3ICovW1xuICAgICAgICAgIC04NjY4Mzk3OTgsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc2tld1goYSkge1xuICByZXR1cm4gLyogYHNrZXdYICovW1xuICAgICAgICAgIC0zMTc0NjU0NixcbiAgICAgICAgICBhXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNrZXdZKGEpIHtcbiAgcmV0dXJuIC8qIGBza2V3WSAqL1tcbiAgICAgICAgICAtMzE3NDY1NDUsXG4gICAgICAgICAgYVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBzdGVwcyhpLCBkaXIpIHtcbiAgcmV0dXJuIC8qIGBzdGVwcyAqL1tcbiAgICAgICAgICA2ODA1ODAyMyxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBkaXJcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZSh4LCB5KSB7XG4gIHJldHVybiAvKiBgdHJhbnNsYXRlICovW1xuICAgICAgICAgIC05MTQzNjg2OTAsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlM2QoeCwgeSwgeikge1xuICByZXR1cm4gLyogYHRyYW5zbGF0ZTNkICovW1xuICAgICAgICAgIDE3ODE4OTIxNSxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgelxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlWCh4KSB7XG4gIHJldHVybiAvKiBgdHJhbnNsYXRlWCAqL1tcbiAgICAgICAgICAxMDY3Mjg3NzgsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIC8qIGB0cmFuc2xhdGVZICovW1xuICAgICAgICAgIDEwNjcyODc3OSxcbiAgICAgICAgICB5XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVooeikge1xuICByZXR1cm4gLyogYHRyYW5zbGF0ZVogKi9bXG4gICAgICAgICAgMTA2NzI4NzgwLFxuICAgICAgICAgIHpcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdXJsKHgpIHtcbiAgcmV0dXJuIC8qIGB1cmwgKi9bXG4gICAgICAgICAgNTg0MzgyMyxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXkoeCkge1xuICByZXR1cm4gZChcImRpc3BsYXlcIiwgeCA+PSA1MzMyMzMxNCA/IChcbiAgICAgICAgICAgICAgICB4ID49IDQyMzYxMDk2OSA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSA4ODg5NjAzMzMgPyBcImJsb2NrXCIgOiBcImlubGluZVwiXG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICB4ID49IDY0NzEyMTI3ID8gXCJpbmxpbmUtZ3JpZFwiIDogXCJpbmxpbmUtZmxleFwiXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtOTIyMDg2NzI4ID8gKFxuICAgICAgICAgICAgICAgICAgICB4ID49IC0xNDc3ODU2NzYgPyBcImlubGluZS1ibG9ja1wiIDogXCJub25lXCJcbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gLTk5OTU2NTYyNiA/IFwiZ3JpZFwiIDogXCJmbGV4XCJcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKSk7XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uKHgpIHtcbiAgcmV0dXJuIGQoXCJwb3NpdGlvblwiLCB4ICE9PSAxMDYxNTE1NiA/IChcbiAgICAgICAgICAgICAgICB4ID49IDE4ODI2MzcyMSA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSA5MDMxMzQ0MTIgPyBcInJlbGF0aXZlXCIgOiBcInN0aWNreVwiXG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICB4ID49IDEwMDM5MjExMCA/IFwic3RhdGljXCIgOiBcImFic29sdXRlXCJcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKSA6IFwiZml4ZWRcIik7XG59XG5cbmZ1bmN0aW9uIHRvcCh4KSB7XG4gIHJldHVybiBkKFwidG9wXCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG5mdW5jdGlvbiBib3R0b20oeCkge1xuICByZXR1cm4gZChcImJvdHRvbVwiLCBzdHJpbmdfb2ZfbGVuZ3RoKHgpKTtcbn1cblxuZnVuY3Rpb24gbGVmdCh4KSB7XG4gIHJldHVybiBkKFwibGVmdFwiLCBzdHJpbmdfb2ZfbGVuZ3RoKHgpKTtcbn1cblxuZnVuY3Rpb24gcmlnaHQoeCkge1xuICByZXR1cm4gZChcInJpZ2h0XCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG5mdW5jdGlvbiBmbGV4KHgpIHtcbiAgcmV0dXJuIGQoXCJmbGV4XCIsIFN0cmluZyh4KSk7XG59XG5cbmZ1bmN0aW9uIGZsZXhHcm93KHgpIHtcbiAgcmV0dXJuIGQoXCJmbGV4R3Jvd1wiLCBTdHJpbmcoeCkpO1xufVxuXG5mdW5jdGlvbiBmbGV4U2hyaW5rKHgpIHtcbiAgcmV0dXJuIGQoXCJmbGV4U2hyaW5rXCIsIFN0cmluZyh4KSk7XG59XG5cbmZ1bmN0aW9uIGZsZXhCYXNpcyh4KSB7XG4gIHZhciB0bXA7XG4gIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikge1xuICAgIHRtcCA9IHggPj0gLTU1MDU3NzcyMSA/IChcbiAgICAgICAgeCA+PSA2MDU1NzA0NSA/IChcbiAgICAgICAgICAgIHggPj0gNDI3MjY1MzM3ID8gXCJjb250ZW50XCIgOiBcIm1heC1jb250ZW50XCJcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgeCA+PSAtMTk1ODA1MzM2ID8gXCJmaXQtY29udGVudFwiIDogXCJtaW4tY29udGVudFwiXG4gICAgICAgICAgKVxuICAgICAgKSA6IChcbiAgICAgICAgeCAhPT0gLTEwMTExMDIwNzcgPyAoXG4gICAgICAgICAgICB4ID49IC03ODk1MDgzMTIgPyBcIjBcIiA6IFwiYXV0b1wiXG4gICAgICAgICAgKSA6IFwiZmlsbFwiXG4gICAgICApO1xuICB9IGVsc2Uge1xuICAgIHZhciB2YXJpYW50ID0geFswXTtcbiAgICBpZiAodmFyaWFudCA+PSAyMjY0Mykge1xuICAgICAgdG1wID0gdmFyaWFudCA+PSAyNTA5NiA/IChcbiAgICAgICAgICB2YXJpYW50ID49IDI2NDMzID8gKFxuICAgICAgICAgICAgICB2YXJpYW50ID49IDU2OTE3MzggPyBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcInJlbVwiIDogc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJ2d1wiXG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICB2YXJpYW50ID49IDI2NDE4ID8gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJ2aFwiIDogU3RyaW5nKHhbMV0pICsgXCJweFwiXG4gICAgICAgICAgICApXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgdmFyaWFudCAhPT0gMjQ0MTYgPyAoXG4gICAgICAgICAgICAgIHZhcmlhbnQgPj0gMjUwOTIgPyBTdHJpbmcoeFsxXSkgKyBcInB0XCIgOiBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcImV4XCJcbiAgICAgICAgICAgICkgOiBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcIm1tXCJcbiAgICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTExOTg4NzE2Mykge1xuICAgICAgdG1wID0gdmFyaWFudCA+PSAyMjE4NiA/IChcbiAgICAgICAgICB2YXJpYW50ID49IDIyNjMyID8gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJlbVwiIDogc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJjbVwiXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgdmFyaWFudCA+PSAyMjE4MSA/IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwiY2hcIiA6IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwiJVwiXG4gICAgICAgICk7XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ICE9PSAtODMzNDcyNTMwKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAtODMzNDcwNzU2KSB7XG4gICAgICAgIHRtcCA9IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwidm1pblwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoID0geFsxXTtcbiAgICAgICAgdG1wID0gbWF0Y2hbMF0gPj0gNTc0NTAyNCA/IFwiY2FsYyhcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzFdKSArIChcIiAtIFwiICsgKHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMl0pICsgXCIpXCIpKSkgOiBcImNhbGMoXCIgKyAoc3RyaW5nX29mX2xlbmd0aChtYXRjaFsxXSkgKyAoXCIgKyBcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzJdKSArIFwiKVwiKSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0bXAgPSBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcInZtYXhcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGQoXCJmbGV4QmFzaXNcIiwgdG1wKTtcbn1cblxuZnVuY3Rpb24gZmxleERpcmVjdGlvbih4KSB7XG4gIHJldHVybiBkKFwiZmxleERpcmVjdGlvblwiLCB4ID49IDEzNTQ3NzQ4NCA/IChcbiAgICAgICAgICAgICAgICB4ID49IDM3ODk1MTIwOCA/IFwicm93LXJldmVyc2VcIiA6IFwiY29sdW1uLXJldmVyc2VcIlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gNTY5Mzk3OCA/IFwicm93XCIgOiBcImNvbHVtblwiXG4gICAgICAgICAgICAgICkpO1xufVxuXG5mdW5jdGlvbiBmbGV4V3JhcCh4KSB7XG4gIHJldHVybiBkKFwiZmxleFdyYXBcIiwgeCAhPT0gLTQ2MzEyMTI4OCA/IChcbiAgICAgICAgICAgICAgICB4ID49IDg2NzkxMzM1NSA/IFwibm93cmFwXCIgOiBcIndyYXBcIlxuICAgICAgICAgICAgICApIDogXCJ3cmFwLXJldmVyc2VcIik7XG59XG5cbmZ1bmN0aW9uIG9yZGVyKHgpIHtcbiAgcmV0dXJuIGQoXCJvcmRlclwiLCBTdHJpbmcoeCkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfbWFyZ2luKHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gLTc4OTUwODMxMikge1xuICAgICAgcmV0dXJuIFwiMFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciB2YXJpYW50ID0gcGFyYW1bMF07XG4gICAgaWYgKHZhcmlhbnQgPj0gMjI2NDMpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDI1MDk2KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDI2NDMzKSB7XG4gICAgICAgICAgaWYgKHZhcmlhbnQgPj0gNTY5MTczOCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcInJlbVwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwidndcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAyNjQxOCkge1xuICAgICAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCJ2aFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBTdHJpbmcocGFyYW1bMV0pICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgIT09IDI0NDE2KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDI1MDkyKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyhwYXJhbVsxXSkgKyBcInB0XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcImV4XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCJtbVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAtMTE5ODg3MTYzKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAyMjE4Nikge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAyMjYzMikge1xuICAgICAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCJlbVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCJjbVwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gMjIxODEpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcImNoXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwiJVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFyaWFudCAhPT0gLTgzMzQ3MjUzMCkge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gLTgzMzQ3MDc1Nikge1xuICAgICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwidm1pblwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcGFyYW1bMV07XG4gICAgICAgIGlmIChtYXRjaFswXSA+PSA1NzQ1MDI0KSB7XG4gICAgICAgICAgcmV0dXJuIFwiY2FsYyhcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzFdKSArIChcIiAtIFwiICsgKHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMl0pICsgXCIpXCIpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiY2FsYyhcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzFdKSArIChcIiArIFwiICsgKHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMl0pICsgXCIpXCIpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcInZtYXhcIjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFyZ2luKHgpIHtcbiAgcmV0dXJuIGQoXCJtYXJnaW5cIiwgc3RyaW5nX29mX21hcmdpbih4KSk7XG59XG5cbmZ1bmN0aW9uIG1hcmdpbjIodiwgaCkge1xuICByZXR1cm4gZChcIm1hcmdpblwiLCBqb2luKFwiIFwiLCBMaXN0Lm1hcChzdHJpbmdfb2ZfbWFyZ2luLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB2LFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXSkpKTtcbn1cblxuZnVuY3Rpb24gbWFyZ2luMyh0b3AsIGgsIGJvdHRvbSkge1xuICByZXR1cm4gZChcIm1hcmdpblwiLCBqb2luKFwiIFwiLCBMaXN0Lm1hcChzdHJpbmdfb2ZfbWFyZ2luLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdKSkpO1xufVxuXG5mdW5jdGlvbiBtYXJnaW40KHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCkge1xuICByZXR1cm4gZChcIm1hcmdpblwiLCBqb2luKFwiIFwiLCBMaXN0Lm1hcChzdHJpbmdfb2ZfbWFyZ2luLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b20sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF0pKSk7XG59XG5cbmZ1bmN0aW9uIG1hcmdpbkxlZnQoeCkge1xuICByZXR1cm4gZChcIm1hcmdpbkxlZnRcIiwgc3RyaW5nX29mX21hcmdpbih4KSk7XG59XG5cbmZ1bmN0aW9uIG1hcmdpblJpZ2h0KHgpIHtcbiAgcmV0dXJuIGQoXCJtYXJnaW5SaWdodFwiLCBzdHJpbmdfb2ZfbWFyZ2luKHgpKTtcbn1cblxuZnVuY3Rpb24gbWFyZ2luVG9wKHgpIHtcbiAgcmV0dXJuIGQoXCJtYXJnaW5Ub3BcIiwgc3RyaW5nX29mX21hcmdpbih4KSk7XG59XG5cbmZ1bmN0aW9uIG1hcmdpbkJvdHRvbSh4KSB7XG4gIHJldHVybiBkKFwibWFyZ2luQm90dG9tXCIsIHN0cmluZ19vZl9tYXJnaW4oeCkpO1xufVxuXG5mdW5jdGlvbiBwYWRkaW5nKHgpIHtcbiAgcmV0dXJuIGQoXCJwYWRkaW5nXCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG5mdW5jdGlvbiBwYWRkaW5nMih2LCBoKSB7XG4gIHJldHVybiBkKFwicGFkZGluZ1wiLCBqb2luKFwiIFwiLCBMaXN0Lm1hcChzdHJpbmdfb2ZfbGVuZ3RoLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB2LFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXSkpKTtcbn1cblxuZnVuY3Rpb24gcGFkZGluZzModG9wLCBoLCBib3R0b20pIHtcbiAgcmV0dXJuIGQoXCJwYWRkaW5nXCIsIGpvaW4oXCIgXCIsIExpc3QubWFwKHN0cmluZ19vZl9sZW5ndGgsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF0pKSk7XG59XG5cbmZ1bmN0aW9uIHBhZGRpbmc0KHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCkge1xuICByZXR1cm4gZChcInBhZGRpbmdcIiwgam9pbihcIiBcIiwgTGlzdC5tYXAoc3RyaW5nX29mX2xlbmd0aCwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdKSkpO1xufVxuXG5mdW5jdGlvbiBwYWRkaW5nTGVmdCh4KSB7XG4gIHJldHVybiBkKFwicGFkZGluZ0xlZnRcIiwgc3RyaW5nX29mX2xlbmd0aCh4KSk7XG59XG5cbmZ1bmN0aW9uIHBhZGRpbmdSaWdodCh4KSB7XG4gIHJldHVybiBkKFwicGFkZGluZ1JpZ2h0XCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG5mdW5jdGlvbiBwYWRkaW5nVG9wKHgpIHtcbiAgcmV0dXJuIGQoXCJwYWRkaW5nVG9wXCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG5mdW5jdGlvbiBwYWRkaW5nQm90dG9tKHgpIHtcbiAgcmV0dXJuIGQoXCJwYWRkaW5nQm90dG9tXCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfZGltZW5zaW9uKHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gLTU1MDU3NzcyMSkge1xuICAgICAgaWYgKHBhcmFtID49IDYwNTU3MDQ1KSB7XG4gICAgICAgIHJldHVybiBcIm1heC1jb250ZW50XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJtaW4tY29udGVudFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTc4OTUwODMxMikge1xuICAgICAgcmV0dXJuIFwiMFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciB2YXJpYW50ID0gcGFyYW1bMF07XG4gICAgaWYgKHZhcmlhbnQgPj0gMjI2NDMpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDI1MDk2KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDI2NDMzKSB7XG4gICAgICAgICAgaWYgKHZhcmlhbnQgPj0gNTY5MTczOCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcInJlbVwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwidndcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAyNjQxOCkge1xuICAgICAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCJ2aFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBTdHJpbmcocGFyYW1bMV0pICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gMjQ0MTYpIHtcbiAgICAgICAgaWYgKHZhcmlhbnQgPj0gMjUwOTIpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKHBhcmFtWzFdKSArIFwicHRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwibW1cIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2YXJpYW50ID49IDIyODYwKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCJmclwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcImV4XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ID49IC0xMTk4ODcxNjMpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDIyMTg2KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDIyNjMyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcImVtXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmluZ19vZl9mbG9hdChwYXJhbVsxXSkgKyBcImNtXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAyMjE4MSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwiY2hcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCIlXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ICE9PSAtODMzNDcyNTMwKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAtODMzNDcwNzU2KSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pICsgXCJ2bWluXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgICAgICAgaWYgKG1hdGNoWzBdID49IDU3NDUwMjQpIHtcbiAgICAgICAgICByZXR1cm4gXCJjYWxjKFwiICsgKHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMV0pICsgKFwiIC0gXCIgKyAoc3RyaW5nX29mX2xlbmd0aChtYXRjaFsyXSkgKyBcIilcIikpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJjYWxjKFwiICsgKHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMV0pICsgKFwiICsgXCIgKyAoc3RyaW5nX29mX2xlbmd0aChtYXRjaFsyXSkgKyBcIilcIikpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3RyaW5nX29mX2Zsb2F0KHBhcmFtWzFdKSArIFwidm1heFwiO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB3aWR0aCh4KSB7XG4gIHJldHVybiBkKFwid2lkdGhcIiwgc3RyaW5nX29mX2RpbWVuc2lvbih4KSk7XG59XG5cbmZ1bmN0aW9uIG1heFdpZHRoKHgpIHtcbiAgcmV0dXJuIGQoXCJtYXhXaWR0aFwiLCBzdHJpbmdfb2ZfZGltZW5zaW9uKHgpKTtcbn1cblxuZnVuY3Rpb24gbWluV2lkdGgoeCkge1xuICByZXR1cm4gZChcIm1pbldpZHRoXCIsIHN0cmluZ19vZl9kaW1lbnNpb24oeCkpO1xufVxuXG5mdW5jdGlvbiBoZWlnaHQoeCkge1xuICByZXR1cm4gZChcImhlaWdodFwiLCBzdHJpbmdfb2ZfZGltZW5zaW9uKHgpKTtcbn1cblxuZnVuY3Rpb24gbWluSGVpZ2h0KHgpIHtcbiAgcmV0dXJuIGQoXCJtaW5IZWlnaHRcIiwgc3RyaW5nX29mX2RpbWVuc2lvbih4KSk7XG59XG5cbmZ1bmN0aW9uIG1heEhlaWdodCh4KSB7XG4gIHJldHVybiBkKFwibWF4SGVpZ2h0XCIsIHN0cmluZ19vZl9kaW1lbnNpb24oeCkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfZGltZW5zaW9ucyhkaW1lbnNpb25zKSB7XG4gIHJldHVybiAkJFN0cmluZy5jb25jYXQoXCIgXCIsIExpc3QubWFwKHN0cmluZ19vZl9kaW1lbnNpb24sIGRpbWVuc2lvbnMpKTtcbn1cblxuZnVuY3Rpb24gZ3JpZFRlbXBsYXRlQ29sdW1ucyhkaW1lbnNpb25zKSB7XG4gIHJldHVybiBkKFwiZ3JpZFRlbXBsYXRlQ29sdW1uc1wiLCBzdHJpbmdfb2ZfZGltZW5zaW9ucyhkaW1lbnNpb25zKSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRUZW1wbGF0ZVJvd3MoZGltZW5zaW9ucykge1xuICByZXR1cm4gZChcImdyaWRUZW1wbGF0ZVJvd3NcIiwgc3RyaW5nX29mX2RpbWVuc2lvbnMoZGltZW5zaW9ucykpO1xufVxuXG5mdW5jdGlvbiBncmlkQXV0b1Jvd3MoZGltZW5zaW9ucykge1xuICByZXR1cm4gZChcImdyaWRBdXRvUm93c1wiLCBzdHJpbmdfb2ZfZGltZW5zaW9uKGRpbWVuc2lvbnMpKTtcbn1cblxuZnVuY3Rpb24gZ3JpZENvbHVtbihzdGFydCwgZW5kJHByaW1lKSB7XG4gIHJldHVybiBkKFwiZ3JpZENvbHVtblwiLCBTdHJpbmcoc3RhcnQpICsgKFwiIC8gXCIgKyBTdHJpbmcoZW5kJHByaW1lKSkpO1xufVxuXG5mdW5jdGlvbiBncmlkUm93KHN0YXJ0LCBlbmQkcHJpbWUpIHtcbiAgcmV0dXJuIGQoXCJncmlkUm93XCIsIFN0cmluZyhzdGFydCkgKyAoXCIgLyBcIiArIFN0cmluZyhlbmQkcHJpbWUpKSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRDb2x1bW5TdGFydChuKSB7XG4gIHJldHVybiBkKFwiZ3JpZENvbHVtblN0YXJ0XCIsIFN0cmluZyhuKSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRDb2x1bW5FbmQobikge1xuICByZXR1cm4gZChcImdyaWRDb2x1bW5FbmRcIiwgU3RyaW5nKG4pKTtcbn1cblxuZnVuY3Rpb24gZ3JpZFJvd1N0YXJ0KG4pIHtcbiAgcmV0dXJuIGQoXCJncmlkUm93U3RhcnRcIiwgU3RyaW5nKG4pKTtcbn1cblxuZnVuY3Rpb24gZ3JpZFJvd0VuZChuKSB7XG4gIHJldHVybiBkKFwiZ3JpZFJvd0VuZFwiLCBTdHJpbmcobikpO1xufVxuXG5mdW5jdGlvbiBncmlkQ29sdW1uR2FwKG4pIHtcbiAgcmV0dXJuIGQoXCJncmlkQ29sdW1uR2FwXCIsIHN0cmluZ19vZl9sZW5ndGgobikpO1xufVxuXG5mdW5jdGlvbiBncmlkUm93R2FwKG4pIHtcbiAgcmV0dXJuIGQoXCJncmlkUm93R2FwXCIsIHN0cmluZ19vZl9sZW5ndGgobikpO1xufVxuXG5mdW5jdGlvbiBncmlkR2FwKG4pIHtcbiAgcmV0dXJuIGQoXCJncmlkR2FwXCIsIHN0cmluZ19vZl9sZW5ndGgobikpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfYWxpZ24ocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDk4MjQ4MTQ5KSB7XG4gICAgaWYgKHBhcmFtID49IDY2MjQzOTUyOSkge1xuICAgICAgaWYgKHBhcmFtID49IDkyNDI2ODA2Nikge1xuICAgICAgICByZXR1cm4gXCJmbGV4LWVuZFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiZmxleC1zdGFydFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gMjg3ODI1MDI5KSB7XG4gICAgICByZXR1cm4gXCJiYXNlbGluZVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjZW50ZXJcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTE2MjMxNjc5NSkge1xuICAgIHJldHVybiBcInN0cmV0Y2hcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJhdXRvXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWxpZ25JdGVtcyh4KSB7XG4gIHJldHVybiBkKFwiYWxpZ25JdGVtc1wiLCBzdHJpbmdfb2ZfYWxpZ24oeCkpO1xufVxuXG5mdW5jdGlvbiBhbGlnblNlbGYoeCkge1xuICByZXR1cm4gZChcImFsaWduU2VsZlwiLCBzdHJpbmdfb2ZfYWxpZ24oeCkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfanVzdGlmeShwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gOTgyNDgxNDkpIHtcbiAgICBpZiAocGFyYW0gPj0gNjYyNDM5NTI5KSB7XG4gICAgICBpZiAocGFyYW0gPj0gOTI0MjY4MDY2KSB7XG4gICAgICAgIHJldHVybiBcImZsZXgtZW5kXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJmbGV4LXN0YXJ0XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSA1MTY2ODIxNDYpIHtcbiAgICAgIHJldHVybiBcInNwYWNlLWJldHdlZW5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiY2VudGVyXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IC0xNjIzMTY3OTUpIHtcbiAgICByZXR1cm4gXCJzdHJldGNoXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwic3BhY2UtYXJvdW5kXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24ganVzdGlmeUNvbnRlbnQoeCkge1xuICByZXR1cm4gZChcImp1c3RpZnlDb250ZW50XCIsIHN0cmluZ19vZl9qdXN0aWZ5KHgpKTtcbn1cblxuZnVuY3Rpb24gYWxpZ25Db250ZW50KHgpIHtcbiAgcmV0dXJuIGQoXCJhbGlnbkNvbnRlbnRcIiwgc3RyaW5nX29mX2p1c3RpZnkoeCkpO1xufVxuXG5mdW5jdGlvbiBib3hTaXppbmcoeCkge1xuICByZXR1cm4gZChcImJveFNpemluZ1wiLCB4ID49IDkzMDcyNjMgPyBcImJvcmRlci1ib3hcIiA6IFwiY29udGVudC1ib3hcIik7XG59XG5cbmZ1bmN0aW9uICQkZmxvYXQoeCkge1xuICByZXR1cm4gZChcImZsb2F0XCIsIHggIT09IC05MjIwODY3MjggPyAoXG4gICAgICAgICAgICAgICAgeCA+PSAtMzc5MzE5MzMyID8gXCJyaWdodFwiIDogXCJsZWZ0XCJcbiAgICAgICAgICAgICAgKSA6IFwibm9uZVwiKTtcbn1cblxuZnVuY3Rpb24gY2xlYXIoeCkge1xuICByZXR1cm4gZChcImNsZWFyXCIsIHggIT09IC05NDQ3NjQ5MjEgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSAtMzc5MzE5MzMyID8gXCJyaWdodFwiIDogXCJib3RoXCJcbiAgICAgICAgICAgICAgKSA6IFwibGVmdFwiKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX292ZXJmbG93KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAtODYyNTg0OTgyKSB7XG4gICAgaWYgKHBhcmFtID49IDU4OTU5MjY5MCkge1xuICAgICAgcmV0dXJuIFwidmlzaWJsZVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJoaWRkZW5cIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTk0OTY5MjQwMykge1xuICAgIHJldHVybiBcInNjcm9sbFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImF1dG9cIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBvdmVyZmxvdyh4KSB7XG4gIHJldHVybiBkKFwib3ZlcmZsb3dcIiwgc3RyaW5nX29mX292ZXJmbG93KHgpKTtcbn1cblxuZnVuY3Rpb24gb3ZlcmZsb3dYKHgpIHtcbiAgcmV0dXJuIGQoXCJvdmVyZmxvd1hcIiwgc3RyaW5nX29mX292ZXJmbG93KHgpKTtcbn1cblxuZnVuY3Rpb24gb3ZlcmZsb3dZKHgpIHtcbiAgcmV0dXJuIGQoXCJvdmVyZmxvd1lcIiwgc3RyaW5nX29mX292ZXJmbG93KHgpKTtcbn1cblxuZnVuY3Rpb24gekluZGV4KGkpIHtcbiAgcmV0dXJuIGQoXCJ6SW5kZXhcIiwgU3RyaW5nKGkpKTtcbn1cblxuZnVuY3Rpb24gYmFja2ZhY2VWaXNpYmlsaXR5KHgpIHtcbiAgcmV0dXJuIGQoXCJiYWNrZmFjZVZpc2liaWxpdHlcIiwgeCA+PSA1ODk1OTI2OTAgPyBcInZpc2libGVcIiA6IFwiaGlkZGVuXCIpO1xufVxuXG5mdW5jdGlvbiB2aXNpYmlsaXR5KHgpIHtcbiAgcmV0dXJuIGQoXCJ2aXNpYmlsaXR5XCIsIHggPj0gNTg5NTkyNjkwID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwiKTtcbn1cblxuZnVuY3Rpb24gYm94U2hhZG93KCRzdGFyb3B0JHN0YXIsICRzdGFyb3B0JHN0YXIkMSwgJHN0YXJvcHQkc3RhciQyLCAkc3Rhcm9wdCRzdGFyJDMsICRzdGFyb3B0JHN0YXIkNCwgY29sb3IpIHtcbiAgdmFyIHggPSAkc3Rhcm9wdCRzdGFyID8gJHN0YXJvcHQkc3RhclswXSA6IC8qIHplcm8gKi8tNzg5NTA4MzEyO1xuICB2YXIgeSA9ICRzdGFyb3B0JHN0YXIkMSA/ICRzdGFyb3B0JHN0YXIkMVswXSA6IC8qIHplcm8gKi8tNzg5NTA4MzEyO1xuICB2YXIgYmx1ciA9ICRzdGFyb3B0JHN0YXIkMiA/ICRzdGFyb3B0JHN0YXIkMlswXSA6IC8qIHplcm8gKi8tNzg5NTA4MzEyO1xuICB2YXIgc3ByZWFkID0gJHN0YXJvcHQkc3RhciQzID8gJHN0YXJvcHQkc3RhciQzWzBdIDogLyogemVybyAqLy03ODk1MDgzMTI7XG4gIHZhciBpbnNldCA9ICRzdGFyb3B0JHN0YXIkNCA/ICRzdGFyb3B0JHN0YXIkNFswXSA6IGZhbHNlO1xuICByZXR1cm4gLyogYHNoYWRvdyAqL1tcbiAgICAgICAgICA0ODg2ODc1ODQsXG4gICAgICAgICAgam9pbihcIiBcIiwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgc3RyaW5nX29mX2xlbmd0aCh4KSxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHN0cmluZ19vZl9sZW5ndGgoeSksXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2xlbmd0aChibHVyKSxcbiAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2xlbmd0aChzcHJlYWQpLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2NvbG9yKGNvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNldCA/IFwiaW5zZXRcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX3NoYWRvdyhwYXJhbSkge1xuICByZXR1cm4gcGFyYW1bMV07XG59XG5cbmZ1bmN0aW9uIGJveFNoYWRvd3Moc2hhZG93cykge1xuICByZXR1cm4gZChcImJveFNoYWRvd1wiLCBqb2luKFwiLCBcIiwgTGlzdC5tYXAoc3RyaW5nX29mX3NoYWRvdywgc2hhZG93cykpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2JvcmRlcnN0eWxlKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA1Njg0MDM1MDUpIHtcbiAgICBpZiAocGFyYW0gPj0gODQxOTc5NjI2KSB7XG4gICAgICByZXR1cm4gXCJkb3R0ZWRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiZGFzaGVkXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IDEyOTU2NzE1KSB7XG4gICAgcmV0dXJuIFwic29saWRcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gYm9yZGVyKHB4LCBzdHlsZSwgY29sb3IpIHtcbiAgcmV0dXJuIGQoXCJib3JkZXJcIiwgam9pbihcIiBcIiwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfbGVuZ3RoKHB4KSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoc3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfY29sb3IoY29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXSkpO1xufVxuXG5mdW5jdGlvbiBib3JkZXJXaWR0aCh4KSB7XG4gIHJldHVybiBkKFwiYm9yZGVyV2lkdGhcIiwgc3RyaW5nX29mX2xlbmd0aCh4KSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclN0eWxlKHgpIHtcbiAgcmV0dXJuIGQoXCJib3JkZXJTdHlsZVwiLCBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoeCkpO1xufVxuXG5mdW5jdGlvbiBib3JkZXJDb2xvcih4KSB7XG4gIHJldHVybiBkKFwiYm9yZGVyQ29sb3JcIiwgc3RyaW5nX29mX2NvbG9yKHgpKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyTGVmdChweCwgc3R5bGUsIGNvbG9yKSB7XG4gIHJldHVybiBkKFwiYm9yZGVyTGVmdFwiLCBqb2luKFwiIFwiLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHN0cmluZ19vZl9sZW5ndGgocHgpLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ19vZl9ib3JkZXJzdHlsZShzdHlsZSksXG4gICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ19vZl9jb2xvcihjb2xvciksXG4gICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdKSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlckxlZnRXaWR0aCh4KSB7XG4gIHJldHVybiBkKFwiYm9yZGVyTGVmdFdpZHRoXCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG5mdW5jdGlvbiBib3JkZXJMZWZ0U3R5bGUoeCkge1xuICByZXR1cm4gZChcImJvcmRlckxlZnRTdHlsZVwiLCBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoeCkpO1xufVxuXG5mdW5jdGlvbiBib3JkZXJMZWZ0Q29sb3IoeCkge1xuICByZXR1cm4gZChcImJvcmRlckxlZnRDb2xvclwiLCBzdHJpbmdfb2ZfY29sb3IoeCkpO1xufVxuXG5mdW5jdGlvbiBib3JkZXJSaWdodChweCwgc3R5bGUsIGNvbG9yKSB7XG4gIHJldHVybiBkKFwiYm9yZGVyUmlnaHRcIiwgam9pbihcIiBcIiwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfbGVuZ3RoKHB4KSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoc3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfY29sb3IoY29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXSkpO1xufVxuXG5mdW5jdGlvbiBib3JkZXJSaWdodFdpZHRoKHgpIHtcbiAgcmV0dXJuIGQoXCJib3JkZXJSaWdodFdpZHRoXCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG5mdW5jdGlvbiBib3JkZXJSaWdodENvbG9yKHgpIHtcbiAgcmV0dXJuIGQoXCJib3JkZXJSaWdodENvbG9yXCIsIHN0cmluZ19vZl9jb2xvcih4KSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclJpZ2h0U3R5bGUoeCkge1xuICByZXR1cm4gZChcImJvcmRlclJpZ2h0U3R5bGVcIiwgc3RyaW5nX29mX2JvcmRlcnN0eWxlKHgpKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyVG9wKHB4LCBzdHlsZSwgY29sb3IpIHtcbiAgcmV0dXJuIGQoXCJib3JkZXJUb3BcIiwgam9pbihcIiBcIiwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfbGVuZ3RoKHB4KSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoc3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfY29sb3IoY29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXSkpO1xufVxuXG5mdW5jdGlvbiBib3JkZXJUb3BXaWR0aCh4KSB7XG4gIHJldHVybiBkKFwiYm9yZGVyVG9wV2lkdGhcIiwgc3RyaW5nX29mX2xlbmd0aCh4KSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclRvcFN0eWxlKHgpIHtcbiAgcmV0dXJuIGQoXCJib3JkZXJUb3BTdHlsZVwiLCBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoeCkpO1xufVxuXG5mdW5jdGlvbiBib3JkZXJUb3BDb2xvcih4KSB7XG4gIHJldHVybiBkKFwiYm9yZGVyVG9wQ29sb3JcIiwgc3RyaW5nX29mX2NvbG9yKHgpKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyQm90dG9tKHB4LCBzdHlsZSwgY29sb3IpIHtcbiAgcmV0dXJuIGQoXCJib3JkZXJCb3R0b21cIiwgam9pbihcIiBcIiwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfbGVuZ3RoKHB4KSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoc3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfY29sb3IoY29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXSkpO1xufVxuXG5mdW5jdGlvbiBib3JkZXJCb3R0b21XaWR0aCh4KSB7XG4gIHJldHVybiBkKFwiYm9yZGVyQm90dG9tV2lkdGhcIiwgc3RyaW5nX29mX2xlbmd0aCh4KSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlckJvdHRvbVN0eWxlKHgpIHtcbiAgcmV0dXJuIGQoXCJib3JkZXJCb3R0b21TdHlsZVwiLCBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoeCkpO1xufVxuXG5mdW5jdGlvbiBib3JkZXJCb3R0b21Db2xvcih4KSB7XG4gIHJldHVybiBkKFwiYm9yZGVyQm90dG9tQ29sb3JcIiwgc3RyaW5nX29mX2NvbG9yKHgpKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyUmFkaXVzKGkpIHtcbiAgcmV0dXJuIGQoXCJib3JkZXJSYWRpdXNcIiwgc3RyaW5nX29mX2xlbmd0aChpKSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclRvcExlZnRSYWRpdXMoaSkge1xuICByZXR1cm4gZChcImJvcmRlclRvcExlZnRSYWRpdXNcIiwgc3RyaW5nX29mX2xlbmd0aChpKSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclRvcFJpZ2h0UmFkaXVzKGkpIHtcbiAgcmV0dXJuIGQoXCJib3JkZXJUb3BSaWdodFJhZGl1c1wiLCBzdHJpbmdfb2ZfbGVuZ3RoKGkpKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyQm90dG9tTGVmdFJhZGl1cyhpKSB7XG4gIHJldHVybiBkKFwiYm9yZGVyQm90dG9tTGVmdFJhZGl1c1wiLCBzdHJpbmdfb2ZfbGVuZ3RoKGkpKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMoaSkge1xuICByZXR1cm4gZChcImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCIsIHN0cmluZ19vZl9sZW5ndGgoaSkpO1xufVxuXG5mdW5jdGlvbiB0YWJsZUxheW91dCh4KSB7XG4gIHJldHVybiBkKFwidGFibGVMYXlvdXRcIiwgeCA+PSAxMDYxNTE1NiA/IFwiZml4ZWRcIiA6IFwiYXV0b1wiKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyQ29sbGFwc2UoeCkge1xuICByZXR1cm4gZChcImJvcmRlckNvbGxhcHNlXCIsIHggPj0gMTE5MjgzNTU1ID8gXCJzZXBhcmF0ZVwiIDogXCJjb2xsYXBzZVwiKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyU3BhY2luZyhpKSB7XG4gIHJldHVybiBkKFwiYm9yZGVyU3BhY2luZ1wiLCBzdHJpbmdfb2ZfbGVuZ3RoKGkpKTtcbn1cblxuZnVuY3Rpb24gYmFja2dyb3VuZCh4KSB7XG4gIHZhciB0bXA7XG4gIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikge1xuICAgIHRtcCA9IHggIT09IDI5MjA1MDUzOCA/IChcbiAgICAgICAgeCA+PSA1ODI2MjYxMzAgPyBcInRyYW5zcGFyZW50XCIgOiBcIm5vbmVcIlxuICAgICAgKSA6IFwiY3VycmVudENvbG9yXCI7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHZhcmlhbnQgPSB4WzBdO1xuICAgIGlmICh2YXJpYW50ID49IDUxOTc1NjkpIHtcbiAgICAgIGlmICh2YXJpYW50ICE9PSA1NjkyMTczKSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDExOTU0ODkxMSkge1xuICAgICAgICAgIGlmICh2YXJpYW50ID49IDYxNjM3OTYzNykge1xuICAgICAgICAgICAgdmFyIG1hdGNoID0geFsxXTtcbiAgICAgICAgICAgIHRtcCA9IFwibGluZWFyLWdyYWRpZW50KFwiICsgKHN0cmluZ19vZl9hbmdsZShtYXRjaFswXSkgKyAoXCIsIFwiICsgKHN0cmluZ19vZl9zdG9wcyhtYXRjaFsxXSkgKyBcIilcIikpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG1wID0gXCJyYWRpYWwtZ3JhZGllbnQoXCIgKyAoc3RyaW5nX29mX3N0b3BzKHhbMV0pICsgXCIpXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2YXJpYW50ID49IDU4NDM4MjMpIHtcbiAgICAgICAgICB0bXAgPSBcInVybChcIiArICh4WzFdICsgXCIpXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtYXRjaCQxID0geFsxXTtcbiAgICAgICAgICB0bXAgPSBcImhzbChcIiArIChqb2luKFwiLCBcIiwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBTdHJpbmcobWF0Y2gkMVswXSksXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nKG1hdGNoJDFbMV0pICsgXCIlXCIsXG4gICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaCQxWzJdKSArIFwiJVwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXSkgKyBcIilcIik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtYXRjaCQyID0geFsxXTtcbiAgICAgICAgdG1wID0gXCJyZ2IoXCIgKyAoam9pbihcIiwgXCIsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaCQyWzBdKSxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaCQyWzFdKSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBTdHJpbmcobWF0Y2gkMlsyXSksXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXSkgKyBcIilcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ICE9PSAtODc4MTI4OTcyKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAtMTYwMjgwNjQ0KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDUxOTQ0NTkpIHtcbiAgICAgICAgICB0bXAgPSBcIiNcIiArIHhbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG1hdGNoJDMgPSB4WzFdO1xuICAgICAgICAgIHRtcCA9IFwicmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudChcIiArIChzdHJpbmdfb2ZfYW5nbGUobWF0Y2gkM1swXSkgKyAoXCIsIFwiICsgKHN0cmluZ19vZl9zdG9wcyhtYXRjaCQzWzFdKSArIFwiKVwiKSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTY1NzExMTM3MCkge1xuICAgICAgICB0bXAgPSBcInJlcGVhdGluZy1yYWRpYWwtZ3JhZGllbnQoXCIgKyAoc3RyaW5nX29mX3N0b3BzKHhbMV0pICsgXCIpXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoJDQgPSB4WzFdO1xuICAgICAgICB0bXAgPSBcImhzbGEoXCIgKyAoam9pbihcIiwgXCIsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaCQ0WzBdKSxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaCQ0WzFdKSArIFwiJVwiLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaCQ0WzJdKSArIFwiJVwiLFxuICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfZmxvYXQobWF0Y2gkNFszXSksXG4gICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIF0pICsgXCIpXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbWF0Y2gkNSA9IHhbMV07XG4gICAgICB0bXAgPSBcInJnYmEoXCIgKyAoam9pbihcIiwgXCIsIC8qIDo6ICovW1xuICAgICAgICAgICAgICBTdHJpbmcobWF0Y2gkNVswXSksXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaCQ1WzFdKSxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIFN0cmluZyhtYXRjaCQ1WzJdKSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfZmxvYXQobWF0Y2gkNVszXSksXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSkgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIHJldHVybiBkKFwiYmFja2dyb3VuZFwiLCB0bXApO1xufVxuXG5mdW5jdGlvbiBiYWNrZ3JvdW5kQ29sb3IoeCkge1xuICByZXR1cm4gZChcImJhY2tncm91bmRDb2xvclwiLCBzdHJpbmdfb2ZfY29sb3IoeCkpO1xufVxuXG5mdW5jdGlvbiBiYWNrZ3JvdW5kSW1hZ2UoeCkge1xuICB2YXIgdG1wO1xuICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIpIHtcbiAgICB0bXAgPSBcIm5vbmVcIjtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmFyaWFudCA9IHhbMF07XG4gICAgaWYgKHZhcmlhbnQgIT09IC0xNjAyODA2NDQpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDExOTU0ODkxMSkge1xuICAgICAgICBpZiAodmFyaWFudCA+PSA2MTYzNzk2MzcpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSB4WzFdO1xuICAgICAgICAgIHRtcCA9IFwibGluZWFyLWdyYWRpZW50KFwiICsgKHN0cmluZ19vZl9hbmdsZShtYXRjaFswXSkgKyAoXCIsIFwiICsgKHN0cmluZ19vZl9zdG9wcyhtYXRjaFsxXSkgKyBcIilcIikpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0bXAgPSBcInJhZGlhbC1ncmFkaWVudChcIiArIChzdHJpbmdfb2Zfc3RvcHMoeFsxXSkgKyBcIilcIik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRtcCA9IHZhcmlhbnQgPj0gNTg0MzgyMyA/IFwidXJsKFwiICsgKHhbMV0gKyBcIilcIikgOiBcInJlcGVhdGluZy1yYWRpYWwtZ3JhZGllbnQoXCIgKyAoc3RyaW5nX29mX3N0b3BzKHhbMV0pICsgXCIpXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbWF0Y2gkMSA9IHhbMV07XG4gICAgICB0bXAgPSBcInJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoXCIgKyAoc3RyaW5nX29mX2FuZ2xlKG1hdGNoJDFbMF0pICsgKFwiLCBcIiArIChzdHJpbmdfb2Zfc3RvcHMobWF0Y2gkMVsxXSkgKyBcIilcIikpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGQoXCJiYWNrZ3JvdW5kSW1hZ2VcIiwgdG1wKTtcbn1cblxuZnVuY3Rpb24gYmFja2dyb3VuZEF0dGFjaG1lbnQoeCkge1xuICByZXR1cm4gZChcImJhY2tncm91bmRBdHRhY2htZW50XCIsIHggIT09IC0xMTg0Mzc1MjUgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSAxMDYxNTE1NiA/IFwiZml4ZWRcIiA6IFwic2Nyb2xsXCJcbiAgICAgICAgICAgICAgKSA6IFwibG9jYWxcIik7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmRDbGlwKHgpIHtcbiAgcmV0dXJuIGQoXCJiYWNrZ3JvdW5kQ2xpcFwiLCB4ICE9PSA5MzA3MjYzID8gKFxuICAgICAgICAgICAgICAgIHggPj0gOTcyNTc1OTMwID8gXCJwYWRkaW5nLWJveFwiIDogXCJjb250ZW50LWJveFwiXG4gICAgICAgICAgICAgICkgOiBcImJvcmRlci1ib3hcIik7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmRPcmlnaW4oeCkge1xuICByZXR1cm4gZChcImJhY2tncm91bmRPcmlnaW5cIiwgeCAhPT0gOTMwNzI2MyA/IChcbiAgICAgICAgICAgICAgICB4ID49IDk3MjU3NTkzMCA/IFwicGFkZGluZy1ib3hcIiA6IFwiY29udGVudC1ib3hcIlxuICAgICAgICAgICAgICApIDogXCJib3JkZXItYm94XCIpO1xufVxuXG5mdW5jdGlvbiBiYWNrZ3JvdW5kUG9zaXRpb24oeCwgeSkge1xuICByZXR1cm4gZChcImJhY2tncm91bmRQb3NpdGlvblwiLCBzdHJpbmdfb2ZfbGVuZ3RoKHgpICsgKFwiIFwiICsgc3RyaW5nX29mX2xlbmd0aCh5KSkpO1xufVxuXG5mdW5jdGlvbiBiYWNrZ3JvdW5kUmVwZWF0KHgpIHtcbiAgcmV0dXJuIGQoXCJiYWNrZ3JvdW5kUmVwZWF0XCIsIHggPj0gNjQ2NDM3MDIxID8gKFxuICAgICAgICAgICAgICAgIHggPj0gNjQ2NDM3MDIyID8gXCJyZXBlYXQteVwiIDogXCJyZXBlYXQteFwiXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAxMDg4Mjg1MDcgPyBcInJlcGVhdFwiIDogXCJuby1yZXBlYXRcIlxuICAgICAgICAgICAgICApKTtcbn1cblxuZnVuY3Rpb24gYmFja2dyb3VuZFNpemUoeCkge1xuICB2YXIgdG1wO1xuICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIpIHtcbiAgICB0bXAgPSB4ICE9PSAtODk5NDE2MjY1ID8gKFxuICAgICAgICB4ID49IDQyNzA2NTMwMCA/IFwiY29udGFpblwiIDogXCJhdXRvXCJcbiAgICAgICkgOiBcImNvdmVyXCI7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1hdGNoID0geFsxXTtcbiAgICB0bXAgPSBzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzBdKSArIChcIiBcIiArIHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMV0pKTtcbiAgfVxuICByZXR1cm4gZChcImJhY2tncm91bmRTaXplXCIsIHRtcCk7XG59XG5cbmZ1bmN0aW9uIGN1cnNvcih4KSB7XG4gIHJldHVybiBkKFwiY3Vyc29yXCIsIHggPj0gLTQ1OTYyNzcxNyA/IChcbiAgICAgICAgICAgICAgICB4ID49IDM2NTQ1MDI1NCA/IChcbiAgICAgICAgICAgICAgICAgICAgeCAhPT0gNDY1ODE5ODQxID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSA2MjY4NjI4OTQgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSA5Mzk5MDcxNTcgPyBcIm5vdC1hbGxvd2VkXCIgOiBcImNvbnRleHQtbWVudVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSA1NjMxNzE3MjggPyBcImFsaWFzXCIgOiBcImFsbC1zY3JvbGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IFwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICB4ICE9PSAtODg3MzIyMDAgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID49IDEwMzQ3OTIxMyA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID49IDE4MDg5NzQ0MiA/IFwiY3Jvc3NoYWlyXCIgOiBcInByb2dyZXNzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID49IC0xOTYyMDk4MCA/IFwiZ3JhYmJpbmdcIiA6IFwiem9vbS1vdXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IFwiem9vbS1pblwiXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtOTMzMTc0NTExID8gKFxuICAgICAgICAgICAgICAgICAgICB4ICE9PSAtOTIyMDg2NzI4ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtODIyOTc3OTMxID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTc4NjMxNzEyMyA/IFwicG9pbnRlclwiIDogXCJ3YWl0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID49IC04NTYwNDQzNzEgPyBcInRleHRcIiA6IFwibW92ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICApIDogXCJub25lXCJcbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHggIT09IC0xMDQ0NTY5Njk0ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtOTk5NTY3NDEyID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTk4OTEyMTg1NSA/IFwiaGVscFwiIDogXCJncmFiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID49IC0xMDQ0MDcxNDk5ID8gXCJjb3B5XCIgOiBcImF1dG9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IFwiY2VsbFwiXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkpO1xufVxuXG5mdW5jdGlvbiBjbGlwUGF0aCh4KSB7XG4gIHJldHVybiBkKFwiY2xpcFBhdGhcIiwgXCJ1cmwoXCIgKyAoeFsxXSArIFwiKVwiKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9saXN0U3R5bGVUeXBlKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAtNDg0MTk3NzMyKSB7XG4gICAgaWYgKHBhcmFtID49IDcwMDM0NTY2MCkge1xuICAgICAgaWYgKHBhcmFtID49IDc4NzI3OTQxOSkge1xuICAgICAgICBpZiAocGFyYW0gPj0gODI2OTIwMjU4KSB7XG4gICAgICAgICAgcmV0dXJuIFwidXBwZXItbGF0aW5cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJ1cHBlci1yb21hblwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtID49IDczOTk4NjQ5OSkge1xuICAgICAgICByZXR1cm4gXCJsb3dlci1sYXRpblwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibG93ZXItcm9tYW5cIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC00MjIzMzMyOTUpIHtcbiAgICAgIHJldHVybiBcImRlY2ltYWxcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwidXBwZXItYWxwaGFcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTcwMzc2MTkwNCkge1xuICAgIGlmIChwYXJhbSA+PSAtNjU1MjI4NzcxKSB7XG4gICAgICBpZiAocGFyYW0gPj0gLTU3MTEzMTQ5MSkge1xuICAgICAgICByZXR1cm4gXCJsb3dlci1hbHBoYVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwic3F1YXJlXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtNjk5Njg2NjU3KSB7XG4gICAgICByZXR1cm4gXCJsb3dlci1ncmVla1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjaXJjbGVcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTkyMjA4NjcyOCkge1xuICAgIHJldHVybiBcIm5vbmVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJkaXNjXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2xpc3RTdHlsZVBvc2l0aW9uKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA1MDEyMzU3MDgpIHtcbiAgICByZXR1cm4gXCJpbnNpZGVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJvdXRzaWRlXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2xpc3RTdHlsZUltYWdlKHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmMxKFwidXJsXCIsIHBhcmFtWzFdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsaXN0U3R5bGUoc3R5bGUsIHBvcywgaW1nKSB7XG4gIHJldHVybiBkKFwibGlzdFN0eWxlXCIsIGpvaW4oXCIgXCIsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2xpc3RTdHlsZVR5cGUoc3R5bGUpLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ19vZl9saXN0U3R5bGVQb3NpdGlvbihwb3MpLFxuICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfbGlzdFN0eWxlSW1hZ2UoaW1nKSxcbiAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF0pKTtcbn1cblxuZnVuY3Rpb24gbGlzdFN0eWxlVHlwZSh4KSB7XG4gIHJldHVybiBkKFwibGlzdFN0eWxlVHlwZVwiLCBzdHJpbmdfb2ZfbGlzdFN0eWxlVHlwZSh4KSk7XG59XG5cbmZ1bmN0aW9uIGxpc3RTdHlsZVBvc2l0aW9uKHgpIHtcbiAgcmV0dXJuIGQoXCJsaXN0U3R5bGVQb3NpdGlvblwiLCBzdHJpbmdfb2ZfbGlzdFN0eWxlUG9zaXRpb24oeCkpO1xufVxuXG5mdW5jdGlvbiBsaXN0U3R5bGVJbWFnZSh4KSB7XG4gIHJldHVybiBkKFwibGlzdFN0eWxlSW1hZ2VcIiwgc3RyaW5nX29mX2xpc3RTdHlsZUltYWdlKHgpKTtcbn1cblxuZnVuY3Rpb24gb3BhY2l0eSh4KSB7XG4gIHJldHVybiBkKFwib3BhY2l0eVwiLCBzdHJpbmdfb2ZfZmxvYXQoeCkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2Zfb3V0bGluZVN0eWxlKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA0NzIwOTU3MzgpIHtcbiAgICBpZiAocGFyYW0gIT09IDU2ODQwMzUwNSkge1xuICAgICAgaWYgKHBhcmFtID49IDg1MjE3NTYzMykge1xuICAgICAgICBpZiAocGFyYW0gPj0gMTA0MjI4Mzc0MSkge1xuICAgICAgICAgIHJldHVybiBcImluc2V0XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiZG91YmxlXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gODQxOTc5NjI2KSB7XG4gICAgICAgIHJldHVybiBcImRvdHRlZFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiZ3JvdmVcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiZGFzaGVkXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtICE9PSAtODYyNTg0OTgyKSB7XG4gICAgaWYgKHBhcmFtID49IDEyOTU2NzE1KSB7XG4gICAgICBpZiAocGFyYW0gPj0gMjA5OTMwMTk2KSB7XG4gICAgICAgIHJldHVybiBcIm91dHNldFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwic29saWRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC0zNzk0Njg3NTcpIHtcbiAgICAgIHJldHVybiBcInJpZGdlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiaGlkZGVuXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3V0bGluZShzaXplLCBzdHlsZSwgY29sb3IpIHtcbiAgcmV0dXJuIGQoXCJvdXRsaW5lXCIsIGpvaW4oXCIgXCIsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2xlbmd0aChzaXplKSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2Zfb3V0bGluZVN0eWxlKHN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2NvbG9yKGNvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF0pKTtcbn1cblxuZnVuY3Rpb24gb3V0bGluZVN0eWxlKHgpIHtcbiAgcmV0dXJuIGQoXCJvdXRsaW5lU3R5bGVcIiwgc3RyaW5nX29mX291dGxpbmVTdHlsZSh4KSk7XG59XG5cbmZ1bmN0aW9uIG91dGxpbmVXaWR0aCh4KSB7XG4gIHJldHVybiBkKFwib3V0bGluZVdpZHRoXCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG5mdW5jdGlvbiBvdXRsaW5lQ29sb3IoeCkge1xuICByZXR1cm4gZChcIm91dGxpbmVDb2xvclwiLCBzdHJpbmdfb2ZfY29sb3IoeCkpO1xufVxuXG5mdW5jdGlvbiBvdXRsaW5lT2Zmc2V0KHgpIHtcbiAgcmV0dXJuIGQoXCJvdXRsaW5lT2Zmc2V0XCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG52YXIganNNYXBwZXJDb25zdGFudEFycmF5ID0gLyogYXJyYXkgKi9bXG4gIC8qIHR1cGxlICovW1xuICAgIDEwNzIyODkxMixcbiAgICBcIml0YWxpY1wiXG4gIF0sXG4gIC8qIHR1cGxlICovW1xuICAgIDczNDc5Mjg4MSxcbiAgICBcIm9ibGlxdWVcIlxuICBdLFxuICAvKiB0dXBsZSAqL1tcbiAgICA4MTIyMTY4NzEsXG4gICAgXCJub3JtYWxcIlxuICBdXG5dO1xuXG5mdW5jdGlvbiBjb2xvcih4KSB7XG4gIHJldHVybiBkKFwiY29sb3JcIiwgc3RyaW5nX29mX2NvbG9yKHgpKTtcbn1cblxuZnVuY3Rpb24gZm9udEZhbWlseSh4KSB7XG4gIHJldHVybiBkKFwiZm9udEZhbWlseVwiLCB4KTtcbn1cblxuZnVuY3Rpb24gZm9udFNpemUoeCkge1xuICByZXR1cm4gZChcImZvbnRTaXplXCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG5mdW5jdGlvbiBmb250VmFyaWFudCh4KSB7XG4gIHJldHVybiBkKFwiZm9udFZhcmlhbnRcIiwgeCA+PSA4MTIyMTY4NzEgPyBcIm5vcm1hbFwiIDogXCJzbWFsbC1jYXBzXCIpO1xufVxuXG5mdW5jdGlvbiBmb250U3R5bGUoeCkge1xuICByZXR1cm4gZChcImZvbnRTdHlsZVwiLCBKc19tYXBwZXJSdC5iaW5hcnlTZWFyY2goMywgeCwganNNYXBwZXJDb25zdGFudEFycmF5KSk7XG59XG5cbmZ1bmN0aW9uIGZvbnRGYWNlKGZvbnRGYW1pbHksIHNyYywgZm9udFN0eWxlLCBmb250V2VpZ2h0LCBfKSB7XG4gIHZhciBmb250U3R5bGUkMSA9IEpzX29wdGlvbi5tYXAoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBKc19tYXBwZXJSdC5iaW5hcnlTZWFyY2goMywgdmFsdWUsIGpzTWFwcGVyQ29uc3RhbnRBcnJheSk7XG4gICAgICAgIH0pLCBmb250U3R5bGUpO1xuICB2YXIgc3JjJDEgPSAkJFN0cmluZy5jb25jYXQoXCIsIFwiLCBMaXN0Lm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIGlmIChwYXJhbVswXSA+PSA1ODQzODIzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidXJsKFxcXCJcIiArIChTdHJpbmcocGFyYW1bMV0pICsgXCJcXFwiKVwiKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJsb2NhbChcXFwiXCIgKyAoU3RyaW5nKHBhcmFtWzFdKSArIFwiXFxcIilcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLCBzcmMpKTtcbiAgdmFyIHRtcCA9IHtcbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgIHNyYzogc3JjJDFcbiAgfTtcbiAgaWYgKGZvbnRTdHlsZSQxKSB7XG4gICAgdG1wLmZvbnRTdHlsZSA9IGZvbnRTdHlsZSQxWzBdO1xuICB9XG4gIGlmIChmb250V2VpZ2h0KSB7XG4gICAgdG1wLmZvbnRXZWlnaHQgPSBmb250V2VpZ2h0WzBdO1xuICB9XG4gIHJldHVybiBHbGFtb3IuY3NzLmZvbnRGYWNlKHRtcCk7XG59XG5cbmZ1bmN0aW9uIGZvbnRXZWlnaHQoeCkge1xuICByZXR1cm4gZChcImZvbnRXZWlnaHRcIiwgU3RyaW5nKHgpKTtcbn1cblxuZnVuY3Rpb24gbGluZUhlaWdodCh4KSB7XG4gIHZhciB0bXA7XG4gIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikge1xuICAgIHRtcCA9IHggIT09IC03ODk1MDgzMTIgPyAoXG4gICAgICAgIHggPj0gODEyMjE2ODcxID8gXCJub3JtYWxcIiA6IFwiYXV0b1wiXG4gICAgICApIDogXCIwXCI7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHZhcmlhbnQgPSB4WzBdO1xuICAgIGlmICh2YXJpYW50ID49IDIyNjQzKSB7XG4gICAgICB0bXAgPSB2YXJpYW50ID49IDI2NDE4ID8gKFxuICAgICAgICAgIHZhcmlhbnQgPj0gNDg0NTY4MiA/IChcbiAgICAgICAgICAgICAgdmFyaWFudCA+PSA1NjkxNzM4ID8gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJyZW1cIiA6IHN0cmluZ19vZl9mbG9hdCh4WzFdKVxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgdmFyaWFudCA+PSAyNjQzMyA/IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwidndcIiA6IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwidmhcIlxuICAgICAgICAgICAgKVxuICAgICAgICApIDogKFxuICAgICAgICAgIHZhcmlhbnQgPj0gMjUwOTIgPyAoXG4gICAgICAgICAgICAgIHZhcmlhbnQgPj0gMjUwOTYgPyBTdHJpbmcoeFsxXSkgKyBcInB4XCIgOiBTdHJpbmcoeFsxXSkgKyBcInB0XCJcbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIHZhcmlhbnQgPj0gMjQ0MTYgPyBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcIm1tXCIgOiBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcImV4XCJcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTExOTg4NzE2Mykge1xuICAgICAgdG1wID0gdmFyaWFudCA+PSAyMjE4NiA/IChcbiAgICAgICAgICB2YXJpYW50ID49IDIyNjMyID8gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJlbVwiIDogc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJjbVwiXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgdmFyaWFudCA+PSAyMjE4MSA/IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwiY2hcIiA6IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwiJVwiXG4gICAgICAgICk7XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ICE9PSAtODMzNDcyNTMwKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAtODMzNDcwNzU2KSB7XG4gICAgICAgIHRtcCA9IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwidm1pblwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoID0geFsxXTtcbiAgICAgICAgdG1wID0gbWF0Y2hbMF0gPj0gNTc0NTAyNCA/IFwiY2FsYyhcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzFdKSArIChcIiAtIFwiICsgKHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMl0pICsgXCIpXCIpKSkgOiBcImNhbGMoXCIgKyAoc3RyaW5nX29mX2xlbmd0aChtYXRjaFsxXSkgKyAoXCIgKyBcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzJdKSArIFwiKVwiKSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0bXAgPSBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcInZtYXhcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGQoXCJsaW5lSGVpZ2h0XCIsIHRtcCk7XG59XG5cbmZ1bmN0aW9uIGxldHRlclNwYWNpbmcoeCkge1xuICB2YXIgdG1wO1xuICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIpIHtcbiAgICB0bXAgPSB4ICE9PSAtNzg5NTA4MzEyID8gKFxuICAgICAgICB4ID49IDgxMjIxNjg3MSA/IFwibm9ybWFsXCIgOiBcImF1dG9cIlxuICAgICAgKSA6IFwiMFwiO1xuICB9IGVsc2Uge1xuICAgIHZhciB2YXJpYW50ID0geFswXTtcbiAgICBpZiAodmFyaWFudCA+PSAyMjY0Mykge1xuICAgICAgdG1wID0gdmFyaWFudCA+PSAyNTA5NiA/IChcbiAgICAgICAgICB2YXJpYW50ID49IDI2NDMzID8gKFxuICAgICAgICAgICAgICB2YXJpYW50ID49IDU2OTE3MzggPyBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcInJlbVwiIDogc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJ2d1wiXG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICB2YXJpYW50ID49IDI2NDE4ID8gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJ2aFwiIDogU3RyaW5nKHhbMV0pICsgXCJweFwiXG4gICAgICAgICAgICApXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgdmFyaWFudCAhPT0gMjQ0MTYgPyAoXG4gICAgICAgICAgICAgIHZhcmlhbnQgPj0gMjUwOTIgPyBTdHJpbmcoeFsxXSkgKyBcInB0XCIgOiBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcImV4XCJcbiAgICAgICAgICAgICkgOiBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcIm1tXCJcbiAgICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTExOTg4NzE2Mykge1xuICAgICAgdG1wID0gdmFyaWFudCA+PSAyMjE4NiA/IChcbiAgICAgICAgICB2YXJpYW50ID49IDIyNjMyID8gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJlbVwiIDogc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJjbVwiXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgdmFyaWFudCA+PSAyMjE4MSA/IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwiY2hcIiA6IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwiJVwiXG4gICAgICAgICk7XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ICE9PSAtODMzNDcyNTMwKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAtODMzNDcwNzU2KSB7XG4gICAgICAgIHRtcCA9IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwidm1pblwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoID0geFsxXTtcbiAgICAgICAgdG1wID0gbWF0Y2hbMF0gPj0gNTc0NTAyNCA/IFwiY2FsYyhcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzFdKSArIChcIiAtIFwiICsgKHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMl0pICsgXCIpXCIpKSkgOiBcImNhbGMoXCIgKyAoc3RyaW5nX29mX2xlbmd0aChtYXRjaFsxXSkgKyAoXCIgKyBcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzJdKSArIFwiKVwiKSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0bXAgPSBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcInZtYXhcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGQoXCJsZXR0ZXJTcGFjaW5nXCIsIHRtcCk7XG59XG5cbmZ1bmN0aW9uIHRleHRBbGlnbih4KSB7XG4gIHJldHVybiBkKFwidGV4dEFsaWduXCIsIHggPj0gNjIyNTA4MzIgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSA5ODI0ODE0OSA/IFwiY2VudGVyXCIgOiBcImp1c3RpZnlcIlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTM3OTMxOTMzMiA/IFwicmlnaHRcIiA6IFwibGVmdFwiXG4gICAgICAgICAgICAgICkpO1xufVxuXG5mdW5jdGlvbiB0ZXh0RGVjb3JhdGlvbih4KSB7XG4gIHJldHVybiBkKFwidGV4dERlY29yYXRpb25cIiwgeCA+PSAxMzExNDI5MjQgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSA0MTIxNTU1NjkgPyBcImxpbmUtdGhyb3VnaFwiIDogXCJ1bmRlcmxpbmVcIlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTkyMjA4NjcyOCA/IFwibm9uZVwiIDogXCJvdmVybGluZVwiXG4gICAgICAgICAgICAgICkpO1xufVxuXG5mdW5jdGlvbiB0ZXh0RGVjb3JhdGlvbkNvbG9yKHgpIHtcbiAgcmV0dXJuIGQoXCJ0ZXh0RGVjb3JhdGlvbkNvbG9yXCIsIHN0cmluZ19vZl9jb2xvcih4KSk7XG59XG5cbmZ1bmN0aW9uIHRleHREZWNvcmF0aW9uU3R5bGUoeCkge1xuICByZXR1cm4gZChcInRleHREZWNvcmF0aW9uU3R5bGVcIiwgeCAhPT0gMTI5NTY3MTUgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSA4NDE5Nzk2MjYgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gODUyMTc1NjMzID8gXCJkb3VibGVcIiA6IFwiZG90dGVkXCJcbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gNTY4NDAzNTA1ID8gXCJkYXNoZWRcIiA6IFwid2F2eVwiXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkgOiBcInNvbGlkXCIpO1xufVxuXG5mdW5jdGlvbiB0ZXh0SW5kZW50KHgpIHtcbiAgcmV0dXJuIGQoXCJ0ZXh0SW5kZW50XCIsIHN0cmluZ19vZl9sZW5ndGgoeCkpO1xufVxuXG5mdW5jdGlvbiB0ZXh0T3ZlcmZsb3coeCkge1xuICByZXR1cm4gZChcInRleHRPdmVyZmxvd1wiLCB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IChcbiAgICAgICAgICAgICAgICB4ID49IDE2Njg4ODc4NSA/IFwiZWxsaXBzaXNcIiA6IFwiY2xpcFwiXG4gICAgICAgICAgICAgICkgOiB4WzFdKTtcbn1cblxuZnVuY3Rpb24gdGV4dFNoYWRvdygkc3Rhcm9wdCRzdGFyLCAkc3Rhcm9wdCRzdGFyJDEsICRzdGFyb3B0JHN0YXIkMiwgY29sb3IpIHtcbiAgdmFyIHggPSAkc3Rhcm9wdCRzdGFyID8gJHN0YXJvcHQkc3RhclswXSA6IC8qIHplcm8gKi8tNzg5NTA4MzEyO1xuICB2YXIgeSA9ICRzdGFyb3B0JHN0YXIkMSA/ICRzdGFyb3B0JHN0YXIkMVswXSA6IC8qIHplcm8gKi8tNzg5NTA4MzEyO1xuICB2YXIgYmx1ciA9ICRzdGFyb3B0JHN0YXIkMiA/ICRzdGFyb3B0JHN0YXIkMlswXSA6IC8qIHplcm8gKi8tNzg5NTA4MzEyO1xuICByZXR1cm4gZChcInRleHRTaGFkb3dcIiwgam9pbihcIiBcIiwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfbGVuZ3RoKHgpLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ19vZl9sZW5ndGgoeSksXG4gICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ19vZl9sZW5ndGgoYmx1ciksXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfY29sb3IoY29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXSkpO1xufVxuXG5mdW5jdGlvbiB0ZXh0VHJhbnNmb3JtKHgpIHtcbiAgcmV0dXJuIGQoXCJ0ZXh0VHJhbnNmb3JtXCIsIHggPj0gLTQyNTM0OTgzOSA/IChcbiAgICAgICAgICAgICAgICB4ID49IC00MTUzMzAwMzAgPyBcInVwcGVyY2FzZVwiIDogXCJsb3dlcmNhc2VcIlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTUwOTg2NzYwNCA/IFwiY2FwaXRhbGl6ZVwiIDogXCJub25lXCJcbiAgICAgICAgICAgICAgKSk7XG59XG5cbmZ1bmN0aW9uIHVzZXJTZWxlY3QoeCkge1xuICByZXR1cm4gZChcInVzZXJTZWxlY3RcIiwgeCA+PSAtODU2MDQ0MzcxID8gKFxuICAgICAgICAgICAgICAgIHggPj0gNDg0NzkwNSA/IFwiYWxsXCIgOiBcInRleHRcIlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTkyMjA4NjcyOCA/IFwibm9uZVwiIDogXCJhdXRvXCJcbiAgICAgICAgICAgICAgKSk7XG59XG5cbmZ1bmN0aW9uIHZlcnRpY2FsQWxpZ24oeCkge1xuICB2YXIgdG1wO1xuICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIpIHtcbiAgICB0bXAgPSB4ID49IDU3OTM0MjkgPyAoXG4gICAgICAgIHggIT09IDc5NjkyMTU1ID8gKFxuICAgICAgICAgICAgeCA+PSA0NzY2Njk4MTYgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSA1MTY0MDYyNDggPyBcInRleHQtdG9wXCIgOiBcInRleHQtYm90dG9tXCJcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ID49IDI4NzgyNTAyOSA/IFwiYmFzZWxpbmVcIiA6IFwidG9wXCJcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICkgOiBcInN1cGVyXCJcbiAgICAgICkgOiAoXG4gICAgICAgIHggIT09IC04NjYyMDA3NDcgPyAoXG4gICAgICAgICAgICB4ID49IC00NDUwNjEzOTcgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSA1NzQ1MDI0ID8gXCJzdWJcIiA6IFwiYm90dG9tXCJcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ID49IC03ODk1MDgzMTIgPyBcIjBcIiA6IFwiYXV0b1wiXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICApIDogXCJtaWRkbGVcIlxuICAgICAgKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmFyaWFudCA9IHhbMF07XG4gICAgaWYgKHZhcmlhbnQgPj0gMjI2NDMpIHtcbiAgICAgIHRtcCA9IHZhcmlhbnQgPj0gMjUwOTYgPyAoXG4gICAgICAgICAgdmFyaWFudCA+PSAyNjQzMyA/IChcbiAgICAgICAgICAgICAgdmFyaWFudCA+PSA1NjkxNzM4ID8gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJyZW1cIiA6IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwidndcIlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgdmFyaWFudCA+PSAyNjQxOCA/IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwidmhcIiA6IFN0cmluZyh4WzFdKSArIFwicHhcIlxuICAgICAgICAgICAgKVxuICAgICAgICApIDogKFxuICAgICAgICAgIHZhcmlhbnQgIT09IDI0NDE2ID8gKFxuICAgICAgICAgICAgICB2YXJpYW50ID49IDI1MDkyID8gU3RyaW5nKHhbMV0pICsgXCJwdFwiIDogc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJleFwiXG4gICAgICAgICAgICApIDogc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJtbVwiXG4gICAgICAgICk7XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ID49IC0xMTk4ODcxNjMpIHtcbiAgICAgIHRtcCA9IHZhcmlhbnQgPj0gMjIxODYgPyAoXG4gICAgICAgICAgdmFyaWFudCA+PSAyMjYzMiA/IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwiZW1cIiA6IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwiY21cIlxuICAgICAgICApIDogKFxuICAgICAgICAgIHZhcmlhbnQgPj0gMjIxODEgPyBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcImNoXCIgOiBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcIiVcIlxuICAgICAgICApO1xuICAgIH0gZWxzZSBpZiAodmFyaWFudCAhPT0gLTgzMzQ3MjUzMCkge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gLTgzMzQ3MDc1Nikge1xuICAgICAgICB0bXAgPSBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcInZtaW5cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHhbMV07XG4gICAgICAgIHRtcCA9IG1hdGNoWzBdID49IDU3NDUwMjQgPyBcImNhbGMoXCIgKyAoc3RyaW5nX29mX2xlbmd0aChtYXRjaFsxXSkgKyAoXCIgLSBcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzJdKSArIFwiKVwiKSkpIDogXCJjYWxjKFwiICsgKHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMV0pICsgKFwiICsgXCIgKyAoc3RyaW5nX29mX2xlbmd0aChtYXRjaFsyXSkgKyBcIilcIikpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdG1wID0gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJ2bWF4XCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBkKFwidmVydGljYWxBbGlnblwiLCB0bXApO1xufVxuXG5mdW5jdGlvbiB3aGl0ZVNwYWNlKHgpIHtcbiAgcmV0dXJuIGQoXCJ3aGl0ZVNwYWNlXCIsIHggIT09IDUzODQ0MDExOSA/IChcbiAgICAgICAgICAgICAgICB4ID49IDgxMjIxNjg3MSA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSA4Njc5MTMzNTUgPyBcIm5vd3JhcFwiIDogXCJub3JtYWxcIlxuICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSA2NjA4NzAwMjkgPyBcInByZS13cmFwXCIgOiBcInByZVwiXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkgOiBcInByZS1saW5lXCIpO1xufVxuXG5mdW5jdGlvbiB3b3JkQnJlYWsoeCkge1xuICByZXR1cm4gZChcIndvcmRCcmVha1wiLCB4ICE9PSA4MTIyMTY4NzEgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSA4OTI3NDgxODggPyBcImtlZXAtYWxsXCIgOiBcImJyZWFrLWFsbFwiXG4gICAgICAgICAgICAgICkgOiBcIm5vcm1hbFwiKTtcbn1cblxuZnVuY3Rpb24gd29yZFNwYWNpbmcoeCkge1xuICB2YXIgdG1wO1xuICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIpIHtcbiAgICB0bXAgPSB4ICE9PSAtNzg5NTA4MzEyID8gKFxuICAgICAgICB4ID49IDgxMjIxNjg3MSA/IFwibm9ybWFsXCIgOiBcImF1dG9cIlxuICAgICAgKSA6IFwiMFwiO1xuICB9IGVsc2Uge1xuICAgIHZhciB2YXJpYW50ID0geFswXTtcbiAgICBpZiAodmFyaWFudCA+PSAyMjY0Mykge1xuICAgICAgdG1wID0gdmFyaWFudCA+PSAyNTA5NiA/IChcbiAgICAgICAgICB2YXJpYW50ID49IDI2NDMzID8gKFxuICAgICAgICAgICAgICB2YXJpYW50ID49IDU2OTE3MzggPyBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcInJlbVwiIDogc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJ2d1wiXG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICB2YXJpYW50ID49IDI2NDE4ID8gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJ2aFwiIDogU3RyaW5nKHhbMV0pICsgXCJweFwiXG4gICAgICAgICAgICApXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgdmFyaWFudCAhPT0gMjQ0MTYgPyAoXG4gICAgICAgICAgICAgIHZhcmlhbnQgPj0gMjUwOTIgPyBTdHJpbmcoeFsxXSkgKyBcInB0XCIgOiBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcImV4XCJcbiAgICAgICAgICAgICkgOiBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcIm1tXCJcbiAgICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTExOTg4NzE2Mykge1xuICAgICAgdG1wID0gdmFyaWFudCA+PSAyMjE4NiA/IChcbiAgICAgICAgICB2YXJpYW50ID49IDIyNjMyID8gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJlbVwiIDogc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJjbVwiXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgdmFyaWFudCA+PSAyMjE4MSA/IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwiY2hcIiA6IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwiJVwiXG4gICAgICAgICk7XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ICE9PSAtODMzNDcyNTMwKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAtODMzNDcwNzU2KSB7XG4gICAgICAgIHRtcCA9IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwidm1pblwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoID0geFsxXTtcbiAgICAgICAgdG1wID0gbWF0Y2hbMF0gPj0gNTc0NTAyNCA/IFwiY2FsYyhcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzFdKSArIChcIiAtIFwiICsgKHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMl0pICsgXCIpXCIpKSkgOiBcImNhbGMoXCIgKyAoc3RyaW5nX29mX2xlbmd0aChtYXRjaFsxXSkgKyAoXCIgKyBcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzJdKSArIFwiKVwiKSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0bXAgPSBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcInZtYXhcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGQoXCJ3b3JkU3BhY2luZ1wiLCB0bXApO1xufVxuXG5mdW5jdGlvbiB3b3JkV3JhcCh4KSB7XG4gIHJldHVybiBkKFwid29yZFdyYXBcIiwgeCA+PSAxMDU5OTIxNDQ5ID8gXCJicmVhay13b3JkXCIgOiBcIm5vcm1hbFwiKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX3BvaW50ZXJFdmVudHMocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IC05MjIwODY3MjgpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYXV0b1wiO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBvaW50ZXJFdmVudHMoeCkge1xuICByZXR1cm4gZChcInBvaW50ZXJFdmVudHNcIiwgc3RyaW5nX29mX3BvaW50ZXJFdmVudHMoeCkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfdHJhbnNmb3JtKHBhcmFtKSB7XG4gIHZhciB2YXJpYW50ID0gcGFyYW1bMF07XG4gIGlmICh2YXJpYW50ID49IC0xMjA2NjQ0MzgpIHtcbiAgICBpZiAodmFyaWFudCA+PSAxMDY3Mjg3NzgpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDE3ODE4OTIxNSkge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAxMDA5MTE3ODM4KSB7XG4gICAgICAgICAgc3dpdGNoICh2YXJpYW50IC0gMTAwOTExNzgzOCB8IDApIHtcbiAgICAgICAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jMShcInNjYWxlWFwiLCBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pKTtcbiAgICAgICAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jMShcInNjYWxlWVwiLCBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pKTtcbiAgICAgICAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jMShcInNjYWxlWlwiLCBzdHJpbmdfb2ZfZmxvYXQocGFyYW1bMV0pKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgICAgICAgICByZXR1cm4gZnVuY0FueShcInRyYW5zbGF0ZTNkXCIsIExpc3QubWFwKHN0cmluZ19vZl9sZW5ndGgsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gMTQyODAyOTI0KSB7XG4gICAgICAgIHZhciBtYXRjaCQxID0gcGFyYW1bMV07XG4gICAgICAgIHJldHVybiBmdW5jQW55KFwicm90YXRlM2RcIiwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ19vZl9mbG9hdChtYXRjaCQxWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2Zsb2F0KG1hdGNoJDFbMV0pLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2Zsb2F0KG1hdGNoJDFbMl0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ19vZl9hbmdsZShtYXRjaCQxWzNdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXRjaCAodmFyaWFudCAtIDEwNjcyODc3OCB8IDApIHtcbiAgICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmMxKFwidHJhbnNsYXRlWFwiLCBzdHJpbmdfb2ZfbGVuZ3RoKHBhcmFtWzFdKSk7XG4gICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICAgIHJldHVybiBmdW5jMShcInRyYW5zbGF0ZVlcIiwgc3RyaW5nX29mX2xlbmd0aChwYXJhbVsxXSkpO1xuICAgICAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgICAgICByZXR1cm4gZnVuYzEoXCJ0cmFuc2xhdGVaXCIsIHN0cmluZ19vZl9sZW5ndGgocGFyYW1bMV0pKTtcbiAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFyaWFudCAhPT0gLTMxNzQ2NTQ2KSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAtMzE3NDY1NDUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMxKFwic2tld1lcIiwgc3RyaW5nX29mX2FuZ2xlKHBhcmFtWzFdKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF0Y2gkMiA9IHBhcmFtWzFdO1xuICAgICAgICByZXR1cm4gZnVuY0FueShcInNjYWxlXCIsIExpc3QubWFwKHN0cmluZ19vZl9mbG9hdCwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQyWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDJbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZ1bmMxKFwic2tld1hcIiwgc3RyaW5nX29mX2FuZ2xlKHBhcmFtWzFdKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTg4NzA3NzI4NSkge1xuICAgIGlmICh2YXJpYW50ID49IC00NTI1MTMzMTcpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IC0yNDk3Mzg4NTEpIHtcbiAgICAgICAgc3dpdGNoICh2YXJpYW50ICsgMjQ5NzM4ODUxIHwgMCkge1xuICAgICAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgICAgICByZXR1cm4gZnVuYzEoXCJyb3RhdGVYXCIsIHN0cmluZ19vZl9hbmdsZShwYXJhbVsxXSkpO1xuICAgICAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgICAgICByZXR1cm4gZnVuYzEoXCJyb3RhdGVZXCIsIHN0cmluZ19vZl9hbmdsZShwYXJhbVsxXSkpO1xuICAgICAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgICAgICByZXR1cm4gZnVuYzEoXCJyb3RhdGVaXCIsIHN0cmluZ19vZl9hbmdsZShwYXJhbVsxXSkpO1xuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF0Y2gkMyA9IHBhcmFtWzFdO1xuICAgICAgICByZXR1cm4gZnVuY0FueShcInNjYWxlM2RcIiwgTGlzdC5tYXAoc3RyaW5nX29mX2Zsb2F0LCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDNbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkM1sxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkM1syXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTg2NjgzOTc5OCkge1xuICAgICAgdmFyIG1hdGNoJDQgPSBwYXJhbVsxXTtcbiAgICAgIHJldHVybiBmdW5jQW55KFwic2tld1wiLCBMaXN0Lm1hcChzdHJpbmdfb2ZfYW5nbGUsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQ0WzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmdW5jMShcInJvdGF0ZVwiLCBzdHJpbmdfb2ZfYW5nbGUocGFyYW1bMV0pKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodmFyaWFudCA+PSAtOTE0MzY4NjkwKSB7XG4gICAgdmFyIG1hdGNoJDUgPSBwYXJhbVsxXTtcbiAgICByZXR1cm4gZnVuYzIoXCJ0cmFuc2xhdGVcIiwgc3RyaW5nX29mX2xlbmd0aChtYXRjaCQ1WzBdKSwgc3RyaW5nX29mX2xlbmd0aChtYXRjaCQ1WzFdKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmMxKFwicGVyc3BlY3RpdmVcIiwgU3RyaW5nKHBhcmFtWzFdKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtKHgpIHtcbiAgcmV0dXJuIGQoXCJ0cmFuc2Zvcm1cIiwgc3RyaW5nX29mX3RyYW5zZm9ybSh4KSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybXMoeHMpIHtcbiAgcmV0dXJuIGQoXCJ0cmFuc2Zvcm1cIiwgam9pbihcIiBcIiwgTGlzdC5tYXAoc3RyaW5nX29mX3RyYW5zZm9ybSwgeHMpKSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU9yaWdpbih4LCB5KSB7XG4gIHJldHVybiBkKFwidHJhbnNmb3JtT3JpZ2luXCIsIGpvaW4oXCIgXCIsIExpc3QubWFwKHN0cmluZ19vZl9sZW5ndGgsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdKSkpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1PcmlnaW4zZCh4LCB5LCB6KSB7XG4gIHJldHVybiBkKFwidHJhbnNmb3JtT3JpZ2luXCIsIGpvaW4oXCIgXCIsIExpc3QubWFwKHN0cmluZ19vZl9sZW5ndGgsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHosXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXSkpKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3R5bGUoeCkge1xuICByZXR1cm4gZChcInRyYW5zZm9ybVN0eWxlXCIsIHggPj0gNTg5NzAyMDQ1ID8gXCJwcmVzZXJ2ZS0zZFwiIDogXCJmbGF0XCIpO1xufVxuXG5mdW5jdGlvbiBwZXJzcGVjdGl2ZSh4KSB7XG4gIHZhciB0bXA7XG4gIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikge1xuICAgIHRtcCA9IHggPj0gLTc4OTUwODMxMiA/IFwiMFwiIDogXCJub25lXCI7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHZhcmlhbnQgPSB4WzBdO1xuICAgIGlmICh2YXJpYW50ID49IDIyNjQzKSB7XG4gICAgICB0bXAgPSB2YXJpYW50ID49IDI1MDk2ID8gKFxuICAgICAgICAgIHZhcmlhbnQgPj0gMjY0MzMgPyAoXG4gICAgICAgICAgICAgIHZhcmlhbnQgPj0gNTY5MTczOCA/IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwicmVtXCIgOiBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcInZ3XCJcbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIHZhcmlhbnQgPj0gMjY0MTggPyBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcInZoXCIgOiBTdHJpbmcoeFsxXSkgKyBcInB4XCJcbiAgICAgICAgICAgIClcbiAgICAgICAgKSA6IChcbiAgICAgICAgICB2YXJpYW50ICE9PSAyNDQxNiA/IChcbiAgICAgICAgICAgICAgdmFyaWFudCA+PSAyNTA5MiA/IFN0cmluZyh4WzFdKSArIFwicHRcIiA6IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwiZXhcIlxuICAgICAgICAgICAgKSA6IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwibW1cIlxuICAgICAgICApO1xuICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAtMTE5ODg3MTYzKSB7XG4gICAgICB0bXAgPSB2YXJpYW50ID49IDIyMTg2ID8gKFxuICAgICAgICAgIHZhcmlhbnQgPj0gMjI2MzIgPyBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcImVtXCIgOiBzdHJpbmdfb2ZfZmxvYXQoeFsxXSkgKyBcImNtXCJcbiAgICAgICAgKSA6IChcbiAgICAgICAgICB2YXJpYW50ID49IDIyMTgxID8gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJjaFwiIDogc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCIlXCJcbiAgICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgIT09IC04MzM0NzI1MzApIHtcbiAgICAgIGlmICh2YXJpYW50ID49IC04MzM0NzA3NTYpIHtcbiAgICAgICAgdG1wID0gc3RyaW5nX29mX2Zsb2F0KHhbMV0pICsgXCJ2bWluXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF0Y2ggPSB4WzFdO1xuICAgICAgICB0bXAgPSBtYXRjaFswXSA+PSA1NzQ1MDI0ID8gXCJjYWxjKFwiICsgKHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMV0pICsgKFwiIC0gXCIgKyAoc3RyaW5nX29mX2xlbmd0aChtYXRjaFsyXSkgKyBcIilcIikpKSA6IFwiY2FsYyhcIiArIChzdHJpbmdfb2ZfbGVuZ3RoKG1hdGNoWzFdKSArIChcIiArIFwiICsgKHN0cmluZ19vZl9sZW5ndGgobWF0Y2hbMl0pICsgXCIpXCIpKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRtcCA9IHN0cmluZ19vZl9mbG9hdCh4WzFdKSArIFwidm1heFwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZChcInBlcnNwZWN0aXZlXCIsIHRtcCk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl90aW1pbmdGdW5jdGlvbihwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHBhcmFtID49IC0xOTM1MjUzODYpIHtcbiAgICAgIGlmIChwYXJhbSA+PSAxMzgwMjc4OTEpIHtcbiAgICAgICAgcmV0dXJuIFwiZWFzZS1vdXRcIjtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gMjA5MzM2MTUpIHtcbiAgICAgICAgcmV0dXJuIFwic3RlcC1lbmRcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInN0ZXAtc3RhcnRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtICE9PSAtOTYwNjUxNTU3KSB7XG4gICAgICBpZiAocGFyYW0gPj0gLTMyNTAzNzU5NSkge1xuICAgICAgICByZXR1cm4gXCJsaW5lYXJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImVhc2VcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiZWFzZS1pbi1vdXRcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW1bMF0gPj0gNjgwNTgwMjMpIHtcbiAgICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgICB2YXIgaSA9IG1hdGNoWzBdO1xuICAgIGlmIChtYXRjaFsxXSA+PSA2Nzg1OTU1NCkge1xuICAgICAgcmV0dXJuIGZ1bmMyKFwic3RlcHNcIiwgU3RyaW5nKGkpLCBcInN0YXJ0XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZnVuYzIoXCJzdGVwc1wiLCBTdHJpbmcoaSksIFwiZW5kXCIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgbWF0Y2gkMSA9IHBhcmFtWzFdO1xuICAgIHJldHVybiBmdW5jQW55KFwiY3ViaWMtYmV6aWVyXCIsIExpc3QubWFwKHN0cmluZ19vZl9mbG9hdCwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDFbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQxWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDFbM10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgXSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb24oJHN0YXJvcHQkc3RhciwgJHN0YXJvcHQkc3RhciQxLCAkc3Rhcm9wdCRzdGFyJDIsIHByb3BlcnR5KSB7XG4gIHZhciBkdXJhdGlvbiA9ICRzdGFyb3B0JHN0YXIgPyAkc3Rhcm9wdCRzdGFyWzBdIDogMDtcbiAgdmFyIGRlbGF5ID0gJHN0YXJvcHQkc3RhciQxID8gJHN0YXJvcHQkc3RhciQxWzBdIDogMDtcbiAgdmFyIHRpbWluZ0Z1bmN0aW9uID0gJHN0YXJvcHQkc3RhciQyID8gJHN0YXJvcHQkc3RhciQyWzBdIDogLyogZWFzZSAqLy0xMDIyNTg3OTIyO1xuICByZXR1cm4gLyogYHRyYW5zaXRpb24gKi9bXG4gICAgICAgICAgLTY1OTU4MzU5NSxcbiAgICAgICAgICBqb2luKFwiIFwiLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBTdHJpbmcoZHVyYXRpb24pICsgXCJtc1wiLFxuICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX3RpbWluZ0Z1bmN0aW9uKHRpbWluZ0Z1bmN0aW9uKSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBTdHJpbmcoZGVsYXkpICsgXCJtc1wiLFxuICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbnMoeHMpIHtcbiAgcmV0dXJuIGQoXCJ0cmFuc2l0aW9uXCIsIGpvaW4oXCIsIFwiLCBMaXN0Lm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1bMV07XG4gICAgICAgICAgICAgICAgICAgICAgfSksIHhzKSkpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRGVsYXkoaSkge1xuICByZXR1cm4gZChcInRyYW5zaXRpb25EZWxheVwiLCBTdHJpbmcoaSkgKyBcIm1zXCIpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRHVyYXRpb24oaSkge1xuICByZXR1cm4gZChcInRyYW5zaXRpb25EdXJhdGlvblwiLCBTdHJpbmcoaSkgKyBcIm1zXCIpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24oeCkge1xuICByZXR1cm4gZChcInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblwiLCBzdHJpbmdfb2ZfdGltaW5nRnVuY3Rpb24oeCkpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uUHJvcGVydHkoeCkge1xuICByZXR1cm4gZChcInRyYW5zaXRpb25Qcm9wZXJ0eVwiLCB4KTtcbn1cblxuZnVuY3Rpb24gcGVyc3BlY3RpdmVPcmlnaW4oeCwgeSkge1xuICByZXR1cm4gZChcInBlcnNwZWN0aXZlT3JpZ2luXCIsIGpvaW4oXCIgXCIsIExpc3QubWFwKHN0cmluZ19vZl9sZW5ndGgsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdKSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfYW5pbWF0aW9uRGlyZWN0aW9uKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA4MTIyMTY4NzEpIHtcbiAgICBpZiAocGFyYW0gPj0gODkyNTg2Mjk4KSB7XG4gICAgICByZXR1cm4gXCJhbHRlcm5hdGVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibm9ybWFsXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IDU0NTQyODIzMikge1xuICAgIHJldHVybiBcImFsdGVybmF0ZS1yZXZlcnNlXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwicmV2ZXJzZVwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9hbmltYXRpb25GaWxsTW9kZShwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gMjQ1ODYxMTY4KSB7XG4gICAgaWYgKHBhcmFtID49IDczMzY1Mzc3NCkge1xuICAgICAgcmV0dXJuIFwiZm9yd2FyZHNcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiYmFja3dhcmRzXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IC05MjIwODY3MjgpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYm90aFwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9hbmltYXRpb25JdGVyYXRpb25Db3VudChwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIFwiaW5maW5pdGVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gU3RyaW5nKHBhcmFtWzFdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfYW5pbWF0aW9uUGxheVN0YXRlKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAtMjc2NTQ1MzYyKSB7XG4gICAgcmV0dXJuIFwicGF1c2VkXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwicnVubmluZ1wiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbigkc3Rhcm9wdCRzdGFyLCAkc3Rhcm9wdCRzdGFyJDEsICRzdGFyb3B0JHN0YXIkMiwgJHN0YXJvcHQkc3RhciQzLCAkc3Rhcm9wdCRzdGFyJDQsICRzdGFyb3B0JHN0YXIkNSwgJHN0YXJvcHQkc3RhciQ2LCBuYW1lKSB7XG4gIHZhciBkdXJhdGlvbiA9ICRzdGFyb3B0JHN0YXIgPyAkc3Rhcm9wdCRzdGFyWzBdIDogMDtcbiAgdmFyIGRlbGF5ID0gJHN0YXJvcHQkc3RhciQxID8gJHN0YXJvcHQkc3RhciQxWzBdIDogMDtcbiAgdmFyIGRpcmVjdGlvbiA9ICRzdGFyb3B0JHN0YXIkMiA/ICRzdGFyb3B0JHN0YXIkMlswXSA6IC8qIG5vcm1hbCAqLzgxMjIxNjg3MTtcbiAgdmFyIHRpbWluZ0Z1bmN0aW9uID0gJHN0YXJvcHQkc3RhciQzID8gJHN0YXJvcHQkc3RhciQzWzBdIDogLyogZWFzZSAqLy0xMDIyNTg3OTIyO1xuICB2YXIgZmlsbE1vZGUgPSAkc3Rhcm9wdCRzdGFyJDQgPyAkc3Rhcm9wdCRzdGFyJDRbMF0gOiAvKiBub25lICovLTkyMjA4NjcyODtcbiAgdmFyIHBsYXlTdGF0ZSA9ICRzdGFyb3B0JHN0YXIkNSA/ICRzdGFyb3B0JHN0YXIkNVswXSA6IC8qIHJ1bm5pbmcgKi8tMzQ1NDEyMDk3O1xuICB2YXIgaXRlcmF0aW9uQ291bnQgPSAkc3Rhcm9wdCRzdGFyJDYgPyAkc3Rhcm9wdCRzdGFyJDZbMF0gOiAvKiBgY291bnQgKi9bXG4gICAgICAtODk5NDYzOTg1LFxuICAgICAgMVxuICAgIF07XG4gIHJldHVybiAvKiBgYW5pbWF0aW9uICovW1xuICAgICAgICAgIC04ODU3MjMzODgsXG4gICAgICAgICAgam9pbihcIiBcIiwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIFN0cmluZyhkdXJhdGlvbikgKyBcIm1zXCIsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX3RpbWluZ0Z1bmN0aW9uKHRpbWluZ0Z1bmN0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKGRlbGF5KSArIFwibXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ19vZl9hbmltYXRpb25JdGVyYXRpb25Db3VudChpdGVyYXRpb25Db3VudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2FuaW1hdGlvbkRpcmVjdGlvbihkaXJlY3Rpb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdfb2ZfYW5pbWF0aW9uRmlsbE1vZGUoZmlsbE1vZGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nX29mX2FuaW1hdGlvblBsYXlTdGF0ZShwbGF5U3RhdGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfYW5pbWF0aW9uKHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbVsxXTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9ucyh4cykge1xuICByZXR1cm4gZChcImFuaW1hdGlvblwiLCBqb2luKFwiLCBcIiwgTGlzdC5tYXAoc3RyaW5nX29mX2FuaW1hdGlvbiwgeHMpKSk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkRlbGF5KHgpIHtcbiAgcmV0dXJuIGQoXCJhbmltYXRpb25EZWxheVwiLCBTdHJpbmcoeCkgKyBcIm1zXCIpO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25EaXJlY3Rpb24oeCkge1xuICByZXR1cm4gZChcImFuaW1hdGlvbkRpcmVjdGlvblwiLCBzdHJpbmdfb2ZfYW5pbWF0aW9uRGlyZWN0aW9uKHgpKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uRHVyYXRpb24oeCkge1xuICByZXR1cm4gZChcImFuaW1hdGlvbkR1cmF0aW9uXCIsIFN0cmluZyh4KSArIFwibXNcIik7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkZpbGxNb2RlKHgpIHtcbiAgcmV0dXJuIGQoXCJhbmltYXRpb25GaWxsTW9kZVwiLCBzdHJpbmdfb2ZfYW5pbWF0aW9uRmlsbE1vZGUoeCkpO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25JdGVyYXRpb25Db3VudCh4KSB7XG4gIHJldHVybiBkKFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIiwgc3RyaW5nX29mX2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50KHgpKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uTmFtZSh4KSB7XG4gIHJldHVybiBkKFwiYW5pbWF0aW9uTmFtZVwiLCB4KTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uUGxheVN0YXRlKHgpIHtcbiAgcmV0dXJuIGQoXCJhbmltYXRpb25QbGF5U3RhdGVcIiwgc3RyaW5nX29mX2FuaW1hdGlvblBsYXlTdGF0ZSh4KSk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGQoXCJhbmltYXRpb25UaW1pbmdGdW5jdGlvblwiLCBzdHJpbmdfb2ZfdGltaW5nRnVuY3Rpb24oeCkpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3RvcihzZWxlY3RvciQxLCBydWxlcykge1xuICByZXR1cm4gLyogYHNlbGVjdG9yICovW1xuICAgICAgICAgIDgyOTI0MDA5NSxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHNlbGVjdG9yJDEsXG4gICAgICAgICAgICBydWxlc1xuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gYWN0aXZlKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjphY3RpdmVcIiwgcGFyYW0pO1xufVxuXG5mdW5jdGlvbiBhZnRlcihwYXJhbSkge1xuICByZXR1cm4gc2VsZWN0b3IoXCI6OmFmdGVyXCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gYmVmb3JlKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjo6YmVmb3JlXCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tlZChwYXJhbSkge1xuICByZXR1cm4gc2VsZWN0b3IoXCI6Y2hlY2tlZFwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIiA+ICpcIiwgcGFyYW0pO1xufVxuXG5mdW5jdGlvbiBkaXJlY3RTaWJsaW5nKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIiArIFwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIGRpc2FibGVkKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjpkaXNhYmxlZFwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIGZpcnN0Q2hpbGQocGFyYW0pIHtcbiAgcmV0dXJuIHNlbGVjdG9yKFwiOmZpcnN0LWNoaWxkXCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gZmlyc3RPZlR5cGUocGFyYW0pIHtcbiAgcmV0dXJuIHNlbGVjdG9yKFwiOmZpcnN0LW9mLXR5cGVcIiwgcGFyYW0pO1xufVxuXG5mdW5jdGlvbiBmb2N1cyhwYXJhbSkge1xuICByZXR1cm4gc2VsZWN0b3IoXCI6Zm9jdXNcIiwgcGFyYW0pO1xufVxuXG5mdW5jdGlvbiBob3ZlcihwYXJhbSkge1xuICByZXR1cm4gc2VsZWN0b3IoXCI6aG92ZXJcIiwgcGFyYW0pO1xufVxuXG5mdW5jdGlvbiBsYXN0Q2hpbGQocGFyYW0pIHtcbiAgcmV0dXJuIHNlbGVjdG9yKFwiOmxhc3QtY2hpbGRcIiwgcGFyYW0pO1xufVxuXG5mdW5jdGlvbiBsYXN0T2ZUeXBlKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjpsYXN0LW9mLXR5cGVcIiwgcGFyYW0pO1xufVxuXG5mdW5jdGlvbiBsaW5rKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjpsaW5rXCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gcmVhZE9ubHkocGFyYW0pIHtcbiAgcmV0dXJuIHNlbGVjdG9yKFwiOnJlYWQtb25seVwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIHJlcXVpcmVkKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjpyZXF1aXJlZFwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIHZpc2l0ZWQocGFyYW0pIHtcbiAgcmV0dXJuIHNlbGVjdG9yKFwiOnZpc2l0ZWRcIiwgcGFyYW0pO1xufVxuXG5mdW5jdGlvbiBlbmFibGVkKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjplbmFibGVkXCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gbm9Db250ZW50KHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjplbXB0eVwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uICQkZGVmYXVsdChwYXJhbSkge1xuICByZXR1cm4gc2VsZWN0b3IoXCI6ZGVmYXVsdFwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIGFueUxpbmsocGFyYW0pIHtcbiAgcmV0dXJuIHNlbGVjdG9yKFwiOmFueS1saW5rXCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjpvbmx5LWNoaWxkXCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gb25seU9mVHlwZShwYXJhbSkge1xuICByZXR1cm4gc2VsZWN0b3IoXCI6b25seS1vZi10eXBlXCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gb3B0aW9uYWwocGFyYW0pIHtcbiAgcmV0dXJuIHNlbGVjdG9yKFwiOm9wdGlvbmFsXCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gaW52YWxpZChwYXJhbSkge1xuICByZXR1cm4gc2VsZWN0b3IoXCI6aW52YWxpZFwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIG91dE9mUmFuZ2UocGFyYW0pIHtcbiAgcmV0dXJuIHNlbGVjdG9yKFwiOm91dC1vZi1yYW5nZVwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIHNpYmxpbmdzKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIiB+IFwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIHRhcmdldChwYXJhbSkge1xuICByZXR1cm4gc2VsZWN0b3IoXCI6dGFyZ2V0XCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gZmlyc3RMaW5lKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjo6Zmlyc3QtbGluZVwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIGZpcnN0TGV0dGVyKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjo6Zmlyc3QtbGV0dGVyXCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uKHBhcmFtKSB7XG4gIHJldHVybiBzZWxlY3RvcihcIjo6c2VsZWN0aW9uXCIsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIocGFyYW0pIHtcbiAgcmV0dXJuIHNlbGVjdG9yKFwiOjpwbGFjZWhvbGRlclwiLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIG1lZGlhKHF1ZXJ5LCBydWxlcykge1xuICByZXR1cm4gLyogYHNlbGVjdG9yICovW1xuICAgICAgICAgIDgyOTI0MDA5NSxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIFwiQG1lZGlhIFwiICsgcXVlcnksXG4gICAgICAgICAgICBydWxlc1xuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZmlsbChjb2xvcikge1xuICByZXR1cm4gZChcImZpbGxcIiwgc3RyaW5nX29mX2NvbG9yKGNvbG9yKSk7XG59XG5cbmZ1bmN0aW9uIGZpbGxPcGFjaXR5KG9wYWNpdHkpIHtcbiAgcmV0dXJuIGQoXCJmaWxsT3BhY2l0eVwiLCBzdHJpbmdfb2ZfZmxvYXQob3BhY2l0eSkpO1xufVxuXG5mdW5jdGlvbiBmaWxsUnVsZSh4KSB7XG4gIHJldHVybiBkKFwiZmlsbFJ1bGVcIiwgeCA+PSAxMTA1NjMwMjkgPyBcImV2ZW5vZGRcIiA6IFwibm9uemVyb1wiKTtcbn1cblxuZnVuY3Rpb24gc3Ryb2tlKGNvbG9yKSB7XG4gIHJldHVybiBkKFwic3Ryb2tlXCIsIHN0cmluZ19vZl9jb2xvcihjb2xvcikpO1xufVxuXG5mdW5jdGlvbiBzdHJva2VXaWR0aChsZW5ndGgpIHtcbiAgcmV0dXJuIGQoXCJzdHJva2VXaWR0aFwiLCBzdHJpbmdfb2ZfbGVuZ3RoKGxlbmd0aCkpO1xufVxuXG5mdW5jdGlvbiBzdHJva2VPcGFjaXR5KG9wYWNpdHkpIHtcbiAgcmV0dXJuIGQoXCJzdHJva2VPcGFjaXR5XCIsIHN0cmluZ19vZl9mbG9hdChvcGFjaXR5KSk7XG59XG5cbmZ1bmN0aW9uIHN0cm9rZU1pdGVybGltaXQoeCkge1xuICByZXR1cm4gZChcInN0cm9rZU1pdGVybGltaXRcIiwgc3RyaW5nX29mX2Zsb2F0KHgpKTtcbn1cblxuZnVuY3Rpb24gc3Ryb2tlTGluZWNhcCh4KSB7XG4gIHJldHVybiBkKFwic3Ryb2tlTGluZWNhcFwiLCB4ICE9PSAtNjU1MjI4NzcxID8gKFxuICAgICAgICAgICAgICAgIHggPj0gLTMxMjA4NDQwMiA/IFwicm91bmRcIiA6IFwiYnV0dFwiXG4gICAgICAgICAgICAgICkgOiBcInNxdWFyZVwiKTtcbn1cblxuZnVuY3Rpb24gc3Ryb2tlTGluZWpvaW4oeCkge1xuICByZXR1cm4gZChcInN0cm9rZUxpbmVqb2luXCIsIHggIT09IDE0MTM2MTE1NyA/IChcbiAgICAgICAgICAgICAgICB4ID49IDgxMTY4MTkxNCA/IFwiYmV2ZWxcIiA6IFwicm91bmRcIlxuICAgICAgICAgICAgICApIDogXCJtaXRlclwiKTtcbn1cblxuZnVuY3Rpb24gc3RvcENvbG9yKGMpIHtcbiAgcmV0dXJuIGQoXCJzdG9wQ29sb3JcIiwgc3RyaW5nX29mX2NvbG9yKGMpKTtcbn1cblxuZnVuY3Rpb24gc3RvcE9wYWNpdHkobykge1xuICByZXR1cm4gZChcInN0b3BPcGFjaXR5XCIsIHN0cmluZ19vZl9mbG9hdChvKSk7XG59XG5cbnZhciBlbXB0eSA9IC8qIFtdICovMDtcblxudmFyIG1lcmdlID0gTGlzdC5jb25jYXQ7XG5cbnZhciB0cmFuc3BhcmVudCA9IC8qIHRyYW5zcGFyZW50ICovNTgyNjI2MTMwO1xuXG52YXIgY3VycmVudENvbG9yID0gLyogY3VycmVudENvbG9yICovMjkyMDUwNTM4O1xuXG52YXIgYWxpY2VibHVlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGMEY4RkZcIlxuXTtcblxudmFyIGFudGlxdWV3aGl0ZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRkFFQkQ3XCJcbl07XG5cbnZhciBhcXVhID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCIwMEZGRkZcIlxuXTtcblxudmFyIGFxdWFtYXJpbmUgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjdGRkZENFwiXG5dO1xuXG52YXIgYXp1cmUgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkYwRkZGRlwiXG5dO1xuXG52YXIgYmVpZ2UgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkY1RjVEQ1wiXG5dO1xuXG52YXIgYmlzcXVlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkU0QzRcIlxuXTtcblxudmFyIGJsYWNrID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCIwMDAwMDBcIlxuXTtcblxudmFyIGJsYW5jaGVkYWxtb25kID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkVCQ0RcIlxuXTtcblxudmFyIGJsdWUgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjAwMDBGRlwiXG5dO1xuXG52YXIgYmx1ZXZpb2xldCA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiOEEyQkUyXCJcbl07XG5cbnZhciBicm93biA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiQTUyQTJBXCJcbl07XG5cbnZhciBidXJseXdvb2QgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkRFQjg4N1wiXG5dO1xuXG52YXIgY2FkZXRibHVlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI1RjlFQTBcIlxuXTtcblxudmFyIGNoYXJ0cmV1c2UgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjdGRkYwMFwiXG5dO1xuXG52YXIgY2hvY29sYXRlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJEMjY5MUVcIlxuXTtcblxudmFyIGNvcmFsID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRjdGNTBcIlxuXTtcblxudmFyIGNvcm5mbG93ZXJibHVlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI2NDk1RURcIlxuXTtcblxudmFyIGNvcm5zaWxrID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkY4RENcIlxuXTtcblxudmFyIGNyaW1zb24gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkRDMTQzQ1wiXG5dO1xuXG52YXIgY3lhbiA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiMDBGRkZGXCJcbl07XG5cbnZhciBkYXJrYmx1ZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiMDAwMDhCXCJcbl07XG5cbnZhciBkYXJrY3lhbiA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiMDA4QjhCXCJcbl07XG5cbnZhciBkYXJrZ29sZGVucm9kID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJCODg2MEJcIlxuXTtcblxudmFyIGRhcmtncmF5ID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJBOUE5QTlcIlxuXTtcblxudmFyIGRhcmtncmV5ID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJBOUE5QTlcIlxuXTtcblxudmFyIGRhcmtncmVlbiA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiMDA2NDAwXCJcbl07XG5cbnZhciBkYXJra2hha2kgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkJEQjc2QlwiXG5dO1xuXG52YXIgZGFya21hZ2VudGEgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjhCMDA4QlwiXG5dO1xuXG52YXIgZGFya29saXZlZ3JlZW4gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjU1NkIyRlwiXG5dO1xuXG52YXIgZGFya29yYW5nZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRkY4QzAwXCJcbl07XG5cbnZhciBkYXJrb3JjaGlkID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI5OTMyQ0NcIlxuXTtcblxudmFyIGRhcmtyZWQgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjhCMDAwMFwiXG5dO1xuXG52YXIgZGFya3NhbG1vbiA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRTk5NjdBXCJcbl07XG5cbnZhciBkYXJrc2VhZ3JlZW4gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjhGQkM4RlwiXG5dO1xuXG52YXIgZGFya3NsYXRlYmx1ZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiNDgzRDhCXCJcbl07XG5cbnZhciBkYXJrc2xhdGVncmF5ID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCIyRjRGNEZcIlxuXTtcblxudmFyIGRhcmtzbGF0ZWdyZXkgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjJGNEY0RlwiXG5dO1xuXG52YXIgZGFya3R1cnF1b2lzZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiMDBDRUQxXCJcbl07XG5cbnZhciBkYXJrdmlvbGV0ID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI5NDAwRDNcIlxuXTtcblxudmFyIGRlZXBwaW5rID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRjE0OTNcIlxuXTtcblxudmFyIGRlZXBza3libHVlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCIwMEJGRkZcIlxuXTtcblxudmFyIGRpbWdyYXkgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjY5Njk2OVwiXG5dO1xuXG52YXIgZGltZ3JleSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiNjk2OTY5XCJcbl07XG5cbnZhciBkb2RnZXJibHVlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCIxRTkwRkZcIlxuXTtcblxudmFyIGZpcmVicmljayA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiQjIyMjIyXCJcbl07XG5cbnZhciBmbG9yYWx3aGl0ZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRkZGQUYwXCJcbl07XG5cbnZhciBmb3Jlc3RncmVlbiA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiMjI4QjIyXCJcbl07XG5cbnZhciBmdWNoc2lhID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRjAwRkZcIlxuXTtcblxudmFyIGdhaW5zYm9ybyA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRENEQ0RDXCJcbl07XG5cbnZhciBnaG9zdHdoaXRlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGOEY4RkZcIlxuXTtcblxudmFyIGdvbGQgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkZGRDcwMFwiXG5dO1xuXG52YXIgZ29sZGVucm9kID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJEQUE1MjBcIlxuXTtcblxudmFyIGdyYXkgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjgwODA4MFwiXG5dO1xuXG52YXIgZ3JleSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiODA4MDgwXCJcbl07XG5cbnZhciBncmVlbiA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiMDA4MDAwXCJcbl07XG5cbnZhciBncmVlbnllbGxvdyA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiQURGRjJGXCJcbl07XG5cbnZhciBob25leWRldyA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRjBGRkYwXCJcbl07XG5cbnZhciBob3RwaW5rID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRjY5QjRcIlxuXTtcblxudmFyIGluZGlhbnJlZCA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiQ0Q1QzVDXCJcbl07XG5cbnZhciBpbmRpZ28gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjRCMDA4MlwiXG5dO1xuXG52YXIgaXZvcnkgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkZGRkZGMFwiXG5dO1xuXG52YXIga2hha2kgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkYwRTY4Q1wiXG5dO1xuXG52YXIgbGF2ZW5kZXIgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkU2RTZGQVwiXG5dO1xuXG52YXIgbGF2ZW5kZXJibHVzaCA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRkZGMEY1XCJcbl07XG5cbnZhciBsYXduZ3JlZW4gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjdDRkMwMFwiXG5dO1xuXG52YXIgbGVtb25jaGlmZm9uID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkZBQ0RcIlxuXTtcblxudmFyIGxpZ2h0Ymx1ZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiQUREOEU2XCJcbl07XG5cbnZhciBsaWdodGNvcmFsID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGMDgwODBcIlxuXTtcblxudmFyIGxpZ2h0Y3lhbiA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRTBGRkZGXCJcbl07XG5cbnZhciBsaWdodGdvbGRlbnJvZHllbGxvdyA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRkFGQUQyXCJcbl07XG5cbnZhciBsaWdodGdyYXkgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkQzRDNEM1wiXG5dO1xuXG52YXIgbGlnaHRncmV5ID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJEM0QzRDNcIlxuXTtcblxudmFyIGxpZ2h0Z3JlZW4gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjkwRUU5MFwiXG5dO1xuXG52YXIgbGlnaHRwaW5rID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkI2QzFcIlxuXTtcblxudmFyIGxpZ2h0c2FsbW9uID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkEwN0FcIlxuXTtcblxudmFyIGxpZ2h0c2VhZ3JlZW4gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjIwQjJBQVwiXG5dO1xuXG52YXIgbGlnaHRza3libHVlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI4N0NFRkFcIlxuXTtcblxudmFyIGxpZ2h0c2xhdGVncmF5ID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI3Nzg4OTlcIlxuXTtcblxudmFyIGxpZ2h0c2xhdGVncmV5ID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI3Nzg4OTlcIlxuXTtcblxudmFyIGxpZ2h0c3RlZWxibHVlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJCMEM0REVcIlxuXTtcblxudmFyIGxpZ2h0eWVsbG93ID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkZGRTBcIlxuXTtcblxudmFyIGxpbWUgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjAwRkYwMFwiXG5dO1xuXG52YXIgbGltZWdyZWVuID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCIzMkNEMzJcIlxuXTtcblxudmFyIGxpbmVuID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGQUYwRTZcIlxuXTtcblxudmFyIG1hZ2VudGEgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkZGMDBGRlwiXG5dO1xuXG52YXIgbWFyb29uID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI4MDAwMDBcIlxuXTtcblxudmFyIG1lZGl1bWFxdWFtYXJpbmUgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjY2Q0RBQVwiXG5dO1xuXG52YXIgbWVkaXVtYmx1ZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiMDAwMENEXCJcbl07XG5cbnZhciBtZWRpdW1vcmNoaWQgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkJBNTVEM1wiXG5dO1xuXG52YXIgbWVkaXVtcHVycGxlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI5MzcwREJcIlxuXTtcblxudmFyIG1lZGl1bXNlYWdyZWVuID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCIzQ0IzNzFcIlxuXTtcblxudmFyIG1lZGl1bXNsYXRlYmx1ZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiN0I2OEVFXCJcbl07XG5cbnZhciBtZWRpdW1zcHJpbmdncmVlbiA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiMDBGQTlBXCJcbl07XG5cbnZhciBtZWRpdW10dXJxdW9pc2UgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjQ4RDFDQ1wiXG5dO1xuXG52YXIgbWVkaXVtdmlvbGV0cmVkID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJDNzE1ODVcIlxuXTtcblxudmFyIG1pZG5pZ2h0Ymx1ZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiMTkxOTcwXCJcbl07XG5cbnZhciBtaW50Y3JlYW0gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkY1RkZGQVwiXG5dO1xuXG52YXIgbWlzdHlyb3NlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkU0RTFcIlxuXTtcblxudmFyIG1vY2Nhc2luID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkU0QjVcIlxuXTtcblxudmFyIG5hdmFqb3doaXRlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkRFQURcIlxuXTtcblxudmFyIG5hdnkgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjAwMDA4MFwiXG5dO1xuXG52YXIgb2xkbGFjZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRkRGNUU2XCJcbl07XG5cbnZhciBvbGl2ZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiODA4MDAwXCJcbl07XG5cbnZhciBvbGl2ZWRyYWIgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjZCOEUyM1wiXG5dO1xuXG52YXIgb3JhbmdlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkE1MDBcIlxuXTtcblxudmFyIG9yYW5nZXJlZCA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRkY0NTAwXCJcbl07XG5cbnZhciBvcmNoaWQgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkRBNzBENlwiXG5dO1xuXG52YXIgcGFsZWdvbGRlbnJvZCA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRUVFOEFBXCJcbl07XG5cbnZhciBwYWxlZ3JlZW4gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjk4RkI5OFwiXG5dO1xuXG52YXIgcGFsZXR1cnF1b2lzZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiQUZFRUVFXCJcbl07XG5cbnZhciBwYWxldmlvbGV0cmVkID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJEQjcwOTNcIlxuXTtcblxudmFyIHBhcGF5YXdoaXAgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkZGRUZENVwiXG5dO1xuXG52YXIgcGVhY2hwdWZmID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRkRBQjlcIlxuXTtcblxudmFyIHBlcnUgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkNEODUzRlwiXG5dO1xuXG52YXIgcGluayA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRkZDMENCXCJcbl07XG5cbnZhciBwbHVtID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJEREEwRERcIlxuXTtcblxudmFyIHBvd2RlcmJsdWUgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkIwRTBFNlwiXG5dO1xuXG52YXIgcHVycGxlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI4MDAwODBcIlxuXTtcblxudmFyIHJlYmVjY2FwdXJwbGUgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjY2MzM5OVwiXG5dO1xuXG52YXIgcmVkID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRjAwMDBcIlxuXTtcblxudmFyIHJvc3licm93biA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiQkM4RjhGXCJcbl07XG5cbnZhciByb3lhbGJsdWUgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjQxNjlFMVwiXG5dO1xuXG52YXIgc2FkZGxlYnJvd24gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjhCNDUxM1wiXG5dO1xuXG52YXIgc2FsbW9uID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGQTgwNzJcIlxuXTtcblxudmFyIHNhbmR5YnJvd24gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkY0QTQ2MFwiXG5dO1xuXG52YXIgc2VhZ3JlZW4gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjJFOEI1N1wiXG5dO1xuXG52YXIgc2Vhc2hlbGwgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkZGRjVFRVwiXG5dO1xuXG52YXIgc2llbm5hID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJBMDUyMkRcIlxuXTtcblxudmFyIHNpbHZlciA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiQzBDMEMwXCJcbl07XG5cbnZhciBza3libHVlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI4N0NFRUJcIlxuXTtcblxudmFyIHNsYXRlYmx1ZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiNkE1QUNEXCJcbl07XG5cbnZhciBzbGF0ZWdyYXkgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjcwODA5MFwiXG5dO1xuXG52YXIgc2xhdGVncmV5ID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI3MDgwOTBcIlxuXTtcblxudmFyIHNub3cgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkZGRkFGQVwiXG5dO1xuXG52YXIgc3ByaW5nZ3JlZW4gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjAwRkY3RlwiXG5dO1xuXG52YXIgc3RlZWxibHVlID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCI0NjgyQjRcIlxuXTtcblxudmFyIHRhbiA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRDJCNDhDXCJcbl07XG5cbnZhciB0ZWFsID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCIwMDgwODBcIlxuXTtcblxudmFyIHRoaXN0bGUgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkQ4QkZEOFwiXG5dO1xuXG52YXIgdG9tYXRvID0gLyogYGhleCAqL1tcbiAgNTE5NDQ1OSxcbiAgXCJGRjYzNDdcIlxuXTtcblxudmFyIHR1cnF1b2lzZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiNDBFMEQwXCJcbl07XG5cbnZhciB2aW9sZXQgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkVFODJFRVwiXG5dO1xuXG52YXIgd2hlYXQgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkY1REVCM1wiXG5dO1xuXG52YXIgd2hpdGUgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkZGRkZGRlwiXG5dO1xuXG52YXIgd2hpdGVzbW9rZSA9IC8qIGBoZXggKi9bXG4gIDUxOTQ0NTksXG4gIFwiRjVGNUY1XCJcbl07XG5cbnZhciB5ZWxsb3cgPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIkZGRkYwMFwiXG5dO1xuXG52YXIgeWVsbG93Z3JlZW4gPSAvKiBgaGV4ICovW1xuICA1MTk0NDU5LFxuICBcIjlBQ0QzXCJcbl07XG5cbnZhciB6ZXJvID0gLyogemVybyAqLy03ODk1MDgzMTI7XG5cbnZhciBzb2xpZCA9IC8qIHNvbGlkICovMTI5NTY3MTU7XG5cbnZhciBkb3R0ZWQgPSAvKiBkb3R0ZWQgKi84NDE5Nzk2MjY7XG5cbnZhciBkYXNoZWQgPSAvKiBkYXNoZWQgKi81Njg0MDM1MDU7XG5cbnZhciBub25lID0gLyogbm9uZSAqLy05MjIwODY3Mjg7XG5cbnZhciBhdXRvID0gLyogYXV0byAqLy0xMDY1OTUxMzc3O1xuXG52YXIgaGlkZGVuID0gLyogaGlkZGVuICovLTg2MjU4NDk4MjtcblxudmFyIHZpc2libGUgPSAvKiB2aXNpYmxlICovNTg5NTkyNjkwO1xuXG52YXIgbG9jYWwgPSAvKiBsb2NhbCAqLy0xMTg0Mzc1MjU7XG5cbnZhciBzY3JvbGwgPSAvKiBzY3JvbGwgKi8tOTQ5NjkyNDAzO1xuXG52YXIgcGFkZGluZ0JveCA9IC8qIHBhZGRpbmdCb3ggKi85NzI1NzU5MzA7XG5cbnZhciBib3JkZXJCb3ggPSAvKiBib3JkZXJCb3ggKi85MzA3MjYzO1xuXG52YXIgY29udGVudEJveCA9IC8qIGNvbnRlbnRCb3ggKi8tMTAwODg0ODMwMjtcblxudmFyIG5vUmVwZWF0ID0gLyogbm9SZXBlYXQgKi8tNjk1NDMwNTMyO1xuXG52YXIgcmVwZWF0ID0gLyogcmVwZWF0ICovMTA4ODI4NTA3O1xuXG52YXIgcmVwZWF0WCA9IC8qIHJlcGVhdFggKi82NDY0MzcwMjE7XG5cbnZhciByZXBlYXRZID0gLyogcmVwZWF0WSAqLzY0NjQzNzAyMjtcblxudmFyIGNvbnRhaW4gPSAvKiBjb250YWluICovNDI3MDY1MzAwO1xuXG52YXIgY292ZXIgPSAvKiBjb3ZlciAqLy04OTk0MTYyNjU7XG5cbnZhciByb3cgPSAvKiByb3cgKi81NjkzOTc4O1xuXG52YXIgcm93UmV2ZXJzZSA9IC8qIHJvd1JldmVyc2UgKi8zNzg5NTEyMDg7XG5cbnZhciBjb2x1bW4gPSAvKiBjb2x1bW4gKi8tOTYzOTQ4ODQyO1xuXG52YXIgY29sdW1uUmV2ZXJzZSA9IC8qIGNvbHVtblJldmVyc2UgKi8xMzU0Nzc0ODQ7XG5cbnZhciB3cmFwID0gLyogd3JhcCAqLy04MjIxMzQzMjY7XG5cbnZhciBub3dyYXAgPSAvKiBub3dyYXAgKi84Njc5MTMzNTU7XG5cbnZhciB3cmFwUmV2ZXJzZSA9IC8qIHdyYXBSZXZlcnNlICovLTQ2MzEyMTI4ODtcblxudmFyIGZsZXhCb3ggPSAvKiBmbGV4ICovLTEwMTA5NTQ0Mzk7XG5cbnZhciBncmlkID0gLyogZ3JpZCAqLy05OTk1NjU2MjY7XG5cbnZhciBpbmxpbmVHcmlkID0gLyogaW5saW5lR3JpZCAqLzY0NzEyMTI3O1xuXG52YXIgYmxvY2sgPSAvKiBibG9jayAqLzg4ODk2MDMzMztcblxudmFyIGlubGluZSA9IC8qIGlubGluZSAqLzQyMzYxMDk2OTtcblxudmFyIGlubGluZUJsb2NrID0gLyogaW5saW5lQmxvY2sgKi8tMTQ3Nzg1Njc2O1xuXG52YXIgaW5saW5lRmxleCA9IC8qIGlubGluZUZsZXggKi81MzMyMzMxNDtcblxudmFyIGFic29sdXRlID0gLyogYWJzb2x1dGUgKi8tMTAxMzU5MjQ1NztcblxudmFyIHJlbGF0aXZlID0gLyogcmVsYXRpdmUgKi85MDMxMzQ0MTI7XG5cbnZhciAkJHN0YXRpYyA9IC8qIHN0YXRpYyAqLzEwMDM5MjExMDtcblxudmFyIGZpeGVkID0gLyogZml4ZWQgKi8xMDYxNTE1NjtcblxudmFyIHN0aWNreSA9IC8qIHN0aWNreSAqLzE4ODI2MzcyMTtcblxudmFyIGZsZXhTdGFydCA9IC8qIGZsZXhTdGFydCAqLzY2MjQzOTUyOTtcblxudmFyIGZsZXhFbmQgPSAvKiBmbGV4RW5kICovOTI0MjY4MDY2O1xuXG52YXIgY2VudGVyID0gLyogY2VudGVyICovOTgyNDgxNDk7XG5cbnZhciBzdHJldGNoID0gLyogc3RyZXRjaCAqLy0xNjIzMTY3OTU7XG5cbnZhciBzcGFjZUJldHdlZW4gPSAvKiBzcGFjZUJldHdlZW4gKi81MTY2ODIxNDY7XG5cbnZhciBzcGFjZUFyb3VuZCA9IC8qIHNwYWNlQXJvdW5kICovLTQ4NTg5NTc1NztcblxudmFyIGJhc2VsaW5lID0gLyogYmFzZWxpbmUgKi8yODc4MjUwMjk7XG5cbnZhciBmb3J3YXJkcyA9IC8qIGZvcndhcmRzICovNzMzNjUzNzc0O1xuXG52YXIgYmFja3dhcmRzID0gLyogYmFja3dhcmRzICovMjQ1ODYxMTY4O1xuXG52YXIgYm90aCA9IC8qIGJvdGggKi8tMTA1NTE2MDE5MTtcblxudmFyIGluZmluaXRlID0gLyogaW5maW5pdGUgKi8tNjMwNjQ3MDg0O1xuXG52YXIgcGF1c2VkID0gLyogcGF1c2VkICovLTI3NjU0NTM2MjtcblxudmFyIHJ1bm5pbmcgPSAvKiBydW5uaW5nICovLTM0NTQxMjA5NztcblxudmFyIGluc2lkZSA9IC8qIGluc2lkZSAqLzUwMTIzNTcwODtcblxudmFyIG91dHNpZGUgPSAvKiBvdXRzaWRlICovLTQzMDAxMTA5OTtcblxudmFyIGl0YWxpYyA9IC8qIGl0YWxpYyAqLzEwNzIyODkxMjtcblxudmFyIG9ibGlxdWUgPSAvKiBvYmxpcXVlICovNzM0NzkyODgxO1xuXG52YXIgdW5kZXJsaW5lID0gLyogdW5kZXJsaW5lICovMTMxMTQyOTI0O1xuXG52YXIgb3ZlcmxpbmUgPSAvKiBvdmVybGluZSAqLy05ODY2NTE4MzI7XG5cbnZhciBsaW5lVGhyb3VnaCA9IC8qIGxpbmVUaG91Z2ggKi8tNTEyNjIzNzkzO1xuXG52YXIgY2xpcCA9IC8qIGNsaXAgKi8tMTA0NDIyMjI1NjtcblxudmFyIGVsbGlwc2lzID0gLyogZWxsaXBzaXMgKi8xNjY4ODg3ODU7XG5cbnZhciB3YXZ5ID0gLyogd2F2eSAqLy04MjI5NzUwMjc7XG5cbnZhciAkJGRvdWJsZSA9IC8qIGRvdWJsZSAqLzg1MjE3NTYzMztcblxudmFyIHVwcGVyY2FzZSA9IC8qIHVwcGVyY2FzZSAqLy00MTUzMzAwMzA7XG5cbnZhciBsb3dlcmNhc2UgPSAvKiBsb3dlcmNhc2UgKi8tNDI1MzQ5ODM5O1xuXG52YXIgY2FwaXRhbGl6ZSA9IC8qIGNhcGl0YWxpemUgKi8tNTA5ODY3NjA0O1xuXG52YXIgc3ViID0gLyogc3ViICovNTc0NTAyNDtcblxudmFyICQkc3VwZXIgPSAvKiBzdXBlciAqLzc5NjkyMTU1O1xuXG52YXIgdGV4dFRvcCA9IC8qIHRleHRUb3AgKi81MTY0MDYyNDg7XG5cbnZhciB0ZXh0Qm90dG9tID0gLyogdGV4dEJvdHRvbSAqLzQ3NjY2OTgxNjtcblxudmFyIG1pZGRsZSA9IC8qIG1pZGRsZSAqLy04NjYyMDA3NDc7XG5cbnZhciBub3JtYWwgPSAvKiBub3JtYWwgKi84MTIyMTY4NzE7XG5cbnZhciBicmVha0FsbCA9IC8qIGJyZWFrQWxsICovLTMyMzc2MDczNDtcblxudmFyIGtlZXBBbGwgPSAvKiBrZWVwQWxsICovODkyNzQ4MTg4O1xuXG52YXIgYnJlYWtXb3JkID0gLyogYnJlYWtXb3JkICovMTA1OTkyMTQ0OTtcblxudmFyIHJldmVyc2UgPSAvKiByZXZlcnNlICovNDUyNzM3MzE0O1xuXG52YXIgYWx0ZXJuYXRlID0gLyogYWx0ZXJuYXRlICovODkyNTg2Mjk4O1xuXG52YXIgYWx0ZXJuYXRlUmV2ZXJzZSA9IC8qIGFsdGVybmF0ZVJldmVyc2UgKi81NDU0MjgyMzI7XG5cbnZhciBmaWxsJDEgPSAvKiBmaWxsICovLTEwMTExMDIwNzc7XG5cbnZhciBjb250ZW50ID0gLyogY29udGVudCAqLzQyNzI2NTMzNztcblxudmFyIG1heENvbnRlbnQgPSAvKiBtYXhDb250ZW50ICovNjA1NTcwNDU7XG5cbnZhciBtaW5Db250ZW50ID0gLyogbWluQ29udGVudCAqLy01NTA1Nzc3MjE7XG5cbnZhciBmaXRDb250ZW50ID0gLyogZml0Q29udGVudCAqLy0xOTU4MDUzMzY7XG5cbnZhciBhbGwgPSAvKiBhbGwgKi80ODQ3OTA1O1xuXG52YXIgdGV4dCA9IC8qIHRleHQgKi8tODU2MDQ0MzcxO1xuXG52YXIgbGluZWFyID0gLyogbGluZWFyICovLTMyNTAzNzU5NTtcblxudmFyIGVhc2UgPSAvKiBlYXNlICovLTEwMjI1ODc5MjI7XG5cbnZhciBlYXNlSW4gPSAvKiBlYXNlSW4gKi8xMzgwMjc4OTE7XG5cbnZhciBlYXNlT3V0ID0gLyogZWFzZU91dCAqLzcxNTc0ODY3MjtcblxudmFyIGVhc2VJbk91dCA9IC8qIGVhc2VJbk91dCAqLy05NjA2NTE1NTc7XG5cbnZhciBzdGVwU3RhcnQgPSAvKiBzdGVwU3RhcnQgKi8tMTkzNTI1Mzg2O1xuXG52YXIgc3RlcEVuZCA9IC8qIHN0ZXBFbmQgKi8yMDkzMzYxNTtcblxudmFyIHJvdW5kID0gLyogcm91bmQgKi8tMzEyMDg0NDAyO1xuXG52YXIgbWl0ZXIgPSAvKiBtaXRlciAqLzE0MTM2MTE1NztcblxudmFyIGJldmVsID0gLyogYmV2ZWwgKi84MTE2ODE5MTQ7XG5cbnZhciBidXR0ID0gLyogYnV0dCAqLy0xMDU0ODYxODA1O1xuXG52YXIgc3F1YXJlID0gLyogc3F1YXJlICovLTY1NTIyODc3MTtcblxudmFyIHVuc2FmZSA9IGQ7XG5cbnZhciBTVkcgPSBbXG4gIGZpbGwsXG4gIGZpbGxSdWxlLFxuICBmaWxsT3BhY2l0eSxcbiAgc3Ryb2tlLFxuICBzdHJva2VMaW5lY2FwLFxuICBzdHJva2VMaW5lam9pbixcbiAgc3Ryb2tlTWl0ZXJsaW1pdCxcbiAgc3Ryb2tlV2lkdGgsXG4gIHN0cm9rZU9wYWNpdHksXG4gIHN0b3BDb2xvcixcbiAgc3RvcE9wYWNpdHlcbl07XG5cbmV4cG9ydHMuZW1wdHkgPSBlbXB0eTtcbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbmV4cG9ydHMuc3R5bGUgPSBzdHlsZTtcbmV4cG9ydHMuJCRnbG9iYWwgPSAkJGdsb2JhbDtcbmV4cG9ydHMuaW1wb3J0YW50ID0gaW1wb3J0YW50O1xuZXhwb3J0cy5sYWJlbCA9IGxhYmVsO1xuZXhwb3J0cy5kZWcgPSBkZWc7XG5leHBvcnRzLnJhZCA9IHJhZDtcbmV4cG9ydHMuZ3JhZCA9IGdyYWQ7XG5leHBvcnRzLnR1cm4gPSB0dXJuO1xuZXhwb3J0cy5yZ2IgPSByZ2I7XG5leHBvcnRzLnJnYmEgPSByZ2JhO1xuZXhwb3J0cy5oc2wgPSBoc2w7XG5leHBvcnRzLmhzbGEgPSBoc2xhO1xuZXhwb3J0cy5oZXggPSBoZXg7XG5leHBvcnRzLnRyYW5zcGFyZW50ID0gdHJhbnNwYXJlbnQ7XG5leHBvcnRzLmN1cnJlbnRDb2xvciA9IGN1cnJlbnRDb2xvcjtcbmV4cG9ydHMubGluZWFyR3JhZGllbnQgPSBsaW5lYXJHcmFkaWVudDtcbmV4cG9ydHMucmVwZWF0aW5nTGluZWFyR3JhZGllbnQgPSByZXBlYXRpbmdMaW5lYXJHcmFkaWVudDtcbmV4cG9ydHMucmFkaWFsR3JhZGllbnQgPSByYWRpYWxHcmFkaWVudDtcbmV4cG9ydHMucmVwZWF0aW5nUmFkaWFsR3JhZGllbnQgPSByZXBlYXRpbmdSYWRpYWxHcmFkaWVudDtcbmV4cG9ydHMuYWxpY2VibHVlID0gYWxpY2VibHVlO1xuZXhwb3J0cy5hbnRpcXVld2hpdGUgPSBhbnRpcXVld2hpdGU7XG5leHBvcnRzLmFxdWEgPSBhcXVhO1xuZXhwb3J0cy5hcXVhbWFyaW5lID0gYXF1YW1hcmluZTtcbmV4cG9ydHMuYXp1cmUgPSBhenVyZTtcbmV4cG9ydHMuYmVpZ2UgPSBiZWlnZTtcbmV4cG9ydHMuYmlzcXVlID0gYmlzcXVlO1xuZXhwb3J0cy5ibGFjayA9IGJsYWNrO1xuZXhwb3J0cy5ibGFuY2hlZGFsbW9uZCA9IGJsYW5jaGVkYWxtb25kO1xuZXhwb3J0cy5ibHVlID0gYmx1ZTtcbmV4cG9ydHMuYmx1ZXZpb2xldCA9IGJsdWV2aW9sZXQ7XG5leHBvcnRzLmJyb3duID0gYnJvd247XG5leHBvcnRzLmJ1cmx5d29vZCA9IGJ1cmx5d29vZDtcbmV4cG9ydHMuY2FkZXRibHVlID0gY2FkZXRibHVlO1xuZXhwb3J0cy5jaGFydHJldXNlID0gY2hhcnRyZXVzZTtcbmV4cG9ydHMuY2hvY29sYXRlID0gY2hvY29sYXRlO1xuZXhwb3J0cy5jb3JhbCA9IGNvcmFsO1xuZXhwb3J0cy5jb3JuZmxvd2VyYmx1ZSA9IGNvcm5mbG93ZXJibHVlO1xuZXhwb3J0cy5jb3Juc2lsayA9IGNvcm5zaWxrO1xuZXhwb3J0cy5jcmltc29uID0gY3JpbXNvbjtcbmV4cG9ydHMuY3lhbiA9IGN5YW47XG5leHBvcnRzLmRhcmtibHVlID0gZGFya2JsdWU7XG5leHBvcnRzLmRhcmtjeWFuID0gZGFya2N5YW47XG5leHBvcnRzLmRhcmtnb2xkZW5yb2QgPSBkYXJrZ29sZGVucm9kO1xuZXhwb3J0cy5kYXJrZ3JheSA9IGRhcmtncmF5O1xuZXhwb3J0cy5kYXJrZ3JleSA9IGRhcmtncmV5O1xuZXhwb3J0cy5kYXJrZ3JlZW4gPSBkYXJrZ3JlZW47XG5leHBvcnRzLmRhcmtraGFraSA9IGRhcmtraGFraTtcbmV4cG9ydHMuZGFya21hZ2VudGEgPSBkYXJrbWFnZW50YTtcbmV4cG9ydHMuZGFya29saXZlZ3JlZW4gPSBkYXJrb2xpdmVncmVlbjtcbmV4cG9ydHMuZGFya29yYW5nZSA9IGRhcmtvcmFuZ2U7XG5leHBvcnRzLmRhcmtvcmNoaWQgPSBkYXJrb3JjaGlkO1xuZXhwb3J0cy5kYXJrcmVkID0gZGFya3JlZDtcbmV4cG9ydHMuZGFya3NhbG1vbiA9IGRhcmtzYWxtb247XG5leHBvcnRzLmRhcmtzZWFncmVlbiA9IGRhcmtzZWFncmVlbjtcbmV4cG9ydHMuZGFya3NsYXRlYmx1ZSA9IGRhcmtzbGF0ZWJsdWU7XG5leHBvcnRzLmRhcmtzbGF0ZWdyYXkgPSBkYXJrc2xhdGVncmF5O1xuZXhwb3J0cy5kYXJrc2xhdGVncmV5ID0gZGFya3NsYXRlZ3JleTtcbmV4cG9ydHMuZGFya3R1cnF1b2lzZSA9IGRhcmt0dXJxdW9pc2U7XG5leHBvcnRzLmRhcmt2aW9sZXQgPSBkYXJrdmlvbGV0O1xuZXhwb3J0cy5kZWVwcGluayA9IGRlZXBwaW5rO1xuZXhwb3J0cy5kZWVwc2t5Ymx1ZSA9IGRlZXBza3libHVlO1xuZXhwb3J0cy5kaW1ncmF5ID0gZGltZ3JheTtcbmV4cG9ydHMuZGltZ3JleSA9IGRpbWdyZXk7XG5leHBvcnRzLmRvZGdlcmJsdWUgPSBkb2RnZXJibHVlO1xuZXhwb3J0cy5maXJlYnJpY2sgPSBmaXJlYnJpY2s7XG5leHBvcnRzLmZsb3JhbHdoaXRlID0gZmxvcmFsd2hpdGU7XG5leHBvcnRzLmZvcmVzdGdyZWVuID0gZm9yZXN0Z3JlZW47XG5leHBvcnRzLmZ1Y2hzaWEgPSBmdWNoc2lhO1xuZXhwb3J0cy5nYWluc2Jvcm8gPSBnYWluc2Jvcm87XG5leHBvcnRzLmdob3N0d2hpdGUgPSBnaG9zdHdoaXRlO1xuZXhwb3J0cy5nb2xkID0gZ29sZDtcbmV4cG9ydHMuZ29sZGVucm9kID0gZ29sZGVucm9kO1xuZXhwb3J0cy5ncmF5ID0gZ3JheTtcbmV4cG9ydHMuZ3JleSA9IGdyZXk7XG5leHBvcnRzLmdyZWVuID0gZ3JlZW47XG5leHBvcnRzLmdyZWVueWVsbG93ID0gZ3JlZW55ZWxsb3c7XG5leHBvcnRzLmhvbmV5ZGV3ID0gaG9uZXlkZXc7XG5leHBvcnRzLmhvdHBpbmsgPSBob3RwaW5rO1xuZXhwb3J0cy5pbmRpYW5yZWQgPSBpbmRpYW5yZWQ7XG5leHBvcnRzLmluZGlnbyA9IGluZGlnbztcbmV4cG9ydHMuaXZvcnkgPSBpdm9yeTtcbmV4cG9ydHMua2hha2kgPSBraGFraTtcbmV4cG9ydHMubGF2ZW5kZXIgPSBsYXZlbmRlcjtcbmV4cG9ydHMubGF2ZW5kZXJibHVzaCA9IGxhdmVuZGVyYmx1c2g7XG5leHBvcnRzLmxhd25ncmVlbiA9IGxhd25ncmVlbjtcbmV4cG9ydHMubGVtb25jaGlmZm9uID0gbGVtb25jaGlmZm9uO1xuZXhwb3J0cy5saWdodGJsdWUgPSBsaWdodGJsdWU7XG5leHBvcnRzLmxpZ2h0Y29yYWwgPSBsaWdodGNvcmFsO1xuZXhwb3J0cy5saWdodGN5YW4gPSBsaWdodGN5YW47XG5leHBvcnRzLmxpZ2h0Z29sZGVucm9keWVsbG93ID0gbGlnaHRnb2xkZW5yb2R5ZWxsb3c7XG5leHBvcnRzLmxpZ2h0Z3JheSA9IGxpZ2h0Z3JheTtcbmV4cG9ydHMubGlnaHRncmV5ID0gbGlnaHRncmV5O1xuZXhwb3J0cy5saWdodGdyZWVuID0gbGlnaHRncmVlbjtcbmV4cG9ydHMubGlnaHRwaW5rID0gbGlnaHRwaW5rO1xuZXhwb3J0cy5saWdodHNhbG1vbiA9IGxpZ2h0c2FsbW9uO1xuZXhwb3J0cy5saWdodHNlYWdyZWVuID0gbGlnaHRzZWFncmVlbjtcbmV4cG9ydHMubGlnaHRza3libHVlID0gbGlnaHRza3libHVlO1xuZXhwb3J0cy5saWdodHNsYXRlZ3JheSA9IGxpZ2h0c2xhdGVncmF5O1xuZXhwb3J0cy5saWdodHNsYXRlZ3JleSA9IGxpZ2h0c2xhdGVncmV5O1xuZXhwb3J0cy5saWdodHN0ZWVsYmx1ZSA9IGxpZ2h0c3RlZWxibHVlO1xuZXhwb3J0cy5saWdodHllbGxvdyA9IGxpZ2h0eWVsbG93O1xuZXhwb3J0cy5saW1lID0gbGltZTtcbmV4cG9ydHMubGltZWdyZWVuID0gbGltZWdyZWVuO1xuZXhwb3J0cy5saW5lbiA9IGxpbmVuO1xuZXhwb3J0cy5tYWdlbnRhID0gbWFnZW50YTtcbmV4cG9ydHMubWFyb29uID0gbWFyb29uO1xuZXhwb3J0cy5tZWRpdW1hcXVhbWFyaW5lID0gbWVkaXVtYXF1YW1hcmluZTtcbmV4cG9ydHMubWVkaXVtYmx1ZSA9IG1lZGl1bWJsdWU7XG5leHBvcnRzLm1lZGl1bW9yY2hpZCA9IG1lZGl1bW9yY2hpZDtcbmV4cG9ydHMubWVkaXVtcHVycGxlID0gbWVkaXVtcHVycGxlO1xuZXhwb3J0cy5tZWRpdW1zZWFncmVlbiA9IG1lZGl1bXNlYWdyZWVuO1xuZXhwb3J0cy5tZWRpdW1zbGF0ZWJsdWUgPSBtZWRpdW1zbGF0ZWJsdWU7XG5leHBvcnRzLm1lZGl1bXNwcmluZ2dyZWVuID0gbWVkaXVtc3ByaW5nZ3JlZW47XG5leHBvcnRzLm1lZGl1bXR1cnF1b2lzZSA9IG1lZGl1bXR1cnF1b2lzZTtcbmV4cG9ydHMubWVkaXVtdmlvbGV0cmVkID0gbWVkaXVtdmlvbGV0cmVkO1xuZXhwb3J0cy5taWRuaWdodGJsdWUgPSBtaWRuaWdodGJsdWU7XG5leHBvcnRzLm1pbnRjcmVhbSA9IG1pbnRjcmVhbTtcbmV4cG9ydHMubWlzdHlyb3NlID0gbWlzdHlyb3NlO1xuZXhwb3J0cy5tb2NjYXNpbiA9IG1vY2Nhc2luO1xuZXhwb3J0cy5uYXZham93aGl0ZSA9IG5hdmFqb3doaXRlO1xuZXhwb3J0cy5uYXZ5ID0gbmF2eTtcbmV4cG9ydHMub2xkbGFjZSA9IG9sZGxhY2U7XG5leHBvcnRzLm9saXZlID0gb2xpdmU7XG5leHBvcnRzLm9saXZlZHJhYiA9IG9saXZlZHJhYjtcbmV4cG9ydHMub3JhbmdlID0gb3JhbmdlO1xuZXhwb3J0cy5vcmFuZ2VyZWQgPSBvcmFuZ2VyZWQ7XG5leHBvcnRzLm9yY2hpZCA9IG9yY2hpZDtcbmV4cG9ydHMucGFsZWdvbGRlbnJvZCA9IHBhbGVnb2xkZW5yb2Q7XG5leHBvcnRzLnBhbGVncmVlbiA9IHBhbGVncmVlbjtcbmV4cG9ydHMucGFsZXR1cnF1b2lzZSA9IHBhbGV0dXJxdW9pc2U7XG5leHBvcnRzLnBhbGV2aW9sZXRyZWQgPSBwYWxldmlvbGV0cmVkO1xuZXhwb3J0cy5wYXBheWF3aGlwID0gcGFwYXlhd2hpcDtcbmV4cG9ydHMucGVhY2hwdWZmID0gcGVhY2hwdWZmO1xuZXhwb3J0cy5wZXJ1ID0gcGVydTtcbmV4cG9ydHMucGluayA9IHBpbms7XG5leHBvcnRzLnBsdW0gPSBwbHVtO1xuZXhwb3J0cy5wb3dkZXJibHVlID0gcG93ZGVyYmx1ZTtcbmV4cG9ydHMucHVycGxlID0gcHVycGxlO1xuZXhwb3J0cy5yZWJlY2NhcHVycGxlID0gcmViZWNjYXB1cnBsZTtcbmV4cG9ydHMucmVkID0gcmVkO1xuZXhwb3J0cy5yb3N5YnJvd24gPSByb3N5YnJvd247XG5leHBvcnRzLnJveWFsYmx1ZSA9IHJveWFsYmx1ZTtcbmV4cG9ydHMuc2FkZGxlYnJvd24gPSBzYWRkbGVicm93bjtcbmV4cG9ydHMuc2FsbW9uID0gc2FsbW9uO1xuZXhwb3J0cy5zYW5keWJyb3duID0gc2FuZHlicm93bjtcbmV4cG9ydHMuc2VhZ3JlZW4gPSBzZWFncmVlbjtcbmV4cG9ydHMuc2Vhc2hlbGwgPSBzZWFzaGVsbDtcbmV4cG9ydHMuc2llbm5hID0gc2llbm5hO1xuZXhwb3J0cy5zaWx2ZXIgPSBzaWx2ZXI7XG5leHBvcnRzLnNreWJsdWUgPSBza3libHVlO1xuZXhwb3J0cy5zbGF0ZWJsdWUgPSBzbGF0ZWJsdWU7XG5leHBvcnRzLnNsYXRlZ3JheSA9IHNsYXRlZ3JheTtcbmV4cG9ydHMuc2xhdGVncmV5ID0gc2xhdGVncmV5O1xuZXhwb3J0cy5zbm93ID0gc25vdztcbmV4cG9ydHMuc3ByaW5nZ3JlZW4gPSBzcHJpbmdncmVlbjtcbmV4cG9ydHMuc3RlZWxibHVlID0gc3RlZWxibHVlO1xuZXhwb3J0cy50YW4gPSB0YW47XG5leHBvcnRzLnRlYWwgPSB0ZWFsO1xuZXhwb3J0cy50aGlzdGxlID0gdGhpc3RsZTtcbmV4cG9ydHMudG9tYXRvID0gdG9tYXRvO1xuZXhwb3J0cy50dXJxdW9pc2UgPSB0dXJxdW9pc2U7XG5leHBvcnRzLnZpb2xldCA9IHZpb2xldDtcbmV4cG9ydHMud2hlYXQgPSB3aGVhdDtcbmV4cG9ydHMud2hpdGUgPSB3aGl0ZTtcbmV4cG9ydHMud2hpdGVzbW9rZSA9IHdoaXRlc21va2U7XG5leHBvcnRzLnllbGxvdyA9IHllbGxvdztcbmV4cG9ydHMueWVsbG93Z3JlZW4gPSB5ZWxsb3dncmVlbjtcbmV4cG9ydHMuY2ggPSBjaDtcbmV4cG9ydHMuY20gPSBjbTtcbmV4cG9ydHMuZW0gPSBlbTtcbmV4cG9ydHMuZXggPSBleDtcbmV4cG9ydHMuZnIgPSBmcjtcbmV4cG9ydHMubW0gPSBtbTtcbmV4cG9ydHMucGN0ID0gcGN0O1xuZXhwb3J0cy5wdCA9IHB0O1xuZXhwb3J0cy5weCA9IHB4O1xuZXhwb3J0cy5yZW0gPSByZW07XG5leHBvcnRzLnZoID0gdmg7XG5leHBvcnRzLnZtYXggPSB2bWF4O1xuZXhwb3J0cy52bWluID0gdm1pbjtcbmV4cG9ydHMudncgPSB2dztcbmV4cG9ydHMuemVybyA9IHplcm87XG5leHBvcnRzLkNhbGMgPSBDYWxjO1xuZXhwb3J0cy5zaXplID0gc2l6ZTtcbmV4cG9ydHMuc29saWQgPSBzb2xpZDtcbmV4cG9ydHMuZG90dGVkID0gZG90dGVkO1xuZXhwb3J0cy5kYXNoZWQgPSBkYXNoZWQ7XG5leHBvcnRzLmxvY2FsVXJsID0gbG9jYWxVcmw7XG5leHBvcnRzLnVybCA9IHVybDtcbmV4cG9ydHMubm9uZSA9IG5vbmU7XG5leHBvcnRzLmF1dG8gPSBhdXRvO1xuZXhwb3J0cy5oaWRkZW4gPSBoaWRkZW47XG5leHBvcnRzLnZpc2libGUgPSB2aXNpYmxlO1xuZXhwb3J0cy5sb2NhbCA9IGxvY2FsO1xuZXhwb3J0cy5zY3JvbGwgPSBzY3JvbGw7XG5leHBvcnRzLnBhZGRpbmdCb3ggPSBwYWRkaW5nQm94O1xuZXhwb3J0cy5ib3JkZXJCb3ggPSBib3JkZXJCb3g7XG5leHBvcnRzLmNvbnRlbnRCb3ggPSBjb250ZW50Qm94O1xuZXhwb3J0cy5ub1JlcGVhdCA9IG5vUmVwZWF0O1xuZXhwb3J0cy5yZXBlYXQgPSByZXBlYXQ7XG5leHBvcnRzLnJlcGVhdFggPSByZXBlYXRYO1xuZXhwb3J0cy5yZXBlYXRZID0gcmVwZWF0WTtcbmV4cG9ydHMuY29udGFpbiA9IGNvbnRhaW47XG5leHBvcnRzLmNvdmVyID0gY292ZXI7XG5leHBvcnRzLnJvdyA9IHJvdztcbmV4cG9ydHMucm93UmV2ZXJzZSA9IHJvd1JldmVyc2U7XG5leHBvcnRzLmNvbHVtbiA9IGNvbHVtbjtcbmV4cG9ydHMuY29sdW1uUmV2ZXJzZSA9IGNvbHVtblJldmVyc2U7XG5leHBvcnRzLndyYXAgPSB3cmFwO1xuZXhwb3J0cy5ub3dyYXAgPSBub3dyYXA7XG5leHBvcnRzLndyYXBSZXZlcnNlID0gd3JhcFJldmVyc2U7XG5leHBvcnRzLmZsZXhCb3ggPSBmbGV4Qm94O1xuZXhwb3J0cy5ncmlkID0gZ3JpZDtcbmV4cG9ydHMuaW5saW5lR3JpZCA9IGlubGluZUdyaWQ7XG5leHBvcnRzLmJsb2NrID0gYmxvY2s7XG5leHBvcnRzLmlubGluZSA9IGlubGluZTtcbmV4cG9ydHMuaW5saW5lQmxvY2sgPSBpbmxpbmVCbG9jaztcbmV4cG9ydHMuaW5saW5lRmxleCA9IGlubGluZUZsZXg7XG5leHBvcnRzLmFic29sdXRlID0gYWJzb2x1dGU7XG5leHBvcnRzLnJlbGF0aXZlID0gcmVsYXRpdmU7XG5leHBvcnRzLiQkc3RhdGljID0gJCRzdGF0aWM7XG5leHBvcnRzLmZpeGVkID0gZml4ZWQ7XG5leHBvcnRzLnN0aWNreSA9IHN0aWNreTtcbmV4cG9ydHMuZmxleFN0YXJ0ID0gZmxleFN0YXJ0O1xuZXhwb3J0cy5mbGV4RW5kID0gZmxleEVuZDtcbmV4cG9ydHMuY2VudGVyID0gY2VudGVyO1xuZXhwb3J0cy5zdHJldGNoID0gc3RyZXRjaDtcbmV4cG9ydHMuc3BhY2VCZXR3ZWVuID0gc3BhY2VCZXR3ZWVuO1xuZXhwb3J0cy5zcGFjZUFyb3VuZCA9IHNwYWNlQXJvdW5kO1xuZXhwb3J0cy5iYXNlbGluZSA9IGJhc2VsaW5lO1xuZXhwb3J0cy5mb3J3YXJkcyA9IGZvcndhcmRzO1xuZXhwb3J0cy5iYWNrd2FyZHMgPSBiYWNrd2FyZHM7XG5leHBvcnRzLmJvdGggPSBib3RoO1xuZXhwb3J0cy5pbmZpbml0ZSA9IGluZmluaXRlO1xuZXhwb3J0cy5jb3VudCA9IGNvdW50O1xuZXhwb3J0cy5wYXVzZWQgPSBwYXVzZWQ7XG5leHBvcnRzLnJ1bm5pbmcgPSBydW5uaW5nO1xuZXhwb3J0cy5pbnNpZGUgPSBpbnNpZGU7XG5leHBvcnRzLm91dHNpZGUgPSBvdXRzaWRlO1xuZXhwb3J0cy50cmFuc2xhdGUgPSB0cmFuc2xhdGU7XG5leHBvcnRzLnRyYW5zbGF0ZTNkID0gdHJhbnNsYXRlM2Q7XG5leHBvcnRzLnRyYW5zbGF0ZVggPSB0cmFuc2xhdGVYO1xuZXhwb3J0cy50cmFuc2xhdGVZID0gdHJhbnNsYXRlWTtcbmV4cG9ydHMudHJhbnNsYXRlWiA9IHRyYW5zbGF0ZVo7XG5leHBvcnRzLnNjYWxlID0gc2NhbGU7XG5leHBvcnRzLnNjYWxlM2QgPSBzY2FsZTNkO1xuZXhwb3J0cy5zY2FsZVggPSBzY2FsZVg7XG5leHBvcnRzLnNjYWxlWSA9IHNjYWxlWTtcbmV4cG9ydHMuc2NhbGVaID0gc2NhbGVaO1xuZXhwb3J0cy5yb3RhdGUgPSByb3RhdGU7XG5leHBvcnRzLnJvdGF0ZTNkID0gcm90YXRlM2Q7XG5leHBvcnRzLnJvdGF0ZVggPSByb3RhdGVYO1xuZXhwb3J0cy5yb3RhdGVZID0gcm90YXRlWTtcbmV4cG9ydHMucm90YXRlWiA9IHJvdGF0ZVo7XG5leHBvcnRzLnNrZXcgPSBza2V3O1xuZXhwb3J0cy5za2V3WCA9IHNrZXdYO1xuZXhwb3J0cy5za2V3WSA9IHNrZXdZO1xuZXhwb3J0cy5pdGFsaWMgPSBpdGFsaWM7XG5leHBvcnRzLm9ibGlxdWUgPSBvYmxpcXVlO1xuZXhwb3J0cy51bmRlcmxpbmUgPSB1bmRlcmxpbmU7XG5leHBvcnRzLm92ZXJsaW5lID0gb3ZlcmxpbmU7XG5leHBvcnRzLmxpbmVUaHJvdWdoID0gbGluZVRocm91Z2g7XG5leHBvcnRzLmNsaXAgPSBjbGlwO1xuZXhwb3J0cy5lbGxpcHNpcyA9IGVsbGlwc2lzO1xuZXhwb3J0cy53YXZ5ID0gd2F2eTtcbmV4cG9ydHMuJCRkb3VibGUgPSAkJGRvdWJsZTtcbmV4cG9ydHMudXBwZXJjYXNlID0gdXBwZXJjYXNlO1xuZXhwb3J0cy5sb3dlcmNhc2UgPSBsb3dlcmNhc2U7XG5leHBvcnRzLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuZXhwb3J0cy5zdWIgPSBzdWI7XG5leHBvcnRzLiQkc3VwZXIgPSAkJHN1cGVyO1xuZXhwb3J0cy50ZXh0VG9wID0gdGV4dFRvcDtcbmV4cG9ydHMudGV4dEJvdHRvbSA9IHRleHRCb3R0b207XG5leHBvcnRzLm1pZGRsZSA9IG1pZGRsZTtcbmV4cG9ydHMubm9ybWFsID0gbm9ybWFsO1xuZXhwb3J0cy5icmVha0FsbCA9IGJyZWFrQWxsO1xuZXhwb3J0cy5rZWVwQWxsID0ga2VlcEFsbDtcbmV4cG9ydHMuYnJlYWtXb3JkID0gYnJlYWtXb3JkO1xuZXhwb3J0cy5yZXZlcnNlID0gcmV2ZXJzZTtcbmV4cG9ydHMuYWx0ZXJuYXRlID0gYWx0ZXJuYXRlO1xuZXhwb3J0cy5hbHRlcm5hdGVSZXZlcnNlID0gYWx0ZXJuYXRlUmV2ZXJzZTtcbmV4cG9ydHMuZmlsbCA9IGZpbGwkMTtcbmV4cG9ydHMuY29udGVudCA9IGNvbnRlbnQ7XG5leHBvcnRzLm1heENvbnRlbnQgPSBtYXhDb250ZW50O1xuZXhwb3J0cy5taW5Db250ZW50ID0gbWluQ29udGVudDtcbmV4cG9ydHMuZml0Q29udGVudCA9IGZpdENvbnRlbnQ7XG5leHBvcnRzLmFsbCA9IGFsbDtcbmV4cG9ydHMudGV4dCA9IHRleHQ7XG5leHBvcnRzLmxpbmVhciA9IGxpbmVhcjtcbmV4cG9ydHMuZWFzZSA9IGVhc2U7XG5leHBvcnRzLmVhc2VJbiA9IGVhc2VJbjtcbmV4cG9ydHMuZWFzZU91dCA9IGVhc2VPdXQ7XG5leHBvcnRzLmVhc2VJbk91dCA9IGVhc2VJbk91dDtcbmV4cG9ydHMuc3RlcFN0YXJ0ID0gc3RlcFN0YXJ0O1xuZXhwb3J0cy5zdGVwRW5kID0gc3RlcEVuZDtcbmV4cG9ydHMuc3RlcHMgPSBzdGVwcztcbmV4cG9ydHMuY3ViaWNCZXNpZXIgPSBjdWJpY0Jlc2llcjtcbmV4cG9ydHMucm91bmQgPSByb3VuZDtcbmV4cG9ydHMubWl0ZXIgPSBtaXRlcjtcbmV4cG9ydHMuYmV2ZWwgPSBiZXZlbDtcbmV4cG9ydHMuYnV0dCA9IGJ1dHQ7XG5leHBvcnRzLnNxdWFyZSA9IHNxdWFyZTtcbmV4cG9ydHMudW5zYWZlID0gdW5zYWZlO1xuZXhwb3J0cy5kaXNwbGF5ID0gZGlzcGxheTtcbmV4cG9ydHMucG9zaXRpb24gPSBwb3NpdGlvbjtcbmV4cG9ydHMudG9wID0gdG9wO1xuZXhwb3J0cy5ib3R0b20gPSBib3R0b207XG5leHBvcnRzLmxlZnQgPSBsZWZ0O1xuZXhwb3J0cy5yaWdodCA9IHJpZ2h0O1xuZXhwb3J0cy5mbGV4ID0gZmxleDtcbmV4cG9ydHMuZmxleEdyb3cgPSBmbGV4R3JvdztcbmV4cG9ydHMuZmxleFNocmluayA9IGZsZXhTaHJpbms7XG5leHBvcnRzLmZsZXhCYXNpcyA9IGZsZXhCYXNpcztcbmV4cG9ydHMuZmxleERpcmVjdGlvbiA9IGZsZXhEaXJlY3Rpb247XG5leHBvcnRzLmZsZXhXcmFwID0gZmxleFdyYXA7XG5leHBvcnRzLm9yZGVyID0gb3JkZXI7XG5leHBvcnRzLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBncmlkVGVtcGxhdGVDb2x1bW5zO1xuZXhwb3J0cy5ncmlkVGVtcGxhdGVSb3dzID0gZ3JpZFRlbXBsYXRlUm93cztcbmV4cG9ydHMuZ3JpZEF1dG9Sb3dzID0gZ3JpZEF1dG9Sb3dzO1xuZXhwb3J0cy5ncmlkQ29sdW1uID0gZ3JpZENvbHVtbjtcbmV4cG9ydHMuZ3JpZFJvdyA9IGdyaWRSb3c7XG5leHBvcnRzLmdyaWRDb2x1bW5TdGFydCA9IGdyaWRDb2x1bW5TdGFydDtcbmV4cG9ydHMuZ3JpZENvbHVtbkVuZCA9IGdyaWRDb2x1bW5FbmQ7XG5leHBvcnRzLmdyaWRSb3dTdGFydCA9IGdyaWRSb3dTdGFydDtcbmV4cG9ydHMuZ3JpZFJvd0VuZCA9IGdyaWRSb3dFbmQ7XG5leHBvcnRzLmdyaWRDb2x1bW5HYXAgPSBncmlkQ29sdW1uR2FwO1xuZXhwb3J0cy5ncmlkUm93R2FwID0gZ3JpZFJvd0dhcDtcbmV4cG9ydHMuZ3JpZEdhcCA9IGdyaWRHYXA7XG5leHBvcnRzLndpZHRoID0gd2lkdGg7XG5leHBvcnRzLm1pbldpZHRoID0gbWluV2lkdGg7XG5leHBvcnRzLm1heFdpZHRoID0gbWF4V2lkdGg7XG5leHBvcnRzLmhlaWdodCA9IGhlaWdodDtcbmV4cG9ydHMubWluSGVpZ2h0ID0gbWluSGVpZ2h0O1xuZXhwb3J0cy5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5leHBvcnRzLm1hcmdpbiA9IG1hcmdpbjtcbmV4cG9ydHMubWFyZ2luMiA9IG1hcmdpbjI7XG5leHBvcnRzLm1hcmdpbjMgPSBtYXJnaW4zO1xuZXhwb3J0cy5tYXJnaW40ID0gbWFyZ2luNDtcbmV4cG9ydHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG5leHBvcnRzLm1hcmdpblJpZ2h0ID0gbWFyZ2luUmlnaHQ7XG5leHBvcnRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbmV4cG9ydHMubWFyZ2luQm90dG9tID0gbWFyZ2luQm90dG9tO1xuZXhwb3J0cy5wYWRkaW5nID0gcGFkZGluZztcbmV4cG9ydHMucGFkZGluZzIgPSBwYWRkaW5nMjtcbmV4cG9ydHMucGFkZGluZzMgPSBwYWRkaW5nMztcbmV4cG9ydHMucGFkZGluZzQgPSBwYWRkaW5nNDtcbmV4cG9ydHMucGFkZGluZ0xlZnQgPSBwYWRkaW5nTGVmdDtcbmV4cG9ydHMucGFkZGluZ1JpZ2h0ID0gcGFkZGluZ1JpZ2h0O1xuZXhwb3J0cy5wYWRkaW5nVG9wID0gcGFkZGluZ1RvcDtcbmV4cG9ydHMucGFkZGluZ0JvdHRvbSA9IHBhZGRpbmdCb3R0b207XG5leHBvcnRzLmFsaWduQ29udGVudCA9IGFsaWduQ29udGVudDtcbmV4cG9ydHMuYWxpZ25JdGVtcyA9IGFsaWduSXRlbXM7XG5leHBvcnRzLmFsaWduU2VsZiA9IGFsaWduU2VsZjtcbmV4cG9ydHMuanVzdGlmeUNvbnRlbnQgPSBqdXN0aWZ5Q29udGVudDtcbmV4cG9ydHMuYm94U2l6aW5nID0gYm94U2l6aW5nO1xuZXhwb3J0cy4kJGZsb2F0ID0gJCRmbG9hdDtcbmV4cG9ydHMuY2xlYXIgPSBjbGVhcjtcbmV4cG9ydHMub3ZlcmZsb3cgPSBvdmVyZmxvdztcbmV4cG9ydHMub3ZlcmZsb3dYID0gb3ZlcmZsb3dYO1xuZXhwb3J0cy5vdmVyZmxvd1kgPSBvdmVyZmxvd1k7XG5leHBvcnRzLnpJbmRleCA9IHpJbmRleDtcbmV4cG9ydHMuYmFja2ZhY2VWaXNpYmlsaXR5ID0gYmFja2ZhY2VWaXNpYmlsaXR5O1xuZXhwb3J0cy52aXNpYmlsaXR5ID0gdmlzaWJpbGl0eTtcbmV4cG9ydHMuYm9yZGVyID0gYm9yZGVyO1xuZXhwb3J0cy5ib3JkZXJXaWR0aCA9IGJvcmRlcldpZHRoO1xuZXhwb3J0cy5ib3JkZXJTdHlsZSA9IGJvcmRlclN0eWxlO1xuZXhwb3J0cy5ib3JkZXJDb2xvciA9IGJvcmRlckNvbG9yO1xuZXhwb3J0cy5ib3JkZXJUb3AgPSBib3JkZXJUb3A7XG5leHBvcnRzLmJvcmRlclRvcFdpZHRoID0gYm9yZGVyVG9wV2lkdGg7XG5leHBvcnRzLmJvcmRlclRvcFN0eWxlID0gYm9yZGVyVG9wU3R5bGU7XG5leHBvcnRzLmJvcmRlclRvcENvbG9yID0gYm9yZGVyVG9wQ29sb3I7XG5leHBvcnRzLmJvcmRlckJvdHRvbSA9IGJvcmRlckJvdHRvbTtcbmV4cG9ydHMuYm9yZGVyQm90dG9tV2lkdGggPSBib3JkZXJCb3R0b21XaWR0aDtcbmV4cG9ydHMuYm9yZGVyQm90dG9tU3R5bGUgPSBib3JkZXJCb3R0b21TdHlsZTtcbmV4cG9ydHMuYm9yZGVyQm90dG9tQ29sb3IgPSBib3JkZXJCb3R0b21Db2xvcjtcbmV4cG9ydHMuYm9yZGVyTGVmdCA9IGJvcmRlckxlZnQ7XG5leHBvcnRzLmJvcmRlckxlZnRXaWR0aCA9IGJvcmRlckxlZnRXaWR0aDtcbmV4cG9ydHMuYm9yZGVyTGVmdFN0eWxlID0gYm9yZGVyTGVmdFN0eWxlO1xuZXhwb3J0cy5ib3JkZXJMZWZ0Q29sb3IgPSBib3JkZXJMZWZ0Q29sb3I7XG5leHBvcnRzLmJvcmRlclJpZ2h0ID0gYm9yZGVyUmlnaHQ7XG5leHBvcnRzLmJvcmRlclJpZ2h0V2lkdGggPSBib3JkZXJSaWdodFdpZHRoO1xuZXhwb3J0cy5ib3JkZXJSaWdodFN0eWxlID0gYm9yZGVyUmlnaHRTdHlsZTtcbmV4cG9ydHMuYm9yZGVyUmlnaHRDb2xvciA9IGJvcmRlclJpZ2h0Q29sb3I7XG5leHBvcnRzLmJvcmRlclJhZGl1cyA9IGJvcmRlclJhZGl1cztcbmV4cG9ydHMuYm9yZGVyVG9wTGVmdFJhZGl1cyA9IGJvcmRlclRvcExlZnRSYWRpdXM7XG5leHBvcnRzLmJvcmRlclRvcFJpZ2h0UmFkaXVzID0gYm9yZGVyVG9wUmlnaHRSYWRpdXM7XG5leHBvcnRzLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMgPSBib3JkZXJCb3R0b21MZWZ0UmFkaXVzO1xuZXhwb3J0cy5ib3JkZXJCb3R0b21SaWdodFJhZGl1cyA9IGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzO1xuZXhwb3J0cy50YWJsZUxheW91dCA9IHRhYmxlTGF5b3V0O1xuZXhwb3J0cy5ib3JkZXJDb2xsYXBzZSA9IGJvcmRlckNvbGxhcHNlO1xuZXhwb3J0cy5ib3JkZXJTcGFjaW5nID0gYm9yZGVyU3BhY2luZztcbmV4cG9ydHMuYm94U2hhZG93ID0gYm94U2hhZG93O1xuZXhwb3J0cy5ib3hTaGFkb3dzID0gYm94U2hhZG93cztcbmV4cG9ydHMuYmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5leHBvcnRzLmJhY2tncm91bmRDb2xvciA9IGJhY2tncm91bmRDb2xvcjtcbmV4cG9ydHMuYmFja2dyb3VuZEltYWdlID0gYmFja2dyb3VuZEltYWdlO1xuZXhwb3J0cy5iYWNrZ3JvdW5kQXR0YWNobWVudCA9IGJhY2tncm91bmRBdHRhY2htZW50O1xuZXhwb3J0cy5iYWNrZ3JvdW5kQ2xpcCA9IGJhY2tncm91bmRDbGlwO1xuZXhwb3J0cy5iYWNrZ3JvdW5kT3JpZ2luID0gYmFja2dyb3VuZE9yaWdpbjtcbmV4cG9ydHMuYmFja2dyb3VuZFBvc2l0aW9uID0gYmFja2dyb3VuZFBvc2l0aW9uO1xuZXhwb3J0cy5iYWNrZ3JvdW5kUmVwZWF0ID0gYmFja2dyb3VuZFJlcGVhdDtcbmV4cG9ydHMuYmFja2dyb3VuZFNpemUgPSBiYWNrZ3JvdW5kU2l6ZTtcbmV4cG9ydHMuY3Vyc29yID0gY3Vyc29yO1xuZXhwb3J0cy5jbGlwUGF0aCA9IGNsaXBQYXRoO1xuZXhwb3J0cy5saXN0U3R5bGUgPSBsaXN0U3R5bGU7XG5leHBvcnRzLmxpc3RTdHlsZVR5cGUgPSBsaXN0U3R5bGVUeXBlO1xuZXhwb3J0cy5saXN0U3R5bGVQb3NpdGlvbiA9IGxpc3RTdHlsZVBvc2l0aW9uO1xuZXhwb3J0cy5saXN0U3R5bGVJbWFnZSA9IGxpc3RTdHlsZUltYWdlO1xuZXhwb3J0cy5vcGFjaXR5ID0gb3BhY2l0eTtcbmV4cG9ydHMub3V0bGluZSA9IG91dGxpbmU7XG5leHBvcnRzLm91dGxpbmVTdHlsZSA9IG91dGxpbmVTdHlsZTtcbmV4cG9ydHMub3V0bGluZVdpZHRoID0gb3V0bGluZVdpZHRoO1xuZXhwb3J0cy5vdXRsaW5lQ29sb3IgPSBvdXRsaW5lQ29sb3I7XG5leHBvcnRzLm91dGxpbmVPZmZzZXQgPSBvdXRsaW5lT2Zmc2V0O1xuZXhwb3J0cy5wb2ludGVyRXZlbnRzID0gcG9pbnRlckV2ZW50cztcbmV4cG9ydHMuY29sb3IgPSBjb2xvcjtcbmV4cG9ydHMuZm9udEZhbWlseSA9IGZvbnRGYW1pbHk7XG5leHBvcnRzLmZvbnRGYWNlID0gZm9udEZhY2U7XG5leHBvcnRzLmZvbnRTaXplID0gZm9udFNpemU7XG5leHBvcnRzLmZvbnRWYXJpYW50ID0gZm9udFZhcmlhbnQ7XG5leHBvcnRzLmZvbnRTdHlsZSA9IGZvbnRTdHlsZTtcbmV4cG9ydHMuZm9udFdlaWdodCA9IGZvbnRXZWlnaHQ7XG5leHBvcnRzLmxldHRlclNwYWNpbmcgPSBsZXR0ZXJTcGFjaW5nO1xuZXhwb3J0cy5saW5lSGVpZ2h0ID0gbGluZUhlaWdodDtcbmV4cG9ydHMudGV4dEFsaWduID0gdGV4dEFsaWduO1xuZXhwb3J0cy50ZXh0RGVjb3JhdGlvbiA9IHRleHREZWNvcmF0aW9uO1xuZXhwb3J0cy50ZXh0RGVjb3JhdGlvbkNvbG9yID0gdGV4dERlY29yYXRpb25Db2xvcjtcbmV4cG9ydHMudGV4dERlY29yYXRpb25TdHlsZSA9IHRleHREZWNvcmF0aW9uU3R5bGU7XG5leHBvcnRzLnRleHRJbmRlbnQgPSB0ZXh0SW5kZW50O1xuZXhwb3J0cy50ZXh0T3ZlcmZsb3cgPSB0ZXh0T3ZlcmZsb3c7XG5leHBvcnRzLnRleHRTaGFkb3cgPSB0ZXh0U2hhZG93O1xuZXhwb3J0cy50ZXh0VHJhbnNmb3JtID0gdGV4dFRyYW5zZm9ybTtcbmV4cG9ydHMudXNlclNlbGVjdCA9IHVzZXJTZWxlY3Q7XG5leHBvcnRzLnZlcnRpY2FsQWxpZ24gPSB2ZXJ0aWNhbEFsaWduO1xuZXhwb3J0cy53aGl0ZVNwYWNlID0gd2hpdGVTcGFjZTtcbmV4cG9ydHMud29yZEJyZWFrID0gd29yZEJyZWFrO1xuZXhwb3J0cy53b3JkU3BhY2luZyA9IHdvcmRTcGFjaW5nO1xuZXhwb3J0cy53b3JkV3JhcCA9IHdvcmRXcmFwO1xuZXhwb3J0cy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG5leHBvcnRzLnRyYW5zZm9ybXMgPSB0cmFuc2Zvcm1zO1xuZXhwb3J0cy50cmFuc2Zvcm1PcmlnaW4gPSB0cmFuc2Zvcm1PcmlnaW47XG5leHBvcnRzLnRyYW5zZm9ybU9yaWdpbjNkID0gdHJhbnNmb3JtT3JpZ2luM2Q7XG5leHBvcnRzLnRyYW5zZm9ybVN0eWxlID0gdHJhbnNmb3JtU3R5bGU7XG5leHBvcnRzLnBlcnNwZWN0aXZlID0gcGVyc3BlY3RpdmU7XG5leHBvcnRzLnBlcnNwZWN0aXZlT3JpZ2luID0gcGVyc3BlY3RpdmVPcmlnaW47XG5leHBvcnRzLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xuZXhwb3J0cy50cmFuc2l0aW9ucyA9IHRyYW5zaXRpb25zO1xuZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXk7XG5leHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbmV4cG9ydHMudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uO1xuZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSB0cmFuc2l0aW9uUHJvcGVydHk7XG5leHBvcnRzLmtleWZyYW1lcyA9IGtleWZyYW1lcztcbmV4cG9ydHMuYW5pbWF0aW9uID0gYW5pbWF0aW9uO1xuZXhwb3J0cy5hbmltYXRpb25zID0gYW5pbWF0aW9ucztcbmV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBhbmltYXRpb25EZWxheTtcbmV4cG9ydHMuYW5pbWF0aW9uRGlyZWN0aW9uID0gYW5pbWF0aW9uRGlyZWN0aW9uO1xuZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGFuaW1hdGlvbkR1cmF0aW9uO1xuZXhwb3J0cy5hbmltYXRpb25GaWxsTW9kZSA9IGFuaW1hdGlvbkZpbGxNb2RlO1xuZXhwb3J0cy5hbmltYXRpb25JdGVyYXRpb25Db3VudCA9IGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50O1xuZXhwb3J0cy5hbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZTtcbmV4cG9ydHMuYW5pbWF0aW9uUGxheVN0YXRlID0gYW5pbWF0aW9uUGxheVN0YXRlO1xuZXhwb3J0cy5hbmltYXRpb25UaW1pbmdGdW5jdGlvbiA9IGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uO1xuZXhwb3J0cy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuZXhwb3J0cy5hY3RpdmUgPSBhY3RpdmU7XG5leHBvcnRzLmFmdGVyID0gYWZ0ZXI7XG5leHBvcnRzLmJlZm9yZSA9IGJlZm9yZTtcbmV4cG9ydHMuY2hlY2tlZCA9IGNoZWNrZWQ7XG5leHBvcnRzLmNoaWxkcmVuID0gY2hpbGRyZW47XG5leHBvcnRzLmRpcmVjdFNpYmxpbmcgPSBkaXJlY3RTaWJsaW5nO1xuZXhwb3J0cy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuZXhwb3J0cy5maXJzdENoaWxkID0gZmlyc3RDaGlsZDtcbmV4cG9ydHMuZmlyc3RPZlR5cGUgPSBmaXJzdE9mVHlwZTtcbmV4cG9ydHMuZm9jdXMgPSBmb2N1cztcbmV4cG9ydHMuaG92ZXIgPSBob3ZlcjtcbmV4cG9ydHMubGFzdENoaWxkID0gbGFzdENoaWxkO1xuZXhwb3J0cy5sYXN0T2ZUeXBlID0gbGFzdE9mVHlwZTtcbmV4cG9ydHMubGluayA9IGxpbms7XG5leHBvcnRzLnJlYWRPbmx5ID0gcmVhZE9ubHk7XG5leHBvcnRzLnJlcXVpcmVkID0gcmVxdWlyZWQ7XG5leHBvcnRzLnZpc2l0ZWQgPSB2aXNpdGVkO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMubm9Db250ZW50ID0gbm9Db250ZW50O1xuZXhwb3J0cy4kJGRlZmF1bHQgPSAkJGRlZmF1bHQ7XG5leHBvcnRzLmRlZmF1bHQgPSAkJGRlZmF1bHQ7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5hbnlMaW5rID0gYW55TGluaztcbmV4cG9ydHMub25seUNoaWxkID0gb25seUNoaWxkO1xuZXhwb3J0cy5vbmx5T2ZUeXBlID0gb25seU9mVHlwZTtcbmV4cG9ydHMub3B0aW9uYWwgPSBvcHRpb25hbDtcbmV4cG9ydHMuaW52YWxpZCA9IGludmFsaWQ7XG5leHBvcnRzLm91dE9mUmFuZ2UgPSBvdXRPZlJhbmdlO1xuZXhwb3J0cy5zaWJsaW5ncyA9IHNpYmxpbmdzO1xuZXhwb3J0cy50YXJnZXQgPSB0YXJnZXQ7XG5leHBvcnRzLmZpcnN0TGluZSA9IGZpcnN0TGluZTtcbmV4cG9ydHMuZmlyc3RMZXR0ZXIgPSBmaXJzdExldHRlcjtcbmV4cG9ydHMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuZXhwb3J0cy5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuZXhwb3J0cy5tZWRpYSA9IG1lZGlhO1xuZXhwb3J0cy5TVkcgPSBTVkc7XG4vKiAgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmNhcmQtZW50ZXItZG9uZSB7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlWSgxODBkZWcpO1xcbiAgICB0cmFuc2l0aW9uOiAwLjRzO1xcbiAgdHJhbnNmb3JtLXN0eWxlOiBwcmVzZXJ2ZS0zZDtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3VycnkgPSByZXF1aXJlKFwiLi9jdXJyeS5qc1wiKTtcbnZhciBKc19tYXRoID0gcmVxdWlyZShcIi4vanNfbWF0aC5qc1wiKTtcbnZhciBDYW1sX3ByaW1pdGl2ZSA9IHJlcXVpcmUoXCIuL2NhbWxfcHJpbWl0aXZlLmpzXCIpO1xuXG5mdW5jdGlvbiBnZXQoYXJyLCBpKSB7XG4gIGlmIChpID49IDAgJiYgaSA8IGFyci5sZW5ndGgpIHtcbiAgICByZXR1cm4gLyogU29tZSAqL1thcnJbaV1dO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBOb25lICovMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFeG4oYXJyLCBpKSB7XG4gIGlmICghKGkgPj0gMCAmJiBpIDwgYXJyLmxlbmd0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIFxcXCJiZWx0X0FycmF5Lm1sXFxcIiwgbGluZSAyNSwgY2hhcmFjdGVycyA2LTEyXCIpO1xuICB9XG4gIHJldHVybiBhcnJbaV07XG59XG5cbmZ1bmN0aW9uIHNldChhcnIsIGksIHYpIHtcbiAgaWYgKGkgPj0gMCAmJiBpIDwgYXJyLmxlbmd0aCkge1xuICAgIGFycltpXSA9IHY7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldEV4bihhcnIsIGksIHYpIHtcbiAgaWYgKCEoaSA+PSAwICYmIGkgPCBhcnIubGVuZ3RoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZpbGUgXFxcImJlbHRfQXJyYXkubWxcXFwiLCBsaW5lIDMxLCBjaGFyYWN0ZXJzIDQtMTBcIik7XG4gIH1cbiAgYXJyW2ldID0gdjtcbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gc3dhcFVuc2FmZSh4cywgaSwgaikge1xuICB2YXIgdG1wID0geHNbaV07XG4gIHhzW2ldID0geHNbal07XG4gIHhzW2pdID0gdG1wO1xuICByZXR1cm4gLyogKCkgKi8wO1xufVxuXG5mdW5jdGlvbiBzaHVmZmxlSW5QbGFjZSh4cykge1xuICB2YXIgbGVuID0geHMubGVuZ3RoO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGxlbiAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIHN3YXBVbnNhZmUoeHMsIGksIEpzX21hdGgucmFuZG9tX2ludChpLCBsZW4pKTtcbiAgfVxuICByZXR1cm4gLyogKCkgKi8wO1xufVxuXG5mdW5jdGlvbiBzaHVmZmxlKHhzKSB7XG4gIHZhciByZXN1bHQgPSB4cy5zbGljZSgwKTtcbiAgc2h1ZmZsZUluUGxhY2UocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcmV2ZXJzZUluUGxhY2UoeHMpIHtcbiAgdmFyIGxlbiA9IHhzLmxlbmd0aDtcbiAgdmFyIHhzJDEgPSB4cztcbiAgdmFyIG9mcyA9IDA7XG4gIHZhciBsZW4kMSA9IGxlbjtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSAobGVuJDEgLyAyIHwgMCkgLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICBzd2FwVW5zYWZlKHhzJDEsIG9mcyArIGkgfCAwLCAoKG9mcyArIGxlbiQxIHwgMCkgLSBpIHwgMCkgLSAxIHwgMCk7XG4gIH1cbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gcmV2ZXJzZSh4cykge1xuICB2YXIgbGVuID0geHMubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGxlbik7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbGVuIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgcmVzdWx0W2ldID0geHNbKGxlbiAtIDEgfCAwKSAtIGkgfCAwXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtYWtlKGwsIGYpIHtcbiAgaWYgKGwgPD0gMCkge1xuICAgIHJldHVybiAvKiBhcnJheSAqL1tdO1xuICB9IGVsc2Uge1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkobCk7XG4gICAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgICByZXNbaV0gPSBmO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VCeVUobCwgZikge1xuICBpZiAobCA8PSAwKSB7XG4gICAgcmV0dXJuIC8qIGFycmF5ICovW107XG4gIH0gZWxzZSB7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheShsKTtcbiAgICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGwgLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgIHJlc1tpXSA9IGYoaSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUJ5KGwsIGYpIHtcbiAgcmV0dXJuIG1ha2VCeVUobCwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gbWFrZUJ5QW5kU2h1ZmZsZVUobCwgZikge1xuICB2YXIgdSA9IG1ha2VCeVUobCwgZik7XG4gIHNodWZmbGVJblBsYWNlKHUpO1xuICByZXR1cm4gdTtcbn1cblxuZnVuY3Rpb24gbWFrZUJ5QW5kU2h1ZmZsZShsLCBmKSB7XG4gIHJldHVybiBtYWtlQnlBbmRTaHVmZmxlVShsLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiByYW5nZShzdGFydCwgZmluaXNoKSB7XG4gIHZhciBjdXQgPSBmaW5pc2ggLSBzdGFydCB8IDA7XG4gIGlmIChjdXQgPCAwKSB7XG4gICAgcmV0dXJuIC8qIGFycmF5ICovW107XG4gIH0gZWxzZSB7XG4gICAgdmFyIGFyciA9IG5ldyBBcnJheShjdXQgKyAxIHwgMCk7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8PSBjdXQ7ICsraSl7XG4gICAgICBhcnJbaV0gPSBzdGFydCArIGkgfCAwO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJhbmdlQnkoc3RhcnQsIGZpbmlzaCwgc3RlcCkge1xuICB2YXIgY3V0ID0gZmluaXNoIC0gc3RhcnQgfCAwO1xuICBpZiAoY3V0IDwgMCB8fCBzdGVwIDw9IDApIHtcbiAgICByZXR1cm4gLyogYXJyYXkgKi9bXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmIgPSAoY3V0IC8gc3RlcCB8IDApICsgMSB8IDA7XG4gICAgdmFyIGFyciA9IG5ldyBBcnJheShuYik7XG4gICAgdmFyIGN1ciA9IHN0YXJ0O1xuICAgIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbmIgLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgIGFycltpXSA9IGN1cjtcbiAgICAgIGN1ciA9IGN1ciArIHN0ZXAgfCAwO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG59XG5cbmZ1bmN0aW9uIHppcCh4cywgeXMpIHtcbiAgdmFyIGxlbnggPSB4cy5sZW5ndGg7XG4gIHZhciBsZW55ID0geXMubGVuZ3RoO1xuICB2YXIgbGVuID0gbGVueCA8IGxlbnkgPyBsZW54IDogbGVueTtcbiAgdmFyIHMgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsZW4gLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICBzW2ldID0gLyogdHVwbGUgKi9bXG4gICAgICB4c1tpXSxcbiAgICAgIHlzW2ldXG4gICAgXTtcbiAgfVxuICByZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gemlwQnlVKHhzLCB5cywgZikge1xuICB2YXIgbGVueCA9IHhzLmxlbmd0aDtcbiAgdmFyIGxlbnkgPSB5cy5sZW5ndGg7XG4gIHZhciBsZW4gPSBsZW54IDwgbGVueSA/IGxlbnggOiBsZW55O1xuICB2YXIgcyA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGxlbiAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIHNbaV0gPSBmKHhzW2ldLCB5c1tpXSk7XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIHppcEJ5KHhzLCB5cywgZikge1xuICByZXR1cm4gemlwQnlVKHhzLCB5cywgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gY29uY2F0KGExLCBhMikge1xuICB2YXIgbDEgPSBhMS5sZW5ndGg7XG4gIHZhciBsMiA9IGEyLmxlbmd0aDtcbiAgdmFyIGExYTIgPSBuZXcgQXJyYXkobDEgKyBsMiB8IDApO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGwxIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgYTFhMltpXSA9IGExW2ldO1xuICB9XG4gIGZvcih2YXIgaSQxID0gMCAsaV9maW5pc2gkMSA9IGwyIC0gMSB8IDA7IGkkMSA8PSBpX2ZpbmlzaCQxOyArK2kkMSl7XG4gICAgYTFhMltsMSArIGkkMSB8IDBdID0gYTJbaSQxXTtcbiAgfVxuICByZXR1cm4gYTFhMjtcbn1cblxuZnVuY3Rpb24gY29uY2F0TWFueShhcnJzKSB7XG4gIHZhciBsZW5BcnJzID0gYXJycy5sZW5ndGg7XG4gIHZhciB0b3RhbExlbiA9IDA7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbGVuQXJycyAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIHRvdGFsTGVuID0gdG90YWxMZW4gKyBhcnJzW2ldLmxlbmd0aCB8IDA7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheSh0b3RhbExlbik7XG4gIHRvdGFsTGVuID0gMDtcbiAgZm9yKHZhciBqID0gMCAsal9maW5pc2ggPSBsZW5BcnJzIC0gMSB8IDA7IGogPD0gal9maW5pc2g7ICsrail7XG4gICAgdmFyIGN1ciA9IGFycnNbal07XG4gICAgZm9yKHZhciBrID0gMCAsa19maW5pc2ggPSBjdXIubGVuZ3RoIC0gMSB8IDA7IGsgPD0ga19maW5pc2g7ICsrayl7XG4gICAgICByZXN1bHRbdG90YWxMZW5dID0gY3VyW2tdO1xuICAgICAgdG90YWxMZW4gPSB0b3RhbExlbiArIDEgfCAwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzbGljZShhLCBvZmZzZXQsIGxlbikge1xuICBpZiAobGVuIDw9IDApIHtcbiAgICByZXR1cm4gLyogYXJyYXkgKi9bXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuYSA9IGEubGVuZ3RoO1xuICAgIHZhciBvZnMgPSBvZmZzZXQgPCAwID8gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfbWF4KGxlbmEgKyBvZmZzZXQgfCAwLCAwKSA6IG9mZnNldDtcbiAgICB2YXIgaGFzTGVuID0gbGVuYSAtIG9mcyB8IDA7XG4gICAgdmFyIGNvcHlMZW5ndGggPSBoYXNMZW4gPCBsZW4gPyBoYXNMZW4gOiBsZW47XG4gICAgaWYgKGNvcHlMZW5ndGggPD0gMCkge1xuICAgICAgcmV0dXJuIC8qIGFycmF5ICovW107XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoY29weUxlbmd0aCk7XG4gICAgICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGNvcHlMZW5ndGggLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgICAgcmVzdWx0W2ldID0gYVtvZnMgKyBpIHwgMF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaWxsKGEsIG9mZnNldCwgbGVuLCB2KSB7XG4gIGlmIChsZW4gPiAwKSB7XG4gICAgdmFyIGxlbmEgPSBhLmxlbmd0aDtcbiAgICB2YXIgb2ZzID0gb2Zmc2V0IDwgMCA/IENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21heChsZW5hICsgb2Zmc2V0IHwgMCwgMCkgOiBvZmZzZXQ7XG4gICAgdmFyIGhhc0xlbiA9IGxlbmEgLSBvZnMgfCAwO1xuICAgIHZhciBmaWxsTGVuZ3RoID0gaGFzTGVuIDwgbGVuID8gaGFzTGVuIDogbGVuO1xuICAgIGlmIChmaWxsTGVuZ3RoID4gMCkge1xuICAgICAgZm9yKHZhciBpID0gb2ZzICxpX2ZpbmlzaCA9IChvZnMgKyBmaWxsTGVuZ3RoIHwgMCkgLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgICAgYVtpXSA9IHY7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmxpdFVuc2FmZShhMSwgc3Jjb2ZzMSwgYTIsIHNyY29mczIsIGJsaXRMZW5ndGgpIHtcbiAgaWYgKHNyY29mczIgPD0gc3Jjb2ZzMSkge1xuICAgIGZvcih2YXIgaiA9IDAgLGpfZmluaXNoID0gYmxpdExlbmd0aCAtIDEgfCAwOyBqIDw9IGpfZmluaXNoOyArK2ope1xuICAgICAgYTJbaiArIHNyY29mczIgfCAwXSA9IGExW2ogKyBzcmNvZnMxIHwgMF07XG4gICAgfVxuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgZm9yKHZhciBqJDEgPSBibGl0TGVuZ3RoIC0gMSB8IDA7IGokMSA+PSAwOyAtLWokMSl7XG4gICAgICBhMltqJDEgKyBzcmNvZnMyIHwgMF0gPSBhMVtqJDEgKyBzcmNvZnMxIHwgMF07XG4gICAgfVxuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmxpdChhMSwgb2ZzMSwgYTIsIG9mczIsIGxlbikge1xuICB2YXIgbGVuYTEgPSBhMS5sZW5ndGg7XG4gIHZhciBsZW5hMiA9IGEyLmxlbmd0aDtcbiAgdmFyIHNyY29mczEgPSBvZnMxIDwgMCA/IENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21heChsZW5hMSArIG9mczEgfCAwLCAwKSA6IG9mczE7XG4gIHZhciBzcmNvZnMyID0gb2ZzMiA8IDAgPyBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9tYXgobGVuYTIgKyBvZnMyIHwgMCwgMCkgOiBvZnMyO1xuICB2YXIgYmxpdExlbmd0aCA9IENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21pbihsZW4sIENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21pbihsZW5hMSAtIHNyY29mczEgfCAwLCBsZW5hMiAtIHNyY29mczIgfCAwKSk7XG4gIGlmIChzcmNvZnMyIDw9IHNyY29mczEpIHtcbiAgICBmb3IodmFyIGogPSAwICxqX2ZpbmlzaCA9IGJsaXRMZW5ndGggLSAxIHwgMDsgaiA8PSBqX2ZpbmlzaDsgKytqKXtcbiAgICAgIGEyW2ogKyBzcmNvZnMyIHwgMF0gPSBhMVtqICsgc3Jjb2ZzMSB8IDBdO1xuICAgIH1cbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9IGVsc2Uge1xuICAgIGZvcih2YXIgaiQxID0gYmxpdExlbmd0aCAtIDEgfCAwOyBqJDEgPj0gMDsgLS1qJDEpe1xuICAgICAgYTJbaiQxICsgc3Jjb2ZzMiB8IDBdID0gYTFbaiQxICsgc3Jjb2ZzMSB8IDBdO1xuICAgIH1cbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hVKGEsIGYpIHtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBhLmxlbmd0aCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIGYoYVtpXSk7XG4gIH1cbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChhLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoVShhLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBVKGEsIGYpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIHIgPSBuZXcgQXJyYXkobCk7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIHJbaV0gPSBmKGFbaV0pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYXAoYSwgZikge1xuICByZXR1cm4gbWFwVShhLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBrZWVwVShhLCBmKSB7XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIHZhciByID0gbmV3IEFycmF5KGwpO1xuICB2YXIgaiA9IDA7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIHZhciB2ID0gYVtpXTtcbiAgICBpZiAoZih2KSkge1xuICAgICAgcltqXSA9IHY7XG4gICAgICBqID0gaiArIDEgfCAwO1xuICAgIH1cbiAgICBcbiAgfVxuICByLmxlbmd0aCA9IGo7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBrZWVwKGEsIGYpIHtcbiAgcmV0dXJuIGtlZXBVKGEsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIGtlZXBNYXBVKGEsIGYpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIHIgPSBuZXcgQXJyYXkobCk7XG4gIHZhciBqID0gMDtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgdmFyIHYgPSBhW2ldO1xuICAgIHZhciBtYXRjaCA9IGYodik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICByW2pdID0gbWF0Y2hbMF07XG4gICAgICBqID0gaiArIDEgfCAwO1xuICAgIH1cbiAgICBcbiAgfVxuICByLmxlbmd0aCA9IGo7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBrZWVwTWFwKGEsIGYpIHtcbiAgcmV0dXJuIGtlZXBNYXBVKGEsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hXaXRoSW5kZXhVKGEsIGYpIHtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBhLmxlbmd0aCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIGYoaSwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFdpdGhJbmRleChhLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoV2l0aEluZGV4VShhLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXhVKGEsIGYpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIHIgPSBuZXcgQXJyYXkobCk7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIHJbaV0gPSBmKGksIGFbaV0pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXgoYSwgZikge1xuICByZXR1cm4gbWFwV2l0aEluZGV4VShhLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VVKGEsIHgsIGYpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgciA9IGYociwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShhLCB4LCBmKSB7XG4gIHJldHVybiByZWR1Y2VVKGEsIHgsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2VVKGEsIHgsIGYpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSBhLmxlbmd0aCAtIDEgfCAwOyBpID49IDA7IC0taSl7XG4gICAgciA9IGYociwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2UoYSwgeCwgZikge1xuICByZXR1cm4gcmVkdWNlUmV2ZXJzZVUoYSwgeCwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlUmV2ZXJzZTJVKGEsIGIsIHgsIGYpIHtcbiAgdmFyIHIgPSB4O1xuICB2YXIgbGVuID0gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfbWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG4gIGZvcih2YXIgaSA9IGxlbiAtIDEgfCAwOyBpID49IDA7IC0taSl7XG4gICAgciA9IGYociwgYVtpXSwgYltpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2UyKGEsIGIsIHgsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVJldmVyc2UyVShhLCBiLCB4LCBDdXJyeS5fXzMoZikpO1xufVxuXG5mdW5jdGlvbiBldmVyeVUoYXJyLCBiKSB7XG4gIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICB2YXIgYXJyJDEgPSBhcnI7XG4gIHZhciBfaSA9IDA7XG4gIHZhciBiJDEgPSBiO1xuICB2YXIgbGVuJDEgPSBsZW47XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID09PSBsZW4kMSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChiJDEoYXJyJDFbaV0pKSB7XG4gICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZXZlcnkoYXJyLCBmKSB7XG4gIHJldHVybiBldmVyeVUoYXJyLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBzb21lVShhcnIsIGIpIHtcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gIHZhciBhcnIkMSA9IGFycjtcbiAgdmFyIF9pID0gMDtcbiAgdmFyIGIkMSA9IGI7XG4gIHZhciBsZW4kMSA9IGxlbjtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPT09IGxlbiQxKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChiJDEoYXJyJDFbaV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzb21lKGFyciwgZikge1xuICByZXR1cm4gc29tZVUoYXJyLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBldmVyeUF1eDIoYXJyMSwgYXJyMiwgX2ksIGIsIGxlbikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA9PT0gbGVuKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGIoYXJyMVtpXSwgYXJyMltpXSkpIHtcbiAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBldmVyeTJVKGEsIGIsIHApIHtcbiAgcmV0dXJuIGV2ZXJ5QXV4MihhLCBiLCAwLCBwLCBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9taW4oYS5sZW5ndGgsIGIubGVuZ3RoKSk7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5MihhLCBiLCBwKSB7XG4gIHJldHVybiBldmVyeTJVKGEsIGIsIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIHNvbWUyVShhLCBiLCBwKSB7XG4gIHZhciBhcnIxID0gYTtcbiAgdmFyIGFycjIgPSBiO1xuICB2YXIgX2kgPSAwO1xuICB2YXIgYiQxID0gcDtcbiAgdmFyIGxlbiA9IENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21pbihhLmxlbmd0aCwgYi5sZW5ndGgpO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA9PT0gbGVuKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChiJDEoYXJyMVtpXSwgYXJyMltpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNvbWUyKGEsIGIsIHApIHtcbiAgcmV0dXJuIHNvbWUyVShhLCBiLCBDdXJyeS5fXzIocCkpO1xufVxuXG5mdW5jdGlvbiBlcVUoYSwgYiwgcCkge1xuICB2YXIgbGVuYSA9IGEubGVuZ3RoO1xuICB2YXIgbGVuYiA9IGIubGVuZ3RoO1xuICBpZiAobGVuYSA9PT0gbGVuYikge1xuICAgIHJldHVybiBldmVyeUF1eDIoYSwgYiwgMCwgcCwgbGVuYSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVxKGEsIGIsIHApIHtcbiAgcmV0dXJuIGVxVShhLCBiLCBDdXJyeS5fXzIocCkpO1xufVxuXG5mdW5jdGlvbiBjbXBVKGEsIGIsIHApIHtcbiAgdmFyIGxlbmEgPSBhLmxlbmd0aDtcbiAgdmFyIGxlbmIgPSBiLmxlbmd0aDtcbiAgaWYgKGxlbmEgPiBsZW5iKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiAobGVuYSA8IGxlbmIpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGFycjEgPSBhO1xuICAgIHZhciBhcnIyID0gYjtcbiAgICB2YXIgX2kgPSAwO1xuICAgIHZhciBiJDEgPSBwO1xuICAgIHZhciBsZW4gPSBsZW5hO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBpID0gX2k7XG4gICAgICBpZiAoaSA9PT0gbGVuKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGMgPSBiJDEoYXJyMVtpXSwgYXJyMltpXSk7XG4gICAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgY29udGludWUgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbXAoYSwgYiwgcCkge1xuICByZXR1cm4gY21wVShhLCBiLCBDdXJyeS5fXzIocCkpO1xufVxuXG5leHBvcnRzLmdldCA9IGdldDtcbmV4cG9ydHMuZ2V0RXhuID0gZ2V0RXhuO1xuZXhwb3J0cy5zZXQgPSBzZXQ7XG5leHBvcnRzLnNldEV4biA9IHNldEV4bjtcbmV4cG9ydHMuc2h1ZmZsZUluUGxhY2UgPSBzaHVmZmxlSW5QbGFjZTtcbmV4cG9ydHMuc2h1ZmZsZSA9IHNodWZmbGU7XG5leHBvcnRzLnJldmVyc2VJblBsYWNlID0gcmV2ZXJzZUluUGxhY2U7XG5leHBvcnRzLnJldmVyc2UgPSByZXZlcnNlO1xuZXhwb3J0cy5tYWtlID0gbWFrZTtcbmV4cG9ydHMucmFuZ2UgPSByYW5nZTtcbmV4cG9ydHMucmFuZ2VCeSA9IHJhbmdlQnk7XG5leHBvcnRzLm1ha2VCeVUgPSBtYWtlQnlVO1xuZXhwb3J0cy5tYWtlQnkgPSBtYWtlQnk7XG5leHBvcnRzLm1ha2VCeUFuZFNodWZmbGVVID0gbWFrZUJ5QW5kU2h1ZmZsZVU7XG5leHBvcnRzLm1ha2VCeUFuZFNodWZmbGUgPSBtYWtlQnlBbmRTaHVmZmxlO1xuZXhwb3J0cy56aXAgPSB6aXA7XG5leHBvcnRzLnppcEJ5VSA9IHppcEJ5VTtcbmV4cG9ydHMuemlwQnkgPSB6aXBCeTtcbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuZXhwb3J0cy5jb25jYXRNYW55ID0gY29uY2F0TWFueTtcbmV4cG9ydHMuc2xpY2UgPSBzbGljZTtcbmV4cG9ydHMuZmlsbCA9IGZpbGw7XG5leHBvcnRzLmJsaXQgPSBibGl0O1xuZXhwb3J0cy5ibGl0VW5zYWZlID0gYmxpdFVuc2FmZTtcbmV4cG9ydHMuZm9yRWFjaFUgPSBmb3JFYWNoVTtcbmV4cG9ydHMuZm9yRWFjaCA9IGZvckVhY2g7XG5leHBvcnRzLm1hcFUgPSBtYXBVO1xuZXhwb3J0cy5tYXAgPSBtYXA7XG5leHBvcnRzLmtlZXBVID0ga2VlcFU7XG5leHBvcnRzLmtlZXAgPSBrZWVwO1xuZXhwb3J0cy5rZWVwTWFwVSA9IGtlZXBNYXBVO1xuZXhwb3J0cy5rZWVwTWFwID0ga2VlcE1hcDtcbmV4cG9ydHMuZm9yRWFjaFdpdGhJbmRleFUgPSBmb3JFYWNoV2l0aEluZGV4VTtcbmV4cG9ydHMuZm9yRWFjaFdpdGhJbmRleCA9IGZvckVhY2hXaXRoSW5kZXg7XG5leHBvcnRzLm1hcFdpdGhJbmRleFUgPSBtYXBXaXRoSW5kZXhVO1xuZXhwb3J0cy5tYXBXaXRoSW5kZXggPSBtYXBXaXRoSW5kZXg7XG5leHBvcnRzLnJlZHVjZVUgPSByZWR1Y2VVO1xuZXhwb3J0cy5yZWR1Y2UgPSByZWR1Y2U7XG5leHBvcnRzLnJlZHVjZVJldmVyc2VVID0gcmVkdWNlUmV2ZXJzZVU7XG5leHBvcnRzLnJlZHVjZVJldmVyc2UgPSByZWR1Y2VSZXZlcnNlO1xuZXhwb3J0cy5yZWR1Y2VSZXZlcnNlMlUgPSByZWR1Y2VSZXZlcnNlMlU7XG5leHBvcnRzLnJlZHVjZVJldmVyc2UyID0gcmVkdWNlUmV2ZXJzZTI7XG5leHBvcnRzLnNvbWVVID0gc29tZVU7XG5leHBvcnRzLnNvbWUgPSBzb21lO1xuZXhwb3J0cy5ldmVyeVUgPSBldmVyeVU7XG5leHBvcnRzLmV2ZXJ5ID0gZXZlcnk7XG5leHBvcnRzLmV2ZXJ5MlUgPSBldmVyeTJVO1xuZXhwb3J0cy5ldmVyeTIgPSBldmVyeTI7XG5leHBvcnRzLnNvbWUyVSA9IHNvbWUyVTtcbmV4cG9ydHMuc29tZTIgPSBzb21lMjtcbmV4cG9ydHMuY21wVSA9IGNtcFU7XG5leHBvcnRzLmNtcCA9IGNtcDtcbmV4cG9ydHMuZXFVID0gZXFVO1xuZXhwb3J0cy5lcSA9IGVxO1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbWxfYnVpbHRpbl9leGNlcHRpb25zID0gcmVxdWlyZShcIi4vY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanNcIik7XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9jaGFyKHByaW0pIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocHJpbSk7XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3RyaW5nX2dldChzLCBpKSB7XG4gIGlmIChpID49IHMubGVuZ3RoIHx8IGkgPCAwKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJpbmRleCBvdXQgb2YgYm91bmRzXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcy5jaGFyQ29kZUF0KGkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfY3JlYXRlX3N0cmluZyhsZW4pIHtcbiAgaWYgKGxlbiA8IDApIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5jcmVhdGVcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHZhciByZXN1bHQgPSBuZXcgQXJyYXkobGVuKTtcbiAgICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGxlbiAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgICAgcmVzdWx0W2ldID0gLyogXCJcXDAwMFwiICovMDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2ZpbGxfc3RyaW5nKHMsIGksIGwsIGMpIHtcbiAgaWYgKGwgPiAwKSB7XG4gICAgZm9yKHZhciBrID0gaSAsa19maW5pc2ggPSAobCArIGkgfCAwKSAtIDEgfCAwOyBrIDw9IGtfZmluaXNoOyArK2spe1xuICAgICAgc1trXSA9IGM7XG4gICAgfVxuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9ibGl0X3N0cmluZyhzMSwgaTEsIHMyLCBpMiwgbGVuKSB7XG4gIGlmIChsZW4gPiAwKSB7XG4gICAgdmFyIG9mZjEgPSBzMS5sZW5ndGggLSBpMSB8IDA7XG4gICAgaWYgKGxlbiA8PSBvZmYxKSB7XG4gICAgICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGxlbiAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgICAgICBzMltpMiArIGkgfCAwXSA9IHMxLmNoYXJDb2RlQXQoaTEgKyBpIHwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IodmFyIGkkMSA9IDAgLGlfZmluaXNoJDEgPSBvZmYxIC0gMSB8IDA7IGkkMSA8PSBpX2ZpbmlzaCQxOyArK2kkMSl7XG4gICAgICAgIHMyW2kyICsgaSQxIHwgMF0gPSBzMS5jaGFyQ29kZUF0KGkxICsgaSQxIHwgMCk7XG4gICAgICB9XG4gICAgICBmb3IodmFyIGkkMiA9IG9mZjEgLGlfZmluaXNoJDIgPSBsZW4gLSAxIHwgMDsgaSQyIDw9IGlfZmluaXNoJDI7ICsraSQyKXtcbiAgICAgICAgczJbaTIgKyBpJDIgfCAwXSA9IC8qIFwiXFwwMDBcIiAqLzA7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2JsaXRfYnl0ZXMoczEsIGkxLCBzMiwgaTIsIGxlbikge1xuICBpZiAobGVuID4gMCkge1xuICAgIGlmIChzMSA9PT0gczIpIHtcbiAgICAgIHZhciBzMSQxID0gczE7XG4gICAgICB2YXIgaTEkMSA9IGkxO1xuICAgICAgdmFyIGkyJDEgPSBpMjtcbiAgICAgIHZhciBsZW4kMSA9IGxlbjtcbiAgICAgIGlmIChpMSQxIDwgaTIkMSkge1xuICAgICAgICB2YXIgcmFuZ2VfYSA9IChzMSQxLmxlbmd0aCAtIGkyJDEgfCAwKSAtIDEgfCAwO1xuICAgICAgICB2YXIgcmFuZ2VfYiA9IGxlbiQxIC0gMSB8IDA7XG4gICAgICAgIHZhciByYW5nZSA9IHJhbmdlX2EgPiByYW5nZV9iID8gcmFuZ2VfYiA6IHJhbmdlX2E7XG4gICAgICAgIGZvcih2YXIgaiA9IHJhbmdlOyBqID49IDA7IC0tail7XG4gICAgICAgICAgczEkMVtpMiQxICsgaiB8IDBdID0gczEkMVtpMSQxICsgaiB8IDBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICB9IGVsc2UgaWYgKGkxJDEgPiBpMiQxKSB7XG4gICAgICAgIHZhciByYW5nZV9hJDEgPSAoczEkMS5sZW5ndGggLSBpMSQxIHwgMCkgLSAxIHwgMDtcbiAgICAgICAgdmFyIHJhbmdlX2IkMSA9IGxlbiQxIC0gMSB8IDA7XG4gICAgICAgIHZhciByYW5nZSQxID0gcmFuZ2VfYSQxID4gcmFuZ2VfYiQxID8gcmFuZ2VfYiQxIDogcmFuZ2VfYSQxO1xuICAgICAgICBmb3IodmFyIGsgPSAwOyBrIDw9IHJhbmdlJDE7ICsrayl7XG4gICAgICAgICAgczEkMVtpMiQxICsgayB8IDBdID0gczEkMVtpMSQxICsgayB8IDBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9mZjEgPSBzMS5sZW5ndGggLSBpMSB8IDA7XG4gICAgICBpZiAobGVuIDw9IG9mZjEpIHtcbiAgICAgICAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsZW4gLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgICAgICBzMltpMiArIGkgfCAwXSA9IHMxW2kxICsgaSB8IDBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IodmFyIGkkMSA9IDAgLGlfZmluaXNoJDEgPSBvZmYxIC0gMSB8IDA7IGkkMSA8PSBpX2ZpbmlzaCQxOyArK2kkMSl7XG4gICAgICAgICAgczJbaTIgKyBpJDEgfCAwXSA9IHMxW2kxICsgaSQxIHwgMF07XG4gICAgICAgIH1cbiAgICAgICAgZm9yKHZhciBpJDIgPSBvZmYxICxpX2ZpbmlzaCQyID0gbGVuIC0gMSB8IDA7IGkkMiA8PSBpX2ZpbmlzaCQyOyArK2kkMil7XG4gICAgICAgICAgczJbaTIgKyBpJDIgfCAwXSA9IC8qIFwiXFwwMDBcIiAqLzA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnl0ZXNfb2Zfc3RyaW5nKHMpIHtcbiAgdmFyIGxlbiA9IHMubGVuZ3RoO1xuICB2YXIgcmVzID0gbmV3IEFycmF5KGxlbik7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbGVuIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgcmVzW2ldID0gcy5jaGFyQ29kZUF0KGkpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzX3RvX3N0cmluZyhhKSB7XG4gIHZhciBieXRlcyA9IGE7XG4gIHZhciBpID0gMDtcbiAgdmFyIGxlbiA9IGEubGVuZ3RoO1xuICB2YXIgcyA9IFwiXCI7XG4gIHZhciBzX2xlbiA9IGxlbjtcbiAgaWYgKGkgPT09IDAgJiYgbGVuIDw9IDQwOTYgJiYgbGVuID09PSBieXRlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBieXRlcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG9mZnNldCA9IDA7XG4gICAgd2hpbGUoc19sZW4gPiAwKSB7XG4gICAgICB2YXIgbmV4dCA9IHNfbGVuIDwgMTAyNCA/IHNfbGVuIDogMTAyNDtcbiAgICAgIHZhciB0bXBfYnl0ZXMgPSBuZXcgQXJyYXkobmV4dCk7XG4gICAgICBjYW1sX2JsaXRfYnl0ZXMoYnl0ZXMsIG9mZnNldCwgdG1wX2J5dGVzLCAwLCBuZXh0KTtcbiAgICAgIHMgPSBzICsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCB0bXBfYnl0ZXMpO1xuICAgICAgc19sZW4gPSBzX2xlbiAtIG5leHQgfCAwO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ICsgbmV4dCB8IDA7XG4gICAgfTtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX3N0cmluZ19vZl9jaGFyX2FycmF5KGNoYXJzKSB7XG4gIHZhciBsZW4gPSBjaGFycy5sZW5ndGg7XG4gIHZhciBieXRlcyA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGxlbiAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIGJ5dGVzW2ldID0gY2hhcnNbaV07XG4gIH1cbiAgcmV0dXJuIGJ5dGVzX3RvX3N0cmluZyhieXRlcyk7XG59XG5cbmZ1bmN0aW9uIGNhbWxfaXNfcHJpbnRhYmxlKGMpIHtcbiAgaWYgKGMgPiAzMSkge1xuICAgIHJldHVybiBjIDwgMTI3O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX3N0cmluZ19nZXQxNihzLCBpKSB7XG4gIHJldHVybiBzLmNoYXJDb2RlQXQoaSkgKyAocy5jaGFyQ29kZUF0KGkgKyAxIHwgMCkgPDwgOCkgfCAwO1xufVxuXG5mdW5jdGlvbiBjYW1sX3N0cmluZ19nZXQzMihzLCBpKSB7XG4gIHJldHVybiAoKHMuY2hhckNvZGVBdChpKSArIChzLmNoYXJDb2RlQXQoaSArIDEgfCAwKSA8PCA4KSB8IDApICsgKHMuY2hhckNvZGVBdChpICsgMiB8IDApIDw8IDE2KSB8IDApICsgKHMuY2hhckNvZGVBdChpICsgMyB8IDApIDw8IDI0KSB8IDA7XG59XG5cbmZ1bmN0aW9uIGdldChzLCBpKSB7XG4gIGlmIChpIDwgMCB8fCBpID49IHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJpbmRleCBvdXQgb2YgYm91bmRzXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcy5jaGFyQ29kZUF0KGkpO1xuICB9XG59XG5cbmV4cG9ydHMuYnl0ZXNfb2Zfc3RyaW5nID0gYnl0ZXNfb2Zfc3RyaW5nO1xuZXhwb3J0cy5ieXRlc190b19zdHJpbmcgPSBieXRlc190b19zdHJpbmc7XG5leHBvcnRzLmNhbWxfaXNfcHJpbnRhYmxlID0gY2FtbF9pc19wcmludGFibGU7XG5leHBvcnRzLmNhbWxfc3RyaW5nX29mX2NoYXJfYXJyYXkgPSBjYW1sX3N0cmluZ19vZl9jaGFyX2FycmF5O1xuZXhwb3J0cy5jYW1sX3N0cmluZ19nZXQgPSBjYW1sX3N0cmluZ19nZXQ7XG5leHBvcnRzLmNhbWxfY3JlYXRlX3N0cmluZyA9IGNhbWxfY3JlYXRlX3N0cmluZztcbmV4cG9ydHMuY2FtbF9maWxsX3N0cmluZyA9IGNhbWxfZmlsbF9zdHJpbmc7XG5leHBvcnRzLmNhbWxfYmxpdF9zdHJpbmcgPSBjYW1sX2JsaXRfc3RyaW5nO1xuZXhwb3J0cy5jYW1sX2JsaXRfYnl0ZXMgPSBjYW1sX2JsaXRfYnl0ZXM7XG5leHBvcnRzLmNhbWxfc3RyaW5nX2dldDE2ID0gY2FtbF9zdHJpbmdfZ2V0MTY7XG5leHBvcnRzLmNhbWxfc3RyaW5nX2dldDMyID0gY2FtbF9zdHJpbmdfZ2V0MzI7XG5leHBvcnRzLnN0cmluZ19vZl9jaGFyID0gc3RyaW5nX29mX2NoYXI7XG5leHBvcnRzLmdldCA9IGdldDtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG5mdW5jdGlvbiBkaXYoeCwgeSkge1xuICBpZiAoeSA9PT0gMCkge1xuICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmRpdmlzaW9uX2J5X3plcm87XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggLyB5IHwgMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtb2RfKHgsIHkpIHtcbiAgaWYgKHkgPT09IDApIHtcbiAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5kaXZpc2lvbl9ieV96ZXJvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICUgeTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Jzd2FwMTYoeCkge1xuICByZXR1cm4gKCh4ICYgMjU1KSA8PCA4KSB8ICgoeCAmIDY1MjgwKSA+Pj4gOCk7XG59XG5cbmZ1bmN0aW9uIGNhbWxfaW50MzJfYnN3YXAoeCkge1xuICByZXR1cm4gKCh4ICYgMjU1KSA8PCAyNCkgfCAoKHggJiA2NTI4MCkgPDwgOCkgfCAoKHggJiAxNjcxMTY4MCkgPj4+IDgpIHwgKCh4ICYgNDI3ODE5MDA4MCkgPj4+IDI0KTtcbn1cblxudmFyIGltdWwgPSAoIE1hdGguaW11bCB8fCBmdW5jdGlvbiAoeCx5KSB7XG4gIHkgfD0gMDsgcmV0dXJuICgoKCh4ID4+IDE2KSAqIHkpIDw8IDE2KSArICh4ICYgMHhmZmZmKSAqIHkpfDA7IFxufVxuKTtcblxudmFyIGNhbWxfbmF0aXZlaW50X2Jzd2FwID0gY2FtbF9pbnQzMl9ic3dhcDtcblxuZXhwb3J0cy5kaXYgPSBkaXY7XG5leHBvcnRzLm1vZF8gPSBtb2RfO1xuZXhwb3J0cy5jYW1sX2Jzd2FwMTYgPSBjYW1sX2Jzd2FwMTY7XG5leHBvcnRzLmNhbWxfaW50MzJfYnN3YXAgPSBjYW1sX2ludDMyX2Jzd2FwO1xuZXhwb3J0cy5jYW1sX25hdGl2ZWludF9ic3dhcCA9IGNhbWxfbmF0aXZlaW50X2Jzd2FwO1xuZXhwb3J0cy5pbXVsID0gaW11bDtcbi8qIGltdWwgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEN1cnJ5ID0gcmVxdWlyZShcIi4vY3VycnkuanNcIik7XG52YXIgQmVsdF9BcnJheSA9IHJlcXVpcmUoXCIuL2JlbHRfQXJyYXkuanNcIik7XG52YXIgQmVsdF9Tb3J0QXJyYXkgPSByZXF1aXJlKFwiLi9iZWx0X1NvcnRBcnJheS5qc1wiKTtcblxuZnVuY3Rpb24gaGVhZCh4KSB7XG4gIGlmICh4KSB7XG4gICAgcmV0dXJuIC8qIFNvbWUgKi9beFswXV07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhlYWRFeG4oeCkge1xuICBpZiAoeCkge1xuICAgIHJldHVybiB4WzBdO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcImhlYWRFeG5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGFpbCh4KSB7XG4gIGlmICh4KSB7XG4gICAgcmV0dXJuIC8qIFNvbWUgKi9beFsxXV07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRhaWxFeG4oeCkge1xuICBpZiAoeCkge1xuICAgIHJldHVybiB4WzFdO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcInRhaWxFeG5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkKHhzLCB4KSB7XG4gIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICB4LFxuICAgICAgICAgIHhzXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGdldCh4LCBuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIHJldHVybiAvKiBOb25lICovMDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX3ggPSB4O1xuICAgIHZhciBfbiA9IG47XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIG4kMSA9IF9uO1xuICAgICAgdmFyIHgkMSA9IF94O1xuICAgICAgaWYgKHgkMSkge1xuICAgICAgICBpZiAobiQxID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIFNvbWUgKi9beCQxWzBdXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfbiA9IG4kMSAtIDEgfCAwO1xuICAgICAgICAgIF94ID0geCQxWzFdO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RXhuKHgsIG4pIHtcbiAgaWYgKG4gPCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZ2V0RXhuXCIpO1xuICB9IGVsc2Uge1xuICAgIHZhciBfeCA9IHg7XG4gICAgdmFyIF9uID0gbjtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgbiQxID0gX247XG4gICAgICB2YXIgeCQxID0gX3g7XG4gICAgICBpZiAoeCQxKSB7XG4gICAgICAgIGlmIChuJDEgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4geCQxWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9uID0gbiQxIC0gMSB8IDA7XG4gICAgICAgICAgX3ggPSB4JDFbMV07XG4gICAgICAgICAgY29udGludWUgO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJnZXRFeG5cIik7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb25BdXgocCwgX2NlbGwsIF9wcmVjWCwgX3ByZWNZKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcHJlY1kgPSBfcHJlY1k7XG4gICAgdmFyIHByZWNYID0gX3ByZWNYO1xuICAgIHZhciBjZWxsID0gX2NlbGw7XG4gICAgaWYgKGNlbGwpIHtcbiAgICAgIHZhciB0ID0gY2VsbFsxXTtcbiAgICAgIHZhciBoID0gY2VsbFswXTtcbiAgICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICAgIGgsXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXTtcbiAgICAgIGlmIChwKGgpKSB7XG4gICAgICAgIHByZWNYWzFdID0gbmV4dDtcbiAgICAgICAgX3ByZWNYID0gbmV4dDtcbiAgICAgICAgX2NlbGwgPSB0O1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmVjWVsxXSA9IG5leHQ7XG4gICAgICAgIF9wcmVjWSA9IG5leHQ7XG4gICAgICAgIF9jZWxsID0gdDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gc3BsaXRBdXgoX2NlbGwsIF9wcmVjWCwgX3ByZWNZKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcHJlY1kgPSBfcHJlY1k7XG4gICAgdmFyIHByZWNYID0gX3ByZWNYO1xuICAgIHZhciBjZWxsID0gX2NlbGw7XG4gICAgaWYgKGNlbGwpIHtcbiAgICAgIHZhciBtYXRjaCA9IGNlbGxbMF07XG4gICAgICB2YXIgbmV4dEEgPSAvKiA6OiAqL1tcbiAgICAgICAgbWF0Y2hbMF0sXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXTtcbiAgICAgIHZhciBuZXh0QiA9IC8qIDo6ICovW1xuICAgICAgICBtYXRjaFsxXSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgcHJlY1hbMV0gPSBuZXh0QTtcbiAgICAgIHByZWNZWzFdID0gbmV4dEI7XG4gICAgICBfcHJlY1kgPSBuZXh0QjtcbiAgICAgIF9wcmVjWCA9IG5leHRBO1xuICAgICAgX2NlbGwgPSBjZWxsWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29weUF1eENvbnQoX2NlbGxYLCBfcHJlYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKGNlbGxYKSB7XG4gICAgICB2YXIgbmV4dCA9IC8qIDo6ICovW1xuICAgICAgICBjZWxsWFswXSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgcHJlY1sxXSA9IG5leHQ7XG4gICAgICBfcHJlYyA9IG5leHQ7XG4gICAgICBfY2VsbFggPSBjZWxsWFsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHByZWM7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb3B5QXV4V2l0RmlsdGVyKGYsIF9jZWxsWCwgX3ByZWMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmIChjZWxsWCkge1xuICAgICAgdmFyIHQgPSBjZWxsWFsxXTtcbiAgICAgIHZhciBoID0gY2VsbFhbMF07XG4gICAgICBpZiAoZihoKSkge1xuICAgICAgICB2YXIgbmV4dCA9IC8qIDo6ICovW1xuICAgICAgICAgIGgsXG4gICAgICAgICAgLyogW10gKi8wXG4gICAgICAgIF07XG4gICAgICAgIHByZWNbMV0gPSBuZXh0O1xuICAgICAgICBfcHJlYyA9IG5leHQ7XG4gICAgICAgIF9jZWxsWCA9IHQ7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9jZWxsWCA9IHQ7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHlBdXhXaXRGaWx0ZXJNYXAoZiwgX2NlbGxYLCBfcHJlYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKGNlbGxYKSB7XG4gICAgICB2YXIgdCA9IGNlbGxYWzFdO1xuICAgICAgdmFyIG1hdGNoID0gZihjZWxsWFswXSk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgdmFyIG5leHQgPSAvKiA6OiAqL1tcbiAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgXTtcbiAgICAgICAgcHJlY1sxXSA9IG5leHQ7XG4gICAgICAgIF9wcmVjID0gbmV4dDtcbiAgICAgICAgX2NlbGxYID0gdDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2NlbGxYID0gdDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXNzb2NBdXhXaXRoTWFwKF9jZWxsWCwgeCwgX3ByZWMsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmIChjZWxsWCkge1xuICAgICAgdmFyIHQgPSBjZWxsWFsxXTtcbiAgICAgIHZhciBoID0gY2VsbFhbMF07XG4gICAgICBpZiAoZihoWzBdLCB4KSkge1xuICAgICAgICBwcmVjWzFdID0gdDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbmV4dCA9IC8qIDo6ICovW1xuICAgICAgICAgIGgsXG4gICAgICAgICAgLyogW10gKi8wXG4gICAgICAgIF07XG4gICAgICAgIHByZWNbMV0gPSBuZXh0O1xuICAgICAgICBfcHJlYyA9IG5leHQ7XG4gICAgICAgIF9jZWxsWCA9IHQ7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gc2V0QXNzb2NBdXhXaXRoTWFwKF9jZWxsWCwgeCwgaywgX3ByZWMsIGVxKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIHZhciBjZWxsWCA9IF9jZWxsWDtcbiAgICBpZiAoY2VsbFgpIHtcbiAgICAgIHZhciB0ID0gY2VsbFhbMV07XG4gICAgICB2YXIgaCA9IGNlbGxYWzBdO1xuICAgICAgaWYgKGVxKGhbMF0sIHgpKSB7XG4gICAgICAgIHByZWNbMV0gPSAvKiA6OiAqL1tcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICBrXG4gICAgICAgICAgXSxcbiAgICAgICAgICB0XG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5leHQgPSAvKiA6OiAqL1tcbiAgICAgICAgICBoLFxuICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICBdO1xuICAgICAgICBwcmVjWzFdID0gbmV4dDtcbiAgICAgICAgX3ByZWMgPSBuZXh0O1xuICAgICAgICBfY2VsbFggPSB0O1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHlBdXhXaXRoTWFwKF9jZWxsWCwgX3ByZWMsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmIChjZWxsWCkge1xuICAgICAgdmFyIG5leHQgPSAvKiA6OiAqL1tcbiAgICAgICAgZihjZWxsWFswXSksXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXTtcbiAgICAgIHByZWNbMV0gPSBuZXh0O1xuICAgICAgX3ByZWMgPSBuZXh0O1xuICAgICAgX2NlbGxYID0gY2VsbFhbMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB6aXBBdXgoX2NlbGxYLCBfY2VsbFksIF9wcmVjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIHZhciBjZWxsWSA9IF9jZWxsWTtcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKGNlbGxYICYmIGNlbGxZKSB7XG4gICAgICB2YXIgbmV4dCA9IC8qIDo6ICovW1xuICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICBjZWxsWFswXSxcbiAgICAgICAgICBjZWxsWVswXVxuICAgICAgICBdLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF07XG4gICAgICBwcmVjWzFdID0gbmV4dDtcbiAgICAgIF9wcmVjID0gbmV4dDtcbiAgICAgIF9jZWxsWSA9IGNlbGxZWzFdO1xuICAgICAgX2NlbGxYID0gY2VsbFhbMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb3B5QXV4V2l0aE1hcDIoZiwgX2NlbGxYLCBfY2VsbFksIF9wcmVjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIHZhciBjZWxsWSA9IF9jZWxsWTtcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKGNlbGxYICYmIGNlbGxZKSB7XG4gICAgICB2YXIgbmV4dCA9IC8qIDo6ICovW1xuICAgICAgICBmKGNlbGxYWzBdLCBjZWxsWVswXSksXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXTtcbiAgICAgIHByZWNbMV0gPSBuZXh0O1xuICAgICAgX3ByZWMgPSBuZXh0O1xuICAgICAgX2NlbGxZID0gY2VsbFlbMV07XG4gICAgICBfY2VsbFggPSBjZWxsWFsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHlBdXhXaXRoTWFwSShmLCBfaSwgX2NlbGxYLCBfcHJlYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoY2VsbFgpIHtcbiAgICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICAgIGYoaSwgY2VsbFhbMF0pLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF07XG4gICAgICBwcmVjWzFdID0gbmV4dDtcbiAgICAgIF9wcmVjID0gbmV4dDtcbiAgICAgIF9jZWxsWCA9IGNlbGxYWzFdO1xuICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB0YWtlQXV4KF9uLCBfY2VsbCwgX3ByZWMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGwgPSBfY2VsbDtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGNlbGwpIHtcbiAgICAgIHZhciBjZWxsJDEgPSAvKiA6OiAqL1tcbiAgICAgICAgY2VsbFswXSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgcHJlY1sxXSA9IGNlbGwkMTtcbiAgICAgIF9wcmVjID0gY2VsbCQxO1xuICAgICAgX2NlbGwgPSBjZWxsWzFdO1xuICAgICAgX24gPSBuIC0gMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNwbGl0QXRBdXgoX24sIF9jZWxsLCBfcHJlYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbCA9IF9jZWxsO1xuICAgIHZhciBuID0gX247XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIHJldHVybiAvKiBTb21lICovW2NlbGxdO1xuICAgIH0gZWxzZSBpZiAoY2VsbCkge1xuICAgICAgdmFyIGNlbGwkMSA9IC8qIDo6ICovW1xuICAgICAgICBjZWxsWzBdLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF07XG4gICAgICBwcmVjWzFdID0gY2VsbCQxO1xuICAgICAgX3ByZWMgPSBjZWxsJDE7XG4gICAgICBfY2VsbCA9IGNlbGxbMV07XG4gICAgICBfbiA9IG4gLSAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFrZShsc3QsIG4pIHtcbiAgaWYgKG4gPCAwKSB7XG4gICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICB9IGVsc2UgaWYgKG4gPT09IDApIHtcbiAgICByZXR1cm4gLyogU29tZSAqL1svKiBbXSAqLzBdO1xuICB9IGVsc2UgaWYgKGxzdCkge1xuICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICBsc3RbMF0sXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIHZhciBoYXMgPSB0YWtlQXV4KG4gLSAxIHwgMCwgbHN0WzFdLCBjZWxsKTtcbiAgICBpZiAoaGFzKSB7XG4gICAgICByZXR1cm4gLyogU29tZSAqL1tjZWxsXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogTm9uZSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gZHJvcChsc3QsIG4pIHtcbiAgaWYgKG4gPCAwKSB7XG4gICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICB9IGVsc2Uge1xuICAgIHZhciBfbCA9IGxzdDtcbiAgICB2YXIgX24gPSBuO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBuJDEgPSBfbjtcbiAgICAgIHZhciBsID0gX2w7XG4gICAgICBpZiAobiQxID09PSAwKSB7XG4gICAgICAgIHJldHVybiAvKiBTb21lICovW2xdO1xuICAgICAgfSBlbHNlIGlmIChsKSB7XG4gICAgICAgIF9uID0gbiQxIC0gMSB8IDA7XG4gICAgICAgIF9sID0gbFsxXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gc3BsaXRBdChsc3QsIG4pIHtcbiAgaWYgKG4gPCAwKSB7XG4gICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICB9IGVsc2UgaWYgKG4gPT09IDApIHtcbiAgICByZXR1cm4gLyogU29tZSAqL1svKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgLyogW10gKi8wLFxuICAgICAgICAgICAgICBsc3RcbiAgICAgICAgICAgIF1dO1xuICB9IGVsc2UgaWYgKGxzdCkge1xuICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICBsc3RbMF0sXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIHZhciByZXN0ID0gc3BsaXRBdEF1eChuIC0gMSB8IDAsIGxzdFsxXSwgY2VsbCk7XG4gICAgaWYgKHJlc3QpIHtcbiAgICAgIHJldHVybiAvKiBTb21lICovWy8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgIGNlbGwsXG4gICAgICAgICAgICAgICAgcmVzdFswXVxuICAgICAgICAgICAgICBdXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogTm9uZSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uY2F0KHhzLCB5cykge1xuICBpZiAoeHMpIHtcbiAgICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgICAgeHNbMF0sXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIGNvcHlBdXhDb250KHhzWzFdLCBjZWxsKVsxXSA9IHlzO1xuICAgIHJldHVybiBjZWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5cztcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBVKHhzLCBmKSB7XG4gIGlmICh4cykge1xuICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICBmKHhzWzBdKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgY29weUF1eFdpdGhNYXAoeHNbMV0sIGNlbGwsIGYpO1xuICAgIHJldHVybiBjZWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwKHhzLCBmKSB7XG4gIHJldHVybiBtYXBVKHhzLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiB6aXBCeVUobDEsIGwyLCBmKSB7XG4gIGlmIChsMSAmJiBsMikge1xuICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICBmKGwxWzBdLCBsMlswXSksXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIGNvcHlBdXhXaXRoTWFwMihmLCBsMVsxXSwgbDJbMV0sIGNlbGwpO1xuICAgIHJldHVybiBjZWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gemlwQnkobDEsIGwyLCBmKSB7XG4gIHJldHVybiB6aXBCeVUobDEsIGwyLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXhVKHhzLCBmKSB7XG4gIGlmICh4cykge1xuICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICBmKDAsIHhzWzBdKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgY29weUF1eFdpdGhNYXBJKGYsIDEsIHhzWzFdLCBjZWxsKTtcbiAgICByZXR1cm4gY2VsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFdpdGhJbmRleCh4cywgZikge1xuICByZXR1cm4gbWFwV2l0aEluZGV4VSh4cywgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gbWFrZUJ5VShuLCBmKSB7XG4gIGlmIChuIDw9IDApIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9IGVsc2Uge1xuICAgIHZhciBoZWFkWCA9IC8qIDo6ICovW1xuICAgICAgZigwKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgdmFyIGN1ciA9IGhlYWRYO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZShpIDwgbikge1xuICAgICAgdmFyIHYgPSAvKiA6OiAqL1tcbiAgICAgICAgZihpKSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgY3VyWzFdID0gdjtcbiAgICAgIGN1ciA9IHY7XG4gICAgICBpID0gaSArIDEgfCAwO1xuICAgIH07XG4gICAgcmV0dXJuIGhlYWRYO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VCeShuLCBmKSB7XG4gIHJldHVybiBtYWtlQnlVKG4sIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIG1ha2Uobiwgdikge1xuICBpZiAobiA8PSAwKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaGVhZFggPSAvKiA6OiAqL1tcbiAgICAgIHYsXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIHZhciBjdXIgPSBoZWFkWDtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUoaSA8IG4pIHtcbiAgICAgIHZhciB2JDEgPSAvKiA6OiAqL1tcbiAgICAgICAgdixcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgY3VyWzFdID0gdiQxO1xuICAgICAgY3VyID0gdiQxO1xuICAgICAgaSA9IGkgKyAxIHwgMDtcbiAgICB9O1xuICAgIHJldHVybiBoZWFkWDtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZW5ndGgoeHMpIHtcbiAgdmFyIF94ID0geHM7XG4gIHZhciBfYWNjID0gMDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIHZhciB4ID0gX3g7XG4gICAgaWYgKHgpIHtcbiAgICAgIF9hY2MgPSBhY2MgKyAxIHwgMDtcbiAgICAgIF94ID0geFsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbGxBdXgoYXJyLCBfaSwgX3gpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4ID0gX3g7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoeCkge1xuICAgICAgYXJyW2ldID0geFswXTtcbiAgICAgIF94ID0geFsxXTtcbiAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5KGEpIHtcbiAgdmFyIGEkMSA9IGE7XG4gIHZhciBfaSA9IGEubGVuZ3RoIC0gMSB8IDA7XG4gIHZhciBfcmVzID0gLyogW10gKi8wO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHJlcyA9IF9yZXM7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9yZXMgPSAvKiA6OiAqL1tcbiAgICAgICAgYSQxW2ldLFxuICAgICAgICByZXNcbiAgICAgIF07XG4gICAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkoeCkge1xuICB2YXIgbGVuID0gbGVuZ3RoKHgpO1xuICB2YXIgYXJyID0gbmV3IEFycmF5KGxlbik7XG4gIGZpbGxBdXgoYXJyLCAwLCB4KTtcbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZSh4cykge1xuICB2YXIgdiA9IHRvQXJyYXkoeHMpO1xuICBCZWx0X0FycmF5LnNodWZmbGVJblBsYWNlKHYpO1xuICByZXR1cm4gZnJvbUFycmF5KHYpO1xufVxuXG5mdW5jdGlvbiByZXZlcnNlQ29uY2F0KF9sMSwgX2wyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmIChsMSkge1xuICAgICAgX2wyID0gLyogOjogKi9bXG4gICAgICAgIGwxWzBdLFxuICAgICAgICBsMlxuICAgICAgXTtcbiAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbDI7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXZlcnNlKGwpIHtcbiAgcmV0dXJuIHJldmVyc2VDb25jYXQobCwgLyogW10gKi8wKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbkF1eChfcHJlYywgX3hzKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICBpZiAoeHMpIHtcbiAgICAgIF94cyA9IHhzWzFdO1xuICAgICAgX3ByZWMgPSBjb3B5QXV4Q29udCh4c1swXSwgcHJlYyk7XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZWNbMV0gPSAvKiBbXSAqLzA7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbihfeHMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoeHMpIHtcbiAgICAgIHZhciBtYXRjaCA9IHhzWzBdO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICAgICAgbWF0Y2hbMF0sXG4gICAgICAgICAgLyogW10gKi8wXG4gICAgICAgIF07XG4gICAgICAgIGZsYXR0ZW5BdXgoY29weUF1eENvbnQobWF0Y2hbMV0sIGNlbGwpLCB4c1sxXSk7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3hzID0geHNbMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIFtdICovMDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbmNhdE1hbnkoeHMpIHtcbiAgdmFyIGxlbiA9IHhzLmxlbmd0aDtcbiAgaWYgKGxlbiAhPT0gMSkge1xuICAgIGlmIChsZW4gIT09IDApIHtcbiAgICAgIHZhciBsZW4kMSA9IHhzLmxlbmd0aDtcbiAgICAgIHZhciB2ID0geHNbbGVuJDEgLSAxIHwgMF07XG4gICAgICBmb3IodmFyIGkgPSBsZW4kMSAtIDIgfCAwOyBpID49IDA7IC0taSl7XG4gICAgICAgIHYgPSBjb25jYXQoeHNbaV0sIHYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBbXSAqLzA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB4c1swXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBSZXZlcnNlVShsLCBmKSB7XG4gIHZhciBmJDEgPSBmO1xuICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gIHZhciBfeHMgPSBsO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHhzID0gX3hzO1xuICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgaWYgKHhzKSB7XG4gICAgICBfeHMgPSB4c1sxXTtcbiAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgIGYkMSh4c1swXSksXG4gICAgICAgIGFjY3VcbiAgICAgIF07XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhY2N1O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwUmV2ZXJzZShsLCBmKSB7XG4gIHJldHVybiBtYXBSZXZlcnNlVShsLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoVShfeHMsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoeHMpIHtcbiAgICAgIGYoeHNbMF0pO1xuICAgICAgX3hzID0geHNbMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKHhzLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoVSh4cywgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFdpdGhJbmRleFUobCwgZikge1xuICB2YXIgX3hzID0gbDtcbiAgdmFyIF9pID0gMDtcbiAgdmFyIGYkMSA9IGY7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoeHMpIHtcbiAgICAgIGYkMShpLCB4c1swXSk7XG4gICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgIF94cyA9IHhzWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFdpdGhJbmRleChsLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoV2l0aEluZGV4VShsLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VVKF9sLCBfYWNjdSwgZikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICB2YXIgbCA9IF9sO1xuICAgIGlmIChsKSB7XG4gICAgICBfYWNjdSA9IGYoYWNjdSwgbFswXSk7XG4gICAgICBfbCA9IGxbMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhY2N1O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlKGwsIGFjY3UsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVUobCwgYWNjdSwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlUmV2ZXJzZVVuc2FmZVUobCwgYWNjdSwgZikge1xuICBpZiAobCkge1xuICAgIHJldHVybiBmKHJlZHVjZVJldmVyc2VVbnNhZmVVKGxbMV0sIGFjY3UsIGYpLCBsWzBdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYWNjdTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWR1Y2VSZXZlcnNlVShsLCBhY2MsIGYpIHtcbiAgdmFyIGxlbiA9IGxlbmd0aChsKTtcbiAgaWYgKGxlbiA8IDEwMDApIHtcbiAgICByZXR1cm4gcmVkdWNlUmV2ZXJzZVVuc2FmZVUobCwgYWNjLCBmKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9BcnJheS5yZWR1Y2VSZXZlcnNlVSh0b0FycmF5KGwpLCBhY2MsIGYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2UobCwgYWNjdSwgZikge1xuICByZXR1cm4gcmVkdWNlUmV2ZXJzZVUobCwgYWNjdSwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gbWFwUmV2ZXJzZTJVKGwxLCBsMiwgZikge1xuICB2YXIgX2wxID0gbDE7XG4gIHZhciBfbDIgPSBsMjtcbiAgdmFyIF9hY2N1ID0gLyogW10gKi8wO1xuICB2YXIgZiQxID0gZjtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgdmFyIGwyJDEgPSBfbDI7XG4gICAgdmFyIGwxJDEgPSBfbDE7XG4gICAgaWYgKGwxJDEgJiYgbDIkMSkge1xuICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgZiQxKGwxJDFbMF0sIGwyJDFbMF0pLFxuICAgICAgICBhY2N1XG4gICAgICBdO1xuICAgICAgX2wyID0gbDIkMVsxXTtcbiAgICAgIF9sMSA9IGwxJDFbMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhY2N1O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwUmV2ZXJzZTIobDEsIGwyLCBmKSB7XG4gIHJldHVybiBtYXBSZXZlcnNlMlUobDEsIGwyLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoMlUoX2wxLCBfbDIsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKGwxICYmIGwyKSB7XG4gICAgICBmKGwxWzBdLCBsMlswXSk7XG4gICAgICBfbDIgPSBsMlsxXTtcbiAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaDIobDEsIGwyLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoMlUobDEsIGwyLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2UyVShfbDEsIF9sMiwgX2FjY3UsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICBpZiAobDEgJiYgbDIpIHtcbiAgICAgIF9hY2N1ID0gZihhY2N1LCBsMVswXSwgbDJbMF0pO1xuICAgICAgX2wyID0gbDJbMV07XG4gICAgICBfbDEgPSBsMVsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByZWR1Y2UyKGwxLCBsMiwgYWNjLCBmKSB7XG4gIHJldHVybiByZWR1Y2UyVShsMSwgbDIsIGFjYywgQ3VycnkuX18zKGYpKTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlUmV2ZXJzZTJVbnNhZmVVKGwxLCBsMiwgYWNjdSwgZikge1xuICBpZiAobDEgJiYgbDIpIHtcbiAgICByZXR1cm4gZihyZWR1Y2VSZXZlcnNlMlVuc2FmZVUobDFbMV0sIGwyWzFdLCBhY2N1LCBmKSwgbDFbMF0sIGwyWzBdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYWNjdTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWR1Y2VSZXZlcnNlMlUobDEsIGwyLCBhY2MsIGYpIHtcbiAgdmFyIGxlbiA9IGxlbmd0aChsMSk7XG4gIGlmIChsZW4gPCAxMDAwKSB7XG4gICAgcmV0dXJuIHJlZHVjZVJldmVyc2UyVW5zYWZlVShsMSwgbDIsIGFjYywgZik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfQXJyYXkucmVkdWNlUmV2ZXJzZTJVKHRvQXJyYXkobDEpLCB0b0FycmF5KGwyKSwgYWNjLCBmKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWR1Y2VSZXZlcnNlMihsMSwgbDIsIGFjYywgZikge1xuICByZXR1cm4gcmVkdWNlUmV2ZXJzZTJVKGwxLCBsMiwgYWNjLCBDdXJyeS5fXzMoZikpO1xufVxuXG5mdW5jdGlvbiBldmVyeVUoX3hzLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKHhzKSB7XG4gICAgICBpZiAocCh4c1swXSkpIHtcbiAgICAgICAgX3hzID0geHNbMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBldmVyeSh4cywgcCkge1xuICByZXR1cm4gZXZlcnlVKHhzLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBzb21lVShfeHMsIHApIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoeHMpIHtcbiAgICAgIGlmIChwKHhzWzBdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF94cyA9IHhzWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNvbWUoeHMsIHApIHtcbiAgcmV0dXJuIHNvbWVVKHhzLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBldmVyeTJVKF9sMSwgX2wyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmIChsMSAmJiBsMikge1xuICAgICAgaWYgKHAobDFbMF0sIGwyWzBdKSkge1xuICAgICAgICBfbDIgPSBsMlsxXTtcbiAgICAgICAgX2wxID0gbDFbMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBldmVyeTIobDEsIGwyLCBwKSB7XG4gIHJldHVybiBldmVyeTJVKGwxLCBsMiwgQ3VycnkuX18yKHApKTtcbn1cblxuZnVuY3Rpb24gY21wQnlMZW5ndGgoX2wxLCBfbDIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKGwxKSB7XG4gICAgICBpZiAobDIpIHtcbiAgICAgICAgX2wyID0gbDJbMV07XG4gICAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGwyKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY21wVShfbDEsIF9sMiwgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICBpZiAobDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICB2YXIgYyA9IHAobDFbMF0sIGwyWzBdKTtcbiAgICAgICAgaWYgKGMgPT09IDApIHtcbiAgICAgICAgICBfbDIgPSBsMlsxXTtcbiAgICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobDIpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjbXAobDEsIGwyLCBmKSB7XG4gIHJldHVybiBjbXBVKGwxLCBsMiwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gZXFVKF9sMSwgX2wyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmIChsMSkge1xuICAgICAgaWYgKGwyICYmIHAobDFbMF0sIGwyWzBdKSkge1xuICAgICAgICBfbDIgPSBsMlsxXTtcbiAgICAgICAgX2wxID0gbDFbMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGwyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZXEobDEsIGwyLCBmKSB7XG4gIHJldHVybiBlcVUobDEsIGwyLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBzb21lMlUoX2wxLCBfbDIsIHApIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKGwxICYmIGwyKSB7XG4gICAgICBpZiAocChsMVswXSwgbDJbMF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2wyID0gbDJbMV07XG4gICAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNvbWUyKGwxLCBsMiwgcCkge1xuICByZXR1cm4gc29tZTJVKGwxLCBsMiwgQ3VycnkuX18yKHApKTtcbn1cblxuZnVuY3Rpb24gaGFzVShfeHMsIHgsIGVxKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKHhzKSB7XG4gICAgICBpZiAoZXEoeHNbMF0sIHgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3hzID0geHNbMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFzKHhzLCB4LCBlcSkge1xuICByZXR1cm4gaGFzVSh4cywgeCwgQ3VycnkuX18yKGVxKSk7XG59XG5cbmZ1bmN0aW9uIGdldEFzc29jVShfeHMsIHgsIGVxKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKHhzKSB7XG4gICAgICB2YXIgbWF0Y2ggPSB4c1swXTtcbiAgICAgIGlmIChlcShtYXRjaFswXSwgeCkpIHtcbiAgICAgICAgcmV0dXJuIC8qIFNvbWUgKi9bbWF0Y2hbMV1dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3hzID0geHNbMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0QXNzb2MoeHMsIHgsIGVxKSB7XG4gIHJldHVybiBnZXRBc3NvY1UoeHMsIHgsIEN1cnJ5Ll9fMihlcSkpO1xufVxuXG5mdW5jdGlvbiBoYXNBc3NvY1UoX3hzLCB4LCBlcSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHhzID0gX3hzO1xuICAgIGlmICh4cykge1xuICAgICAgaWYgKGVxKHhzWzBdWzBdLCB4KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF94cyA9IHhzWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc0Fzc29jKHhzLCB4LCBlcSkge1xuICByZXR1cm4gaGFzQXNzb2NVKHhzLCB4LCBDdXJyeS5fXzIoZXEpKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXNzb2NVKHhzLCB4LCBlcSkge1xuICBpZiAoeHMpIHtcbiAgICB2YXIgbCA9IHhzWzFdO1xuICAgIHZhciBwYWlyID0geHNbMF07XG4gICAgaWYgKGVxKHBhaXJbMF0sIHgpKSB7XG4gICAgICByZXR1cm4gbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNlbGwgPSAvKiA6OiAqL1tcbiAgICAgICAgcGFpcixcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgdmFyIHJlbW92ZWQgPSByZW1vdmVBc3NvY0F1eFdpdGhNYXAobCwgeCwgY2VsbCwgZXEpO1xuICAgICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geHM7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXNzb2MoeHMsIHgsIGVxKSB7XG4gIHJldHVybiByZW1vdmVBc3NvY1UoeHMsIHgsIEN1cnJ5Ll9fMihlcSkpO1xufVxuXG5mdW5jdGlvbiBzZXRBc3NvY1UoeHMsIHgsIGssIGVxKSB7XG4gIGlmICh4cykge1xuICAgIHZhciBsID0geHNbMV07XG4gICAgdmFyIHBhaXIgPSB4c1swXTtcbiAgICBpZiAoZXEocGFpclswXSwgeCkpIHtcbiAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICBrXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGxcbiAgICAgICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICAgIHBhaXIsXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXTtcbiAgICAgIHZhciByZXBsYWNlZCA9IHNldEFzc29jQXV4V2l0aE1hcChsLCB4LCBrLCBjZWxsLCBlcSk7XG4gICAgICBpZiAocmVwbGFjZWQpIHtcbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgICAga1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgeHNcbiAgICAgICAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgIGtcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldEFzc29jKHhzLCB4LCBrLCBlcSkge1xuICByZXR1cm4gc2V0QXNzb2NVKHhzLCB4LCBrLCBDdXJyeS5fXzIoZXEpKTtcbn1cblxuZnVuY3Rpb24gc29ydFUoeHMsIGNtcCkge1xuICB2YXIgYXJyID0gdG9BcnJheSh4cyk7XG4gIEJlbHRfU29ydEFycmF5LnN0YWJsZVNvcnRJblBsYWNlQnlVKGFyciwgY21wKTtcbiAgcmV0dXJuIGZyb21BcnJheShhcnIpO1xufVxuXG5mdW5jdGlvbiBzb3J0KHhzLCBjbXApIHtcbiAgcmV0dXJuIHNvcnRVKHhzLCBDdXJyeS5fXzIoY21wKSk7XG59XG5cbmZ1bmN0aW9uIGdldEJ5VShfeHMsIHApIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoeHMpIHtcbiAgICAgIHZhciB4ID0geHNbMF07XG4gICAgICBpZiAocCh4KSkge1xuICAgICAgICByZXR1cm4gLyogU29tZSAqL1t4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF94cyA9IHhzWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBOb25lICovMDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEJ5KHhzLCBwKSB7XG4gIHJldHVybiBnZXRCeVUoeHMsIEN1cnJ5Ll9fMShwKSk7XG59XG5cbmZ1bmN0aW9uIGtlZXBVKF94cywgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHhzID0gX3hzO1xuICAgIGlmICh4cykge1xuICAgICAgdmFyIHQgPSB4c1sxXTtcbiAgICAgIHZhciBoID0geHNbMF07XG4gICAgICBpZiAocChoKSkge1xuICAgICAgICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgICAgICAgIGgsXG4gICAgICAgICAgLyogW10gKi8wXG4gICAgICAgIF07XG4gICAgICAgIGNvcHlBdXhXaXRGaWx0ZXIocCwgdCwgY2VsbCk7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3hzID0gdDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogW10gKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24ga2VlcCh4cywgcCkge1xuICByZXR1cm4ga2VlcFUoeHMsIEN1cnJ5Ll9fMShwKSk7XG59XG5cbmZ1bmN0aW9uIGtlZXBNYXBVKF94cywgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHhzID0gX3hzO1xuICAgIGlmICh4cykge1xuICAgICAgdmFyIHQgPSB4c1sxXTtcbiAgICAgIHZhciBtYXRjaCA9IHAoeHNbMF0pO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICAgICAgbWF0Y2hbMF0sXG4gICAgICAgICAgLyogW10gKi8wXG4gICAgICAgIF07XG4gICAgICAgIGNvcHlBdXhXaXRGaWx0ZXJNYXAocCwgdCwgY2VsbCk7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3hzID0gdDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogW10gKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24ga2VlcE1hcCh4cywgcCkge1xuICByZXR1cm4ga2VlcE1hcFUoeHMsIEN1cnJ5Ll9fMShwKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvblUobCwgcCkge1xuICBpZiAobCkge1xuICAgIHZhciBoID0gbFswXTtcbiAgICB2YXIgbmV4dFggPSAvKiA6OiAqL1tcbiAgICAgIGgsXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIHZhciBuZXh0WSA9IC8qIDo6ICovW1xuICAgICAgaCxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgdmFyIGIgPSBwKGgpO1xuICAgIHBhcnRpdGlvbkF1eChwLCBsWzFdLCBuZXh0WCwgbmV4dFkpO1xuICAgIGlmIChiKSB7XG4gICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIG5leHRYLFxuICAgICAgICAgICAgICBuZXh0WVsxXVxuICAgICAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBuZXh0WFsxXSxcbiAgICAgICAgICAgICAgbmV4dFlcbiAgICAgICAgICAgIF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIC8qIFtdICovMCxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKGwsIHApIHtcbiAgcmV0dXJuIHBhcnRpdGlvblUobCwgQ3VycnkuX18xKHApKTtcbn1cblxuZnVuY3Rpb24gdW56aXAoeHMpIHtcbiAgaWYgKHhzKSB7XG4gICAgdmFyIG1hdGNoID0geHNbMF07XG4gICAgdmFyIGNlbGxYID0gLyogOjogKi9bXG4gICAgICBtYXRjaFswXSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgdmFyIGNlbGxZID0gLyogOjogKi9bXG4gICAgICBtYXRjaFsxXSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgc3BsaXRBdXgoeHNbMV0sIGNlbGxYLCBjZWxsWSk7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgY2VsbFgsXG4gICAgICAgICAgICBjZWxsWVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgLyogW10gKi8wLFxuICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiB6aXAobDEsIGwyKSB7XG4gIGlmIChsMSAmJiBsMikge1xuICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgbDFbMF0sXG4gICAgICAgIGwyWzBdXG4gICAgICBdLFxuICAgICAgLyogW10gKi8wXG4gICAgXTtcbiAgICB6aXBBdXgobDFbMV0sIGwyWzFdLCBjZWxsKTtcbiAgICByZXR1cm4gY2VsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG59XG5cbnZhciBzaXplID0gbGVuZ3RoO1xuXG52YXIgb2ZBcnJheSA9IGZyb21BcnJheTtcblxuZXhwb3J0cy5sZW5ndGggPSBsZW5ndGg7XG5leHBvcnRzLnNpemUgPSBzaXplO1xuZXhwb3J0cy5oZWFkID0gaGVhZDtcbmV4cG9ydHMuaGVhZEV4biA9IGhlYWRFeG47XG5leHBvcnRzLnRhaWwgPSB0YWlsO1xuZXhwb3J0cy50YWlsRXhuID0gdGFpbEV4bjtcbmV4cG9ydHMuYWRkID0gYWRkO1xuZXhwb3J0cy5nZXQgPSBnZXQ7XG5leHBvcnRzLmdldEV4biA9IGdldEV4bjtcbmV4cG9ydHMubWFrZSA9IG1ha2U7XG5leHBvcnRzLm1ha2VCeVUgPSBtYWtlQnlVO1xuZXhwb3J0cy5tYWtlQnkgPSBtYWtlQnk7XG5leHBvcnRzLnNodWZmbGUgPSBzaHVmZmxlO1xuZXhwb3J0cy5kcm9wID0gZHJvcDtcbmV4cG9ydHMudGFrZSA9IHRha2U7XG5leHBvcnRzLnNwbGl0QXQgPSBzcGxpdEF0O1xuZXhwb3J0cy5jb25jYXQgPSBjb25jYXQ7XG5leHBvcnRzLmNvbmNhdE1hbnkgPSBjb25jYXRNYW55O1xuZXhwb3J0cy5yZXZlcnNlQ29uY2F0ID0gcmV2ZXJzZUNvbmNhdDtcbmV4cG9ydHMuZmxhdHRlbiA9IGZsYXR0ZW47XG5leHBvcnRzLm1hcFUgPSBtYXBVO1xuZXhwb3J0cy5tYXAgPSBtYXA7XG5leHBvcnRzLnppcCA9IHppcDtcbmV4cG9ydHMuemlwQnlVID0gemlwQnlVO1xuZXhwb3J0cy56aXBCeSA9IHppcEJ5O1xuZXhwb3J0cy5tYXBXaXRoSW5kZXhVID0gbWFwV2l0aEluZGV4VTtcbmV4cG9ydHMubWFwV2l0aEluZGV4ID0gbWFwV2l0aEluZGV4O1xuZXhwb3J0cy5vZkFycmF5ID0gb2ZBcnJheTtcbmV4cG9ydHMuZnJvbUFycmF5ID0gZnJvbUFycmF5O1xuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcbmV4cG9ydHMucmV2ZXJzZSA9IHJldmVyc2U7XG5leHBvcnRzLm1hcFJldmVyc2VVID0gbWFwUmV2ZXJzZVU7XG5leHBvcnRzLm1hcFJldmVyc2UgPSBtYXBSZXZlcnNlO1xuZXhwb3J0cy5mb3JFYWNoVSA9IGZvckVhY2hVO1xuZXhwb3J0cy5mb3JFYWNoID0gZm9yRWFjaDtcbmV4cG9ydHMuZm9yRWFjaFdpdGhJbmRleFUgPSBmb3JFYWNoV2l0aEluZGV4VTtcbmV4cG9ydHMuZm9yRWFjaFdpdGhJbmRleCA9IGZvckVhY2hXaXRoSW5kZXg7XG5leHBvcnRzLnJlZHVjZVUgPSByZWR1Y2VVO1xuZXhwb3J0cy5yZWR1Y2UgPSByZWR1Y2U7XG5leHBvcnRzLnJlZHVjZVJldmVyc2VVID0gcmVkdWNlUmV2ZXJzZVU7XG5leHBvcnRzLnJlZHVjZVJldmVyc2UgPSByZWR1Y2VSZXZlcnNlO1xuZXhwb3J0cy5tYXBSZXZlcnNlMlUgPSBtYXBSZXZlcnNlMlU7XG5leHBvcnRzLm1hcFJldmVyc2UyID0gbWFwUmV2ZXJzZTI7XG5leHBvcnRzLmZvckVhY2gyVSA9IGZvckVhY2gyVTtcbmV4cG9ydHMuZm9yRWFjaDIgPSBmb3JFYWNoMjtcbmV4cG9ydHMucmVkdWNlMlUgPSByZWR1Y2UyVTtcbmV4cG9ydHMucmVkdWNlMiA9IHJlZHVjZTI7XG5leHBvcnRzLnJlZHVjZVJldmVyc2UyVSA9IHJlZHVjZVJldmVyc2UyVTtcbmV4cG9ydHMucmVkdWNlUmV2ZXJzZTIgPSByZWR1Y2VSZXZlcnNlMjtcbmV4cG9ydHMuZXZlcnlVID0gZXZlcnlVO1xuZXhwb3J0cy5ldmVyeSA9IGV2ZXJ5O1xuZXhwb3J0cy5zb21lVSA9IHNvbWVVO1xuZXhwb3J0cy5zb21lID0gc29tZTtcbmV4cG9ydHMuZXZlcnkyVSA9IGV2ZXJ5MlU7XG5leHBvcnRzLmV2ZXJ5MiA9IGV2ZXJ5MjtcbmV4cG9ydHMuc29tZTJVID0gc29tZTJVO1xuZXhwb3J0cy5zb21lMiA9IHNvbWUyO1xuZXhwb3J0cy5jbXBCeUxlbmd0aCA9IGNtcEJ5TGVuZ3RoO1xuZXhwb3J0cy5jbXBVID0gY21wVTtcbmV4cG9ydHMuY21wID0gY21wO1xuZXhwb3J0cy5lcVUgPSBlcVU7XG5leHBvcnRzLmVxID0gZXE7XG5leHBvcnRzLmhhc1UgPSBoYXNVO1xuZXhwb3J0cy5oYXMgPSBoYXM7XG5leHBvcnRzLmdldEJ5VSA9IGdldEJ5VTtcbmV4cG9ydHMuZ2V0QnkgPSBnZXRCeTtcbmV4cG9ydHMua2VlcFUgPSBrZWVwVTtcbmV4cG9ydHMua2VlcCA9IGtlZXA7XG5leHBvcnRzLmtlZXBNYXBVID0ga2VlcE1hcFU7XG5leHBvcnRzLmtlZXBNYXAgPSBrZWVwTWFwO1xuZXhwb3J0cy5wYXJ0aXRpb25VID0gcGFydGl0aW9uVTtcbmV4cG9ydHMucGFydGl0aW9uID0gcGFydGl0aW9uO1xuZXhwb3J0cy51bnppcCA9IHVuemlwO1xuZXhwb3J0cy5nZXRBc3NvY1UgPSBnZXRBc3NvY1U7XG5leHBvcnRzLmdldEFzc29jID0gZ2V0QXNzb2M7XG5leHBvcnRzLmhhc0Fzc29jVSA9IGhhc0Fzc29jVTtcbmV4cG9ydHMuaGFzQXNzb2MgPSBoYXNBc3NvYztcbmV4cG9ydHMucmVtb3ZlQXNzb2NVID0gcmVtb3ZlQXNzb2NVO1xuZXhwb3J0cy5yZW1vdmVBc3NvYyA9IHJlbW92ZUFzc29jO1xuZXhwb3J0cy5zZXRBc3NvY1UgPSBzZXRBc3NvY1U7XG5leHBvcnRzLnNldEFzc29jID0gc2V0QXNzb2M7XG5leHBvcnRzLnNvcnRVID0gc29ydFU7XG5leHBvcnRzLnNvcnQgPSBzb3J0O1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQgVkVSU0lPTiAzLjAuMCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG4ndXNlIHN0cmljdCc7XG5cbnZhciBMaXN0ID0gcmVxdWlyZShcImJzLXBsYXRmb3JtL2xpYi9qcy9saXN0LmpzXCIpO1xudmFyIEJlbHRfTGlzdCA9IHJlcXVpcmUoXCJicy1wbGF0Zm9ybS9saWIvanMvYmVsdF9MaXN0LmpzXCIpO1xudmFyIENhbWxfYnVpbHRpbl9leGNlcHRpb25zID0gcmVxdWlyZShcImJzLXBsYXRmb3JtL2xpYi9qcy9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gc3R5bGVUb1N0cmluZyhzdHlsZSkge1xuICBpZiAodHlwZW9mIHN0eWxlID09PSBcIm51bWJlclwiKSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgcmV0dXJuIFwiSmFja1wiO1xuICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgcmV0dXJuIFwiUXVlZW5cIjtcbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIHJldHVybiBcIktpbmdcIjtcbiAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgIHJldHVybiBcIkFjZVwiO1xuICAgICAgXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBTdHJpbmcoc3R5bGVbMF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN1aXRUb1N0cmluZyhzdHlsZSkge1xuICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgY2FzZSAwIDogXG4gICAgICAgIHJldHVybiBcIkphY2tcIjtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIFwiUXVlZW5cIjtcbiAgICBjYXNlIDIgOiBcbiAgICAgICAgcmV0dXJuIFwiS2luZ1wiO1xuICAgIGNhc2UgMyA6IFxuICAgICAgICByZXR1cm4gXCJBY2VcIjtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBjYXJkVmFsdWUocGFyYW0pIHtcbiAgdmFyIHN0eWxlID0gcGFyYW1bLyogc3R5bGUgKi8xXTtcbiAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiAxMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3R5bGVbMF07XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkQWNlcyhzdW1Tb0ZhciwgYWNlcykge1xuICByZXR1cm4gQmVsdF9MaXN0LnJlZHVjZShhY2VzLCBzdW1Tb0ZhciwgKGZ1bmN0aW9uIChhLCBfKSB7XG4gICAgICAgICAgICAgICAgaWYgKChhICsgMTEgfCAwKSA8PSAyMSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgKyAxMSB8IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUhhbmQoaGFuZCkge1xuICB2YXIgYWNlcyA9IExpc3QuZmlsdGVyKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbVsvKiBzdHlsZSAqLzFdID09PSAvKiBBY2UgKi8zO1xuICAgICAgICAgIH0pKShoYW5kKTtcbiAgdmFyIG5vQWNlSGFuZCA9IExpc3QuZmlsdGVyKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbVsvKiBzdHlsZSAqLzFdICE9PSAvKiBBY2UgKi8zO1xuICAgICAgICAgIH0pKShoYW5kKTtcbiAgdmFyIHN1bVdpdGhvdXRBY2VzID0gQmVsdF9MaXN0LnJlZHVjZShMaXN0Lm1hcChjYXJkVmFsdWUsIG5vQWNlSGFuZCksIDAsIChmdW5jdGlvbiAocHJpbSwgcHJpbSQxKSB7XG4gICAgICAgICAgcmV0dXJuIHByaW0gKyBwcmltJDEgfCAwO1xuICAgICAgICB9KSk7XG4gIHJldHVybiBhZGRBY2VzKHN1bVdpdGhvdXRBY2VzLCBhY2VzKTtcbn1cblxuZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGVuZF8pIHtcbiAgaWYgKHN0YXJ0ID49IGVuZF8pIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgcmFuZ2Uoc3RhcnQgKyAxIHwgMCwgZW5kXylcbiAgICAgICAgICBdO1xuICB9XG59XG5cbnZhciBzdWl0cyA9IC8qIDo6ICovW1xuICAvKiBIZWFydHMgKi8wLFxuICAvKiA6OiAqL1tcbiAgICAvKiBDbHVicyAqLzMsXG4gICAgLyogOjogKi9bXG4gICAgICAvKiBEaWFtb25kcyAqLzEsXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgLyogU3BhZGVzICovMixcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdXG4gICAgXVxuICBdXG5dO1xuXG52YXIgZmFjZUNhcmRzID0gLyogOjogKi9bXG4gIC8qIEFjZSAqLzMsXG4gIC8qIDo6ICovW1xuICAgIC8qIEtpbmcgKi8yLFxuICAgIC8qIDo6ICovW1xuICAgICAgLyogUXVlZW4gKi8xLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIC8qIEphY2sgKi8wLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF1cbiAgICBdXG4gIF1cbl07XG5cbnZhciBzaW1wbGVDYXJkcyA9IExpc3QubWFwKChmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gLyogU2ltcGxlICovW2ldO1xuICAgICAgfSksIHJhbmdlKDIsIDEwKSk7XG5cbnZhciBzdHlsZXMgPSBMaXN0LmFwcGVuZChmYWNlQ2FyZHMsIHNpbXBsZUNhcmRzKTtcblxudmFyIGRlZmF1bHREZWNrID0gQmVsdF9MaXN0LnJlZHVjZShzdWl0cywgLyogW10gKi8wLCAoZnVuY3Rpb24gKGEsIHN1aXQpIHtcbiAgICAgICAgcmV0dXJuIExpc3QuYXBwZW5kKGEsIEJlbHRfTGlzdC5tYXAoc3R5bGVzLCAoZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3VpdCAqL3N1aXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3R5bGUgKi9zdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgIH0pKTtcblxuZnVuY3Rpb24gZ2FtZVN0YXRlVG9TdHJpbmcoc3RhdGUpIHtcbiAgc3dpdGNoIChzdGF0ZSkge1xuICAgIGNhc2UgMCA6IFxuICAgICAgICByZXR1cm4gXCJOZXcgR2FtZVwiO1xuICAgIGNhc2UgMSA6IFxuICAgICAgICByZXR1cm4gXCJQbGF5ZXIgVHVyblwiO1xuICAgIGNhc2UgMiA6IFxuICAgICAgICByZXR1cm4gXCJCbGFja2phY2tcIjtcbiAgICBjYXNlIDMgOiBcbiAgICAgICAgcmV0dXJuIFwiUHVzaFwiO1xuICAgIGNhc2UgNCA6IFxuICAgICAgICByZXR1cm4gXCJQbGF5ZXIgQnVzdFwiO1xuICAgIGNhc2UgNSA6IFxuICAgICAgICByZXR1cm4gXCJEZWFsZXIgQnVzdFwiO1xuICAgIGNhc2UgNiA6IFxuICAgICAgICByZXR1cm4gXCJEZWFsZXIgVHVyblwiO1xuICAgIGNhc2UgNyA6IFxuICAgICAgICByZXR1cm4gXCJQbGF5ZXIgV2luXCI7XG4gICAgY2FzZSA4IDogXG4gICAgICAgIHJldHVybiBcIkRlYWxlciBCbGFja2phY2tcIjtcbiAgICBjYXNlIDkgOiBcbiAgICAgICAgcmV0dXJuIFwiRGVhbGVyIFdpblwiO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVBheW91dChnYW1lKSB7XG4gIHZhciBtYXRjaCA9IGdhbWVbLyogZ2FtZVN0YXRlICovMl07XG4gIHN3aXRjaCAobWF0Y2gpIHtcbiAgICBjYXNlIDIgOiBcbiAgICAgICAgcmV0dXJuIGdhbWVbLyogcGxheWVyQmV0ICovM10gKiAzLjAgLyAyLjA7XG4gICAgY2FzZSAzIDogXG4gICAgICAgIHJldHVybiBnYW1lWy8qIHBsYXllckJldCAqLzNdO1xuICAgIGNhc2UgNSA6IFxuICAgIGNhc2UgNyA6IFxuICAgICAgICByZXR1cm4gZ2FtZVsvKiBwbGF5ZXJCZXQgKi8zXSAqIDIuMDtcbiAgICBjYXNlIDAgOiBcbiAgICBjYXNlIDEgOiBcbiAgICBjYXNlIDQgOiBcbiAgICBjYXNlIDYgOiBcbiAgICBjYXNlIDggOiBcbiAgICBjYXNlIDkgOiBcbiAgICAgICAgcmV0dXJuIDAuMDtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFsSW5pdGlhbENhcmRzKGdhbWUpIHtcbiAgdmFyIGV4aXQgPSAwO1xuICB2YXIgbWF0Y2ggPSBnYW1lWy8qIGRlY2sgKi8xXTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIG1hdGNoJDEgPSBtYXRjaFsxXTtcbiAgICBpZiAobWF0Y2gkMSkge1xuICAgICAgdmFyIG1hdGNoJDIgPSBtYXRjaCQxWzFdO1xuICAgICAgaWYgKG1hdGNoJDIpIHtcbiAgICAgICAgdmFyIG1hdGNoJDMgPSBtYXRjaCQyWzFdO1xuICAgICAgICBpZiAobWF0Y2gkMykge1xuICAgICAgICAgIHZhciByZXN0RGVjayA9IG1hdGNoJDNbMV07XG4gICAgICAgICAgdmFyIHBsYXllckhhbmRfMDAwID0gbWF0Y2hbMF07XG4gICAgICAgICAgdmFyIHBsYXllckhhbmRfMDAxID0gLyogOjogKi9bXG4gICAgICAgICAgICBtYXRjaCQxWzBdLFxuICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgXTtcbiAgICAgICAgICB2YXIgcGxheWVySGFuZCA9IC8qIDo6ICovW1xuICAgICAgICAgICAgcGxheWVySGFuZF8wMDAsXG4gICAgICAgICAgICBwbGF5ZXJIYW5kXzAwMVxuICAgICAgICAgIF07XG4gICAgICAgICAgdmFyIGRlYWxlckhhbmRfMDAwID0gbWF0Y2gkMlswXTtcbiAgICAgICAgICB2YXIgZGVhbGVySGFuZF8wMDEgPSAvKiA6OiAqL1tcbiAgICAgICAgICAgIG1hdGNoJDNbMF0sXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdO1xuICAgICAgICAgIHZhciBkZWFsZXJIYW5kID0gLyogOjogKi9bXG4gICAgICAgICAgICBkZWFsZXJIYW5kXzAwMCxcbiAgICAgICAgICAgIGRlYWxlckhhbmRfMDAxXG4gICAgICAgICAgXTtcbiAgICAgICAgICB2YXIgaW5pdGlhbEdhbWVTdGF0ZSA9IGNhbGN1bGF0ZUhhbmQocGxheWVySGFuZCkgPT09IDIxID8gLyogQmxhY2tqYWNrICovMiA6IC8qIFBsYXllclR1cm4gKi8xO1xuICAgICAgICAgIHZhciBkZWFsdEdhbWVTdGF0ZV8wMDAgPSAvKiBib2FyZCA6IHJlY29yZCAqL1tcbiAgICAgICAgICAgIC8qIHBsYXllckhhbmQgKi9wbGF5ZXJIYW5kLFxuICAgICAgICAgICAgLyogZGVhbGVySGFuZCAqL2RlYWxlckhhbmRcbiAgICAgICAgICBdO1xuICAgICAgICAgIHZhciBkZWFsdEdhbWVTdGF0ZV8wMDMgPSAvKiBwbGF5ZXJCZXQgKi9nYW1lWy8qIHBsYXllckJldCAqLzNdO1xuICAgICAgICAgIHZhciBkZWFsdEdhbWVTdGF0ZV8wMDQgPSAvKiBwbGF5ZXJUb3RhbCAqL2dhbWVbLyogcGxheWVyVG90YWwgKi80XTtcbiAgICAgICAgICB2YXIgZGVhbHRHYW1lU3RhdGUgPSAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICBkZWFsdEdhbWVTdGF0ZV8wMDAsXG4gICAgICAgICAgICAvKiBkZWNrICovcmVzdERlY2ssXG4gICAgICAgICAgICAvKiBnYW1lU3RhdGUgKi9pbml0aWFsR2FtZVN0YXRlLFxuICAgICAgICAgICAgZGVhbHRHYW1lU3RhdGVfMDAzLFxuICAgICAgICAgICAgZGVhbHRHYW1lU3RhdGVfMDA0XG4gICAgICAgICAgXTtcbiAgICAgICAgICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgICAgICAgICAgZGVhbHRHYW1lU3RhdGVfMDAwLFxuICAgICAgICAgICAgICAgICAgLyogZGVjayAqL3Jlc3REZWNrLFxuICAgICAgICAgICAgICAgICAgLyogZ2FtZVN0YXRlICovaW5pdGlhbEdhbWVTdGF0ZSxcbiAgICAgICAgICAgICAgICAgIGRlYWx0R2FtZVN0YXRlXzAwMyxcbiAgICAgICAgICAgICAgICAgIC8qIHBsYXllclRvdGFsICovZGVhbHRHYW1lU3RhdGVfMDA0ICsgY2FsY3VsYXRlUGF5b3V0KGRlYWx0R2FtZVN0YXRlKSAtIGRlYWx0R2FtZVN0YXRlXzAwM1xuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXQgPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBleGl0ID0gMTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZXhpdCA9IDE7XG4gIH1cbiAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubWF0Y2hfZmFpbHVyZSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcImxvZ2ljLnJlXCIsXG4gICAgICAgICAgICAxNDQsXG4gICAgICAgICAgICA2XG4gICAgICAgICAgXVxuICAgICAgICBdO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBkZWFsZXJDYW5QbGF5KGhhbmQpIHtcbiAgcmV0dXJuIGNhbGN1bGF0ZUhhbmQoaGFuZCkgPCAxNztcbn1cblxuZnVuY3Rpb24gcnVuRGVhbGVyVHVybihnYW1lKSB7XG4gIHJldHVybiBCZWx0X0xpc3QucmVkdWNlKGdhbWVbLyogZGVjayAqLzFdLCBnYW1lLCAoZnVuY3Rpb24gKGcsIF8pIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBnYW1lWy8qIGRlY2sgKi8xXTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZXN0RGVjayA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgICAgICAgdmFyIG5ld0RlYWxlckhhbmRfMDAwID0gbWF0Y2hbMF07XG4gICAgICAgICAgICAgICAgICB2YXIgbmV3RGVhbGVySGFuZF8wMDEgPSBnYW1lWy8qIGJvYXJkICovMF1bLyogZGVhbGVySGFuZCAqLzFdO1xuICAgICAgICAgICAgICAgICAgdmFyIG5ld0RlYWxlckhhbmQgPSAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgbmV3RGVhbGVySGFuZF8wMDAsXG4gICAgICAgICAgICAgICAgICAgIG5ld0RlYWxlckhhbmRfMDAxXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgaWYgKGNhbGN1bGF0ZUhhbmQoZ1svKiBib2FyZCAqLzBdWy8qIGRlYWxlckhhbmQgKi8xXSkgPCAxNykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsY3VsYXRlSGFuZChuZXdEZWFsZXJIYW5kKSA8PSAyMSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBpbml0ID0gZ2FtZVsvKiBib2FyZCAqLzBdO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBib2FyZCA6IHJlY29yZCAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogcGxheWVySGFuZCAqL2luaXRbLyogcGxheWVySGFuZCAqLzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBkZWFsZXJIYW5kICovbmV3RGVhbGVySGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGRlY2sgKi9yZXN0RGVjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGdhbWVTdGF0ZSA6IERlYWxlclR1cm4gKi82LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogcGxheWVyQmV0ICovZ1svKiBwbGF5ZXJCZXQgKi8zXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHBsYXllclRvdGFsICovZ1svKiBwbGF5ZXJUb3RhbCAqLzRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdCQxID0gZ2FtZVsvKiBib2FyZCAqLzBdO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBib2FyZCA6IHJlY29yZCAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogcGxheWVySGFuZCAqL2luaXQkMVsvKiBwbGF5ZXJIYW5kICovMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGRlYWxlckhhbmQgKi9uZXdEZWFsZXJIYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZGVjayAqL3Jlc3REZWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZ2FtZVN0YXRlIDogRGVhbGVyQnVzdCAqLzUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBwbGF5ZXJCZXQgKi9nWy8qIHBsYXllckJldCAqLzNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogcGxheWVyVG90YWwgKi9nWy8qIHBsYXllclRvdGFsICovNF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubWF0Y2hfZmFpbHVyZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsb2dpYy5yZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAxNzYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDEwXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gZmluZFdpbm5lcihib2FyZCkge1xuICB2YXIgcGxheWVyVG90YWwgPSBjYWxjdWxhdGVIYW5kKGJvYXJkWy8qIHBsYXllckhhbmQgKi8wXSk7XG4gIHZhciBkZWFsZXJUb3RhbCA9IGNhbGN1bGF0ZUhhbmQoYm9hcmRbLyogZGVhbGVySGFuZCAqLzFdKTtcbiAgaWYgKHBsYXllclRvdGFsID09PSBkZWFsZXJUb3RhbCkge1xuICAgIHJldHVybiAvKiBQdXNoICovMztcbiAgfSBlbHNlIGlmIChwbGF5ZXJUb3RhbCA+IDIxKSB7XG4gICAgcmV0dXJuIC8qIFBsYXllckJ1c3QgKi80O1xuICB9IGVsc2UgaWYgKGRlYWxlclRvdGFsID4gMjEpIHtcbiAgICByZXR1cm4gLyogRGVhbGVyQnVzdCAqLzU7XG4gIH0gZWxzZSBpZiAocGxheWVyVG90YWwgPiBkZWFsZXJUb3RhbCkge1xuICAgIHJldHVybiAvKiBQbGF5ZXJXaW4gKi83O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBEZWFsZXJXaW4gKi85O1xuICB9XG59XG5cbmZ1bmN0aW9uIHJ1blBsYXllclR1cm4oZ2FtZSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgY2FzZSAwIDogXG4gICAgICAgIHJldHVybiBkZWFsSW5pdGlhbENhcmRzKGdhbWUpO1xuICAgIGNhc2UgMSA6IFxuICAgICAgICB2YXIgbWF0Y2ggPSBnYW1lWy8qIGRlY2sgKi8xXTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIHJlc3REZWNrID0gbWF0Y2hbMV07XG4gICAgICAgICAgdmFyIG5ld1BsYXllckhhbmRfMDAwID0gbWF0Y2hbMF07XG4gICAgICAgICAgdmFyIG5ld1BsYXllckhhbmRfMDAxID0gZ2FtZVsvKiBib2FyZCAqLzBdWy8qIHBsYXllckhhbmQgKi8wXTtcbiAgICAgICAgICB2YXIgbmV3UGxheWVySGFuZCA9IC8qIDo6ICovW1xuICAgICAgICAgICAgbmV3UGxheWVySGFuZF8wMDAsXG4gICAgICAgICAgICBuZXdQbGF5ZXJIYW5kXzAwMVxuICAgICAgICAgIF07XG4gICAgICAgICAgaWYgKGNhbGN1bGF0ZUhhbmQobmV3UGxheWVySGFuZCkgPD0gMjEpIHtcbiAgICAgICAgICAgIHZhciBpbml0ID0gZ2FtZVsvKiBib2FyZCAqLzBdO1xuICAgICAgICAgICAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogYm9hcmQgOiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgLyogcGxheWVySGFuZCAqL25ld1BsYXllckhhbmQsXG4gICAgICAgICAgICAgICAgICAgICAgLyogZGVhbGVySGFuZCAqL2luaXRbLyogZGVhbGVySGFuZCAqLzFdXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIC8qIGRlY2sgKi9yZXN0RGVjayxcbiAgICAgICAgICAgICAgICAgICAgLyogZ2FtZVN0YXRlIDogUGxheWVyVHVybiAqLzEsXG4gICAgICAgICAgICAgICAgICAgIC8qIHBsYXllckJldCAqL2dhbWVbLyogcGxheWVyQmV0ICovM10sXG4gICAgICAgICAgICAgICAgICAgIC8qIHBsYXllclRvdGFsICovZ2FtZVsvKiBwbGF5ZXJUb3RhbCAqLzRdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaW5pdCQxID0gZ2FtZVsvKiBib2FyZCAqLzBdO1xuICAgICAgICAgICAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogYm9hcmQgOiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgLyogcGxheWVySGFuZCAqL25ld1BsYXllckhhbmQsXG4gICAgICAgICAgICAgICAgICAgICAgLyogZGVhbGVySGFuZCAqL2luaXQkMVsvKiBkZWFsZXJIYW5kICovMV1cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgLyogZGVjayAqL3Jlc3REZWNrLFxuICAgICAgICAgICAgICAgICAgICAvKiBnYW1lU3RhdGUgOiBQbGF5ZXJCdXN0ICovNCxcbiAgICAgICAgICAgICAgICAgICAgLyogcGxheWVyQmV0ICovZ2FtZVsvKiBwbGF5ZXJCZXQgKi8zXSxcbiAgICAgICAgICAgICAgICAgICAgLyogcGxheWVyVG90YWwgKi9nYW1lWy8qIHBsYXllclRvdGFsICovNF1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5tYXRjaF9mYWlsdXJlLFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIFwibG9naWMucmVcIixcbiAgICAgICAgICAgICAgICAgIDIzMixcbiAgICAgICAgICAgICAgICAgIDhcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICBjYXNlIDIgOiBcbiAgICAgICAgdmFyIGRlYWxlckdhbWUgPSBydW5EZWFsZXJUdXJuKGdhbWUpO1xuICAgICAgICB2YXIgZ2FtZVJlc3VsdDtcbiAgICAgICAgaWYgKGRlYWxlckdhbWVbLyogZ2FtZVN0YXRlICovMl0gPT09IC8qIERlYWxlckJ1c3QgKi81KSB7XG4gICAgICAgICAgZ2FtZVJlc3VsdCA9IGRlYWxlckdhbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHdpbm5lciA9IGZpbmRXaW5uZXIoZGVhbGVyR2FtZVsvKiBib2FyZCAqLzBdKTtcbiAgICAgICAgICBnYW1lUmVzdWx0ID0gLyogcmVjb3JkICovW1xuICAgICAgICAgICAgLyogYm9hcmQgKi9kZWFsZXJHYW1lWy8qIGJvYXJkICovMF0sXG4gICAgICAgICAgICAvKiBkZWNrICovZGVhbGVyR2FtZVsvKiBkZWNrICovMV0sXG4gICAgICAgICAgICAvKiBnYW1lU3RhdGUgKi93aW5uZXIsXG4gICAgICAgICAgICAvKiBwbGF5ZXJCZXQgKi9kZWFsZXJHYW1lWy8qIHBsYXllckJldCAqLzNdLFxuICAgICAgICAgICAgLyogcGxheWVyVG90YWwgKi9kZWFsZXJHYW1lWy8qIHBsYXllclRvdGFsICovNF1cbiAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgICAgLyogYm9hcmQgKi9nYW1lUmVzdWx0Wy8qIGJvYXJkICovMF0sXG4gICAgICAgICAgICAgICAgLyogZGVjayAqL2dhbWVSZXN1bHRbLyogZGVjayAqLzFdLFxuICAgICAgICAgICAgICAgIC8qIGdhbWVTdGF0ZSAqL2dhbWVSZXN1bHRbLyogZ2FtZVN0YXRlICovMl0sXG4gICAgICAgICAgICAgICAgLyogcGxheWVyQmV0ICovZ2FtZVJlc3VsdFsvKiBwbGF5ZXJCZXQgKi8zXSxcbiAgICAgICAgICAgICAgICAvKiBwbGF5ZXJUb3RhbCAqL2dhbWVbLyogcGxheWVyVG90YWwgKi80XSArIGNhbGN1bGF0ZVBheW91dChnYW1lUmVzdWx0KVxuICAgICAgICAgICAgICBdO1xuICAgIGNhc2UgMyA6IFxuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm1hdGNoX2ZhaWx1cmUsXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBcImxvZ2ljLnJlXCIsXG4gICAgICAgICAgICAgICAgMjI5LFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW5IaXQoZ2FtZSkge1xuICB2YXIgbWF0Y2ggPSBnYW1lWy8qIGdhbWVTdGF0ZSAqLzJdO1xuICBpZiAobWF0Y2ggIT09IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FuU3RhbmQoZ2FtZSkge1xuICB2YXIgbWF0Y2ggPSBnYW1lWy8qIGdhbWVTdGF0ZSAqLzJdO1xuICBpZiAobWF0Y2ggIT09IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FuRGVhbChnYW1lKSB7XG4gIHZhciBtYXRjaCA9IGdhbWVbLyogZ2FtZVN0YXRlICovMl07XG4gIGlmIChtYXRjaCAhPT0gMSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG52YXIgZmFjZUNhcmRWYWx1ZSA9IDEwO1xuXG52YXIgYWNlSGlnaFZhbHVlID0gMTE7XG5cbnZhciBhY2VMb3dWYWx1ZSA9IDE7XG5cbnZhciBtYXhWYWx1ZSA9IDIxO1xuXG52YXIgdGVzdEhhbmQgPSAvKiA6OiAqL1tcbiAgLyogcmVjb3JkICovW1xuICAgIC8qIHN1aXQgOiBIZWFydHMgKi8wLFxuICAgIC8qIHN0eWxlIDogSmFjayAqLzBcbiAgXSxcbiAgLyogOjogKi9bXG4gICAgLyogcmVjb3JkICovW1xuICAgICAgLyogc3VpdCA6IEhlYXJ0cyAqLzAsXG4gICAgICAvKiBzdHlsZSA6IFNpbXBsZSAqL1sxXVxuICAgIF0sXG4gICAgLyogW10gKi8wXG4gIF1cbl07XG5cbnZhciBlbXB0eUJvYXJkID0gLyogcmVjb3JkICovW1xuICAvKiBwbGF5ZXJIYW5kIDogW10gKi8wLFxuICAvKiBkZWFsZXJIYW5kIDogW10gKi8wXG5dO1xuXG52YXIgZGVhbGVySGl0VmFsdWUgPSAxNztcblxuZXhwb3J0cy5zdHlsZVRvU3RyaW5nID0gc3R5bGVUb1N0cmluZztcbmV4cG9ydHMuc3VpdFRvU3RyaW5nID0gc3VpdFRvU3RyaW5nO1xuZXhwb3J0cy5mYWNlQ2FyZFZhbHVlID0gZmFjZUNhcmRWYWx1ZTtcbmV4cG9ydHMuY2FyZFZhbHVlID0gY2FyZFZhbHVlO1xuZXhwb3J0cy5hY2VIaWdoVmFsdWUgPSBhY2VIaWdoVmFsdWU7XG5leHBvcnRzLmFjZUxvd1ZhbHVlID0gYWNlTG93VmFsdWU7XG5leHBvcnRzLm1heFZhbHVlID0gbWF4VmFsdWU7XG5leHBvcnRzLmFkZEFjZXMgPSBhZGRBY2VzO1xuZXhwb3J0cy5jYWxjdWxhdGVIYW5kID0gY2FsY3VsYXRlSGFuZDtcbmV4cG9ydHMudGVzdEhhbmQgPSB0ZXN0SGFuZDtcbmV4cG9ydHMucmFuZ2UgPSByYW5nZTtcbmV4cG9ydHMuc3VpdHMgPSBzdWl0cztcbmV4cG9ydHMuZmFjZUNhcmRzID0gZmFjZUNhcmRzO1xuZXhwb3J0cy5zaW1wbGVDYXJkcyA9IHNpbXBsZUNhcmRzO1xuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5leHBvcnRzLmRlZmF1bHREZWNrID0gZGVmYXVsdERlY2s7XG5leHBvcnRzLmVtcHR5Qm9hcmQgPSBlbXB0eUJvYXJkO1xuZXhwb3J0cy5nYW1lU3RhdGVUb1N0cmluZyA9IGdhbWVTdGF0ZVRvU3RyaW5nO1xuZXhwb3J0cy5jYWxjdWxhdGVQYXlvdXQgPSBjYWxjdWxhdGVQYXlvdXQ7XG5leHBvcnRzLmRlYWxJbml0aWFsQ2FyZHMgPSBkZWFsSW5pdGlhbENhcmRzO1xuZXhwb3J0cy5kZWFsZXJIaXRWYWx1ZSA9IGRlYWxlckhpdFZhbHVlO1xuZXhwb3J0cy5kZWFsZXJDYW5QbGF5ID0gZGVhbGVyQ2FuUGxheTtcbmV4cG9ydHMucnVuRGVhbGVyVHVybiA9IHJ1bkRlYWxlclR1cm47XG5leHBvcnRzLmZpbmRXaW5uZXIgPSBmaW5kV2lubmVyO1xuZXhwb3J0cy5ydW5QbGF5ZXJUdXJuID0gcnVuUGxheWVyVHVybjtcbmV4cG9ydHMuY2FuSGl0ID0gY2FuSGl0O1xuZXhwb3J0cy5jYW5TdGFuZCA9IGNhblN0YW5kO1xuZXhwb3J0cy5jYW5EZWFsID0gY2FuRGVhbDtcbi8qIHNpbXBsZUNhcmRzIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIndXNlIHN0cmljdCc7XG5cblxudmFyIGlkID0gWzBdO1xuXG5mdW5jdGlvbiBjYW1sX3NldF9vb19pZChiKSB7XG4gIGJbMV0gPSBpZFswXTtcbiAgaWRbMF0gKz0gMTtcbiAgcmV0dXJuIGI7XG59XG5cbmZ1bmN0aW9uIGdldF9pZCgpIHtcbiAgaWRbMF0gKz0gMTtcbiAgcmV0dXJuIGlkWzBdO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUoc3RyKSB7XG4gIHZhciB2XzAwMSA9IGdldF9pZCgvKiAoKSAqLzApO1xuICB2YXIgdiA9IC8qIHR1cGxlICovW1xuICAgIHN0cixcbiAgICB2XzAwMVxuICBdO1xuICB2LnRhZyA9IDI0ODtcbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIGlzQ2FtbEV4Y2VwdGlvbk9yT3BlblZhcmlhbnQoZSkge1xuICBpZiAoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGUudGFnID09PSAyNDgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xvdCA9IGVbMF07XG4gICAgaWYgKHNsb3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHNsb3QudGFnID09PSAyNDg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0cy5jYW1sX3NldF9vb19pZCA9IGNhbWxfc2V0X29vX2lkO1xuZXhwb3J0cy5nZXRfaWQgPSBnZXRfaWQ7XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmV4cG9ydHMuaXNDYW1sRXhjZXB0aW9uT3JPcGVuVmFyaWFudCA9IGlzQ2FtbEV4Y2VwdGlvbk9yT3BlblZhcmlhbnQ7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIF9fKHRhZywgYmxvY2spIHtcbiAgYmxvY2sudGFnID0gdGFnO1xuICByZXR1cm4gYmxvY2s7XG59XG5cbmV4cG9ydHMuX18gPSBfXztcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZSgncmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQnKTtcblxudmFyIF9DaGlsZE1hcHBpbmcgPSByZXF1aXJlKCcuL3V0aWxzL0NoaWxkTWFwcGluZycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBgPFRyYW5zaXRpb25Hcm91cD5gIHJlbmRlcnMgYSBgPGRpdj5gIGJ5IGRlZmF1bHQuIFlvdSBjYW4gY2hhbmdlIHRoaXNcbiAgICogYmVoYXZpb3IgYnkgcHJvdmlkaW5nIGEgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogSWYgeW91IHVzZSBSZWFjdCB2MTYrIGFuZCB3b3VsZCBsaWtlIHRvIGF2b2lkIGEgd3JhcHBpbmcgYDxkaXY+YCBlbGVtZW50XG4gICAqIHlvdSBjYW4gcGFzcyBpbiBgY29tcG9uZW50PXtudWxsfWAuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSB3cmFwcGluZyBkaXZcbiAgICogYm9ya3MgeW91ciBjc3Mgc3R5bGVzLlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgLyoqXG4gICAqIEEgc2V0IG9mIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudHMsIHRoYXQgYXJlIHRvZ2dsZWQgYGluYCBhbmQgb3V0IGFzIHRoZXlcbiAgICogbGVhdmUuIHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIHdpbGwgaW5qZWN0IHNwZWNpZmljIHRyYW5zaXRpb24gcHJvcHMsIHNvXG4gICAqIHJlbWVtYmVyIHRvIHNwcmVhZCB0aGVtIHRocm91Z2ggaWYgeW91IGFyZSB3cmFwcGluZyB0aGUgYDxUcmFuc2l0aW9uPmAgYXNcbiAgICogd2l0aCBvdXIgYDxGYWRlPmAgZXhhbXBsZS5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgYXBwZWFyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGFwcGVhcjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBlbnRlciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBleGl0aW5nLlxuICAgKiBUaGlzIGlzIGdlbmVyYWxseSBkb25lIGJ5IHVzaW5nIGBjbG9uZUVsZW1lbnRgIGhvd2V2ZXIgaW4gdGhlIGNhc2Ugb2YgYW4gZXhpdGluZ1xuICAgKiBjaGlsZCB0aGUgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYW5kIG5vdCBhY2Nlc3NpYmxlIHRvIHRoZSBjb25zdW1lci5cbiAgICpcbiAgICogSWYgeW91IGRvIG5lZWQgdG8gdXBkYXRlIGEgY2hpbGQgYXMgaXQgbGVhdmVzIHlvdSBjYW4gcHJvdmlkZSBhIGBjaGlsZEZhY3RvcnlgXG4gICAqIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmUgbGVhdmluZy5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24oY2hpbGQ6IFJlYWN0RWxlbWVudCkgLT4gUmVhY3RFbGVtZW50XG4gICAqL1xuICBjaGlsZEZhY3Rvcnk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgY2hpbGRGYWN0b3J5OiBmdW5jdGlvbiBjaGlsZEZhY3RvcnkoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50c1xuICAgKiBpbiBhIGxpc3QuIExpa2Ugd2l0aCB0aGUgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50LCBgPFRyYW5zaXRpb25Hcm91cD5gLCBpcyBhXG4gICAqIHN0YXRlIG1hY2hpbmUgZm9yIG1hbmFnaW5nIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXJcbiAgICogdGltZS5cbiAgICpcbiAgICogQ29uc2lkZXIgdGhlIGV4YW1wbGUgYmVsb3cgdXNpbmcgdGhlIGBGYWRlYCBDU1MgdHJhbnNpdGlvbiBmcm9tIGJlZm9yZS5cbiAgICogQXMgaXRlbXMgYXJlIHJlbW92ZWQgb3IgYWRkZWQgdG8gdGhlIFRvZG9MaXN0IHRoZSBgaW5gIHByb3AgaXMgdG9nZ2xlZFxuICAgKiBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gLiBZb3UgY2FuIHVzZSBfYW55XyBgPFRyYW5zaXRpb24+YFxuICAgKiBjb21wb25lbnQgaW4gYSBgPFRyYW5zaXRpb25Hcm91cD5gLCBub3QganVzdCBjc3MuXG4gICAqXG4gICAqICMjIEV4YW1wbGVcbiAgICpcbiAgICogPGlmcmFtZSBzcmM9XCJodHRwczovL2NvZGVzYW5kYm94LmlvL2VtYmVkLzAwcnF5bzI2a24/Zm9udHNpemU9MTRcIiBzdHlsZT1cIndpZHRoOjEwMCU7IGhlaWdodDo1MDBweDsgYm9yZGVyOjA7IGJvcmRlci1yYWRpdXM6IDRweDsgb3ZlcmZsb3c6aGlkZGVuO1wiIHNhbmRib3g9XCJhbGxvdy1tb2RhbHMgYWxsb3ctZm9ybXMgYWxsb3ctcG9wdXBzIGFsbG93LXNjcmlwdHMgYWxsb3ctc2FtZS1vcmlnaW5cIj48L2lmcmFtZT5cbiAgICpcbiAgICogTm90ZSB0aGF0IGA8VHJhbnNpdGlvbkdyb3VwPmAgIGRvZXMgbm90IGRlZmluZSBhbnkgYW5pbWF0aW9uIGJlaGF2aW9yIVxuICAgKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIGA8VHJhbnNpdGlvbj5gXG4gICAqIGNvbXBvbmVudHMuIFRoaXMgbWVhbnMgeW91IGNhbiBtaXggYW5kIG1hdGNoIGFuaW1hdGlvbnMgYWNyb3NzIGRpZmZlcmVudFxuICAgKiBsaXN0IGl0ZW1zLlxuICAgKi9cbn07XG52YXIgVHJhbnNpdGlvbkdyb3VwID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zaXRpb25Hcm91cCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfdGhpcyk7XG5cbiAgICAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uR3JvdXA6IHsgaXNNb3VudGluZzogIXRoaXMuYXBwZWFyZWQgfVxuICAgIH07XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuYXBwZWFyZWQgPSB0cnVlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBmaXJzdFJlbmRlciA/ICgwLCBfQ2hpbGRNYXBwaW5nLmdldEluaXRpYWxDaGlsZE1hcHBpbmcpKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6ICgwLCBfQ2hpbGRNYXBwaW5nLmdldE5leHRDaGlsZE1hcHBpbmcpKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoY2hpbGQsIG5vZGUpIHtcbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykodGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICBpZiAoY2hpbGQua2V5IGluIGN1cnJlbnRDaGlsZE1hcHBpbmcpIHJldHVybjtcblxuICAgIGlmIChjaGlsZC5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgY2hpbGQucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgcmV0dXJuIHsgY2hpbGRyZW46IGNoaWxkcmVuIH07XG4gICAgfSk7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnQsXG4gICAgICAgIGNoaWxkRmFjdG9yeSA9IF9wcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjb21wb25lbnQnLCAnY2hpbGRGYWN0b3J5J10pO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuXG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmV4aXQ7XG5cbiAgICBpZiAoQ29tcG9uZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIENvbXBvbmVudCxcbiAgICAgIHByb3BzLFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uR3JvdXA7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoVHJhbnNpdGlvbkdyb3VwKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gZXhwb3J0cy50aW1lb3V0c1NoYXBlID0gdW5kZWZpbmVkO1xuZXhwb3J0cy50cmFuc2l0aW9uVGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdHJhbnNpdGlvblRpbWVvdXQodHJhbnNpdGlvblR5cGUpIHtcbiAgdmFyIHRpbWVvdXRQcm9wTmFtZSA9ICd0cmFuc2l0aW9uJyArIHRyYW5zaXRpb25UeXBlICsgJ1RpbWVvdXQnO1xuICB2YXIgZW5hYmxlZFByb3BOYW1lID0gJ3RyYW5zaXRpb24nICsgdHJhbnNpdGlvblR5cGU7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIC8vIElmIHRoZSB0cmFuc2l0aW9uIGlzIGVuYWJsZWRcbiAgICBpZiAocHJvcHNbZW5hYmxlZFByb3BOYW1lXSkge1xuICAgICAgLy8gSWYgbm8gdGltZW91dCBkdXJhdGlvbiBpcyBwcm92aWRlZFxuICAgICAgaWYgKHByb3BzW3RpbWVvdXRQcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKHRpbWVvdXRQcm9wTmFtZSArICcgd2FzblxcJ3Qgc3VwcGxpZWQgdG8gQ1NTVHJhbnNpdGlvbkdyb3VwOiAnICsgJ3RoaXMgY2FuIGNhdXNlIHVucmVsaWFibGUgYW5pbWF0aW9ucyBhbmQgd29uXFwndCBiZSBzdXBwb3J0ZWQgaW4gJyArICdhIGZ1dHVyZSB2ZXJzaW9uIG9mIFJlYWN0LiBTZWUgJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWFuaW1hdGlvbi10cmFuc2l0aW9uLWdyb3VwLXRpbWVvdXQgZm9yIG1vcmUgJyArICdpbmZvcm1hdGlvbi4nKTtcblxuICAgICAgICAvLyBJZiB0aGUgZHVyYXRpb24gaXNuJ3QgYSBudW1iZXJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3BzW3RpbWVvdXRQcm9wTmFtZV0gIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyBtdXN0IGJlIGEgbnVtYmVyIChpbiBtaWxsaXNlY29uZHMpJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbnZhciB0aW1lb3V0c1NoYXBlID0gZXhwb3J0cy50aW1lb3V0c1NoYXBlID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBleGl0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxufSkuaXNSZXF1aXJlZF0pO1xuXG52YXIgY2xhc3NOYW1lc1NoYXBlID0gZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhY3RpdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG59KSwgX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJEb25lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJBY3RpdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdERvbmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0QWN0aXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufSldKTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICBpZiAoc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICAvLyBVc2UgdGhlIHNldFN0YXRlKCkgdXBkYXRlciB0byBlbnN1cmUgc3RhdGUgaXNuJ3Qgc3RhbGUgaW4gY2VydGFpbiBlZGdlIGNhc2VzLlxuICBmdW5jdGlvbiB1cGRhdGVyKHByZXZTdGF0ZSkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcbiAgICByZXR1cm4gc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCA/IHN0YXRlIDogbnVsbDtcbiAgfVxuICAvLyBCaW5kaW5nIFwidGhpc1wiIGlzIGltcG9ydGFudCBmb3Igc2hhbGxvdyByZW5kZXJlciBzdXBwb3J0LlxuICB0aGlzLnNldFN0YXRlKHVwZGF0ZXIuYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcHJldlByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgcHJldlN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnByb3BzID0gbmV4dFByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgPSB0cnVlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3QgPSB0aGlzLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0aGlzLnByb3BzID0gcHJldlByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBwcmV2U3RhdGU7XG4gIH1cbn1cblxuLy8gUmVhY3QgbWF5IHdhcm4gYWJvdXQgY1dNL2NXUlAvY1dVIG1ldGhvZHMgYmVpbmcgZGVwcmVjYXRlZC5cbi8vIEFkZCBhIGZsYWcgdG8gc3VwcHJlc3MgdGhlc2Ugd2FybmluZ3MgZm9yIHRoaXMgc3BlY2lhbCBjYXNlLlxuY29tcG9uZW50V2lsbE1vdW50Ll9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxVcGRhdGUuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKENvbXBvbmVudCkge1xuICB2YXIgcHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuICBpZiAoIXByb3RvdHlwZSB8fCAhcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBvbmx5IHBvbHlmaWxsIGNsYXNzIGNvbXBvbmVudHMnKTtcbiAgfVxuXG4gIGlmIChcbiAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuXG4gIC8vIElmIG5ldyBjb21wb25lbnQgQVBJcyBhcmUgZGVmaW5lZCwgXCJ1bnNhZmVcIiBsaWZlY3ljbGVzIHdvbid0IGJlIGNhbGxlZC5cbiAgLy8gRXJyb3IgaWYgYW55IG9mIHRoZXNlIGxpZmVjeWNsZXMgYXJlIHByZXNlbnQsXG4gIC8vIEJlY2F1c2UgdGhleSB3b3VsZCB3b3JrIGRpZmZlcmVudGx5IGJldHdlZW4gb2xkZXIgYW5kIG5ld2VyICgxNi4zKykgdmVyc2lvbnMgb2YgUmVhY3QuXG4gIHZhciBmb3VuZFdpbGxNb3VudE5hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxVcGRhdGVOYW1lID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsTW91bnQnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdjb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH1cbiAgaWYgKFxuICAgIGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsXG4gICkge1xuICAgIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lO1xuICAgIHZhciBuZXdBcGlOYW1lID1cbiAgICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpJ1xuICAgICAgICA6ICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpJztcblxuICAgIHRocm93IEVycm9yKFxuICAgICAgJ1Vuc2FmZSBsZWdhY3kgbGlmZWN5Y2xlcyB3aWxsIG5vdCBiZSBjYWxsZWQgZm9yIGNvbXBvbmVudHMgdXNpbmcgbmV3IGNvbXBvbmVudCBBUElzLlxcblxcbicgK1xuICAgICAgICBjb21wb25lbnROYW1lICtcbiAgICAgICAgJyB1c2VzICcgK1xuICAgICAgICBuZXdBcGlOYW1lICtcbiAgICAgICAgJyBidXQgYWxzbyBjb250YWlucyB0aGUgZm9sbG93aW5nIGxlZ2FjeSBsaWZlY3ljbGVzOicgK1xuICAgICAgICAoZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbE1vdW50TmFtZSA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsXG4gICAgICAgICAgPyAnXFxuICAnICsgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZVxuICAgICAgICAgIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsVXBkYXRlTmFtZSA6ICcnKSArXG4gICAgICAgICdcXG5cXG5UaGUgYWJvdmUgbGlmZWN5Y2xlcyBzaG91bGQgYmUgcmVtb3ZlZC4gTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTpcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcydcbiAgICApO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXTSBhbmQgY1dSUCB0byBpbnZva2UgdGhlIG5ldyBzdGF0aWMgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGVzZSBsaWZlY3ljbGVzIGlmIGdEU0ZQIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGNvbXBvbmVudFdpbGxNb3VudDtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXVSB0byBpbnZva2UgdGhlIG5ldyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoYXQgbGlmZWN5Y2xlIGlmIGdTQlUgZXhpc3RzLlxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IHBvbHlmaWxsIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgZm9yIGNvbXBvbmVudHMgdGhhdCBkbyBub3QgZGVmaW5lIGNvbXBvbmVudERpZFVwZGF0ZSgpIG9uIHRoZSBwcm90b3R5cGUnXG4gICAgICApO1xuICAgIH1cblxuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gY29tcG9uZW50V2lsbFVwZGF0ZTtcblxuICAgIHZhciBjb21wb25lbnREaWRVcGRhdGUgPSBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlO1xuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVBvbHlmaWxsKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlLFxuICAgICAgbWF5YmVTbmFwc2hvdFxuICAgICkge1xuICAgICAgLy8gMTYuMysgd2lsbCBub3QgZXhlY3V0ZSBvdXIgd2lsbC11cGRhdGUgbWV0aG9kO1xuICAgICAgLy8gSXQgd2lsbCBwYXNzIGEgc25hcHNob3QgdmFsdWUgdG8gZGlkLXVwZGF0ZSB0aG91Z2guXG4gICAgICAvLyBPbGRlciB2ZXJzaW9ucyB3aWxsIHJlcXVpcmUgb3VyIHBvbHlmaWxsZWQgd2lsbC11cGRhdGUgdmFsdWUuXG4gICAgICAvLyBXZSBuZWVkIHRvIGhhbmRsZSBib3RoIGNhc2VzLCBidXQgY2FuJ3QganVzdCBjaGVjayBmb3IgdGhlIHByZXNlbmNlIG9mIFwibWF5YmVTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBmb3IgPD0gMTUueCB2ZXJzaW9ucyB0aGlzIG1pZ2h0IGJlIGEgXCJwcmV2Q29udGV4dFwiIG9iamVjdC5cbiAgICAgIC8vIFdlIGFsc28gY2FuJ3QganVzdCBjaGVjayBcIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGdldC1zbmFwc2hvdCBtaWdodCByZXR1cm4gYSBmYWxzeSB2YWx1ZS5cbiAgICAgIC8vIFNvIGNoZWNrIGZvciB0aGUgZXhwbGljaXQgX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIGZsYWcgdG8gZGV0ZXJtaW5lIGJlaGF2aW9yLlxuICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWdcbiAgICAgICAgPyB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XG4gICAgICAgIDogbWF5YmVTbmFwc2hvdDtcblxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlLmNhbGwodGhpcywgcHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn1cblxuZXhwb3J0IHsgcG9seWZpbGwgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuRVhJVElORyA9IGV4cG9ydHMuRU5URVJFRCA9IGV4cG9ydHMuRU5URVJJTkcgPSBleHBvcnRzLkVYSVRFRCA9IGV4cG9ydHMuVU5NT1VOVEVEID0gdW5kZWZpbmVkO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIFByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZSgncmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQnKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKCcuL3V0aWxzL1Byb3BUeXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFVOTU9VTlRFRCA9IGV4cG9ydHMuVU5NT1VOVEVEID0gJ3VubW91bnRlZCc7XG52YXIgRVhJVEVEID0gZXhwb3J0cy5FWElURUQgPSAnZXhpdGVkJztcbnZhciBFTlRFUklORyA9IGV4cG9ydHMuRU5URVJJTkcgPSAnZW50ZXJpbmcnO1xudmFyIEVOVEVSRUQgPSBleHBvcnRzLkVOVEVSRUQgPSAnZW50ZXJlZCc7XG52YXIgRVhJVElORyA9IGV4cG9ydHMuRVhJVElORyA9ICdleGl0aW5nJztcblxuLyoqXG4gKiBUaGUgVHJhbnNpdGlvbiBjb21wb25lbnQgbGV0cyB5b3UgZGVzY3JpYmUgYSB0cmFuc2l0aW9uIGZyb20gb25lIGNvbXBvbmVudFxuICogc3RhdGUgdG8gYW5vdGhlciBfb3ZlciB0aW1lXyB3aXRoIGEgc2ltcGxlIGRlY2xhcmF0aXZlIEFQSS4gTW9zdCBjb21tb25seVxuICogaXQncyB1c2VkIHRvIGFuaW1hdGUgdGhlIG1vdW50aW5nIGFuZCB1bm1vdW50aW5nIG9mIGEgY29tcG9uZW50LCBidXQgY2FuIGFsc29cbiAqIGJlIHVzZWQgdG8gZGVzY3JpYmUgaW4tcGxhY2UgdHJhbnNpdGlvbiBzdGF0ZXMgYXMgd2VsbC5cbiAqXG4gKiBCeSBkZWZhdWx0IHRoZSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IGRvZXMgbm90IGFsdGVyIHRoZSBiZWhhdmlvciBvZiB0aGVcbiAqIGNvbXBvbmVudCBpdCByZW5kZXJzLCBpdCBvbmx5IHRyYWNrcyBcImVudGVyXCIgYW5kIFwiZXhpdFwiIHN0YXRlcyBmb3IgdGhlIGNvbXBvbmVudHMuXG4gKiBJdCdzIHVwIHRvIHlvdSB0byBnaXZlIG1lYW5pbmcgYW5kIGVmZmVjdCB0byB0aG9zZSBzdGF0ZXMuIEZvciBleGFtcGxlIHdlIGNhblxuICogYWRkIHN0eWxlcyB0byBhIGNvbXBvbmVudCB3aGVuIGl0IGVudGVycyBvciBleGl0czpcbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCBUcmFuc2l0aW9uIGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbic7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAwIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAgeyhzdGF0ZSkgPT4gKFxuICogICAgICAgPGRpdiBzdHlsZT17e1xuICogICAgICAgICAuLi5kZWZhdWx0U3R5bGUsXG4gKiAgICAgICAgIC4uLnRyYW5zaXRpb25TdHlsZXNbc3RhdGVdXG4gKiAgICAgICB9fT5cbiAqICAgICAgICAgSSdtIGEgZmFkZSBUcmFuc2l0aW9uIVxuICogICAgICAgPC9kaXY+XG4gKiAgICAgKX1cbiAqICAgPC9UcmFuc2l0aW9uPlxuICogKTtcbiAqIGBgYFxuICpcbiAqIEFzIG5vdGVkIHRoZSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IGRvZXNuJ3QgX2RvXyBhbnl0aGluZyBieSBpdHNlbGYgdG8gaXRzIGNoaWxkIGNvbXBvbmVudC5cbiAqIFdoYXQgaXQgZG9lcyBkbyBpcyB0cmFjayB0cmFuc2l0aW9uIHN0YXRlcyBvdmVyIHRpbWUgc28geW91IGNhbiB1cGRhdGUgdGhlXG4gKiBjb21wb25lbnQgKHN1Y2ggYXMgYnkgYWRkaW5nIHN0eWxlcyBvciBjbGFzc2VzKSB3aGVuIGl0IGNoYW5nZXMgc3RhdGVzLlxuICpcbiAqIFRoZXJlIGFyZSA0IG1haW4gc3RhdGVzIGEgVHJhbnNpdGlvbiBjYW4gYmUgaW46XG4gKiAgLSBgJ2VudGVyaW5nJ2BcbiAqICAtIGAnZW50ZXJlZCdgXG4gKiAgLSBgJ2V4aXRpbmcnYFxuICogIC0gYCdleGl0ZWQnYFxuICpcbiAqIFRyYW5zaXRpb24gc3RhdGUgaXMgdG9nZ2xlZCB2aWEgdGhlIGBpbmAgcHJvcC4gV2hlbiBgdHJ1ZWAgdGhlIGNvbXBvbmVudCBiZWdpbnMgdGhlXG4gKiBcIkVudGVyXCIgc3RhZ2UuIER1cmluZyB0aGlzIHN0YWdlLCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgZnJvbSBpdHMgY3VycmVudCB0cmFuc2l0aW9uIHN0YXRlLFxuICogdG8gYCdlbnRlcmluZydgIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24gYW5kIHRoZW4gdG8gdGhlIGAnZW50ZXJlZCdgIHN0YWdlIG9uY2VcbiAqIGl0J3MgY29tcGxldGUuIExldCdzIHRha2UgdGhlIGZvbGxvd2luZyBleGFtcGxlOlxuICpcbiAqIGBgYGpzeFxuICogc3RhdGUgPSB7IGluOiBmYWxzZSB9O1xuICpcbiAqIHRvZ2dsZUVudGVyU3RhdGUgPSAoKSA9PiB7XG4gKiAgIHRoaXMuc2V0U3RhdGUoeyBpbjogdHJ1ZSB9KTtcbiAqIH1cbiAqXG4gKiByZW5kZXIoKSB7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXs1MDB9IC8+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMudG9nZ2xlRW50ZXJTdGF0ZX0+Q2xpY2sgdG8gRW50ZXI8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCB0byB0aGUgYCdlbnRlcmluZydgIHN0YXRlIGFuZFxuICogc3RheSB0aGVyZSBmb3IgNTAwbXMgKHRoZSB2YWx1ZSBvZiBgdGltZW91dGApIGJlZm9yZSBpdCBmaW5hbGx5IHN3aXRjaGVzIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tIGAnZXhpdGluZydgIHRvIGAnZXhpdGVkJ2AuXG4gKlxuICogIyMgVGltaW5nXG4gKlxuICogVGltaW5nIGlzIG9mdGVuIHRoZSB0cmlja2llc3QgcGFydCBvZiBhbmltYXRpb24sIG1pc3Rha2VzIGNhbiByZXN1bHQgaW4gc2xpZ2h0IGRlbGF5c1xuICogdGhhdCBhcmUgaGFyZCB0byBwaW4gZG93bi4gQSBjb21tb24gZXhhbXBsZSBpcyB3aGVuIHlvdSB3YW50IHRvIGFkZCBhbiBleGl0IHRyYW5zaXRpb24sXG4gKiB5b3Ugc2hvdWxkIHNldCB0aGUgZGVzaXJlZCBmaW5hbCBzdHlsZXMgd2hlbiB0aGUgc3RhdGUgaXMgYCdleGl0aW5nJ2AuIFRoYXQncyB3aGVuIHRoZVxuICogdHJhbnNpdGlvbiB0byB0aG9zZSBzdHlsZXMgd2lsbCBzdGFydCBhbmQsIGlmIHlvdSBtYXRjaGVkIHRoZSBgdGltZW91dGAgcHJvcCB3aXRoIHRoZVxuICogQ1NTIFRyYW5zaXRpb24gZHVyYXRpb24sIGl0IHdpbGwgZW5kIGV4YWN0bHkgd2hlbiB0aGUgc3RhdGUgY2hhbmdlcyB0byBgJ2V4aXRlZCdgLlxuICpcbiAqID4gKipOb3RlKio6IEZvciBzaW1wbGVyIHRyYW5zaXRpb25zIHRoZSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IG1pZ2h0IGJlIGVub3VnaCwgYnV0XG4gKiA+IHRha2UgaW50byBhY2NvdW50IHRoYXQgaXQncyBwbGF0Zm9ybS1hZ25vc3RpYywgd2hpbGUgdGhlIGBDU1NUcmFuc2l0aW9uYCBjb21wb25lbnRcbiAqID4gW2ZvcmNlcyByZWZsb3dzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvNTAwNzMwM2U3MjlhNzRiZTY2YTIxYzNlMjIwNWU0OTE2ODIxNTI0Yi9zcmMvQ1NTVHJhbnNpdGlvbi5qcyNMMjA4LUwyMTUpXG4gKiA+IGluIG9yZGVyIHRvIG1ha2UgbW9yZSBjb21wbGV4IHRyYW5zaXRpb25zIG1vcmUgcHJlZGljdGFibGUuIEZvciBleGFtcGxlLCBldmVuIHRob3VnaFxuICogPiBjbGFzc2VzIGBleGFtcGxlLWVudGVyYCBhbmQgYGV4YW1wbGUtZW50ZXItYWN0aXZlYCBhcmUgYXBwbGllZCBpbW1lZGlhdGVseSBvbmUgYWZ0ZXJcbiAqID4gYW5vdGhlciwgeW91IGNhbiBzdGlsbCB0cmFuc2l0aW9uIGZyb20gb25lIHRvIHRoZSBvdGhlciBiZWNhdXNlIG9mIHRoZSBmb3JjZWQgcmVmbG93XG4gKiA+IChyZWFkIFt0aGlzIGlzc3VlXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2lzc3Vlcy8xNTkjaXNzdWVjb21tZW50LTMyMjc2MTE3MSlcbiAqID4gZm9yIG1vcmUgaW5mbykuIFRha2UgdGhpcyBpbnRvIGFjY291bnQgd2hlbiBjaG9vc2luZyBiZXR3ZWVuIGBUcmFuc2l0aW9uYCBhbmRcbiAqID4gYENTU1RyYW5zaXRpb25gLlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiA8aWZyYW1lIHNyYz1cImh0dHBzOi8vY29kZXNhbmRib3guaW8vZW1iZWQvNzQxb3A0bW1qMD9mb250c2l6ZT0xNFwiIHN0eWxlPVwid2lkdGg6MTAwJTsgaGVpZ2h0OjUwMHB4OyBib3JkZXI6MDsgYm9yZGVyLXJhZGl1czogNHB4OyBvdmVyZmxvdzpoaWRkZW47XCIgc2FuZGJveD1cImFsbG93LW1vZGFscyBhbGxvdy1mb3JtcyBhbGxvdy1wb3B1cHMgYWxsb3ctc2NyaXB0cyBhbGxvdy1zYW1lLW9yaWdpblwiPjwvaWZyYW1lPlxuICpcbiAqL1xuXG52YXIgVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zaXRpb24pO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0LnRyYW5zaXRpb25Hcm91cDtcbiAgICAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuXG4gICAgdmFyIGluaXRpYWxTdGF0dXMgPSB2b2lkIDA7XG5cbiAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVOVEVSRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy51bm1vdW50T25FeGl0IHx8IHByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gVU5NT1VOVEVEO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHsgc3RhdHVzOiBpbml0aWFsU3RhdHVzIH07XG5cbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4geyB0cmFuc2l0aW9uR3JvdXA6IG51bGwgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICB9O1xuICB9O1xuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7IHN0YXR1czogRVhJVEVEIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcblxuICAvLyAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9XG5cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgbmV4dFN0YXR1cyA9IG51bGw7XG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgfTtcblxuICBUcmFuc2l0aW9uLnByb3RvdHlwZS5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuXG4gICAgdmFyIGV4aXQgPSB2b2lkIDAsXG4gICAgICAgIGVudGVyID0gdm9pZCAwLFxuICAgICAgICBhcHBlYXIgPSB2b2lkIDA7XG5cbiAgICBleGl0ID0gZW50ZXIgPSBhcHBlYXIgPSB0aW1lb3V0O1xuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCAmJiB0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGV4aXQgPSB0aW1lb3V0LmV4aXQ7XG4gICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7XG4gICAgICBhcHBlYXIgPSB0aW1lb3V0LmFwcGVhcjtcbiAgICB9XG4gICAgcmV0dXJuIHsgZXhpdDogZXhpdCwgZW50ZXI6IGVudGVyLCBhcHBlYXI6IGFwcGVhciB9O1xuICB9O1xuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cygpIHtcbiAgICB2YXIgbW91bnRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdHVzID0gYXJndW1lbnRzWzFdO1xuXG4gICAgaWYgKG5leHRTdGF0dXMgIT09IG51bGwpIHtcbiAgICAgIC8vIG5leHRTdGF0dXMgd2lsbCBhbHdheXMgYmUgRU5URVJJTkcgb3IgRVhJVElORy5cbiAgICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gICAgICB2YXIgbm9kZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnVubW91bnRPbkV4aXQgJiYgdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEVYSVRFRCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN0YXR1czogVU5NT1VOVEVEIH0pO1xuICAgIH1cbiAgfTtcblxuICBUcmFuc2l0aW9uLnByb3RvdHlwZS5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG5cbiAgICB2YXIgYXBwZWFyaW5nID0gdGhpcy5jb250ZXh0LnRyYW5zaXRpb25Hcm91cCA/IHRoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuXG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuXG4gICAgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG4gICAgaWYgKCFtb3VudGluZyAmJiAhZW50ZXIpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHsgc3RhdHVzOiBFTlRFUkVEIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuXG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoeyBzdGF0dXM6IEVOVEVSSU5HIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyaW5nKG5vZGUsIGFwcGVhcmluZyk7XG5cbiAgICAgIC8vIEZJWE1FOiBhcHBlYXIgdGltZW91dD9cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZW50ZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7IHN0YXR1czogRU5URVJFRCB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlLCBhcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLnBlcmZvcm1FeGl0ID0gZnVuY3Rpb24gcGVyZm9ybUV4aXQobm9kZSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG5cbiAgICAvLyBubyBleGl0IGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVYSVRFRFxuICAgIGlmICghZXhpdCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoeyBzdGF0dXM6IEVYSVRFRCB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLm9uRXhpdChub2RlKTtcblxuICAgIHRoaXMuc2FmZVNldFN0YXRlKHsgc3RhdHVzOiBFWElUSU5HIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHsgc3RhdHVzOiBFWElURUQgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBUcmFuc2l0aW9uLnByb3RvdHlwZS5jYW5jZWxOZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBjYW5jZWxOZXh0Q2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMubmV4dENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwoKTtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgVHJhbnNpdGlvbi5wcm90b3R5cGUuc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG5cbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMubmV4dENhbGxiYWNrO1xuICB9O1xuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG5cbiAgICBpZiAobm9kZSkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcihub2RlLCB0aGlzLm5leHRDYWxsYmFjayk7XG4gICAgICB9XG4gICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCAwKTtcbiAgICB9XG4gIH07XG5cbiAgVHJhbnNpdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcbiAgICBpZiAoc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2hpbGRyZW4nXSk7XG4gICAgLy8gZmlsdGVyIHByb3BzIGZvciBUcmFuc3RpdGlvblxuXG5cbiAgICBkZWxldGUgY2hpbGRQcm9wcy5pbjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5tb3VudE9uRW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudW5tb3VudE9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuZXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy50aW1lb3V0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFkZEVuZExpc3RlbmVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmluZztcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyZWQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdGluZztcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRlZDtcblxuICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwgY2hpbGRQcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb247XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuVHJhbnNpdGlvbi5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBmdW5jdGlvbiB0cmFuc2l0aW9uR3JvdXAoKSB7fVxufTtcblxuXG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgYGZ1bmN0aW9uYCBjaGlsZCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGEgUmVhY3QgZWxlbWVudC5cbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uIHN0YXR1c1xuICAgKiAoJ2VudGVyaW5nJywgJ2VudGVyZWQnLCAnZXhpdGluZycsICdleGl0ZWQnLCAndW5tb3VudGVkJyksIHdoaWNoIGNhbiBiZSB1c2VkXG4gICAqIHRvIGFwcGx5IGNvbnRleHQgc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHsoc3RhdHVzKSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdHVzfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5vcm1hbGx5IGEgY29tcG9uZW50IGlzIG5vdCB0cmFuc2l0aW9uZWQgaWYgaXQgaXMgc2hvd24gd2hlbiB0aGUgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50IG1vdW50cy5cbiAgICogSWYgeW91IHdhbnQgdG8gdHJhbnNpdGlvbiBvbiB0aGUgZmlyc3QgbW91bnQgc2V0IGBhcHBlYXJgIHRvIGB0cnVlYCwgYW5kIHRoZVxuICAgKiBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluIGFzIHNvb24gYXMgdGhlIGA8VHJhbnNpdGlvbj5gIG1vdW50cy5cbiAgICpcbiAgICogPiBOb3RlOiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgXCJhcHBlYXJcIiBzdGF0ZXMuIGBhcHBlYXJgIG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGBlbnRlcmAgdHJhbnNpdGlvbi5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGVudGVyIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZFxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zIGxpa2U6IGB0aW1lb3V0PXs1MDB9YCxcbiAgICogb3IgaW5kaXZpZHVhbGx5IGxpa2U6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBwdCA9IF9Qcm9wVHlwZXMudGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG4gICAgcmV0dXJuIHB0LmFwcGx5KHVuZGVmaW5lZCwgW3Byb3BzXS5jb25jYXQoYXJncykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmdcbiAgICogRE9NIG5vZGUgYW5kIGEgYGRvbmVgIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiAqKk5vdGU6KiogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xuXG4gIC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cbn0gOiB7fTtmdW5jdGlvbiBub29wKCkge31cblxuVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGVudGVyOiB0cnVlLFxuICBleGl0OiB0cnVlLFxuXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcblxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5cblRyYW5zaXRpb24uVU5NT1VOVEVEID0gMDtcblRyYW5zaXRpb24uRVhJVEVEID0gMTtcblRyYW5zaXRpb24uRU5URVJJTkcgPSAyO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gMztcblRyYW5zaXRpb24uRVhJVElORyA9IDQ7XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShUcmFuc2l0aW9uKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBDdXJyeSA9IHJlcXVpcmUoXCIuL2N1cnJ5LmpzXCIpO1xudmFyIEpzX2V4biA9IHJlcXVpcmUoXCIuL2pzX2V4bi5qc1wiKTtcbnZhciBDYW1sX2FycmF5ID0gcmVxdWlyZShcIi4vY2FtbF9hcnJheS5qc1wiKTtcbnZhciBDYW1sX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2V4Y2VwdGlvbnMuanNcIik7XG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gaW5pdChsLCBmKSB7XG4gIGlmIChsID09PSAwKSB7XG4gICAgcmV0dXJuIC8qIGFycmF5ICovW107XG4gIH0gZWxzZSBpZiAobCA8IDApIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkFycmF5LmluaXRcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHZhciByZXMgPSBDYW1sX2FycmF5LmNhbWxfbWFrZV92ZWN0KGwsIEN1cnJ5Ll8xKGYsIDApKTtcbiAgICBmb3IodmFyIGkgPSAxICxpX2ZpbmlzaCA9IGwgLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgIHJlc1tpXSA9IEN1cnJ5Ll8xKGYsIGkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VfbWF0cml4KHN4LCBzeSwgaW5pdCkge1xuICB2YXIgcmVzID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdChzeCwgLyogYXJyYXkgKi9bXSk7XG4gIGZvcih2YXIgeCA9IDAgLHhfZmluaXNoID0gc3ggLSAxIHwgMDsgeCA8PSB4X2ZpbmlzaDsgKyt4KXtcbiAgICByZXNbeF0gPSBDYW1sX2FycmF5LmNhbWxfbWFrZV92ZWN0KHN5LCBpbml0KTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBjb3B5KGEpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgaWYgKGwgPT09IDApIHtcbiAgICByZXR1cm4gLyogYXJyYXkgKi9bXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ2FtbF9hcnJheS5jYW1sX2FycmF5X3N1YihhLCAwLCBsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBlbmQoYTEsIGEyKSB7XG4gIHZhciBsMSA9IGExLmxlbmd0aDtcbiAgaWYgKGwxID09PSAwKSB7XG4gICAgcmV0dXJuIGNvcHkoYTIpO1xuICB9IGVsc2UgaWYgKGEyLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc3ViKGExLCAwLCBsMSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGExLmNvbmNhdChhMik7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3ViKGEsIG9mcywgbGVuKSB7XG4gIGlmIChsZW4gPCAwIHx8IG9mcyA+IChhLmxlbmd0aCAtIGxlbiB8IDApKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJBcnJheS5zdWJcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc3ViKGEsIG9mcywgbGVuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWxsKGEsIG9mcywgbGVuLCB2KSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKGEubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkFycmF5LmZpbGxcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIGZvcih2YXIgaSA9IG9mcyAsaV9maW5pc2ggPSAob2ZzICsgbGVuIHwgMCkgLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgIGFbaV0gPSB2O1xuICAgIH1cbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJsaXQoYTEsIG9mczEsIGEyLCBvZnMyLCBsZW4pIHtcbiAgaWYgKGxlbiA8IDAgfHwgb2ZzMSA8IDAgfHwgb2ZzMSA+IChhMS5sZW5ndGggLSBsZW4gfCAwKSB8fCBvZnMyIDwgMCB8fCBvZnMyID4gKGEyLmxlbmd0aCAtIGxlbiB8IDApKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJBcnJheS5ibGl0XCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2JsaXQoYTEsIG9mczEsIGEyLCBvZnMyLCBsZW4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGl0ZXIoZiwgYSkge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzEoZiwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gbWFwKGYsIGEpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgaWYgKGwgPT09IDApIHtcbiAgICByZXR1cm4gLyogYXJyYXkgKi9bXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgciA9IENhbWxfYXJyYXkuY2FtbF9tYWtlX3ZlY3QobCwgQ3VycnkuXzEoZiwgYVswXSkpO1xuICAgIGZvcih2YXIgaSA9IDEgLGlfZmluaXNoID0gbCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgICAgcltpXSA9IEN1cnJ5Ll8xKGYsIGFbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBpdGVyaShmLCBhKSB7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gYS5sZW5ndGggLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICBDdXJyeS5fMihmLCBpLCBhW2ldKTtcbiAgfVxuICByZXR1cm4gLyogKCkgKi8wO1xufVxuXG5mdW5jdGlvbiBtYXBpKGYsIGEpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgaWYgKGwgPT09IDApIHtcbiAgICByZXR1cm4gLyogYXJyYXkgKi9bXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgciA9IENhbWxfYXJyYXkuY2FtbF9tYWtlX3ZlY3QobCwgQ3VycnkuXzIoZiwgMCwgYVswXSkpO1xuICAgIGZvcih2YXIgaSA9IDEgLGlfZmluaXNoID0gbCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgICAgcltpXSA9IEN1cnJ5Ll8yKGYsIGksIGFbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b19saXN0KGEpIHtcbiAgdmFyIF9pID0gYS5sZW5ndGggLSAxIHwgMDtcbiAgdmFyIF9yZXMgPSAvKiBbXSAqLzA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcmVzID0gX3JlcztcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2Uge1xuICAgICAgX3JlcyA9IC8qIDo6ICovW1xuICAgICAgICBhW2ldLFxuICAgICAgICByZXNcbiAgICAgIF07XG4gICAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGxpc3RfbGVuZ3RoKF9hY2N1LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIGlmIChwYXJhbSkge1xuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBfYWNjdSA9IGFjY3UgKyAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvZl9saXN0KGwpIHtcbiAgaWYgKGwpIHtcbiAgICB2YXIgYSA9IENhbWxfYXJyYXkuY2FtbF9tYWtlX3ZlY3QobGlzdF9sZW5ndGgoMCwgbCksIGxbMF0pO1xuICAgIHZhciBfaSA9IDE7XG4gICAgdmFyIF9wYXJhbSA9IGxbMV07XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgICAgdmFyIGkgPSBfaTtcbiAgICAgIGlmIChwYXJhbSkge1xuICAgICAgICBhW2ldID0gcGFyYW1bMF07XG4gICAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogYXJyYXkgKi9bXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb2xkX2xlZnQoZiwgeCwgYSkge1xuICB2YXIgciA9IHg7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gYS5sZW5ndGggLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICByID0gQ3VycnkuXzIoZiwgciwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGZvbGRfcmlnaHQoZiwgYSwgeCkge1xuICB2YXIgciA9IHg7XG4gIGZvcih2YXIgaSA9IGEubGVuZ3RoIC0gMSB8IDA7IGkgPj0gMDsgLS1pKXtcbiAgICByID0gQ3VycnkuXzIoZiwgYVtpXSwgcik7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbnZhciBCb3R0b20gPSBDYW1sX2V4Y2VwdGlvbnMuY3JlYXRlKFwiQXJyYXkuQm90dG9tXCIpO1xuXG5mdW5jdGlvbiBzb3J0KGNtcCwgYSkge1xuICB2YXIgbWF4c29uID0gZnVuY3Rpb24gKGwsIGkpIHtcbiAgICB2YXIgaTMxID0gKChpICsgaSB8IDApICsgaSB8IDApICsgMSB8IDA7XG4gICAgdmFyIHggPSBpMzE7XG4gICAgaWYgKChpMzEgKyAyIHwgMCkgPCBsKSB7XG4gICAgICBpZiAoQ3VycnkuXzIoY21wLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIGkzMSksIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaTMxICsgMSB8IDApKSA8IDApIHtcbiAgICAgICAgeCA9IGkzMSArIDEgfCAwO1xuICAgICAgfVxuICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCB4KSwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBpMzEgKyAyIHwgMCkpIDwgMCkge1xuICAgICAgICB4ID0gaTMxICsgMiB8IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4geDtcbiAgICB9IGVsc2UgaWYgKChpMzEgKyAxIHwgMCkgPCBsICYmIEN1cnJ5Ll8yKGNtcCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBpMzEpLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIGkzMSArIDEgfCAwKSkgPCAwKSB7XG4gICAgICByZXR1cm4gaTMxICsgMSB8IDA7XG4gICAgfSBlbHNlIGlmIChpMzEgPCBsKSB7XG4gICAgICByZXR1cm4gaTMxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBCb3R0b20sXG4gICAgICAgICAgICBpXG4gICAgICAgICAgXTtcbiAgICB9XG4gIH07XG4gIHZhciB0cmlja2xlID0gZnVuY3Rpb24gKGwsIGksIGUpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGwkMSA9IGw7XG4gICAgICB2YXIgX2kgPSBpO1xuICAgICAgdmFyIGUkMSA9IGU7XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBpJDEgPSBfaTtcbiAgICAgICAgdmFyIGogPSBtYXhzb24obCQxLCBpJDEpO1xuICAgICAgICBpZiAoQ3VycnkuXzIoY21wLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIGopLCBlJDEpID4gMCkge1xuICAgICAgICAgIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoYSwgaSQxLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIGopKTtcbiAgICAgICAgICBfaSA9IGo7XG4gICAgICAgICAgY29udGludWUgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIGkkMSwgZSQxKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKHJhd19leG4pe1xuICAgICAgdmFyIGV4biA9IEpzX2V4bi5pbnRlcm5hbFRvT0NhbWxFeGNlcHRpb24ocmF3X2V4bik7XG4gICAgICBpZiAoZXhuWzBdID09PSBCb3R0b20pIHtcbiAgICAgICAgcmV0dXJuIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoYSwgZXhuWzFdLCBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGV4bjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHZhciBidWJibGUgPSBmdW5jdGlvbiAobCwgaSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgbCQxID0gbDtcbiAgICAgIHZhciBfaSA9IGk7XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBpJDEgPSBfaTtcbiAgICAgICAgdmFyIGogPSBtYXhzb24obCQxLCBpJDEpO1xuICAgICAgICBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIGkkMSwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBqKSk7XG4gICAgICAgIF9pID0gajtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKHJhd19leG4pe1xuICAgICAgdmFyIGV4biA9IEpzX2V4bi5pbnRlcm5hbFRvT0NhbWxFeGNlcHRpb24ocmF3X2V4bik7XG4gICAgICBpZiAoZXhuWzBdID09PSBCb3R0b20pIHtcbiAgICAgICAgcmV0dXJuIGV4blsxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGV4bjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHZhciB0cmlja2xldXAgPSBmdW5jdGlvbiAoX2ksIGUpIHtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgaSA9IF9pO1xuICAgICAgdmFyIGZhdGhlciA9IChpIC0gMSB8IDApIC8gMyB8IDA7XG4gICAgICBpZiAoaSA9PT0gZmF0aGVyKSB7XG4gICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBcImFycmF5Lm1sXCIsXG4gICAgICAgICAgICAgICAgMTczLFxuICAgICAgICAgICAgICAgIDRcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIGlmIChDdXJyeS5fMihjbXAsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgZmF0aGVyKSwgZSkgPCAwKSB7XG4gICAgICAgIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoYSwgaSwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBmYXRoZXIpKTtcbiAgICAgICAgaWYgKGZhdGhlciA+IDApIHtcbiAgICAgICAgICBfaSA9IGZhdGhlcjtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoYSwgMCwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIGksIGUpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIGZvcih2YXIgaSA9ICgobCArIDEgfCAwKSAvIDMgfCAwKSAtIDEgfCAwOyBpID49IDA7IC0taSl7XG4gICAgdHJpY2tsZShsLCBpLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIGkpKTtcbiAgfVxuICBmb3IodmFyIGkkMSA9IGwgLSAxIHwgMDsgaSQxID49IDI7IC0taSQxKXtcbiAgICB2YXIgZSA9IENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaSQxKTtcbiAgICBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIGkkMSwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCAwKSk7XG4gICAgdHJpY2tsZXVwKGJ1YmJsZShpJDEsIDApLCBlKTtcbiAgfVxuICBpZiAobCA+IDEpIHtcbiAgICB2YXIgZSQxID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCAxKTtcbiAgICBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIDEsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgMCkpO1xuICAgIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIDAsIGUkMSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhYmxlX3NvcnQoY21wLCBhKSB7XG4gIHZhciBtZXJnZSA9IGZ1bmN0aW9uIChzcmMxb2ZzLCBzcmMxbGVuLCBzcmMyLCBzcmMyb2ZzLCBzcmMybGVuLCBkc3QsIGRzdG9mcykge1xuICAgIHZhciBzcmMxciA9IHNyYzFvZnMgKyBzcmMxbGVuIHwgMDtcbiAgICB2YXIgc3JjMnIgPSBzcmMyb2ZzICsgc3JjMmxlbiB8IDA7XG4gICAgdmFyIF9pMSA9IHNyYzFvZnM7XG4gICAgdmFyIF9zMSA9IENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgc3JjMW9mcyk7XG4gICAgdmFyIF9pMiA9IHNyYzJvZnM7XG4gICAgdmFyIF9zMiA9IENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoc3JjMiwgc3JjMm9mcyk7XG4gICAgdmFyIF9kID0gZHN0b2ZzO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBkID0gX2Q7XG4gICAgICB2YXIgczIgPSBfczI7XG4gICAgICB2YXIgaTIgPSBfaTI7XG4gICAgICB2YXIgczEgPSBfczE7XG4gICAgICB2YXIgaTEgPSBfaTE7XG4gICAgICBpZiAoQ3VycnkuXzIoY21wLCBzMSwgczIpIDw9IDApIHtcbiAgICAgICAgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChkc3QsIGQsIHMxKTtcbiAgICAgICAgdmFyIGkxJDEgPSBpMSArIDEgfCAwO1xuICAgICAgICBpZiAoaTEkMSA8IHNyYzFyKSB7XG4gICAgICAgICAgX2QgPSBkICsgMSB8IDA7XG4gICAgICAgICAgX3MxID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBpMSQxKTtcbiAgICAgICAgICBfaTEgPSBpMSQxO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYmxpdChzcmMyLCBpMiwgZHN0LCBkICsgMSB8IDAsIHNyYzJyIC0gaTIgfCAwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChkc3QsIGQsIHMyKTtcbiAgICAgICAgdmFyIGkyJDEgPSBpMiArIDEgfCAwO1xuICAgICAgICBpZiAoaTIkMSA8IHNyYzJyKSB7XG4gICAgICAgICAgX2QgPSBkICsgMSB8IDA7XG4gICAgICAgICAgX3MyID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChzcmMyLCBpMiQxKTtcbiAgICAgICAgICBfaTIgPSBpMiQxO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYmxpdChhLCBpMSwgZHN0LCBkICsgMSB8IDAsIHNyYzFyIC0gaTEgfCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG4gIHZhciBpc29ydHRvID0gZnVuY3Rpb24gKHNyY29mcywgZHN0LCBkc3RvZnMsIGxlbikge1xuICAgIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbGVuIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgICB2YXIgZSA9IENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgc3Jjb2ZzICsgaSB8IDApO1xuICAgICAgdmFyIGogPSAoZHN0b2ZzICsgaSB8IDApIC0gMSB8IDA7XG4gICAgICB3aGlsZShqID49IGRzdG9mcyAmJiBDdXJyeS5fMihjbXAsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoZHN0LCBqKSwgZSkgPiAwKSB7XG4gICAgICAgIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoZHN0LCBqICsgMSB8IDAsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoZHN0LCBqKSk7XG4gICAgICAgIGogPSBqIC0gMSB8IDA7XG4gICAgICB9O1xuICAgICAgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChkc3QsIGogKyAxIHwgMCwgZSk7XG4gICAgfVxuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH07XG4gIHZhciBzb3J0dG8gPSBmdW5jdGlvbiAoc3Jjb2ZzLCBkc3QsIGRzdG9mcywgbGVuKSB7XG4gICAgaWYgKGxlbiA8PSA1KSB7XG4gICAgICByZXR1cm4gaXNvcnR0byhzcmNvZnMsIGRzdCwgZHN0b2ZzLCBsZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbDEgPSBsZW4gLyAyIHwgMDtcbiAgICAgIHZhciBsMiA9IGxlbiAtIGwxIHwgMDtcbiAgICAgIHNvcnR0byhzcmNvZnMgKyBsMSB8IDAsIGRzdCwgZHN0b2ZzICsgbDEgfCAwLCBsMik7XG4gICAgICBzb3J0dG8oc3Jjb2ZzLCBhLCBzcmNvZnMgKyBsMiB8IDAsIGwxKTtcbiAgICAgIHJldHVybiBtZXJnZShzcmNvZnMgKyBsMiB8IDAsIGwxLCBkc3QsIGRzdG9mcyArIGwxIHwgMCwgbDIsIGRzdCwgZHN0b2ZzKTtcbiAgICB9XG4gIH07XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIGlmIChsIDw9IDUpIHtcbiAgICByZXR1cm4gaXNvcnR0bygwLCBhLCAwLCBsKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbDEgPSBsIC8gMiB8IDA7XG4gICAgdmFyIGwyID0gbCAtIGwxIHwgMDtcbiAgICB2YXIgdCA9IENhbWxfYXJyYXkuY2FtbF9tYWtlX3ZlY3QobDIsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgMCkpO1xuICAgIHNvcnR0byhsMSwgdCwgMCwgbDIpO1xuICAgIHNvcnR0bygwLCBhLCBsMiwgbDEpO1xuICAgIHJldHVybiBtZXJnZShsMiwgbDEsIHQsIDAsIGwyLCBhLCAwKTtcbiAgfVxufVxuXG52YXIgY3JlYXRlX21hdHJpeCA9IG1ha2VfbWF0cml4O1xuXG52YXIgY29uY2F0ID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2NvbmNhdDtcblxudmFyIGZhc3Rfc29ydCA9IHN0YWJsZV9zb3J0O1xuXG5leHBvcnRzLmluaXQgPSBpbml0O1xuZXhwb3J0cy5tYWtlX21hdHJpeCA9IG1ha2VfbWF0cml4O1xuZXhwb3J0cy5jcmVhdGVfbWF0cml4ID0gY3JlYXRlX21hdHJpeDtcbmV4cG9ydHMuYXBwZW5kID0gYXBwZW5kO1xuZXhwb3J0cy5jb25jYXQgPSBjb25jYXQ7XG5leHBvcnRzLnN1YiA9IHN1YjtcbmV4cG9ydHMuY29weSA9IGNvcHk7XG5leHBvcnRzLmZpbGwgPSBmaWxsO1xuZXhwb3J0cy5ibGl0ID0gYmxpdDtcbmV4cG9ydHMudG9fbGlzdCA9IHRvX2xpc3Q7XG5leHBvcnRzLm9mX2xpc3QgPSBvZl9saXN0O1xuZXhwb3J0cy5pdGVyID0gaXRlcjtcbmV4cG9ydHMubWFwID0gbWFwO1xuZXhwb3J0cy5pdGVyaSA9IGl0ZXJpO1xuZXhwb3J0cy5tYXBpID0gbWFwaTtcbmV4cG9ydHMuZm9sZF9sZWZ0ID0gZm9sZF9sZWZ0O1xuZXhwb3J0cy5mb2xkX3JpZ2h0ID0gZm9sZF9yaWdodDtcbmV4cG9ydHMuc29ydCA9IHNvcnQ7XG5leHBvcnRzLnN0YWJsZV9zb3J0ID0gc3RhYmxlX3NvcnQ7XG5leHBvcnRzLmZhc3Rfc29ydCA9IGZhc3Rfc29ydDtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjYXBpdGFsaXplU3RyaW5nO1xuZnVuY3Rpb24gY2FwaXRhbGl6ZVN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZzsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnByb2Nlc3NTdHlsZU5hbWUgPSB1bmRlZmluZWQ7XG5leHBvcnRzLmNyZWF0ZU1hcmt1cEZvclN0eWxlcyA9IGNyZWF0ZU1hcmt1cEZvclN0eWxlcztcblxudmFyIF9jYW1lbGl6ZVN0eWxlTmFtZSA9IHJlcXVpcmUoJ2ZianMvbGliL2NhbWVsaXplU3R5bGVOYW1lJyk7XG5cbnZhciBfY2FtZWxpemVTdHlsZU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FtZWxpemVTdHlsZU5hbWUpO1xuXG52YXIgX2Rhbmdlcm91c1N0eWxlVmFsdWUgPSByZXF1aXJlKCcuL2Rhbmdlcm91c1N0eWxlVmFsdWUnKTtcblxudmFyIF9kYW5nZXJvdXNTdHlsZVZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rhbmdlcm91c1N0eWxlVmFsdWUpO1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZSA9IHJlcXVpcmUoJ2ZianMvbGliL2h5cGhlbmF0ZVN0eWxlTmFtZScpO1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oeXBoZW5hdGVTdHlsZU5hbWUpO1xuXG52YXIgX21lbW9pemVTdHJpbmdPbmx5ID0gcmVxdWlyZSgnZmJqcy9saWIvbWVtb2l6ZVN0cmluZ09ubHknKTtcblxudmFyIF9tZW1vaXplU3RyaW5nT25seTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZW1vaXplU3RyaW5nT25seSk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJvY2Vzc1N0eWxlTmFtZSA9IGV4cG9ydHMucHJvY2Vzc1N0eWxlTmFtZSA9ICgwLCBfbWVtb2l6ZVN0cmluZ09ubHkyLmRlZmF1bHQpKF9oeXBoZW5hdGVTdHlsZU5hbWUyLmRlZmF1bHQpOyAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAcHJvdmlkZXNNb2R1bGUgQ1NTUHJvcGVydHlPcGVyYXRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gJ21zVHJhbnNmb3JtJyBpcyBjb3JyZWN0LCBidXQgdGhlIG90aGVyIHByZWZpeGVzIHNob3VsZCBiZSBjYXBpdGFsaXplZFxuICB2YXIgYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuID0gL14oPzp3ZWJraXR8bW96fG8pW0EtWl0vO1xuXG4gIC8vIHN0eWxlIHZhbHVlcyBzaG91bGRuJ3QgY29udGFpbiBhIHNlbWljb2xvblxuICB2YXIgYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuID0gLztcXHMqJC87XG5cbiAgdmFyIHdhcm5lZFN0eWxlTmFtZXMgPSB7fTtcbiAgdmFyIHdhcm5lZFN0eWxlVmFsdWVzID0ge307XG4gIHZhciB3YXJuZWRGb3JOYU5WYWx1ZSA9IGZhbHNlO1xuXG4gIHZhciB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKG5hbWUsIG93bmVyKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlTmFtZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0gPSB0cnVlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnVW5zdXBwb3J0ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8lcycsIG5hbWUsICgwLCBfY2FtZWxpemVTdHlsZU5hbWUyLmRlZmF1bHQpKG5hbWUpLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpKSA6IHZvaWQgMDtcbiAgfTtcblxuICB2YXIgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lID0gZnVuY3Rpb24gd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lKG5hbWUsIG93bmVyKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlTmFtZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0gPSB0cnVlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnVW5zdXBwb3J0ZWQgdmVuZG9yLXByZWZpeGVkIHN0eWxlIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JXMnLCBuYW1lLCBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSwgY2hlY2tSZW5kZXJNZXNzYWdlKG93bmVyKSkgOiB2b2lkIDA7XG4gIH07XG5cbiAgdmFyIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbiA9IGZ1bmN0aW9uIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbihuYW1lLCB2YWx1ZSwgb3duZXIpIHtcbiAgICBpZiAod2FybmVkU3R5bGVWYWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpICYmIHdhcm5lZFN0eWxlVmFsdWVzW3ZhbHVlXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFN0eWxlVmFsdWVzW3ZhbHVlXSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdTdHlsZSBwcm9wZXJ0eSB2YWx1ZXMgc2hvdWxkblxcJ3QgY29udGFpbiBhIHNlbWljb2xvbi4lcyAnICsgJ1RyeSBcIiVzOiAlc1wiIGluc3RlYWQuJywgY2hlY2tSZW5kZXJNZXNzYWdlKG93bmVyKSwgbmFtZSwgdmFsdWUucmVwbGFjZShiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4sICcnKSkgOiB2b2lkIDA7XG4gIH07XG5cbiAgdmFyIHdhcm5TdHlsZVZhbHVlSXNOYU4gPSBmdW5jdGlvbiB3YXJuU3R5bGVWYWx1ZUlzTmFOKG5hbWUsIHZhbHVlLCBvd25lcikge1xuICAgIGlmICh3YXJuZWRGb3JOYU5WYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZEZvck5hTlZhbHVlID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ2BOYU5gIGlzIGFuIGludmFsaWQgdmFsdWUgZm9yIHRoZSBgJXNgIGNzcyBzdHlsZSBwcm9wZXJ0eS4lcycsIG5hbWUsIGNoZWNrUmVuZGVyTWVzc2FnZShvd25lcikpIDogdm9pZCAwO1xuICB9O1xuXG4gIHZhciBjaGVja1JlbmRlck1lc3NhZ2UgPSBmdW5jdGlvbiBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpIHtcbiAgICBpZiAob3duZXIpIHtcbiAgICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7UmVhY3RET01Db21wb25lbnR9IGNvbXBvbmVudFxuICAgKi9cbiAgdmFyIHdhcm5WYWxpZFN0eWxlID0gZnVuY3Rpb24gd2FyblZhbGlkU3R5bGUobmFtZSwgdmFsdWUsIGNvbXBvbmVudCkge1xuICAgIC8vZXNsaW50LWRpc2FibGUtbGluZSBuby12YXJcbiAgICB2YXIgb3duZXIgPSB2b2lkIDA7XG4gICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgb3duZXIgPSBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICB9XG4gICAgaWYgKG5hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKG5hbWUsIG93bmVyKTtcbiAgICB9IGVsc2UgaWYgKGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybi50ZXN0KG5hbWUpKSB7XG4gICAgICB3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUobmFtZSwgb3duZXIpO1xuICAgIH0gZWxzZSBpZiAoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24obmFtZSwgdmFsdWUsIG93bmVyKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWx1ZSkpIHtcbiAgICAgIHdhcm5TdHlsZVZhbHVlSXNOYU4obmFtZSwgdmFsdWUsIG93bmVyKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICAgKiBTZXJpYWxpemVzIGEgbWFwcGluZyBvZiBzdHlsZSBwcm9wZXJ0aWVzIGZvciB1c2UgYXMgaW5saW5lIHN0eWxlczpcbiAgICpcbiAgICogICA+IGNyZWF0ZU1hcmt1cEZvclN0eWxlcyh7d2lkdGg6ICcyMDBweCcsIGhlaWdodDogMH0pXG4gICAqICAgXCJ3aWR0aDoyMDBweDtoZWlnaHQ6MDtcIlxuICAgKlxuICAgKiBVbmRlZmluZWQgdmFsdWVzIGFyZSBpZ25vcmVkIHNvIHRoYXQgZGVjbGFyYXRpdmUgcHJvZ3JhbW1pbmcgaXMgZWFzaWVyLlxuICAgKiBUaGUgcmVzdWx0IHNob3VsZCBiZSBIVE1MLWVzY2FwZWQgYmVmb3JlIGluc2VydGlvbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZXNcbiAgICogQHBhcmFtIHtSZWFjdERPTUNvbXBvbmVudH0gY29tcG9uZW50XG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNYXJrdXBGb3JTdHlsZXMoc3R5bGVzLCBjb21wb25lbnQpIHtcbiAgdmFyIHNlcmlhbGl6ZWQgPSAnJztcbiAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgIHZhciBpc0N1c3RvbVByb3AgPSBzdHlsZU5hbWUuaW5kZXhPZignLS0nKSA9PT0gMDtcbiAgICBpZiAoIXN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHN0eWxlTmFtZSA9PT0gJ2xhYmVsJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzQ3VzdG9tUHJvcCkge1xuICAgICAgd2FyblZhbGlkU3R5bGUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlLCBjb21wb25lbnQpO1xuICAgIH1cbiAgICBpZiAoc3R5bGVWYWx1ZSAhPSBudWxsKSB7XG4gICAgICBpZiAoaXNDdXN0b21Qcm9wKSB7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gc3R5bGVOYW1lICsgJzonICsgc3R5bGVWYWx1ZSArICc7JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gcHJvY2Vzc1N0eWxlTmFtZShzdHlsZU5hbWUpICsgJzonO1xuICAgICAgICBzZXJpYWxpemVkICs9ICgwLCBfZGFuZ2Vyb3VzU3R5bGVWYWx1ZTIuZGVmYXVsdCkoc3R5bGVOYW1lLCBzdHlsZVZhbHVlLCBjb21wb25lbnQpICsgJzsnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWFsaXplZCB8fCBudWxsO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY29tcG9zZSA9IGV4cG9ydHMubWVyZ2UgPSBleHBvcnRzLiQgPSBleHBvcnRzLnN0eWxlID0gZXhwb3J0cy5wcmVzZXRzID0gZXhwb3J0cy5rZXlmcmFtZXMgPSBleHBvcnRzLmZvbnRGYWNlID0gZXhwb3J0cy5pbnNlcnRHbG9iYWwgPSBleHBvcnRzLmluc2VydFJ1bGUgPSBleHBvcnRzLnBsdWdpbnMgPSBleHBvcnRzLnN0eWxlU2hlZXQgPSB1bmRlZmluZWQ7XG5leHBvcnRzLnNwZWVkeSA9IHNwZWVkeTtcbmV4cG9ydHMuc2ltdWxhdGlvbnMgPSBzaW11bGF0aW9ucztcbmV4cG9ydHMuc2ltdWxhdGUgPSBzaW11bGF0ZTtcbmV4cG9ydHMuY3NzTGFiZWxzID0gY3NzTGFiZWxzO1xuZXhwb3J0cy5pc0xpa2VSdWxlID0gaXNMaWtlUnVsZTtcbmV4cG9ydHMuaWRGb3IgPSBpZEZvcjtcbmV4cG9ydHMuY3NzID0gY3NzO1xuZXhwb3J0cy5yZWh5ZHJhdGUgPSByZWh5ZHJhdGU7XG5leHBvcnRzLmZsdXNoID0gZmx1c2g7XG5leHBvcnRzLnNlbGVjdCA9IHNlbGVjdDtcbmV4cG9ydHMucGFyZW50ID0gcGFyZW50O1xuZXhwb3J0cy5tZWRpYSA9IG1lZGlhO1xuZXhwb3J0cy5wc2V1ZG8gPSBwc2V1ZG87XG5leHBvcnRzLmFjdGl2ZSA9IGFjdGl2ZTtcbmV4cG9ydHMuYW55ID0gYW55O1xuZXhwb3J0cy5jaGVja2VkID0gY2hlY2tlZDtcbmV4cG9ydHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbmV4cG9ydHMuZW1wdHkgPSBlbXB0eTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLl9kZWZhdWx0ID0gX2RlZmF1bHQ7XG5leHBvcnRzLmZpcnN0ID0gZmlyc3Q7XG5leHBvcnRzLmZpcnN0Q2hpbGQgPSBmaXJzdENoaWxkO1xuZXhwb3J0cy5maXJzdE9mVHlwZSA9IGZpcnN0T2ZUeXBlO1xuZXhwb3J0cy5mdWxsc2NyZWVuID0gZnVsbHNjcmVlbjtcbmV4cG9ydHMuZm9jdXMgPSBmb2N1cztcbmV4cG9ydHMuaG92ZXIgPSBob3ZlcjtcbmV4cG9ydHMuaW5kZXRlcm1pbmF0ZSA9IGluZGV0ZXJtaW5hdGU7XG5leHBvcnRzLmluUmFuZ2UgPSBpblJhbmdlO1xuZXhwb3J0cy5pbnZhbGlkID0gaW52YWxpZDtcbmV4cG9ydHMubGFzdENoaWxkID0gbGFzdENoaWxkO1xuZXhwb3J0cy5sYXN0T2ZUeXBlID0gbGFzdE9mVHlwZTtcbmV4cG9ydHMubGVmdCA9IGxlZnQ7XG5leHBvcnRzLmxpbmsgPSBsaW5rO1xuZXhwb3J0cy5vbmx5Q2hpbGQgPSBvbmx5Q2hpbGQ7XG5leHBvcnRzLm9ubHlPZlR5cGUgPSBvbmx5T2ZUeXBlO1xuZXhwb3J0cy5vcHRpb25hbCA9IG9wdGlvbmFsO1xuZXhwb3J0cy5vdXRPZlJhbmdlID0gb3V0T2ZSYW5nZTtcbmV4cG9ydHMucmVhZE9ubHkgPSByZWFkT25seTtcbmV4cG9ydHMucmVhZFdyaXRlID0gcmVhZFdyaXRlO1xuZXhwb3J0cy5yZXF1aXJlZCA9IHJlcXVpcmVkO1xuZXhwb3J0cy5yaWdodCA9IHJpZ2h0O1xuZXhwb3J0cy5yb290ID0gcm9vdDtcbmV4cG9ydHMuc2NvcGUgPSBzY29wZTtcbmV4cG9ydHMudGFyZ2V0ID0gdGFyZ2V0O1xuZXhwb3J0cy52YWxpZCA9IHZhbGlkO1xuZXhwb3J0cy52aXNpdGVkID0gdmlzaXRlZDtcbmV4cG9ydHMuZGlyID0gZGlyO1xuZXhwb3J0cy5sYW5nID0gbGFuZztcbmV4cG9ydHMubm90ID0gbm90O1xuZXhwb3J0cy5udGhDaGlsZCA9IG50aENoaWxkO1xuZXhwb3J0cy5udGhMYXN0Q2hpbGQgPSBudGhMYXN0Q2hpbGQ7XG5leHBvcnRzLm50aExhc3RPZlR5cGUgPSBudGhMYXN0T2ZUeXBlO1xuZXhwb3J0cy5udGhPZlR5cGUgPSBudGhPZlR5cGU7XG5leHBvcnRzLmFmdGVyID0gYWZ0ZXI7XG5leHBvcnRzLmJlZm9yZSA9IGJlZm9yZTtcbmV4cG9ydHMuZmlyc3RMZXR0ZXIgPSBmaXJzdExldHRlcjtcbmV4cG9ydHMuZmlyc3RMaW5lID0gZmlyc3RMaW5lO1xuZXhwb3J0cy5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG5leHBvcnRzLmJhY2tkcm9wID0gYmFja2Ryb3A7XG5leHBvcnRzLnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG5leHBvcnRzLmNzc0ZvciA9IGNzc0ZvcjtcbmV4cG9ydHMuYXR0cmlic0ZvciA9IGF0dHJpYnNGb3I7XG5cbnZhciBfb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX29iamVjdEFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RBc3NpZ24pO1xuXG52YXIgX3NoZWV0ID0gcmVxdWlyZSgnLi9zaGVldC5qcycpO1xuXG52YXIgX0NTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vQ1NTUHJvcGVydHlPcGVyYXRpb25zJyk7XG5cbnZhciBfY2xlYW4gPSByZXF1aXJlKCcuL2NsZWFuLmpzJyk7XG5cbnZhciBfY2xlYW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xlYW4pO1xuXG52YXIgX3BsdWdpbnMgPSByZXF1aXJlKCcuL3BsdWdpbnMnKTtcblxudmFyIF9oYXNoID0gcmVxdWlyZSgnLi9oYXNoJyk7XG5cbnZhciBfaGFzaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYXNoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG4vKiBzdHlsZXNoZWV0ICovXG5cblxudmFyIHN0eWxlU2hlZXQgPSBleHBvcnRzLnN0eWxlU2hlZXQgPSBuZXcgX3NoZWV0LlN0eWxlU2hlZXQoKTtcbi8vIGFuIGlzb21vcnBoaWMgU3R5bGVTaGVldCBzaGltLiBoaWRlcyBhbGwgdGhlIG5pdHR5IGdyaXR0eS5cblxuLy8gLyoqKioqKioqKioqKioqKiogTElGVE9GRiBJTiAzLi4uIDIuLi4gMS4uLiAqKioqKioqKioqKioqKioqL1xuc3R5bGVTaGVldC5pbmplY3QoKTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIGluZGVudFxuLy8gLyoqKioqKioqKioqKioqKiogICAgICBUTyBUSEUgTU9PT09PT09OICAgICAqKioqKioqKioqKioqKioqL1xuXG4vLyBjb252ZW5pZW5jZSBmdW5jdGlvbiB0byB0b2dnbGUgc3BlZWR5XG5mdW5jdGlvbiBzcGVlZHkoYm9vbCkge1xuICByZXR1cm4gc3R5bGVTaGVldC5zcGVlZHkoYm9vbCk7XG59XG5cbi8vIHBsdWdpbnNcbi8vIHdlIGluY2x1ZGUgdGhlc2UgYnkgZGVmYXVsdFxudmFyIHBsdWdpbnMgPSBleHBvcnRzLnBsdWdpbnMgPSBzdHlsZVNoZWV0LnBsdWdpbnMgPSBuZXcgX3BsdWdpbnMuUGx1Z2luU2V0KFtfcGx1Z2lucy5wcmVmaXhlcywgX3BsdWdpbnMuY29udGVudFdyYXAsIF9wbHVnaW5zLmZhbGxiYWNrc10pO1xucGx1Z2lucy5tZWRpYSA9IG5ldyBfcGx1Z2lucy5QbHVnaW5TZXQoKTsgLy8gbmVhdCEgbWVkaWEsIGZvbnQtZmFjZSwga2V5ZnJhbWVzXG5wbHVnaW5zLmZvbnRGYWNlID0gbmV3IF9wbHVnaW5zLlBsdWdpblNldCgpO1xucGx1Z2lucy5rZXlmcmFtZXMgPSBuZXcgX3BsdWdpbnMuUGx1Z2luU2V0KFtfcGx1Z2lucy5wcmVmaXhlcywgX3BsdWdpbnMuZmFsbGJhY2tzXSk7XG5cbi8vIGRlZmluZSBzb21lIGNvbnN0YW50c1xuXG52YXIgaXNEZXYgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyB8fCAhcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG52YXIgaXNUZXN0ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JztcbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuLyoqKiogc2ltdWxhdGlvbnMgICoqKiovXG5cbi8vIGEgZmxhZyB0byBlbmFibGUgc2ltdWxhdGlvbiBtZXRhIHRhZ3Mgb24gZG9tIG5vZGVzXG4vLyBkZWZhdWx0cyB0byB0cnVlIGluIGRldiBtb2RlLiByZWNvbW1lbmQgKm5vdCogdG9cbi8vIHRvZ2dsZSBvZnRlbi5cbnZhciBjYW5TaW11bGF0ZSA9IGlzRGV2O1xuXG4vLyB3ZSB1c2UgdGhlc2UgZmxhZ3MgZm9yIGlzc3Vpbmcgd2FybmluZ3Mgd2hlbiBzaW11bGF0ZSBpcyBjYWxsZWRcbi8vIGluIHByb2QgLyBpbiBpbmNvcnJlY3Qgb3JkZXJcbnZhciB3YXJuZWQxID0gZmFsc2UsXG4gICAgd2FybmVkMiA9IGZhbHNlO1xuXG4vLyB0b2dnbGVzIHNpbXVsYXRpb24gYWN0aXZpdHkuIHNob3VsZG4ndCBiZSBuZWVkZWQgaW4gbW9zdCBjYXNlc1xuZnVuY3Rpb24gc2ltdWxhdGlvbnMoKSB7XG4gIHZhciBib29sID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuXG4gIGNhblNpbXVsYXRlID0gISFib29sO1xufVxuXG4vLyB1c2UgdGhpcyBvbiBkb20gbm9kZXMgdG8gJ3NpbXVsYXRlJyBwc2V1ZG9jbGFzc2VzXG4vLyA8ZGl2IHsuLi5ob3Zlcih7IGNvbG9yOiAncmVkJyB9KX0gey4uLnNpbXVsYXRlKCdob3ZlcicsICd2aXNpdGVkJyl9Pi4uLjwvZGl2PlxuLy8geW91IGNhbiBldmVuIHNlbmQgaW4gc29tZSB3ZWlyZCBvbmVzLCBhcyBsb25nIGFzIGl0J3MgaW4gc2ltcGxlIGZvcm1hdFxuLy8gYW5kIG1hdGNoZXMgYW4gZXhpc3RpbmcgcnVsZSBvbiB0aGUgZWxlbWVudFxuLy8gZWcgc2ltdWxhdGUoJ250aENoaWxkMicsICc6aG92ZXI6YWN0aXZlJykgZXRjXG5mdW5jdGlvbiBzaW11bGF0ZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBzZXVkb3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBwc2V1ZG9zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcHNldWRvcyA9ICgwLCBfY2xlYW4yLmRlZmF1bHQpKHBzZXVkb3MpO1xuICBpZiAoIXBzZXVkb3MpIHJldHVybiB7fTtcbiAgaWYgKCFjYW5TaW11bGF0ZSkge1xuICAgIGlmICghd2FybmVkMSkge1xuICAgICAgY29uc29sZS53YXJuKCdjYW5cXCd0IHNpbXVsYXRlIHdpdGhvdXQgb25jZSBjYWxsaW5nIHNpbXVsYXRpb25zKHRydWUpJyk7IC8vZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICB3YXJuZWQxID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFpc0RldiAmJiAhaXNUZXN0ICYmICF3YXJuZWQyKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2RvblxcJ3QgdXNlIHNpbXVsYXRpb24gb3V0c2lkZSBkZXYnKTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgIHdhcm5lZDIgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4ge307XG4gIH1cbiAgcmV0dXJuIHBzZXVkb3MucmVkdWNlKGZ1bmN0aW9uIChvLCBwKSB7XG4gICAgcmV0dXJuIG9bJ2RhdGEtc2ltdWxhdGUtJyArIHNpbXBsZShwKV0gPSAnJywgbztcbiAgfSwge30pO1xufVxuXG4vKioqKiBsYWJlbHMgKioqKi9cbi8vIHRvZ2dsZSBmb3IgZGVidWcgbGFiZWxzLlxuLy8gKnNob3VsZG4ndCogaGF2ZSB0byBtZXNzIHdpdGggdGhpcyBtYW51YWxseVxudmFyIGhhc0xhYmVscyA9IGlzRGV2O1xuXG5mdW5jdGlvbiBjc3NMYWJlbHMoYm9vbCkge1xuICBoYXNMYWJlbHMgPSAhIWJvb2w7XG59XG5cbi8vIHRha2VzIGEgc3RyaW5nLCBjb252ZXJ0cyB0byBsb3dlcmNhc2UsIHN0cmlwcyBvdXQgbm9uYWxwaGFudW1lcmljLlxuZnVuY3Rpb24gc2ltcGxlKHN0cikge1xuICB2YXIgY2hhciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG5cbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16MC05XS9nLCBjaGFyKTtcbn1cblxuLy8gaGFzaGVzIGEgc3RyaW5nIHRvIHNvbWV0aGluZyAndW5pcXVlJ1xuLy8gd2UgdXNlIHRoaXMgdG8gZ2VuZXJhdGUgaWRzIGZvciBzdHlsZXNcblxuXG5mdW5jdGlvbiBoYXNoaWZ5KG9iaikge1xuICB2YXIgc3RyID0gSlNPTi5zdHJpbmdpZnkob2JqKTtcbiAgdmFyIHRvUmV0ID0gKDAsIF9oYXNoMi5kZWZhdWx0KShzdHIpLnRvU3RyaW5nKDM2KTtcbiAgaWYgKG9iai5sYWJlbCAmJiBvYmoubGFiZWwubGVuZ3RoID4gMCAmJiBpc0Rldikge1xuICAgIHJldHVybiBzaW1wbGUob2JqLmxhYmVsLmpvaW4oJy4nKSwgJy0nKSArICctJyArIHRvUmV0O1xuICB9XG4gIHJldHVybiB0b1JldDtcbn1cblxuLy8gb2Ygc2hhcGUgeyAnZGF0YS1jc3MtPGlkPic6ICcnIH1cbmZ1bmN0aW9uIGlzTGlrZVJ1bGUocnVsZSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJ1bGUpLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB4ICE9PSAndG9TdHJpbmcnO1xuICB9KTtcbiAgaWYgKGtleXMubGVuZ3RoICE9PSAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAhIS9kYXRhXFwtY3NzXFwtKFthLXpBLVowLTlcXC1fXSspLy5leGVjKGtleXNbMF0pO1xufVxuXG4vLyBleHRyYWN0cyBpZCBmcm9tIGEgeyAnZGF0YS1jc3MtPGlkPic6ICcnfSBsaWtlIG9iamVjdFxuZnVuY3Rpb24gaWRGb3IocnVsZSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJ1bGUpLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB4ICE9PSAndG9TdHJpbmcnO1xuICB9KTtcbiAgaWYgKGtleXMubGVuZ3RoICE9PSAxKSB0aHJvdyBuZXcgRXJyb3IoJ25vdCBhIHJ1bGUnKTtcbiAgdmFyIHJlZ2V4ID0gL2RhdGFcXC1jc3NcXC0oW2EtekEtWjAtOVxcLV9dKykvO1xuICB2YXIgbWF0Y2ggPSByZWdleC5leGVjKGtleXNbMF0pO1xuICBpZiAoIW1hdGNoKSB0aHJvdyBuZXcgRXJyb3IoJ25vdCBhIHJ1bGUnKTtcbiAgcmV0dXJuIG1hdGNoWzFdO1xufVxuXG4vLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qMmNzcy9qMmMvYmxvYi81ZDM4MWMyZDcyMWQwNGI1NGZhYmU2YTE2NWQ1ODcyNDdjMzA4N2NiL3NyYy9oZWxwZXJzLmpzI0wyOC1MNjFcblxuLy8gXCJUb2tlbml6ZXNcIiB0aGUgc2VsZWN0b3JzIGludG8gcGFydHMgcmVsZXZhbnQgZm9yIHRoZSBuZXh0IGZ1bmN0aW9uLlxuLy8gU3RyaW5ncyBhbmQgY29tbWVudHMgYXJlIG1hdGNoZWQsIGJ1dCBpZ25vcmVkIGFmdGVyd2FyZHMuXG4vLyBUaGlzIGlzIG5vdCBhIGZ1bGwgdG9rZW5pemVycy4gSXQgb25seSByZWNvZ25pemVzIGNvbWFzLCBwYXJlbnRoZXNlcyxcbi8vIHN0cmluZ3MgYW5kIGNvbW1lbnRzLlxuLy8gcmVnZXhwIGdlbmVyYXRlZCBieSBzY3JpcHRzL3JlZ2V4cHMuanMgdGhlbiB0cmltbWVkIGJ5IGhhbmRcbnZhciBzZWxlY3RvclRva2VuaXplciA9IC9bKCksXXxcIig/OlxcXFwufFteXCJcXG5dKSpcInwnKD86XFxcXC58W14nXFxuXSkqJ3xcXC9cXCpbXFxzXFxTXSo/XFwqXFwvL2c7XG5cbi8qKlxuICogVGhpcyB3aWxsIHNwbGl0IGEgY29tYS1zZXBhcmF0ZWQgc2VsZWN0b3IgbGlzdCBpbnRvIGluZGl2aWR1YWwgc2VsZWN0b3JzLFxuICogaWdub3JpbmcgY29tYXMgaW4gc3RyaW5ncywgY29tbWVudHMgYW5kIGluIDpwc2V1ZG8tc2VsZWN0b3JzKHBhcmFtZXRlciwgbGlzdHMpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cblxuZnVuY3Rpb24gc3BsaXRTZWxlY3RvcihzZWxlY3Rvcikge1xuICBpZiAoc2VsZWN0b3IuaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIHJldHVybiBbc2VsZWN0b3JdO1xuICB9XG5cbiAgdmFyIGluZGljZXMgPSBbXSxcbiAgICAgIHJlcyA9IFtdLFxuICAgICAgaW5QYXJlbiA9IDAsXG4gICAgICBvO1xuICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduKi9cbiAgd2hpbGUgKG8gPSBzZWxlY3RvclRva2VuaXplci5leGVjKHNlbGVjdG9yKSkge1xuICAgIC8qZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiovXG4gICAgc3dpdGNoIChvWzBdKSB7XG4gICAgICBjYXNlICcoJzpcbiAgICAgICAgaW5QYXJlbisrO2JyZWFrO1xuICAgICAgY2FzZSAnKSc6XG4gICAgICAgIGluUGFyZW4tLTticmVhaztcbiAgICAgIGNhc2UgJywnOlxuICAgICAgICBpZiAoaW5QYXJlbikgYnJlYWs7aW5kaWNlcy5wdXNoKG8uaW5kZXgpO1xuICAgIH1cbiAgfVxuICBmb3IgKG8gPSBpbmRpY2VzLmxlbmd0aDsgby0tOykge1xuICAgIHJlcy51bnNoaWZ0KHNlbGVjdG9yLnNsaWNlKGluZGljZXNbb10gKyAxKSk7XG4gICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSgwLCBpbmRpY2VzW29dKTtcbiAgfVxuICByZXMudW5zaGlmdChzZWxlY3Rvcik7XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdG9yKGlkLCBwYXRoKSB7XG4gIGlmICghaWQpIHtcbiAgICByZXR1cm4gcGF0aC5yZXBsYWNlKC9cXCYvZywgJycpO1xuICB9XG4gIGlmICghcGF0aCkgcmV0dXJuICcuY3NzLScgKyBpZCArICcsW2RhdGEtY3NzLScgKyBpZCArICddJztcblxuICB2YXIgeCA9IHNwbGl0U2VsZWN0b3IocGF0aCkubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHguaW5kZXhPZignJicpID49IDAgPyBbeC5yZXBsYWNlKC9cXCYvbWcsICcuY3NzLScgKyBpZCksIHgucmVwbGFjZSgvXFwmL21nLCAnW2RhdGEtY3NzLScgKyBpZCArICddJyldLmpvaW4oJywnKSAvLyB0b2RvIC0gbWFrZSBzdXJlIGVhY2ggc3ViIHNlbGVjdG9yIGhhcyBhbiAmXG4gICAgOiAnLmNzcy0nICsgaWQgKyB4ICsgJyxbZGF0YS1jc3MtJyArIGlkICsgJ10nICsgeDtcbiAgfSkuam9pbignLCcpO1xuXG4gIGlmIChjYW5TaW11bGF0ZSAmJiAvXlxcJlxcOi8uZXhlYyhwYXRoKSAmJiAhL1xccy8uZXhlYyhwYXRoKSkge1xuICAgIHggKz0gJywuY3NzLScgKyBpZCArICdbZGF0YS1zaW11bGF0ZS0nICsgc2ltcGxlKHBhdGgpICsgJ10sW2RhdGEtY3NzLScgKyBpZCArICddW2RhdGEtc2ltdWxhdGUtJyArIHNpbXBsZShwYXRoKSArICddJztcbiAgfVxuICByZXR1cm4geDtcbn1cblxuLy8gZW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9qMmNzcy9qMmMvYmxvYi81ZDM4MWMyZDcyMWQwNGI1NGZhYmU2YTE2NWQ1ODcyNDdjMzA4N2NiL3NyYy9oZWxwZXJzLmpzI0wyOC1MNjFcblxuXG5mdW5jdGlvbiB0b0NTUyhfcmVmKSB7XG4gIHZhciBzZWxlY3RvciA9IF9yZWYuc2VsZWN0b3IsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGU7XG5cbiAgdmFyIHJlc3VsdCA9IHBsdWdpbnMudHJhbnNmb3JtKHsgc2VsZWN0b3I6IHNlbGVjdG9yLCBzdHlsZTogc3R5bGUgfSk7XG4gIHJldHVybiByZXN1bHQuc2VsZWN0b3IgKyAneycgKyAoMCwgX0NTU1Byb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JTdHlsZXMpKHJlc3VsdC5zdHlsZSkgKyAnfSc7XG59XG5cbmZ1bmN0aW9uIGRlY29uc3RydWN0KHN0eWxlKSB7XG4gIC8vIHdlIGNhbiBiZSBzdXJlIGl0J3Mgbm90IGluZmluaXRlbHkgbmVzdGVkIGhlcmVcbiAgdmFyIHBsYWluID0gdm9pZCAwLFxuICAgICAgc2VsZWN0cyA9IHZvaWQgMCxcbiAgICAgIG1lZGlhcyA9IHZvaWQgMCxcbiAgICAgIHN1cHBvcnRzID0gdm9pZCAwO1xuICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGtleS5pbmRleE9mKCcmJykgPj0gMCkge1xuICAgICAgc2VsZWN0cyA9IHNlbGVjdHMgfHwge307XG4gICAgICBzZWxlY3RzW2tleV0gPSBzdHlsZVtrZXldO1xuICAgIH0gZWxzZSBpZiAoa2V5LmluZGV4T2YoJ0BtZWRpYScpID09PSAwKSB7XG4gICAgICBtZWRpYXMgPSBtZWRpYXMgfHwge307XG4gICAgICBtZWRpYXNba2V5XSA9IGRlY29uc3RydWN0KHN0eWxlW2tleV0pO1xuICAgIH0gZWxzZSBpZiAoa2V5LmluZGV4T2YoJ0BzdXBwb3J0cycpID09PSAwKSB7XG4gICAgICBzdXBwb3J0cyA9IHN1cHBvcnRzIHx8IHt9O1xuICAgICAgc3VwcG9ydHNba2V5XSA9IGRlY29uc3RydWN0KHN0eWxlW2tleV0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnbGFiZWwnKSB7XG4gICAgICBpZiAoc3R5bGUubGFiZWwubGVuZ3RoID4gMCkge1xuICAgICAgICBwbGFpbiA9IHBsYWluIHx8IHt9O1xuICAgICAgICBwbGFpbi5sYWJlbCA9IGhhc0xhYmVscyA/IHN0eWxlLmxhYmVsLmpvaW4oJy4nKSA6ICcnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwbGFpbiA9IHBsYWluIHx8IHt9O1xuICAgICAgcGxhaW5ba2V5XSA9IHN0eWxlW2tleV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHsgcGxhaW46IHBsYWluLCBzZWxlY3RzOiBzZWxlY3RzLCBtZWRpYXM6IG1lZGlhcywgc3VwcG9ydHM6IHN1cHBvcnRzIH07XG59XG5cbmZ1bmN0aW9uIGRlY29uc3RydWN0ZWRTdHlsZVRvQ1NTKGlkLCBzdHlsZSkge1xuICB2YXIgY3NzID0gW107XG5cbiAgLy8gcGx1Z2lucyBoZXJlXG4gIHZhciBwbGFpbiA9IHN0eWxlLnBsYWluLFxuICAgICAgc2VsZWN0cyA9IHN0eWxlLnNlbGVjdHMsXG4gICAgICBtZWRpYXMgPSBzdHlsZS5tZWRpYXMsXG4gICAgICBzdXBwb3J0cyA9IHN0eWxlLnN1cHBvcnRzO1xuXG4gIGlmIChwbGFpbikge1xuICAgIGNzcy5wdXNoKHRvQ1NTKHsgc3R5bGU6IHBsYWluLCBzZWxlY3Rvcjogc2VsZWN0b3IoaWQpIH0pKTtcbiAgfVxuICBpZiAoc2VsZWN0cykge1xuICAgIE9iamVjdC5rZXlzKHNlbGVjdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIGNzcy5wdXNoKHRvQ1NTKHsgc3R5bGU6IHNlbGVjdHNba2V5XSwgc2VsZWN0b3I6IHNlbGVjdG9yKGlkLCBrZXkpIH0pKTtcbiAgICB9KTtcbiAgfVxuICBpZiAobWVkaWFzKSB7XG4gICAgT2JqZWN0LmtleXMobWVkaWFzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBjc3MucHVzaChrZXkgKyAneycgKyBkZWNvbnN0cnVjdGVkU3R5bGVUb0NTUyhpZCwgbWVkaWFzW2tleV0pLmpvaW4oJycpICsgJ30nKTtcbiAgICB9KTtcbiAgfVxuICBpZiAoc3VwcG9ydHMpIHtcbiAgICBPYmplY3Qua2V5cyhzdXBwb3J0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gY3NzLnB1c2goa2V5ICsgJ3snICsgZGVjb25zdHJ1Y3RlZFN0eWxlVG9DU1MoaWQsIHN1cHBvcnRzW2tleV0pLmpvaW4oJycpICsgJ30nKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gY3NzO1xufVxuXG4vLyB0aGlzIGNhY2hlIHRvIHRyYWNrIHdoaWNoIHJ1bGVzIGhhdmVcbi8vIGJlZW4gaW5zZXJ0ZWQgaW50byB0aGUgc3R5bGVzaGVldFxudmFyIGluc2VydGVkID0gc3R5bGVTaGVldC5pbnNlcnRlZCA9IHt9O1xuXG4vLyBhbmQgaGVscGVycyB0byBpbnNlcnQgcnVsZXMgaW50byBzYWlkIHN0eWxlU2hlZXRcbmZ1bmN0aW9uIGluc2VydChzcGVjKSB7XG4gIGlmICghaW5zZXJ0ZWRbc3BlYy5pZF0pIHtcbiAgICBpbnNlcnRlZFtzcGVjLmlkXSA9IHRydWU7XG4gICAgdmFyIGRlY29uc3RydWN0ZWQgPSBkZWNvbnN0cnVjdChzcGVjLnN0eWxlKTtcbiAgICB2YXIgcnVsZXMgPSBkZWNvbnN0cnVjdGVkU3R5bGVUb0NTUyhzcGVjLmlkLCBkZWNvbnN0cnVjdGVkKTtcbiAgICBpbnNlcnRlZFtzcGVjLmlkXSA9IGlzQnJvd3NlciA/IHRydWUgOiBydWxlcztcbiAgICBydWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChjc3NSdWxlKSB7XG4gICAgICByZXR1cm4gc3R5bGVTaGVldC5pbnNlcnQoY3NzUnVsZSk7XG4gICAgfSk7XG4gIH1cbn1cblxuLy8gYSBzaW1wbGUgY2FjaGUgdG8gc3RvcmUgZ2VuZXJhdGVkIHJ1bGVzXG52YXIgcmVnaXN0ZXJlZCA9IHN0eWxlU2hlZXQucmVnaXN0ZXJlZCA9IHt9O1xuZnVuY3Rpb24gcmVnaXN0ZXIoc3BlYykge1xuICBpZiAoIXJlZ2lzdGVyZWRbc3BlYy5pZF0pIHtcbiAgICByZWdpc3RlcmVkW3NwZWMuaWRdID0gc3BlYztcbiAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0UmVnaXN0ZXJlZChydWxlKSB7XG4gIGlmIChpc0xpa2VSdWxlKHJ1bGUpKSB7XG4gICAgdmFyIHJldCA9IHJlZ2lzdGVyZWRbaWRGb3IocnVsZSldO1xuICAgIGlmIChyZXQgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbZ2xhbW9yXSBhbiB1bmV4cGVjdGVkIHJ1bGUgY2FjaGUgbWlzcyBvY2N1cnJlZC4gVGhpcyBpcyBwcm9iYWJseSBhIHNpZ24gb2YgbXVsdGlwbGUgZ2xhbW9yIGluc3RhbmNlcyBpbiB5b3VyIGFwcC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90aHJlZXBvaW50b25lL2dsYW1vci9pc3N1ZXMvNzknKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICByZXR1cm4gcnVsZTtcbn1cblxuLy8gdG9kbyAtIHBlcmZcbnZhciBydWxlQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIHRvUnVsZShzcGVjKSB7XG4gIHJlZ2lzdGVyKHNwZWMpO1xuICBpbnNlcnQoc3BlYyk7XG5cbiAgaWYgKHJ1bGVDYWNoZVtzcGVjLmlkXSkge1xuICAgIHJldHVybiBydWxlQ2FjaGVbc3BlYy5pZF07XG4gIH1cblxuICB2YXIgcmV0ID0gX2RlZmluZVByb3BlcnR5KHt9LCAnZGF0YS1jc3MtJyArIHNwZWMuaWQsIGhhc0xhYmVscyA/IHNwZWMubGFiZWwgfHwgJycgOiAnJyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXQsICd0b1N0cmluZycsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgcmV0dXJuICdjc3MtJyArIHNwZWMuaWQ7XG4gICAgfVxuICB9KTtcbiAgcnVsZUNhY2hlW3NwZWMuaWRdID0gcmV0O1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICBjb25zb2xlLmxvZyh0aGlzKTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGlzU2VsZWN0b3Ioa2V5KSB7XG4gIHZhciBwb3NzaWJsZXMgPSBbJzonLCAnLicsICdbJywgJz4nLCAnICddLFxuICAgICAgZm91bmQgPSBmYWxzZSxcbiAgICAgIGNoID0ga2V5LmNoYXJBdCgwKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3NzaWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY2ggPT09IHBvc3NpYmxlc1tpXSkge1xuICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3VuZCB8fCBrZXkuaW5kZXhPZignJicpID49IDA7XG59XG5cbmZ1bmN0aW9uIGpvaW5TZWxlY3RvcnMoYSwgYikge1xuICB2YXIgYXMgPSBzcGxpdFNlbGVjdG9yKGEpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAhKGEuaW5kZXhPZignJicpID49IDApID8gJyYnICsgYSA6IGE7XG4gIH0pO1xuICB2YXIgYnMgPSBzcGxpdFNlbGVjdG9yKGIpLm1hcChmdW5jdGlvbiAoYikge1xuICAgIHJldHVybiAhKGIuaW5kZXhPZignJicpID49IDApID8gJyYnICsgYiA6IGI7XG4gIH0pO1xuXG4gIHJldHVybiBicy5yZWR1Y2UoZnVuY3Rpb24gKGFyciwgYikge1xuICAgIHJldHVybiBhcnIuY29uY2F0KGFzLm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGIucmVwbGFjZSgvXFwmL2csIGEpO1xuICAgIH0pKTtcbiAgfSwgW10pLmpvaW4oJywnKTtcbn1cblxuZnVuY3Rpb24gam9pbk1lZGlhUXVlcmllcyhhLCBiKSB7XG4gIHJldHVybiBhID8gJ0BtZWRpYSAnICsgYS5zdWJzdHJpbmcoNikgKyAnIGFuZCAnICsgYi5zdWJzdHJpbmcoNikgOiBiO1xufVxuXG5mdW5jdGlvbiBpc01lZGlhUXVlcnkoa2V5KSB7XG4gIHJldHVybiBrZXkuaW5kZXhPZignQG1lZGlhJykgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzU3VwcG9ydHMoa2V5KSB7XG4gIHJldHVybiBrZXkuaW5kZXhPZignQHN1cHBvcnRzJykgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGpvaW5TdXBwb3J0cyhhLCBiKSB7XG4gIHJldHVybiBhID8gJ0BzdXBwb3J0cyAnICsgYS5zdWJzdHJpbmcoOSkgKyAnIGFuZCAnICsgYi5zdWJzdHJpbmcoOSkgOiBiO1xufVxuXG4vLyBmbGF0dGVuIGEgbmVzdGVkIGFycmF5XG5mdW5jdGlvbiBmbGF0dGVuKGluQXJyKSB7XG4gIHZhciBhcnIgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbkFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGluQXJyW2ldKSkgYXJyID0gYXJyLmNvbmNhdChmbGF0dGVuKGluQXJyW2ldKSk7ZWxzZSBhcnIgPSBhcnIuY29uY2F0KGluQXJyW2ldKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG52YXIgcHJlZml4ZWRQc2V1ZG9TZWxlY3RvcnMgPSB7XG4gICc6OnBsYWNlaG9sZGVyJzogWyc6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInLCAnOjotbW96LXBsYWNlaG9sZGVyJywgJzo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJ10sXG4gICc6ZnVsbHNjcmVlbic6IFsnOi13ZWJraXQtZnVsbC1zY3JlZW4nLCAnOi1tb3otZnVsbC1zY3JlZW4nLCAnOi1tcy1mdWxsc2NyZWVuJ11cblxuICAvLyBtdXRhYmxlISBtb2RpZmllcyBkZXN0LlxufTtmdW5jdGlvbiBidWlsZChkZXN0LCBfcmVmMikge1xuICB2YXIgX3JlZjIkc2VsZWN0b3IgPSBfcmVmMi5zZWxlY3RvcixcbiAgICAgIHNlbGVjdG9yID0gX3JlZjIkc2VsZWN0b3IgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZjIkc2VsZWN0b3IsXG4gICAgICBfcmVmMiRtcSA9IF9yZWYyLm1xLFxuICAgICAgbXEgPSBfcmVmMiRtcSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmMiRtcSxcbiAgICAgIF9yZWYyJHN1cHAgPSBfcmVmMi5zdXBwLFxuICAgICAgc3VwcCA9IF9yZWYyJHN1cHAgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZjIkc3VwcCxcbiAgICAgIF9yZWYyJHNyYyA9IF9yZWYyLnNyYyxcbiAgICAgIHNyYyA9IF9yZWYyJHNyYyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmMiRzcmM7XG5cblxuICBpZiAoIUFycmF5LmlzQXJyYXkoc3JjKSkge1xuICAgIHNyYyA9IFtzcmNdO1xuICB9XG4gIHNyYyA9IGZsYXR0ZW4oc3JjKTtcblxuICBzcmMuZm9yRWFjaChmdW5jdGlvbiAoX3NyYykge1xuICAgIGlmIChpc0xpa2VSdWxlKF9zcmMpKSB7XG4gICAgICB2YXIgcmVnID0gX2dldFJlZ2lzdGVyZWQoX3NyYyk7XG4gICAgICBpZiAocmVnLnR5cGUgIT09ICdjc3MnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IG1lcmdlIHRoaXMgcnVsZScpO1xuICAgICAgfVxuICAgICAgX3NyYyA9IHJlZy5zdHlsZTtcbiAgICB9XG4gICAgX3NyYyA9ICgwLCBfY2xlYW4yLmRlZmF1bHQpKF9zcmMpO1xuICAgIGlmIChfc3JjICYmIF9zcmMuY29tcG9zZXMpIHtcbiAgICAgIGJ1aWxkKGRlc3QsIHsgc2VsZWN0b3I6IHNlbGVjdG9yLCBtcTogbXEsIHN1cHA6IHN1cHAsIHNyYzogX3NyYy5jb21wb3NlcyB9KTtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoX3NyYyB8fCB7fSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoaXNTZWxlY3RvcihrZXkpKSB7XG5cbiAgICAgICAgaWYgKHByZWZpeGVkUHNldWRvU2VsZWN0b3JzW2tleV0pIHtcbiAgICAgICAgICBwcmVmaXhlZFBzZXVkb1NlbGVjdG9yc1trZXldLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgIHJldHVybiBidWlsZChkZXN0LCB7IHNlbGVjdG9yOiBqb2luU2VsZWN0b3JzKHNlbGVjdG9yLCBwKSwgbXE6IG1xLCBzdXBwOiBzdXBwLCBzcmM6IF9zcmNba2V5XSB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1aWxkKGRlc3QsIHsgc2VsZWN0b3I6IGpvaW5TZWxlY3RvcnMoc2VsZWN0b3IsIGtleSksIG1xOiBtcSwgc3VwcDogc3VwcCwgc3JjOiBfc3JjW2tleV0gfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWVkaWFRdWVyeShrZXkpKSB7XG4gICAgICAgIGJ1aWxkKGRlc3QsIHsgc2VsZWN0b3I6IHNlbGVjdG9yLCBtcTogam9pbk1lZGlhUXVlcmllcyhtcSwga2V5KSwgc3VwcDogc3VwcCwgc3JjOiBfc3JjW2tleV0gfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzU3VwcG9ydHMoa2V5KSkge1xuICAgICAgICBidWlsZChkZXN0LCB7IHNlbGVjdG9yOiBzZWxlY3RvciwgbXE6IG1xLCBzdXBwOiBqb2luU3VwcG9ydHMoc3VwcCwga2V5KSwgc3JjOiBfc3JjW2tleV0gfSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2NvbXBvc2VzJykge1xuICAgICAgICAvLyBpZ25vcmUsIHdlIGFscmVhZHkgZGVhbHRoIHdpdGggaXRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBfZGVzdCA9IGRlc3Q7XG4gICAgICAgIGlmIChzdXBwKSB7XG4gICAgICAgICAgX2Rlc3Rbc3VwcF0gPSBfZGVzdFtzdXBwXSB8fCB7fTtcbiAgICAgICAgICBfZGVzdCA9IF9kZXN0W3N1cHBdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtcSkge1xuICAgICAgICAgIF9kZXN0W21xXSA9IF9kZXN0W21xXSB8fCB7fTtcbiAgICAgICAgICBfZGVzdCA9IF9kZXN0W21xXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICBfZGVzdFtzZWxlY3Rvcl0gPSBfZGVzdFtzZWxlY3Rvcl0gfHwge307XG4gICAgICAgICAgX2Rlc3QgPSBfZGVzdFtzZWxlY3Rvcl07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5ID09PSAnbGFiZWwnKSB7XG4gICAgICAgICAgaWYgKGhhc0xhYmVscykge1xuICAgICAgICAgICAgZGVzdC5sYWJlbCA9IGRlc3QubGFiZWwuY29uY2F0KF9zcmMubGFiZWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfZGVzdFtrZXldID0gX3NyY1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBfY3NzKHJ1bGVzKSB7XG4gIHZhciBzdHlsZSA9IHsgbGFiZWw6IFtdIH07XG4gIGJ1aWxkKHN0eWxlLCB7IHNyYzogcnVsZXMgfSk7IC8vIG11dGF0aXZlISBidXQgd29ydGggaXQuXG5cbiAgdmFyIHNwZWMgPSB7XG4gICAgaWQ6IGhhc2hpZnkoc3R5bGUpLFxuICAgIHN0eWxlOiBzdHlsZSwgbGFiZWw6IGhhc0xhYmVscyA/IHN0eWxlLmxhYmVsLmpvaW4oJy4nKSA6ICcnLFxuICAgIHR5cGU6ICdjc3MnXG4gIH07XG4gIHJldHVybiB0b1J1bGUoc3BlYyk7XG59XG5cbnZhciBudWxscnVsZSA9IHtcbiAgLy8gJ2RhdGEtY3NzLW5pbCc6ICcnXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG51bGxydWxlLCAndG9TdHJpbmcnLCB7XG4gIGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgcmV0dXJuICdjc3MtbmlsJztcbiAgfVxufSk7XG5cbnZhciBpbnB1dENhY2hlcyA9IHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJyA/IFtudWxscnVsZSwgbmV3IFdlYWtNYXAoKSwgbmV3IFdlYWtNYXAoKSwgbmV3IFdlYWtNYXAoKV0gOiBbbnVsbHJ1bGVdO1xuXG52YXIgd2FybmVkV2Vha01hcEVycm9yID0gZmFsc2U7XG5mdW5jdGlvbiBtdWx0aUluZGV4Q2FjaGUoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgaWYgKGlucHV0Q2FjaGVzW2FyZ3MubGVuZ3RoXSkge1xuICAgICAgdmFyIGNvaSA9IGlucHV0Q2FjaGVzW2FyZ3MubGVuZ3RoXTtcbiAgICAgIHZhciBjdHIgPSAwO1xuICAgICAgd2hpbGUgKGN0ciA8IGFyZ3MubGVuZ3RoIC0gMSkge1xuICAgICAgICBpZiAoIWNvaS5oYXMoYXJnc1tjdHJdKSkge1xuICAgICAgICAgIGNvaS5zZXQoYXJnc1tjdHJdLCBuZXcgV2Vha01hcCgpKTtcbiAgICAgICAgfVxuICAgICAgICBjb2kgPSBjb2kuZ2V0KGFyZ3NbY3RyXSk7XG4gICAgICAgIGN0cisrO1xuICAgICAgfVxuICAgICAgaWYgKGNvaS5oYXMoYXJnc1thcmdzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICB2YXIgcmV0ID0gY29pLmdldChhcmdzW2N0cl0pO1xuXG4gICAgICAgIGlmIChyZWdpc3RlcmVkW3JldC50b1N0cmluZygpLnN1YnN0cmluZyg0KV0pIHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgaXQgaGFzbid0IGJlZW4gZmx1c2hlZFxuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHZhbHVlID0gZm4oYXJncyk7XG4gICAgaWYgKGlucHV0Q2FjaGVzW2FyZ3MubGVuZ3RoXSkge1xuICAgICAgdmFyIF9jdHIgPSAwLFxuICAgICAgICAgIF9jb2kgPSBpbnB1dENhY2hlc1thcmdzLmxlbmd0aF07XG4gICAgICB3aGlsZSAoX2N0ciA8IGFyZ3MubGVuZ3RoIC0gMSkge1xuICAgICAgICBfY29pID0gX2NvaS5nZXQoYXJnc1tfY3RyXSk7XG4gICAgICAgIF9jdHIrKztcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIF9jb2kuc2V0KGFyZ3NbX2N0cl0sIHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoaXNEZXYgJiYgIXdhcm5lZFdlYWtNYXBFcnJvcikge1xuICAgICAgICAgIHZhciBfY29uc29sZTtcblxuICAgICAgICAgIHdhcm5lZFdlYWtNYXBFcnJvciA9IHRydWU7XG4gICAgICAgICAgKF9jb25zb2xlID0gY29uc29sZSkud2Fybi5hcHBseShfY29uc29sZSwgWydmYWlsZWQgc2V0dGluZyB0aGUgV2Vha01hcCBjYWNoZSBmb3IgYXJnczonXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3MpKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybigndGhpcyBzaG91bGQgTk9UIGhhcHBlbiwgcGxlYXNlIGZpbGUgYSBidWcgb24gdGhlIGdpdGh1YiByZXBvLicpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbnZhciBjYWNoZWRDc3MgPSB0eXBlb2YgV2Vha01hcCAhPT0gJ3VuZGVmaW5lZCcgPyBtdWx0aUluZGV4Q2FjaGUoX2NzcykgOiBfY3NzO1xuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgcnVsZXMgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIHJ1bGVzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICBpZiAocnVsZXNbMF0gJiYgcnVsZXNbMF0ubGVuZ3RoICYmIHJ1bGVzWzBdLnJhdykge1xuICAgIHRocm93IG5ldyBFcnJvcigneW91IGZvcmdvdCB0byBpbmNsdWRlIGdsYW1vci9iYWJlbCBpbiB5b3VyIGJhYmVsIHBsdWdpbnMuJyk7XG4gIH1cblxuICBydWxlcyA9ICgwLCBfY2xlYW4yLmRlZmF1bHQpKHJ1bGVzKTtcbiAgaWYgKCFydWxlcykge1xuICAgIHJldHVybiBudWxscnVsZTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZWRDc3MocnVsZXMpO1xufVxuXG5jc3MuaW5zZXJ0ID0gZnVuY3Rpb24gKGNzcykge1xuICB2YXIgc3BlYyA9IHtcbiAgICBpZDogaGFzaGlmeShjc3MpLFxuICAgIGNzczogY3NzLFxuICAgIHR5cGU6ICdyYXcnXG4gIH07XG4gIHJlZ2lzdGVyKHNwZWMpO1xuICBpZiAoIWluc2VydGVkW3NwZWMuaWRdKSB7XG4gICAgc3R5bGVTaGVldC5pbnNlcnQoc3BlYy5jc3MpO1xuICAgIGluc2VydGVkW3NwZWMuaWRdID0gaXNCcm93c2VyID8gdHJ1ZSA6IFtzcGVjLmNzc107XG4gIH1cbn07XG5cbnZhciBpbnNlcnRSdWxlID0gZXhwb3J0cy5pbnNlcnRSdWxlID0gY3NzLmluc2VydDtcblxuY3NzLmdsb2JhbCA9IGZ1bmN0aW9uIChzZWxlY3Rvciwgc3R5bGUpIHtcbiAgc3R5bGUgPSAoMCwgX2NsZWFuMi5kZWZhdWx0KShzdHlsZSk7XG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiBjc3MuaW5zZXJ0KHRvQ1NTKHsgc2VsZWN0b3I6IHNlbGVjdG9yLCBzdHlsZTogc3R5bGUgfSkpO1xuICB9XG59O1xuXG52YXIgaW5zZXJ0R2xvYmFsID0gZXhwb3J0cy5pbnNlcnRHbG9iYWwgPSBjc3MuZ2xvYmFsO1xuXG5mdW5jdGlvbiBpbnNlcnRLZXlmcmFtZShzcGVjKSB7XG4gIGlmICghaW5zZXJ0ZWRbc3BlYy5pZF0pIHtcbiAgICB2YXIgaW5uZXIgPSBPYmplY3Qua2V5cyhzcGVjLmtleWZyYW1lcykubWFwKGZ1bmN0aW9uIChrZikge1xuICAgICAgdmFyIHJlc3VsdCA9IHBsdWdpbnMua2V5ZnJhbWVzLnRyYW5zZm9ybSh7IGlkOiBzcGVjLmlkLCBuYW1lOiBrZiwgc3R5bGU6IHNwZWMua2V5ZnJhbWVzW2tmXSB9KTtcbiAgICAgIHJldHVybiByZXN1bHQubmFtZSArICd7JyArICgwLCBfQ1NTUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclN0eWxlcykocmVzdWx0LnN0eWxlKSArICd9JztcbiAgICB9KS5qb2luKCcnKTtcblxuICAgIHZhciBydWxlcyA9IFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnLW8tJywgJyddLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gJ0AnICsgcHJlZml4ICsgJ2tleWZyYW1lcyAnICsgKHNwZWMubmFtZSArICdfJyArIHNwZWMuaWQpICsgJ3snICsgaW5uZXIgKyAnfSc7XG4gICAgfSk7XG4gICAgcnVsZXMuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgcmV0dXJuIHN0eWxlU2hlZXQuaW5zZXJ0KHJ1bGUpO1xuICAgIH0pO1xuXG4gICAgaW5zZXJ0ZWRbc3BlYy5pZF0gPSBpc0Jyb3dzZXIgPyB0cnVlIDogcnVsZXM7XG4gIH1cbn1cbmNzcy5rZXlmcmFtZXMgPSBmdW5jdGlvbiAobmFtZSwga2ZzKSB7XG4gIGlmICgha2ZzKSB7XG4gICAga2ZzID0gbmFtZSwgbmFtZSA9ICdhbmltYXRpb24nO1xuICB9XG5cbiAgLy8gZG8gbm90IGlnbm9yZSBlbXB0eSBrZXlmcmFtZSBkZWZpbml0aW9ucyBmb3Igbm93LlxuICBrZnMgPSAoMCwgX2NsZWFuMi5kZWZhdWx0KShrZnMpIHx8IHt9O1xuICB2YXIgc3BlYyA9IHtcbiAgICBpZDogaGFzaGlmeSh7IG5hbWU6IG5hbWUsIGtmczoga2ZzIH0pLFxuICAgIHR5cGU6ICdrZXlmcmFtZXMnLFxuICAgIG5hbWU6IG5hbWUsXG4gICAga2V5ZnJhbWVzOiBrZnNcbiAgfTtcbiAgcmVnaXN0ZXIoc3BlYyk7XG4gIGluc2VydEtleWZyYW1lKHNwZWMpO1xuICByZXR1cm4gbmFtZSArICdfJyArIHNwZWMuaWQ7XG59O1xuXG4vLyB3ZSBkb24ndCBnbyBhbGwgb3V0IGZvciBmb250cyBhcyBtdWNoLCBnaXZpbmcgYSBzaW1wbGUgZm9udCBsb2FkaW5nIHN0cmF0ZWd5XG4vLyB1c2UgYSBmYW5jaWVyIGxpYiBpZiB5b3UgbmVlZCBtb2FyIHBvd2VyXG5jc3MuZm9udEZhY2UgPSBmdW5jdGlvbiAoZm9udCkge1xuICBmb250ID0gKDAsIF9jbGVhbjIuZGVmYXVsdCkoZm9udCk7XG4gIHZhciBzcGVjID0ge1xuICAgIGlkOiBoYXNoaWZ5KGZvbnQpLFxuICAgIHR5cGU6ICdmb250LWZhY2UnLFxuICAgIGZvbnQ6IGZvbnRcbiAgfTtcbiAgcmVnaXN0ZXIoc3BlYyk7XG4gIGluc2VydEZvbnRGYWNlKHNwZWMpO1xuXG4gIHJldHVybiBmb250LmZvbnRGYW1pbHk7XG59O1xuXG52YXIgZm9udEZhY2UgPSBleHBvcnRzLmZvbnRGYWNlID0gY3NzLmZvbnRGYWNlO1xudmFyIGtleWZyYW1lcyA9IGV4cG9ydHMua2V5ZnJhbWVzID0gY3NzLmtleWZyYW1lcztcblxuZnVuY3Rpb24gaW5zZXJ0Rm9udEZhY2Uoc3BlYykge1xuICBpZiAoIWluc2VydGVkW3NwZWMuaWRdKSB7XG4gICAgdmFyIHJ1bGUgPSAnQGZvbnQtZmFjZXsnICsgKDAsIF9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yU3R5bGVzKShzcGVjLmZvbnQpICsgJ30nO1xuICAgIHN0eWxlU2hlZXQuaW5zZXJ0KHJ1bGUpO1xuICAgIGluc2VydGVkW3NwZWMuaWRdID0gaXNCcm93c2VyID8gdHJ1ZSA6IFtydWxlXTtcbiAgfVxufVxuXG4vLyByZWh5ZHJhdGUgdGhlIGluc2VydGlvbiBjYWNoZSB3aXRoIGlkcyBzZW50IGZyb21cbi8vIHJlbmRlclN0YXRpYyAvIHJlbmRlclN0YXRpY09wdGltaXplZFxuZnVuY3Rpb24gcmVoeWRyYXRlKGlkcykge1xuICAvLyBsb2FkIHVwIGlkc1xuICAoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoaW5zZXJ0ZWQsIGlkcy5yZWR1Y2UoZnVuY3Rpb24gKG8sIGkpIHtcbiAgICByZXR1cm4gb1tpXSA9IHRydWUsIG87XG4gIH0sIHt9KSk7XG4gIC8vIGFzc3VtZSBjc3MgbG9hZGVkIHNlcGFyYXRlbHlcbn1cblxuLy8gY2xlYXJzIG91dCB0aGUgY2FjaGUgYW5kIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXRcbi8vIGJlc3QgZm9yIHRlc3RzLCB0aG91Z2ggdGhlcmUgbWlnaHQgYmUgc29tZSB2YWx1ZSBmb3IgU1NSLlxuXG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgaW5zZXJ0ZWQgPSBzdHlsZVNoZWV0Lmluc2VydGVkID0ge307XG4gIHJlZ2lzdGVyZWQgPSBzdHlsZVNoZWV0LnJlZ2lzdGVyZWQgPSB7fTtcbiAgcnVsZUNhY2hlID0ge307XG4gIHN0eWxlU2hlZXQuZmx1c2goKTtcbiAgc3R5bGVTaGVldC5pbmplY3QoKTtcbn1cblxudmFyIHByZXNldHMgPSBleHBvcnRzLnByZXNldHMgPSB7XG4gIG1vYmlsZTogJyhtaW4td2lkdGg6IDQwMHB4KScsXG4gIE1vYmlsZTogJ0BtZWRpYSAobWluLXdpZHRoOiA0MDBweCknLFxuICBwaGFibGV0OiAnKG1pbi13aWR0aDogNTUwcHgpJyxcbiAgUGhhYmxldDogJ0BtZWRpYSAobWluLXdpZHRoOiA1NTBweCknLFxuICB0YWJsZXQ6ICcobWluLXdpZHRoOiA3NTBweCknLFxuICBUYWJsZXQ6ICdAbWVkaWEgKG1pbi13aWR0aDogNzUwcHgpJyxcbiAgZGVza3RvcDogJyhtaW4td2lkdGg6IDEwMDBweCknLFxuICBEZXNrdG9wOiAnQG1lZGlhIChtaW4td2lkdGg6IDEwMDBweCknLFxuICBoZDogJyhtaW4td2lkdGg6IDEyMDBweCknLFxuICBIZDogJ0BtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpJ1xufTtcblxudmFyIHN0eWxlID0gZXhwb3J0cy5zdHlsZSA9IGNzcztcblxuZnVuY3Rpb24gc2VsZWN0KHNlbGVjdG9yKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgc3R5bGVzID0gQXJyYXkoX2xlbjMgPiAxID8gX2xlbjMgLSAxIDogMCksIF9rZXkzID0gMTsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIHN0eWxlc1tfa2V5MyAtIDFdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIGlmICghc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gc3R5bGUoc3R5bGVzKTtcbiAgfVxuICByZXR1cm4gY3NzKF9kZWZpbmVQcm9wZXJ0eSh7fSwgc2VsZWN0b3IsIHN0eWxlcykpO1xufVxudmFyICQgPSBleHBvcnRzLiQgPSBzZWxlY3Q7XG5cbmZ1bmN0aW9uIHBhcmVudChzZWxlY3Rvcikge1xuICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0eWxlcyA9IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBzdHlsZXNbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICByZXR1cm4gY3NzKF9kZWZpbmVQcm9wZXJ0eSh7fSwgc2VsZWN0b3IgKyAnICYnLCBzdHlsZXMpKTtcbn1cblxudmFyIG1lcmdlID0gZXhwb3J0cy5tZXJnZSA9IGNzcztcbnZhciBjb21wb3NlID0gZXhwb3J0cy5jb21wb3NlID0gY3NzO1xuXG5mdW5jdGlvbiBtZWRpYShxdWVyeSkge1xuICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIHJ1bGVzID0gQXJyYXkoX2xlbjUgPiAxID8gX2xlbjUgLSAxIDogMCksIF9rZXk1ID0gMTsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIHJ1bGVzW19rZXk1IC0gMV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgcmV0dXJuIGNzcyhfZGVmaW5lUHJvcGVydHkoe30sICdAbWVkaWEgJyArIHF1ZXJ5LCBydWxlcykpO1xufVxuXG5mdW5jdGlvbiBwc2V1ZG8oc2VsZWN0b3IpIHtcbiAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZXMgPSBBcnJheShfbGVuNiA+IDEgPyBfbGVuNiAtIDEgOiAwKSwgX2tleTYgPSAxOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgc3R5bGVzW19rZXk2IC0gMV0gPSBhcmd1bWVudHNbX2tleTZdO1xuICB9XG5cbiAgcmV0dXJuIGNzcyhfZGVmaW5lUHJvcGVydHkoe30sIHNlbGVjdG9yLCBzdHlsZXMpKTtcbn1cblxuLy8gYWxsbGxsbCB0aGUgcHNldWRvY2xhc3Nlc1xuXG5mdW5jdGlvbiBhY3RpdmUoeCkge1xuICByZXR1cm4gcHNldWRvKCc6YWN0aXZlJywgeCk7XG59XG5cbmZ1bmN0aW9uIGFueSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzphbnknLCB4KTtcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpjaGVja2VkJywgeCk7XG59XG5cbmZ1bmN0aW9uIGRpc2FibGVkKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmRpc2FibGVkJywgeCk7XG59XG5cbmZ1bmN0aW9uIGVtcHR5KHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmVtcHR5JywgeCk7XG59XG5cbmZ1bmN0aW9uIGVuYWJsZWQoeCkge1xuICByZXR1cm4gcHNldWRvKCc6ZW5hYmxlZCcsIHgpO1xufVxuXG5mdW5jdGlvbiBfZGVmYXVsdCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpkZWZhdWx0JywgeCk7IC8vIG5vdGUgJ19kZWZhdWx0JyBuYW1lXG59XG5cbmZ1bmN0aW9uIGZpcnN0KHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmZpcnN0JywgeCk7XG59XG5cbmZ1bmN0aW9uIGZpcnN0Q2hpbGQoeCkge1xuICByZXR1cm4gcHNldWRvKCc6Zmlyc3QtY2hpbGQnLCB4KTtcbn1cblxuZnVuY3Rpb24gZmlyc3RPZlR5cGUoeCkge1xuICByZXR1cm4gcHNldWRvKCc6Zmlyc3Qtb2YtdHlwZScsIHgpO1xufVxuXG5mdW5jdGlvbiBmdWxsc2NyZWVuKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmZ1bGxzY3JlZW4nLCB4KTtcbn1cblxuZnVuY3Rpb24gZm9jdXMoeCkge1xuICByZXR1cm4gcHNldWRvKCc6Zm9jdXMnLCB4KTtcbn1cblxuZnVuY3Rpb24gaG92ZXIoeCkge1xuICByZXR1cm4gcHNldWRvKCc6aG92ZXInLCB4KTtcbn1cblxuZnVuY3Rpb24gaW5kZXRlcm1pbmF0ZSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzppbmRldGVybWluYXRlJywgeCk7XG59XG5cbmZ1bmN0aW9uIGluUmFuZ2UoeCkge1xuICByZXR1cm4gcHNldWRvKCc6aW4tcmFuZ2UnLCB4KTtcbn1cblxuZnVuY3Rpb24gaW52YWxpZCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzppbnZhbGlkJywgeCk7XG59XG5cbmZ1bmN0aW9uIGxhc3RDaGlsZCh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpsYXN0LWNoaWxkJywgeCk7XG59XG5cbmZ1bmN0aW9uIGxhc3RPZlR5cGUoeCkge1xuICByZXR1cm4gcHNldWRvKCc6bGFzdC1vZi10eXBlJywgeCk7XG59XG5cbmZ1bmN0aW9uIGxlZnQoeCkge1xuICByZXR1cm4gcHNldWRvKCc6bGVmdCcsIHgpO1xufVxuXG5mdW5jdGlvbiBsaW5rKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOmxpbmsnLCB4KTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOm9ubHktY2hpbGQnLCB4KTtcbn1cblxuZnVuY3Rpb24gb25seU9mVHlwZSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpvbmx5LW9mLXR5cGUnLCB4KTtcbn1cblxuZnVuY3Rpb24gb3B0aW9uYWwoeCkge1xuICByZXR1cm4gcHNldWRvKCc6b3B0aW9uYWwnLCB4KTtcbn1cblxuZnVuY3Rpb24gb3V0T2ZSYW5nZSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpvdXQtb2YtcmFuZ2UnLCB4KTtcbn1cblxuZnVuY3Rpb24gcmVhZE9ubHkoeCkge1xuICByZXR1cm4gcHNldWRvKCc6cmVhZC1vbmx5JywgeCk7XG59XG5cbmZ1bmN0aW9uIHJlYWRXcml0ZSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpyZWFkLXdyaXRlJywgeCk7XG59XG5cbmZ1bmN0aW9uIHJlcXVpcmVkKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOnJlcXVpcmVkJywgeCk7XG59XG5cbmZ1bmN0aW9uIHJpZ2h0KHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOnJpZ2h0JywgeCk7XG59XG5cbmZ1bmN0aW9uIHJvb3QoeCkge1xuICByZXR1cm4gcHNldWRvKCc6cm9vdCcsIHgpO1xufVxuXG5mdW5jdGlvbiBzY29wZSh4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpzY29wZScsIHgpO1xufVxuXG5mdW5jdGlvbiB0YXJnZXQoeCkge1xuICByZXR1cm4gcHNldWRvKCc6dGFyZ2V0JywgeCk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOnZhbGlkJywgeCk7XG59XG5cbmZ1bmN0aW9uIHZpc2l0ZWQoeCkge1xuICByZXR1cm4gcHNldWRvKCc6dmlzaXRlZCcsIHgpO1xufVxuXG4vLyBwYXJhbWV0ZXJpemVkIHBzZXVkb2NsYXNzZXNcbmZ1bmN0aW9uIGRpcihwLCB4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpkaXIoJyArIHAgKyAnKScsIHgpO1xufVxuZnVuY3Rpb24gbGFuZyhwLCB4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpsYW5nKCcgKyBwICsgJyknLCB4KTtcbn1cbmZ1bmN0aW9uIG5vdChwLCB4KSB7XG4gIC8vIHNob3VsZCB0aGlzIGJlIGEgcGx1Z2luP1xuICB2YXIgc2VsZWN0b3IgPSBwLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHgudHJpbSgpO1xuICB9KS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gJzpub3QoJyArIHggKyAnKSc7XG4gIH0pO1xuICBpZiAoc2VsZWN0b3IubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHBzZXVkbygnOm5vdCgnICsgcCArICcpJywgeCk7XG4gIH1cbiAgcmV0dXJuIHNlbGVjdChzZWxlY3Rvci5qb2luKCcnKSwgeCk7XG59XG5mdW5jdGlvbiBudGhDaGlsZChwLCB4KSB7XG4gIHJldHVybiBwc2V1ZG8oJzpudGgtY2hpbGQoJyArIHAgKyAnKScsIHgpO1xufVxuZnVuY3Rpb24gbnRoTGFzdENoaWxkKHAsIHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOm50aC1sYXN0LWNoaWxkKCcgKyBwICsgJyknLCB4KTtcbn1cbmZ1bmN0aW9uIG50aExhc3RPZlR5cGUocCwgeCkge1xuICByZXR1cm4gcHNldWRvKCc6bnRoLWxhc3Qtb2YtdHlwZSgnICsgcCArICcpJywgeCk7XG59XG5mdW5jdGlvbiBudGhPZlR5cGUocCwgeCkge1xuICByZXR1cm4gcHNldWRvKCc6bnRoLW9mLXR5cGUoJyArIHAgKyAnKScsIHgpO1xufVxuXG4vLyBwc2V1ZG9lbGVtZW50c1xuZnVuY3Rpb24gYWZ0ZXIoeCkge1xuICByZXR1cm4gcHNldWRvKCc6OmFmdGVyJywgeCk7XG59XG5mdW5jdGlvbiBiZWZvcmUoeCkge1xuICByZXR1cm4gcHNldWRvKCc6OmJlZm9yZScsIHgpO1xufVxuZnVuY3Rpb24gZmlyc3RMZXR0ZXIoeCkge1xuICByZXR1cm4gcHNldWRvKCc6OmZpcnN0LWxldHRlcicsIHgpO1xufVxuZnVuY3Rpb24gZmlyc3RMaW5lKHgpIHtcbiAgcmV0dXJuIHBzZXVkbygnOjpmaXJzdC1saW5lJywgeCk7XG59XG5mdW5jdGlvbiBzZWxlY3Rpb24oeCkge1xuICByZXR1cm4gcHNldWRvKCc6OnNlbGVjdGlvbicsIHgpO1xufVxuZnVuY3Rpb24gYmFja2Ryb3AoeCkge1xuICByZXR1cm4gcHNldWRvKCc6OmJhY2tkcm9wJywgeCk7XG59XG5mdW5jdGlvbiBwbGFjZWhvbGRlcih4KSB7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90aHJlZXBvaW50b25lL2dsYW1vci9pc3N1ZXMvMTRcbiAgcmV0dXJuIGNzcyh7ICc6OnBsYWNlaG9sZGVyJzogeCB9KTtcbn1cblxuLyoqKiBoZWxwZXJzIGZvciB3ZWIgY29tcG9uZW50cyAqKiovXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGhyZWVwb2ludG9uZS9nbGFtb3IvaXNzdWVzLzE2XG5cbmZ1bmN0aW9uIGNzc0ZvcigpIHtcbiAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBydWxlcyA9IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgcnVsZXNbX2tleTddID0gYXJndW1lbnRzW19rZXk3XTtcbiAgfVxuXG4gIHJ1bGVzID0gKDAsIF9jbGVhbjIuZGVmYXVsdCkocnVsZXMpO1xuICByZXR1cm4gcnVsZXMgPyBydWxlcy5tYXAoZnVuY3Rpb24gKHIpIHtcbiAgICB2YXIgc3R5bGUgPSB7IGxhYmVsOiBbXSB9O1xuICAgIGJ1aWxkKHN0eWxlLCB7IHNyYzogciB9KTsgLy8gbXV0YXRpdmUhIGJ1dCB3b3J0aCBpdC5cbiAgICByZXR1cm4gZGVjb25zdHJ1Y3RlZFN0eWxlVG9DU1MoaGFzaGlmeShzdHlsZSksIGRlY29uc3RydWN0KHN0eWxlKSkuam9pbignJyk7XG4gIH0pLmpvaW4oJycpIDogJyc7XG59XG5cbmZ1bmN0aW9uIGF0dHJpYnNGb3IoKSB7XG4gIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgcnVsZXMgPSBBcnJheShfbGVuOCksIF9rZXk4ID0gMDsgX2tleTggPCBfbGVuODsgX2tleTgrKykge1xuICAgIHJ1bGVzW19rZXk4XSA9IGFyZ3VtZW50c1tfa2V5OF07XG4gIH1cblxuICBydWxlcyA9ICgwLCBfY2xlYW4yLmRlZmF1bHQpKHJ1bGVzKTtcbiAgdmFyIGh0bWxBdHRyaWJ1dGVzID0gcnVsZXMgPyBydWxlcy5tYXAoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICBpZEZvcihydWxlKTsgLy8gdGhyb3dhd2F5IGNoZWNrIGZvciBydWxlXG4gICAgdmFyIGtleSA9IE9iamVjdC5rZXlzKHJ1bGUpWzBdLFxuICAgICAgICB2YWx1ZSA9IHJ1bGVba2V5XTtcbiAgICByZXR1cm4ga2V5ICsgJz1cIicgKyAodmFsdWUgfHwgJycpICsgJ1wiJztcbiAgfSkuam9pbignICcpIDogJyc7XG5cbiAgcmV0dXJuIGh0bWxBdHRyaWJ1dGVzO1xufSIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgcmVwZWF0ID0gKCAoU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQgJiYgZnVuY3Rpb24gKGNvdW50LHNlbGYpe3JldHVybiBzZWxmLnJlcGVhdChjb3VudCl9KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihjb3VudCAsIHNlbGYpIHtcbiAgICAgICAgaWYgKHNlbGYubGVuZ3RoID09IDAgfHwgY291bnQgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyaW5nIGNvdW50IGlzIGEgMzEtYml0IGludGVnZXIgYWxsb3dzIHVzIHRvIGhlYXZpbHkgb3B0aW1pemUgdGhlXG4gICAgICAgIC8vIG1haW4gcGFydC4gQnV0IGFueXdheSwgbW9zdCBjdXJyZW50IChBdWd1c3QgMjAxNCkgYnJvd3NlcnMgY2FuJ3QgaGFuZGxlXG4gICAgICAgIC8vIHN0cmluZ3MgMSA8PCAyOCBjaGFycyBvciBsb25nZXIsIHNvOlxuICAgICAgICBpZiAoc2VsZi5sZW5ndGggKiBjb3VudCA+PSAxIDw8IDI4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigncmVwZWF0IGNvdW50IG11c3Qgbm90IG92ZXJmbG93IG1heGltdW0gc3RyaW5nIHNpemUnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcnB0ID0gJyc7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGlmICgoY291bnQgJiAxKSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgcnB0ICs9IHNlbGY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb3VudCA+Pj49IDE7XG4gICAgICAgICAgICBpZiAoY291bnQgPT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZiArPSBzZWxmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBycHQ7XG4gICAgfVxuKTtcblxuZXhwb3J0cy5yZXBlYXQgPSByZXBlYXQ7XG4vKiByZXBlYXQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDdXJyeSA9IHJlcXVpcmUoXCIuL2N1cnJ5LmpzXCIpO1xudmFyIENhbWxfaW8gPSByZXF1aXJlKFwiLi9jYW1sX2lvLmpzXCIpO1xudmFyIENhbWxfc3lzID0gcmVxdWlyZShcIi4vY2FtbF9zeXMuanNcIik7XG52YXIgQ2FtbF9mb3JtYXQgPSByZXF1aXJlKFwiLi9jYW1sX2Zvcm1hdC5qc1wiKTtcbnZhciBDYW1sX3N0cmluZyA9IHJlcXVpcmUoXCIuL2NhbWxfc3RyaW5nLmpzXCIpO1xudmFyIENhbWxfZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfZXhjZXB0aW9ucy5qc1wiKTtcbnZhciBDYW1sX21pc3NpbmdfcG9seWZpbGwgPSByZXF1aXJlKFwiLi9jYW1sX21pc3NpbmdfcG9seWZpbGwuanNcIik7XG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcbnZhciBDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MgPSByZXF1aXJlKFwiLi9jYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MuanNcIik7XG5cbmZ1bmN0aW9uIGZhaWx3aXRoKHMpIHtcbiAgdGhyb3cgW1xuICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICBzXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiBpbnZhbGlkX2FyZyhzKSB7XG4gIHRocm93IFtcbiAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgc1xuICAgICAgXTtcbn1cblxudmFyIEV4aXQgPSBDYW1sX2V4Y2VwdGlvbnMuY3JlYXRlKFwiUGVydmFzaXZlcy5FeGl0XCIpO1xuXG5mdW5jdGlvbiBhYnMoeCkge1xuICBpZiAoeCA+PSAwKSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC14IHwgMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBsbm90KHgpIHtcbiAgcmV0dXJuIHggXiAtMTtcbn1cblxudmFyIG1pbl9pbnQgPSAtMjE0NzQ4MzY0ODtcblxuZnVuY3Rpb24gY2hhcl9vZl9pbnQobikge1xuICBpZiAobiA8IDAgfHwgbiA+IDI1NSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiY2hhcl9vZl9pbnRcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9ib29sKGIpIHtcbiAgaWYgKGIpIHtcbiAgICByZXR1cm4gXCJ0cnVlXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiZmFsc2VcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBib29sX29mX3N0cmluZyhwYXJhbSkge1xuICBzd2l0Y2ggKHBhcmFtKSB7XG4gICAgY2FzZSBcImZhbHNlXCIgOiBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJ0cnVlXCIgOiBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICBcImJvb2xfb2Zfc3RyaW5nXCJcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkX2Zsb2F0X2xleGVtKHMpIHtcbiAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgdmFyIF9pID0gMDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPj0gbCkge1xuICAgICAgcmV0dXJuIHMgKyBcIi5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG1hdGNoID0gQ2FtbF9zdHJpbmcuZ2V0KHMsIGkpO1xuICAgICAgaWYgKG1hdGNoID49IDQ4KSB7XG4gICAgICAgIGlmIChtYXRjaCA+PSA1OCkge1xuICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChtYXRjaCAhPT0gNDUpIHtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2Zsb2F0KGYpIHtcbiAgcmV0dXJuIHZhbGlkX2Zsb2F0X2xleGVtKENhbWxfZm9ybWF0LmNhbWxfZm9ybWF0X2Zsb2F0KFwiJS4xMmdcIiwgZikpO1xufVxuXG5mdW5jdGlvbiAkYXQobDEsIGwyKSB7XG4gIGlmIChsMSkge1xuICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgIGwxWzBdLFxuICAgICAgICAgICAgJGF0KGwxWzFdLCBsMilcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsMjtcbiAgfVxufVxuXG52YXIgc3RkaW4gPSBDYW1sX2lvLnN0ZGluO1xuXG52YXIgc3Rkb3V0ID0gQ2FtbF9pby5zdGRvdXQ7XG5cbnZhciBzdGRlcnIgPSBDYW1sX2lvLnN0ZGVycjtcblxuZnVuY3Rpb24gb3Blbl9vdXRfZ2VuKF8sIF8kMSwgXyQyKSB7XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfb3Blbl9kZXNjcmlwdG9yX291dChDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9zeXNfb3BlblwiKSk7XG59XG5cbmZ1bmN0aW9uIG9wZW5fb3V0KG5hbWUpIHtcbiAgcmV0dXJuIG9wZW5fb3V0X2dlbigvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogT3Blbl93cm9ubHkgKi8xLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAvKiBPcGVuX2NyZWF0ICovMyxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIC8qIE9wZW5fdHJ1bmMgKi80LFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIE9wZW5fdGV4dCAqLzcsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSwgNDM4LCBuYW1lKTtcbn1cblxuZnVuY3Rpb24gb3Blbl9vdXRfYmluKG5hbWUpIHtcbiAgcmV0dXJuIG9wZW5fb3V0X2dlbigvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogT3Blbl93cm9ubHkgKi8xLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAvKiBPcGVuX2NyZWF0ICovMyxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIC8qIE9wZW5fdHJ1bmMgKi80LFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIE9wZW5fYmluYXJ5ICovNixcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdLCA0MzgsIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBmbHVzaF9hbGwoKSB7XG4gIHZhciBfcGFyYW0gPSBDYW1sX2lvLmNhbWxfbWxfb3V0X2NoYW5uZWxzX2xpc3QoLyogKCkgKi8wKTtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIENhbWxfaW8uY2FtbF9tbF9mbHVzaChwYXJhbVswXSk7XG4gICAgICB9XG4gICAgICBjYXRjaCAoZXhuKXtcbiAgICAgICAgXG4gICAgICB9XG4gICAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG91dHB1dF9ieXRlcyhvYywgcykge1xuICByZXR1cm4gQ2FtbF9pby5jYW1sX21sX291dHB1dChvYywgcywgMCwgcy5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBvdXRwdXRfc3RyaW5nKG9jLCBzKSB7XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0KG9jLCBzLCAwLCBzLmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIG91dHB1dChvYywgcywgb2ZzLCBsZW4pIHtcbiAgaWYgKG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiAocy5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwib3V0cHV0XCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ2FtbF9pby5jYW1sX21sX291dHB1dChvYywgcywgb2ZzLCBsZW4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG91dHB1dF9zdWJzdHJpbmcob2MsIHMsIG9mcywgbGVuKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKHMubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIm91dHB1dF9zdWJzdHJpbmdcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0KG9jLCBzLCBvZnMsIGxlbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3V0cHV0X3ZhbHVlKF8sIF8kMSkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfb3V0cHV0X3ZhbHVlXCIpO1xufVxuXG5mdW5jdGlvbiBjbG9zZV9vdXQob2MpIHtcbiAgQ2FtbF9pby5jYW1sX21sX2ZsdXNoKG9jKTtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX2Nsb3NlX2NoYW5uZWxcIik7XG59XG5cbmZ1bmN0aW9uIGNsb3NlX291dF9ub2VycihvYykge1xuICB0cnkge1xuICAgIENhbWxfaW8uY2FtbF9tbF9mbHVzaChvYyk7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgXG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfY2xvc2VfY2hhbm5lbFwiKTtcbiAgfVxuICBjYXRjaCAoZXhuJDEpe1xuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3Blbl9pbl9nZW4oXywgXyQxLCBfJDIpIHtcbiAgcmV0dXJuIENhbWxfaW8uY2FtbF9tbF9vcGVuX2Rlc2NyaXB0b3JfaW4oQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfc3lzX29wZW5cIikpO1xufVxuXG5mdW5jdGlvbiBvcGVuX2luKG5hbWUpIHtcbiAgcmV0dXJuIG9wZW5faW5fZ2VuKC8qIDo6ICovW1xuICAgICAgICAgICAgICAvKiBPcGVuX3Jkb25seSAqLzAsXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIC8qIE9wZW5fdGV4dCAqLzcsXG4gICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0sIDAsIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBvcGVuX2luX2JpbihuYW1lKSB7XG4gIHJldHVybiBvcGVuX2luX2dlbigvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogT3Blbl9yZG9ubHkgKi8wLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAvKiBPcGVuX2JpbmFyeSAqLzYsXG4gICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0sIDAsIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBpbnB1dChfLCBzLCBvZnMsIGxlbikge1xuICBpZiAob2ZzIDwgMCB8fCBsZW4gPCAwIHx8IG9mcyA+IChzLmxlbmd0aCAtIGxlbiB8IDApKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJpbnB1dFwiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX2lucHV0XCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuc2FmZV9yZWFsbHlfaW5wdXQoXywgXyQxLCBfb2ZzLCBfbGVuKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbGVuID0gX2xlbjtcbiAgICB2YXIgb2ZzID0gX29mcztcbiAgICBpZiAobGVuIDw9IDApIHtcbiAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByID0gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfaW5wdXRcIik7XG4gICAgICBpZiAociA9PT0gMCkge1xuICAgICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5lbmRfb2ZfZmlsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9sZW4gPSBsZW4gLSByIHwgMDtcbiAgICAgICAgX29mcyA9IG9mcyArIHIgfCAwO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByZWFsbHlfaW5wdXQoaWMsIHMsIG9mcywgbGVuKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKHMubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcInJlYWxseV9pbnB1dFwiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuc2FmZV9yZWFsbHlfaW5wdXQoaWMsIHMsIG9mcywgbGVuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWFsbHlfaW5wdXRfc3RyaW5nKGljLCBsZW4pIHtcbiAgdmFyIHMgPSBDYW1sX3N0cmluZy5jYW1sX2NyZWF0ZV9zdHJpbmcobGVuKTtcbiAgcmVhbGx5X2lucHV0KGljLCBzLCAwLCBsZW4pO1xuICByZXR1cm4gQ2FtbF9zdHJpbmcuYnl0ZXNfdG9fc3RyaW5nKHMpO1xufVxuXG5mdW5jdGlvbiBpbnB1dF9saW5lKGNoYW4pIHtcbiAgdmFyIGJ1aWxkX3Jlc3VsdCA9IGZ1bmN0aW9uIChidWYsIF9wb3MsIF9wYXJhbSkge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICAgIHZhciBwb3MgPSBfcG9zO1xuICAgICAgaWYgKHBhcmFtKSB7XG4gICAgICAgIHZhciBoZCA9IHBhcmFtWzBdO1xuICAgICAgICB2YXIgbGVuID0gaGQubGVuZ3RoO1xuICAgICAgICBDYW1sX3N0cmluZy5jYW1sX2JsaXRfYnl0ZXMoaGQsIDAsIGJ1ZiwgcG9zIC0gbGVuIHwgMCwgbGVuKTtcbiAgICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICAgIF9wb3MgPSBwb3MgLSBsZW4gfCAwO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYnVmO1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIHZhciBzY2FuID0gZnVuY3Rpb24gKF9hY2N1LCBfbGVuKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGxlbiA9IF9sZW47XG4gICAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgICAgdmFyIG4gPSBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9pbnB1dF9zY2FuX2xpbmVcIik7XG4gICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICBpZiAoYWNjdSkge1xuICAgICAgICAgIHJldHVybiBidWlsZF9yZXN1bHQoQ2FtbF9zdHJpbmcuY2FtbF9jcmVhdGVfc3RyaW5nKGxlbiksIGxlbiwgYWNjdSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZW5kX29mX2ZpbGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobiA+IDApIHtcbiAgICAgICAgdmFyIHJlcyA9IENhbWxfc3RyaW5nLmNhbWxfY3JlYXRlX3N0cmluZyhuIC0gMSB8IDApO1xuICAgICAgICBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9pbnB1dFwiKTtcbiAgICAgICAgQ2FtbF9pby5jYW1sX21sX2lucHV0X2NoYXIoY2hhbik7XG4gICAgICAgIGlmIChhY2N1KSB7XG4gICAgICAgICAgdmFyIGxlbiQxID0gKGxlbiArIG4gfCAwKSAtIDEgfCAwO1xuICAgICAgICAgIHJldHVybiBidWlsZF9yZXN1bHQoQ2FtbF9zdHJpbmcuY2FtbF9jcmVhdGVfc3RyaW5nKGxlbiQxKSwgbGVuJDEsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHJlcyxcbiAgICAgICAgICAgICAgICAgICAgICBhY2N1XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBiZWcgPSBDYW1sX3N0cmluZy5jYW1sX2NyZWF0ZV9zdHJpbmcoLW4gfCAwKTtcbiAgICAgICAgQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfaW5wdXRcIik7XG4gICAgICAgIF9sZW4gPSBsZW4gLSBuIHwgMDtcbiAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICBiZWcsXG4gICAgICAgICAgYWNjdVxuICAgICAgICBdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIENhbWxfc3RyaW5nLmJ5dGVzX3RvX3N0cmluZyhzY2FuKC8qIFtdICovMCwgMCkpO1xufVxuXG5mdW5jdGlvbiBjbG9zZV9pbl9ub2VycigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfY2xvc2VfY2hhbm5lbFwiKTtcbiAgfVxuICBjYXRjaCAoZXhuKXtcbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByaW50X2NoYXIoYykge1xuICByZXR1cm4gQ2FtbF9pby5jYW1sX21sX291dHB1dF9jaGFyKHN0ZG91dCwgYyk7XG59XG5cbmZ1bmN0aW9uIHByaW50X3N0cmluZyhzKSB7XG4gIHJldHVybiBvdXRwdXRfc3RyaW5nKHN0ZG91dCwgcyk7XG59XG5cbmZ1bmN0aW9uIHByaW50X2J5dGVzKHMpIHtcbiAgcmV0dXJuIG91dHB1dF9ieXRlcyhzdGRvdXQsIHMpO1xufVxuXG5mdW5jdGlvbiBwcmludF9pbnQoaSkge1xuICByZXR1cm4gb3V0cHV0X3N0cmluZyhzdGRvdXQsIFN0cmluZyhpKSk7XG59XG5cbmZ1bmN0aW9uIHByaW50X2Zsb2F0KGYpIHtcbiAgcmV0dXJuIG91dHB1dF9zdHJpbmcoc3Rkb3V0LCB2YWxpZF9mbG9hdF9sZXhlbShDYW1sX2Zvcm1hdC5jYW1sX2Zvcm1hdF9mbG9hdChcIiUuMTJnXCIsIGYpKSk7XG59XG5cbmZ1bmN0aW9uIHByaW50X25ld2xpbmUoKSB7XG4gIENhbWxfaW8uY2FtbF9tbF9vdXRwdXRfY2hhcihzdGRvdXQsIC8qIFwiXFxuXCIgKi8xMCk7XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfY2hhcihjKSB7XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0X2NoYXIoc3RkZXJyLCBjKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfc3RyaW5nKHMpIHtcbiAgcmV0dXJuIG91dHB1dF9zdHJpbmcoc3RkZXJyLCBzKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfYnl0ZXMocykge1xuICByZXR1cm4gb3V0cHV0X2J5dGVzKHN0ZGVyciwgcyk7XG59XG5cbmZ1bmN0aW9uIHByZXJyX2ludChpKSB7XG4gIHJldHVybiBvdXRwdXRfc3RyaW5nKHN0ZGVyciwgU3RyaW5nKGkpKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfZmxvYXQoZikge1xuICByZXR1cm4gb3V0cHV0X3N0cmluZyhzdGRlcnIsIHZhbGlkX2Zsb2F0X2xleGVtKENhbWxfZm9ybWF0LmNhbWxfZm9ybWF0X2Zsb2F0KFwiJS4xMmdcIiwgZikpKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfbmV3bGluZSgpIHtcbiAgQ2FtbF9pby5jYW1sX21sX291dHB1dF9jaGFyKHN0ZGVyciwgLyogXCJcXG5cIiAqLzEwKTtcbiAgcmV0dXJuIENhbWxfaW8uY2FtbF9tbF9mbHVzaChzdGRlcnIpO1xufVxuXG5mdW5jdGlvbiByZWFkX2xpbmUoKSB7XG4gIENhbWxfaW8uY2FtbF9tbF9mbHVzaChzdGRvdXQpO1xuICByZXR1cm4gaW5wdXRfbGluZShzdGRpbik7XG59XG5cbmZ1bmN0aW9uIHJlYWRfaW50KCkge1xuICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9pbnRfb2Zfc3RyaW5nKChDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KSwgaW5wdXRfbGluZShzdGRpbikpKTtcbn1cblxuZnVuY3Rpb24gcmVhZF9mbG9hdCgpIHtcbiAgcmV0dXJuIENhbWxfZm9ybWF0LmNhbWxfZmxvYXRfb2Zfc3RyaW5nKChDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KSwgaW5wdXRfbGluZShzdGRpbikpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2Zvcm1hdChwYXJhbSkge1xuICByZXR1cm4gcGFyYW1bMV07XG59XG5cbmZ1bmN0aW9uICRjYXJldCRjYXJldChwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gLyogRm9ybWF0ICovW1xuICAgICAgICAgIENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcy5jb25jYXRfZm10KHBhcmFtWzBdLCBwYXJhbSQxWzBdKSxcbiAgICAgICAgICBwYXJhbVsxXSArIChcIiUsXCIgKyBwYXJhbSQxWzFdKVxuICAgICAgICBdO1xufVxuXG52YXIgZXhpdF9mdW5jdGlvbiA9IFtmbHVzaF9hbGxdO1xuXG5mdW5jdGlvbiBhdF9leGl0KGYpIHtcbiAgdmFyIGcgPSBleGl0X2Z1bmN0aW9uWzBdO1xuICBleGl0X2Z1bmN0aW9uWzBdID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgIEN1cnJ5Ll8xKGYsIC8qICgpICovMCk7XG4gICAgICByZXR1cm4gQ3VycnkuXzEoZywgLyogKCkgKi8wKTtcbiAgICB9KTtcbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gZG9fYXRfZXhpdCgpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGV4aXRfZnVuY3Rpb25bMF0sIC8qICgpICovMCk7XG59XG5cbmZ1bmN0aW9uIGV4aXQocmV0Y29kZSkge1xuICBkb19hdF9leGl0KC8qICgpICovMCk7XG4gIHJldHVybiBDYW1sX3N5cy5jYW1sX3N5c19leGl0KHJldGNvZGUpO1xufVxuXG52YXIgbWF4X2ludCA9IDIxNDc0ODM2NDc7XG5cbnZhciBlcHNpbG9uX2Zsb2F0ID0gMi4yMjA0NDYwNDkyNTAzMTNlLTE2O1xuXG52YXIgZmx1c2ggPSBDYW1sX2lvLmNhbWxfbWxfZmx1c2g7XG5cbnZhciBvdXRwdXRfY2hhciA9IENhbWxfaW8uY2FtbF9tbF9vdXRwdXRfY2hhcjtcblxudmFyIG91dHB1dF9ieXRlID0gQ2FtbF9pby5jYW1sX21sX291dHB1dF9jaGFyO1xuXG5mdW5jdGlvbiBvdXRwdXRfYmluYXJ5X2ludChfLCBfJDEpIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX291dHB1dF9pbnRcIik7XG59XG5cbmZ1bmN0aW9uIHNlZWtfb3V0KF8sIF8kMSkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfc2Vla19vdXRcIik7XG59XG5cbmZ1bmN0aW9uIHBvc19vdXQoKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9wb3Nfb3V0XCIpO1xufVxuXG5mdW5jdGlvbiBvdXRfY2hhbm5lbF9sZW5ndGgoKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9jaGFubmVsX3NpemVcIik7XG59XG5cbmZ1bmN0aW9uIHNldF9iaW5hcnlfbW9kZV9vdXQoXywgXyQxKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9zZXRfYmluYXJ5X21vZGVcIik7XG59XG5cbnZhciBpbnB1dF9jaGFyID0gQ2FtbF9pby5jYW1sX21sX2lucHV0X2NoYXI7XG5cbnZhciBpbnB1dF9ieXRlID0gQ2FtbF9pby5jYW1sX21sX2lucHV0X2NoYXI7XG5cbmZ1bmN0aW9uIGlucHV0X2JpbmFyeV9pbnQoKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9pbnB1dF9pbnRcIik7XG59XG5cbmZ1bmN0aW9uIGlucHV0X3ZhbHVlKCkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfaW5wdXRfdmFsdWVcIik7XG59XG5cbmZ1bmN0aW9uIHNlZWtfaW4oXywgXyQxKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9zZWVrX2luXCIpO1xufVxuXG5mdW5jdGlvbiBwb3NfaW4oKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9wb3NfaW5cIik7XG59XG5cbmZ1bmN0aW9uIGluX2NoYW5uZWxfbGVuZ3RoKCkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfY2hhbm5lbF9zaXplXCIpO1xufVxuXG5mdW5jdGlvbiBjbG9zZV9pbigpIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX2Nsb3NlX2NoYW5uZWxcIik7XG59XG5cbmZ1bmN0aW9uIHNldF9iaW5hcnlfbW9kZV9pbihfLCBfJDEpIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX3NldF9iaW5hcnlfbW9kZVwiKTtcbn1cblxuZnVuY3Rpb24gTGFyZ2VGaWxlXzAwMChfLCBfJDEpIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX3NlZWtfb3V0XzY0XCIpO1xufVxuXG5mdW5jdGlvbiBMYXJnZUZpbGVfMDAxKCkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfcG9zX291dF82NFwiKTtcbn1cblxuZnVuY3Rpb24gTGFyZ2VGaWxlXzAwMigpIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX2NoYW5uZWxfc2l6ZV82NFwiKTtcbn1cblxuZnVuY3Rpb24gTGFyZ2VGaWxlXzAwMyhfLCBfJDEpIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX3NlZWtfaW5fNjRcIik7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV8wMDQoKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9wb3NfaW5fNjRcIik7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV8wMDUoKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9jaGFubmVsX3NpemVfNjRcIik7XG59XG5cbnZhciBMYXJnZUZpbGUgPSBbXG4gIExhcmdlRmlsZV8wMDAsXG4gIExhcmdlRmlsZV8wMDEsXG4gIExhcmdlRmlsZV8wMDIsXG4gIExhcmdlRmlsZV8wMDMsXG4gIExhcmdlRmlsZV8wMDQsXG4gIExhcmdlRmlsZV8wMDVcbl07XG5cbmV4cG9ydHMuaW52YWxpZF9hcmcgPSBpbnZhbGlkX2FyZztcbmV4cG9ydHMuZmFpbHdpdGggPSBmYWlsd2l0aDtcbmV4cG9ydHMuRXhpdCA9IEV4aXQ7XG5leHBvcnRzLmFicyA9IGFicztcbmV4cG9ydHMubWF4X2ludCA9IG1heF9pbnQ7XG5leHBvcnRzLm1pbl9pbnQgPSBtaW5faW50O1xuZXhwb3J0cy5sbm90ID0gbG5vdDtcbmV4cG9ydHMuZXBzaWxvbl9mbG9hdCA9IGVwc2lsb25fZmxvYXQ7XG5leHBvcnRzLmNoYXJfb2ZfaW50ID0gY2hhcl9vZl9pbnQ7XG5leHBvcnRzLnN0cmluZ19vZl9ib29sID0gc3RyaW5nX29mX2Jvb2w7XG5leHBvcnRzLmJvb2xfb2Zfc3RyaW5nID0gYm9vbF9vZl9zdHJpbmc7XG5leHBvcnRzLnN0cmluZ19vZl9mbG9hdCA9IHN0cmluZ19vZl9mbG9hdDtcbmV4cG9ydHMuJGF0ID0gJGF0O1xuZXhwb3J0cy5zdGRpbiA9IHN0ZGluO1xuZXhwb3J0cy5zdGRvdXQgPSBzdGRvdXQ7XG5leHBvcnRzLnN0ZGVyciA9IHN0ZGVycjtcbmV4cG9ydHMucHJpbnRfY2hhciA9IHByaW50X2NoYXI7XG5leHBvcnRzLnByaW50X3N0cmluZyA9IHByaW50X3N0cmluZztcbmV4cG9ydHMucHJpbnRfYnl0ZXMgPSBwcmludF9ieXRlcztcbmV4cG9ydHMucHJpbnRfaW50ID0gcHJpbnRfaW50O1xuZXhwb3J0cy5wcmludF9mbG9hdCA9IHByaW50X2Zsb2F0O1xuZXhwb3J0cy5wcmludF9uZXdsaW5lID0gcHJpbnRfbmV3bGluZTtcbmV4cG9ydHMucHJlcnJfY2hhciA9IHByZXJyX2NoYXI7XG5leHBvcnRzLnByZXJyX3N0cmluZyA9IHByZXJyX3N0cmluZztcbmV4cG9ydHMucHJlcnJfYnl0ZXMgPSBwcmVycl9ieXRlcztcbmV4cG9ydHMucHJlcnJfaW50ID0gcHJlcnJfaW50O1xuZXhwb3J0cy5wcmVycl9mbG9hdCA9IHByZXJyX2Zsb2F0O1xuZXhwb3J0cy5wcmVycl9uZXdsaW5lID0gcHJlcnJfbmV3bGluZTtcbmV4cG9ydHMucmVhZF9saW5lID0gcmVhZF9saW5lO1xuZXhwb3J0cy5yZWFkX2ludCA9IHJlYWRfaW50O1xuZXhwb3J0cy5yZWFkX2Zsb2F0ID0gcmVhZF9mbG9hdDtcbmV4cG9ydHMub3Blbl9vdXQgPSBvcGVuX291dDtcbmV4cG9ydHMub3Blbl9vdXRfYmluID0gb3Blbl9vdXRfYmluO1xuZXhwb3J0cy5vcGVuX291dF9nZW4gPSBvcGVuX291dF9nZW47XG5leHBvcnRzLmZsdXNoID0gZmx1c2g7XG5leHBvcnRzLmZsdXNoX2FsbCA9IGZsdXNoX2FsbDtcbmV4cG9ydHMub3V0cHV0X2NoYXIgPSBvdXRwdXRfY2hhcjtcbmV4cG9ydHMub3V0cHV0X3N0cmluZyA9IG91dHB1dF9zdHJpbmc7XG5leHBvcnRzLm91dHB1dF9ieXRlcyA9IG91dHB1dF9ieXRlcztcbmV4cG9ydHMub3V0cHV0ID0gb3V0cHV0O1xuZXhwb3J0cy5vdXRwdXRfc3Vic3RyaW5nID0gb3V0cHV0X3N1YnN0cmluZztcbmV4cG9ydHMub3V0cHV0X2J5dGUgPSBvdXRwdXRfYnl0ZTtcbmV4cG9ydHMub3V0cHV0X2JpbmFyeV9pbnQgPSBvdXRwdXRfYmluYXJ5X2ludDtcbmV4cG9ydHMub3V0cHV0X3ZhbHVlID0gb3V0cHV0X3ZhbHVlO1xuZXhwb3J0cy5zZWVrX291dCA9IHNlZWtfb3V0O1xuZXhwb3J0cy5wb3Nfb3V0ID0gcG9zX291dDtcbmV4cG9ydHMub3V0X2NoYW5uZWxfbGVuZ3RoID0gb3V0X2NoYW5uZWxfbGVuZ3RoO1xuZXhwb3J0cy5jbG9zZV9vdXQgPSBjbG9zZV9vdXQ7XG5leHBvcnRzLmNsb3NlX291dF9ub2VyciA9IGNsb3NlX291dF9ub2VycjtcbmV4cG9ydHMuc2V0X2JpbmFyeV9tb2RlX291dCA9IHNldF9iaW5hcnlfbW9kZV9vdXQ7XG5leHBvcnRzLm9wZW5faW4gPSBvcGVuX2luO1xuZXhwb3J0cy5vcGVuX2luX2JpbiA9IG9wZW5faW5fYmluO1xuZXhwb3J0cy5vcGVuX2luX2dlbiA9IG9wZW5faW5fZ2VuO1xuZXhwb3J0cy5pbnB1dF9jaGFyID0gaW5wdXRfY2hhcjtcbmV4cG9ydHMuaW5wdXRfbGluZSA9IGlucHV0X2xpbmU7XG5leHBvcnRzLmlucHV0ID0gaW5wdXQ7XG5leHBvcnRzLnJlYWxseV9pbnB1dCA9IHJlYWxseV9pbnB1dDtcbmV4cG9ydHMucmVhbGx5X2lucHV0X3N0cmluZyA9IHJlYWxseV9pbnB1dF9zdHJpbmc7XG5leHBvcnRzLmlucHV0X2J5dGUgPSBpbnB1dF9ieXRlO1xuZXhwb3J0cy5pbnB1dF9iaW5hcnlfaW50ID0gaW5wdXRfYmluYXJ5X2ludDtcbmV4cG9ydHMuaW5wdXRfdmFsdWUgPSBpbnB1dF92YWx1ZTtcbmV4cG9ydHMuc2Vla19pbiA9IHNlZWtfaW47XG5leHBvcnRzLnBvc19pbiA9IHBvc19pbjtcbmV4cG9ydHMuaW5fY2hhbm5lbF9sZW5ndGggPSBpbl9jaGFubmVsX2xlbmd0aDtcbmV4cG9ydHMuY2xvc2VfaW4gPSBjbG9zZV9pbjtcbmV4cG9ydHMuY2xvc2VfaW5fbm9lcnIgPSBjbG9zZV9pbl9ub2VycjtcbmV4cG9ydHMuc2V0X2JpbmFyeV9tb2RlX2luID0gc2V0X2JpbmFyeV9tb2RlX2luO1xuZXhwb3J0cy5MYXJnZUZpbGUgPSBMYXJnZUZpbGU7XG5leHBvcnRzLnN0cmluZ19vZl9mb3JtYXQgPSBzdHJpbmdfb2ZfZm9ybWF0O1xuZXhwb3J0cy4kY2FyZXQkY2FyZXQgPSAkY2FyZXQkY2FyZXQ7XG5leHBvcnRzLmV4aXQgPSBleGl0O1xuZXhwb3J0cy5hdF9leGl0ID0gYXRfZXhpdDtcbmV4cG9ydHMudmFsaWRfZmxvYXRfbGV4ZW0gPSB2YWxpZF9mbG9hdF9sZXhlbTtcbmV4cG9ydHMudW5zYWZlX3JlYWxseV9pbnB1dCA9IHVuc2FmZV9yZWFsbHlfaW5wdXQ7XG5leHBvcnRzLmRvX2F0X2V4aXQgPSBkb19hdF9leGl0O1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJsb2NrID0gcmVxdWlyZShcIi4vYmxvY2suanNcIik7XG52YXIgQ2FtbF9wcmltaXRpdmUgPSByZXF1aXJlKFwiLi9jYW1sX3ByaW1pdGl2ZS5qc1wiKTtcbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG5mdW5jdGlvbiBjYW1sX29ial9ibG9jayh0YWcsIHNpemUpIHtcbiAgdmFyIHYgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIHYudGFnID0gdGFnO1xuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gY2FtbF9vYmpfZHVwKHgpIHtcbiAgdmFyIGxlbiA9IHgubGVuZ3RoIHwgMDtcbiAgdmFyIHYgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsZW4gLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICB2W2ldID0geFtpXTtcbiAgfVxuICB2LnRhZyA9IHgudGFnIHwgMDtcbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIGNhbWxfb2JqX3RydW5jYXRlKHgsIG5ld19zaXplKSB7XG4gIHZhciBsZW4gPSB4Lmxlbmd0aCB8IDA7XG4gIGlmIChuZXdfc2l6ZSA8PSAwIHx8IG5ld19zaXplID4gbGVuKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJPYmoudHJ1bmNhdGVcIlxuICAgICAgICBdO1xuICB9IGVsc2UgaWYgKGxlbiAhPT0gbmV3X3NpemUpIHtcbiAgICBmb3IodmFyIGkgPSBuZXdfc2l6ZSAsaV9maW5pc2ggPSBsZW4gLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgIHhbaV0gPSAwO1xuICAgIH1cbiAgICB4Lmxlbmd0aCA9IG5ld19zaXplO1xuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9sYXp5X21ha2VfZm9yd2FyZCh4KSB7XG4gIHJldHVybiBCbG9jay5fXygyNTAsIFt4XSk7XG59XG5cbmZ1bmN0aW9uIGNhbWxfdXBkYXRlX2R1bW15KHgsIHkpIHtcbiAgdmFyIGxlbiA9IHkubGVuZ3RoIHwgMDtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsZW4gLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICB4W2ldID0geVtpXTtcbiAgfVxuICB2YXIgeV90YWcgPSB5LnRhZyB8IDA7XG4gIGlmICh5X3RhZyAhPT0gMCkge1xuICAgIHgudGFnID0geV90YWc7XG4gICAgcmV0dXJuIC8qICgpICovMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG52YXIgZm9yX2luID0gZnVuY3Rpb24gKG8sZm9vKXtcbiAgICAgICAgZm9yICh2YXIgeCBpbiBvKSB7IGZvbyh4KSB9XG4gICAgICB9O1xuXG5mdW5jdGlvbiBjYW1sX2NvbXBhcmUoX2EsIF9iKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYiA9IF9iO1xuICAgIHZhciBhID0gX2E7XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYV90eXBlID0gdHlwZW9mIGE7XG4gICAgICB2YXIgYl90eXBlID0gdHlwZW9mIGI7XG4gICAgICBpZiAoYV90eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBDYW1sX3ByaW1pdGl2ZS5jYW1sX3N0cmluZ19jb21wYXJlKGEsIGIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGlzX2FfbnVtYmVyID0gYV90eXBlID09PSBcIm51bWJlclwiO1xuICAgICAgICB2YXIgaXNfYl9udW1iZXIgPSBiX3R5cGUgPT09IFwibnVtYmVyXCI7XG4gICAgICAgIGlmIChpc19hX251bWJlcikge1xuICAgICAgICAgIGlmIChpc19iX251bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X2NvbXBhcmUoYSwgYik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNfYl9udW1iZXIpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIGlmIChhX3R5cGUgPT09IFwiYm9vbGVhblwiIHx8IGFfdHlwZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBhID09PSBudWxsKSB7XG4gICAgICAgICAgdmFyIHggPSBhO1xuICAgICAgICAgIHZhciB5ID0gYjtcbiAgICAgICAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSBlbHNlIGlmICh4IDwgeSkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoYV90eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgYl90eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgICAgICBcImNvbXBhcmU6IGZ1bmN0aW9uYWwgdmFsdWVcIlxuICAgICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0YWdfYSA9IGEudGFnIHwgMDtcbiAgICAgICAgICB2YXIgdGFnX2IgPSBiLnRhZyB8IDA7XG4gICAgICAgICAgaWYgKHRhZ19hID09PSAyNTApIHtcbiAgICAgICAgICAgIF9hID0gYVswXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRhZ19iID09PSAyNTApIHtcbiAgICAgICAgICAgIF9iID0gYlswXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRhZ19hID09PSAyNDgpIHtcbiAgICAgICAgICAgIHJldHVybiBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9jb21wYXJlKGFbMV0sIGJbMV0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGFnX2EgPT09IDI1MSkge1xuICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgICAgICAgIFwiZXF1YWw6IGFic3RyYWN0IHZhbHVlXCJcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGFnX2EgIT09IHRhZ19iKSB7XG4gICAgICAgICAgICBpZiAodGFnX2EgPCB0YWdfYikge1xuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGxlbl9hID0gYS5sZW5ndGggfCAwO1xuICAgICAgICAgICAgdmFyIGxlbl9iID0gYi5sZW5ndGggfCAwO1xuICAgICAgICAgICAgaWYgKGxlbl9hID09PSBsZW5fYikge1xuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgICAgICAgICAgIHZhciBhJDEgPSBhO1xuICAgICAgICAgICAgICAgIHZhciBiJDEgPSBiO1xuICAgICAgICAgICAgICAgIHZhciBfaSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIHNhbWVfbGVuZ3RoID0gbGVuX2E7XG4gICAgICAgICAgICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSBfaTtcbiAgICAgICAgICAgICAgICAgIGlmIChpID09PSBzYW1lX2xlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSBjYW1sX2NvbXBhcmUoYSQxW2ldLCBiJDFbaV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBhJDIgPSBhO1xuICAgICAgICAgICAgICAgIHZhciBiJDIgPSBiO1xuICAgICAgICAgICAgICAgIHZhciBtaW5fa2V5X2xocyA9IFsvKiBOb25lICovMF07XG4gICAgICAgICAgICAgICAgdmFyIG1pbl9rZXlfcmhzID0gWy8qIE5vbmUgKi8wXTtcbiAgICAgICAgICAgICAgICB2YXIgZG9fa2V5ID0gZnVuY3Rpb24gKHBhcmFtLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBtaW5fa2V5ID0gcGFyYW1bMl07XG4gICAgICAgICAgICAgICAgICB2YXIgYiA9IHBhcmFtWzFdO1xuICAgICAgICAgICAgICAgICAgaWYgKCFiLmhhc093blByb3BlcnR5KGtleSkgfHwgY2FtbF9jb21wYXJlKHBhcmFtWzBdW2tleV0sIGJba2V5XSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IG1pbl9rZXlbMF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPCBtYXRjaFswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluX2tleVswXSA9IC8qIFNvbWUgKi9ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBtaW5fa2V5WzBdID0gLyogU29tZSAqL1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICBhJDIsXG4gICAgICAgICAgICAgICAgICBiJDIsXG4gICAgICAgICAgICAgICAgICBtaW5fa2V5X3Joc1xuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdmFyIGRvX2tleV9hID0gKGZ1bmN0aW9uKHBhcnRpYWxfYXJnKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZG9fa2V5X2EocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBkb19rZXkocGFydGlhbF9hcmcsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfShwYXJ0aWFsX2FyZykpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyQxID0gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICBiJDIsXG4gICAgICAgICAgICAgICAgICBhJDIsXG4gICAgICAgICAgICAgICAgICBtaW5fa2V5X2xoc1xuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdmFyIGRvX2tleV9iID0gKGZ1bmN0aW9uKHBhcnRpYWxfYXJnJDEpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkb19rZXlfYihwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvX2tleShwYXJ0aWFsX2FyZyQxLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0ocGFydGlhbF9hcmckMSkpO1xuICAgICAgICAgICAgICAgIGZvcl9pbihhJDIsIGRvX2tleV9hKTtcbiAgICAgICAgICAgICAgICBmb3JfaW4oYiQyLCBkb19rZXlfYik7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbWluX2tleV9saHNbMF07XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoJDEgPSBtaW5fa2V5X3Joc1swXTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCQxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDYW1sX3ByaW1pdGl2ZS5jYW1sX3N0cmluZ19jb21wYXJlKG1hdGNoWzBdLCBtYXRjaCQxWzBdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoJDEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGVuX2EgPCBsZW5fYikge1xuICAgICAgICAgICAgICB2YXIgYSQzID0gYTtcbiAgICAgICAgICAgICAgdmFyIGIkMyA9IGI7XG4gICAgICAgICAgICAgIHZhciBfaSQxID0gMDtcbiAgICAgICAgICAgICAgdmFyIHNob3J0X2xlbmd0aCA9IGxlbl9hO1xuICAgICAgICAgICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkkMSA9IF9pJDE7XG4gICAgICAgICAgICAgICAgaWYgKGkkMSA9PT0gc2hvcnRfbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZXMkMSA9IGNhbWxfY29tcGFyZShhJDNbaSQxXSwgYiQzW2kkMV0pO1xuICAgICAgICAgICAgICAgICAgaWYgKHJlcyQxICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMkMTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9pJDEgPSBpJDEgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBhJDQgPSBhO1xuICAgICAgICAgICAgICB2YXIgYiQ0ID0gYjtcbiAgICAgICAgICAgICAgdmFyIF9pJDIgPSAwO1xuICAgICAgICAgICAgICB2YXIgc2hvcnRfbGVuZ3RoJDEgPSBsZW5fYjtcbiAgICAgICAgICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBpJDIgPSBfaSQyO1xuICAgICAgICAgICAgICAgIGlmIChpJDIgPT09IHNob3J0X2xlbmd0aCQxKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIHJlcyQyID0gY2FtbF9jb21wYXJlKGEkNFtpJDJdLCBiJDRbaSQyXSk7XG4gICAgICAgICAgICAgICAgICBpZiAocmVzJDIgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcyQyO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX2kkMiA9IGkkMiArIDEgfCAwO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FtbF9lcXVhbChfYSwgX2IpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBiID0gX2I7XG4gICAgdmFyIGEgPSBfYTtcbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhX3R5cGUgPSB0eXBlb2YgYTtcbiAgICAgIGlmIChhX3R5cGUgPT09IFwic3RyaW5nXCIgfHwgYV90eXBlID09PSBcIm51bWJlclwiIHx8IGFfdHlwZSA9PT0gXCJib29sZWFuXCIgfHwgYV90eXBlID09PSBcInVuZGVmaW5lZFwiIHx8IGEgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGJfdHlwZSA9IHR5cGVvZiBiO1xuICAgICAgICBpZiAoYV90eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgYl90eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgICAgICBcImVxdWFsOiBmdW5jdGlvbmFsIHZhbHVlXCJcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIGlmIChiX3R5cGUgPT09IFwibnVtYmVyXCIgfHwgYl90eXBlID09PSBcInVuZGVmaW5lZFwiIHx8IGIgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHRhZ19hID0gYS50YWcgfCAwO1xuICAgICAgICAgIHZhciB0YWdfYiA9IGIudGFnIHwgMDtcbiAgICAgICAgICBpZiAodGFnX2EgPT09IDI1MCkge1xuICAgICAgICAgICAgX2EgPSBhWzBdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGFnX2IgPT09IDI1MCkge1xuICAgICAgICAgICAgX2IgPSBiWzBdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGFnX2EgPT09IDI0OCkge1xuICAgICAgICAgICAgcmV0dXJuIGFbMV0gPT09IGJbMV07XG4gICAgICAgICAgfSBlbHNlIGlmICh0YWdfYSA9PT0gMjUxKSB7XG4gICAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICAgICAgXCJlcXVhbDogYWJzdHJhY3QgdmFsdWVcIlxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIGlmICh0YWdfYSAhPT0gdGFnX2IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGxlbl9hID0gYS5sZW5ndGggfCAwO1xuICAgICAgICAgICAgdmFyIGxlbl9iID0gYi5sZW5ndGggfCAwO1xuICAgICAgICAgICAgaWYgKGxlbl9hID09PSBsZW5fYikge1xuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgICAgICAgICAgIHZhciBhJDEgPSBhO1xuICAgICAgICAgICAgICAgIHZhciBiJDEgPSBiO1xuICAgICAgICAgICAgICAgIHZhciBfaSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIHNhbWVfbGVuZ3RoID0gbGVuX2E7XG4gICAgICAgICAgICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSBfaTtcbiAgICAgICAgICAgICAgICAgIGlmIChpID09PSBzYW1lX2xlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FtbF9lcXVhbChhJDFbaV0sIGIkMVtpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBhJDIgPSBhO1xuICAgICAgICAgICAgICAgIHZhciBiJDIgPSBiO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbdHJ1ZV07XG4gICAgICAgICAgICAgICAgdmFyIGRvX2tleV9hID0gKGZ1bmN0aW9uKGIkMixyZXN1bHQpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkb19rZXlfYShrZXkpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChiJDIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFswXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KGIkMixyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICB2YXIgZG9fa2V5X2IgPSAoZnVuY3Rpb24oYSQyLGIkMixyZXN1bHQpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkb19rZXlfYihrZXkpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghYSQyLmhhc093blByb3BlcnR5KGtleSkgfHwgIWNhbWxfZXF1YWwoYiQyW2tleV0sIGEkMltrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbMF0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KGEkMixiJDIscmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgZm9yX2luKGEkMiwgZG9fa2V5X2EpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRbMF0pIHtcbiAgICAgICAgICAgICAgICAgIGZvcl9pbihiJDIsIGRvX2tleV9iKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFswXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FtbF9lcXVhbF9udWxsKHgsIHkpIHtcbiAgaWYgKHkgIT09IG51bGwpIHtcbiAgICByZXR1cm4gY2FtbF9lcXVhbCh4LCB5KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCA9PT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2VxdWFsX3VuZGVmaW5lZCh4LCB5KSB7XG4gIGlmICh5ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY2FtbF9lcXVhbCh4LCB5KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCA9PT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2VxdWFsX251bGxhYmxlKHgsIHkpIHtcbiAgaWYgKHkgPT0gbnVsbCkge1xuICAgIHJldHVybiB4ID09PSB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjYW1sX2VxdWFsKHgsIHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfbm90ZXF1YWwoYSwgYikge1xuICByZXR1cm4gIWNhbWxfZXF1YWwoYSwgYik7XG59XG5cbmZ1bmN0aW9uIGNhbWxfZ3JlYXRlcmVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGNhbWxfY29tcGFyZShhLCBiKSA+PSAwO1xufVxuXG5mdW5jdGlvbiBjYW1sX2dyZWF0ZXJ0aGFuKGEsIGIpIHtcbiAgcmV0dXJuIGNhbWxfY29tcGFyZShhLCBiKSA+IDA7XG59XG5cbmZ1bmN0aW9uIGNhbWxfbGVzc2VxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGNhbWxfY29tcGFyZShhLCBiKSA8PSAwO1xufVxuXG5mdW5jdGlvbiBjYW1sX2xlc3N0aGFuKGEsIGIpIHtcbiAgcmV0dXJuIGNhbWxfY29tcGFyZShhLCBiKSA8IDA7XG59XG5cbmZ1bmN0aW9uIGNhbWxfbWluKHgsIHkpIHtcbiAgaWYgKGNhbWxfY29tcGFyZSh4LCB5KSA8PSAwKSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9tYXgoeCwgeSkge1xuICBpZiAoY2FtbF9jb21wYXJlKHgsIHkpID49IDApIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5leHBvcnRzLmNhbWxfb2JqX2Jsb2NrID0gY2FtbF9vYmpfYmxvY2s7XG5leHBvcnRzLmNhbWxfb2JqX2R1cCA9IGNhbWxfb2JqX2R1cDtcbmV4cG9ydHMuY2FtbF9vYmpfdHJ1bmNhdGUgPSBjYW1sX29ial90cnVuY2F0ZTtcbmV4cG9ydHMuY2FtbF9sYXp5X21ha2VfZm9yd2FyZCA9IGNhbWxfbGF6eV9tYWtlX2ZvcndhcmQ7XG5leHBvcnRzLmNhbWxfdXBkYXRlX2R1bW15ID0gY2FtbF91cGRhdGVfZHVtbXk7XG5leHBvcnRzLmNhbWxfY29tcGFyZSA9IGNhbWxfY29tcGFyZTtcbmV4cG9ydHMuY2FtbF9lcXVhbCA9IGNhbWxfZXF1YWw7XG5leHBvcnRzLmNhbWxfZXF1YWxfbnVsbCA9IGNhbWxfZXF1YWxfbnVsbDtcbmV4cG9ydHMuY2FtbF9lcXVhbF91bmRlZmluZWQgPSBjYW1sX2VxdWFsX3VuZGVmaW5lZDtcbmV4cG9ydHMuY2FtbF9lcXVhbF9udWxsYWJsZSA9IGNhbWxfZXF1YWxfbnVsbGFibGU7XG5leHBvcnRzLmNhbWxfbm90ZXF1YWwgPSBjYW1sX25vdGVxdWFsO1xuZXhwb3J0cy5jYW1sX2dyZWF0ZXJlcXVhbCA9IGNhbWxfZ3JlYXRlcmVxdWFsO1xuZXhwb3J0cy5jYW1sX2dyZWF0ZXJ0aGFuID0gY2FtbF9ncmVhdGVydGhhbjtcbmV4cG9ydHMuY2FtbF9sZXNzdGhhbiA9IGNhbWxfbGVzc3RoYW47XG5leHBvcnRzLmNhbWxfbGVzc2VxdWFsID0gY2FtbF9sZXNzZXF1YWw7XG5leHBvcnRzLmNhbWxfbWluID0gY2FtbF9taW47XG5leHBvcnRzLmNhbWxfbWF4ID0gY2FtbF9tYXg7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gY2FtbF9hcnJheV9zdWIoeCwgb2Zmc2V0LCBsZW4pIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShsZW4pO1xuICB2YXIgaiA9IDA7XG4gIHZhciBpID0gb2Zmc2V0O1xuICB3aGlsZShqIDwgbGVuKSB7XG4gICAgcmVzdWx0W2pdID0geFtpXTtcbiAgICBqID0gaiArIDEgfCAwO1xuICAgIGkgPSBpICsgMSB8IDA7XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGxlbihfYWNjLCBfbCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwgPSBfbDtcbiAgICB2YXIgYWNjID0gX2FjYztcbiAgICBpZiAobCkge1xuICAgICAgX2wgPSBsWzFdO1xuICAgICAgX2FjYyA9IGxbMF0ubGVuZ3RoICsgYWNjIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbGwoYXJyLCBfaSwgX2wpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsID0gX2w7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAobCkge1xuICAgICAgdmFyIHggPSBsWzBdO1xuICAgICAgdmFyIGwkMSA9IHgubGVuZ3RoO1xuICAgICAgdmFyIGsgPSBpO1xuICAgICAgdmFyIGogPSAwO1xuICAgICAgd2hpbGUoaiA8IGwkMSkge1xuICAgICAgICBhcnJba10gPSB4W2pdO1xuICAgICAgICBrID0gayArIDEgfCAwO1xuICAgICAgICBqID0gaiArIDEgfCAwO1xuICAgICAgfTtcbiAgICAgIF9sID0gbFsxXTtcbiAgICAgIF9pID0gaztcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbWxfYXJyYXlfY29uY2F0KGwpIHtcbiAgdmFyIHYgPSBsZW4oMCwgbCk7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkodik7XG4gIGZpbGwocmVzdWx0LCAwLCBsKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY2FtbF9hcnJheV9zZXQoeHMsIGluZGV4LCBuZXd2YWwpIHtcbiAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB4cy5sZW5ndGgpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcImluZGV4IG91dCBvZiBib3VuZHNcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHhzW2luZGV4XSA9IG5ld3ZhbDtcbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfYXJyYXlfZ2V0KHhzLCBpbmRleCkge1xuICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHhzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiaW5kZXggb3V0IG9mIGJvdW5kc1wiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHhzW2luZGV4XTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX21ha2VfdmVjdChsZW4sIGluaXQpIHtcbiAgdmFyIGIgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsZW4gLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICBiW2ldID0gaW5pdDtcbiAgfVxuICByZXR1cm4gYjtcbn1cblxuZnVuY3Rpb24gY2FtbF9tYWtlX2Zsb2F0X3ZlY3QobGVuKSB7XG4gIHZhciBiID0gbmV3IEFycmF5KGxlbik7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbGVuIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgYltpXSA9IDA7XG4gIH1cbiAgcmV0dXJuIGI7XG59XG5cbmZ1bmN0aW9uIGNhbWxfYXJyYXlfYmxpdChhMSwgaTEsIGEyLCBpMiwgbGVuKSB7XG4gIGlmIChpMiA8PSBpMSkge1xuICAgIGZvcih2YXIgaiA9IDAgLGpfZmluaXNoID0gbGVuIC0gMSB8IDA7IGogPD0gal9maW5pc2g7ICsrail7XG4gICAgICBhMltqICsgaTIgfCAwXSA9IGExW2ogKyBpMSB8IDBdO1xuICAgIH1cbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9IGVsc2Uge1xuICAgIGZvcih2YXIgaiQxID0gbGVuIC0gMSB8IDA7IGokMSA+PSAwOyAtLWokMSl7XG4gICAgICBhMltqJDEgKyBpMiB8IDBdID0gYTFbaiQxICsgaTEgfCAwXTtcbiAgICB9XG4gICAgcmV0dXJuIC8qICgpICovMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2FycmF5X2R1cChwcmltKSB7XG4gIHJldHVybiBwcmltLnNsaWNlKDApO1xufVxuXG5leHBvcnRzLmNhbWxfYXJyYXlfZHVwID0gY2FtbF9hcnJheV9kdXA7XG5leHBvcnRzLmNhbWxfYXJyYXlfc3ViID0gY2FtbF9hcnJheV9zdWI7XG5leHBvcnRzLmNhbWxfYXJyYXlfY29uY2F0ID0gY2FtbF9hcnJheV9jb25jYXQ7XG5leHBvcnRzLmNhbWxfbWFrZV92ZWN0ID0gY2FtbF9tYWtlX3ZlY3Q7XG5leHBvcnRzLmNhbWxfbWFrZV9mbG9hdF92ZWN0ID0gY2FtbF9tYWtlX2Zsb2F0X3ZlY3Q7XG5leHBvcnRzLmNhbWxfYXJyYXlfYmxpdCA9IGNhbWxfYXJyYXlfYmxpdDtcbmV4cG9ydHMuY2FtbF9hcnJheV9nZXQgPSBjYW1sX2FycmF5X2dldDtcbmV4cG9ydHMuY2FtbF9hcnJheV9zZXQgPSBjYW1sX2FycmF5X3NldDtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERvbSA9IHJlcXVpcmUoXCJyZWFjdC1kb21cIik7XG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG5mdW5jdGlvbiByZW5kZXJUb0VsZW1lbnRXaXRoQ2xhc3NOYW1lKHJlYWN0RWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xhc3NOYW1lKTtcbiAgaWYgKGVsZW1lbnRzLmxlbmd0aCAhPT0gMCkge1xuICAgIFJlYWN0RG9tLnJlbmRlcihyZWFjdEVsZW1lbnQsIGVsZW1lbnRzWzBdKTtcbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9IGVsc2Uge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiUmVhY3RET01SZS5yZW5kZXJUb0VsZW1lbnRXaXRoQ2xhc3NOYW1lOiBubyBlbGVtZW50IG9mIGNsYXNzIFwiICsgKGNsYXNzTmFtZSArIFwiIGZvdW5kIGluIHRoZSBIVE1MLlwiKVxuICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlclRvRWxlbWVudFdpdGhJZChyZWFjdEVsZW1lbnQsIGlkKSB7XG4gIHZhciBtYXRjaCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgaWYgKG1hdGNoID09IG51bGwpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlJlYWN0RE9NUmUucmVuZGVyVG9FbGVtZW50V2l0aElkIDogbm8gZWxlbWVudCBvZiBpZCBcIiArIChpZCArIFwiIGZvdW5kIGluIHRoZSBIVE1MLlwiKVxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIFJlYWN0RG9tLnJlbmRlcihyZWFjdEVsZW1lbnQsIG1hdGNoKTtcbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIGh5ZHJhdGVUb0VsZW1lbnRXaXRoQ2xhc3NOYW1lKHJlYWN0RWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xhc3NOYW1lKTtcbiAgaWYgKGVsZW1lbnRzLmxlbmd0aCAhPT0gMCkge1xuICAgIFJlYWN0RG9tLmh5ZHJhdGUocmVhY3RFbGVtZW50LCBlbGVtZW50c1swXSk7XG4gICAgcmV0dXJuIC8qICgpICovMDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlJlYWN0RE9NUmUuaHlkcmF0ZVRvRWxlbWVudFdpdGhDbGFzc05hbWU6IG5vIGVsZW1lbnQgb2YgY2xhc3MgXCIgKyAoY2xhc3NOYW1lICsgXCIgZm91bmQgaW4gdGhlIEhUTUwuXCIpXG4gICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gaHlkcmF0ZVRvRWxlbWVudFdpdGhJZChyZWFjdEVsZW1lbnQsIGlkKSB7XG4gIHZhciBtYXRjaCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgaWYgKG1hdGNoID09IG51bGwpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlJlYWN0RE9NUmUuaHlkcmF0ZVRvRWxlbWVudFdpdGhJZCA6IG5vIGVsZW1lbnQgb2YgaWQgXCIgKyAoaWQgKyBcIiBmb3VuZCBpbiB0aGUgSFRNTC5cIilcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICBSZWFjdERvbS5oeWRyYXRlKHJlYWN0RWxlbWVudCwgbWF0Y2gpO1xuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tYmluZShhLCBiKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyB9LCBhKSwgYik7XG59XG5cbmZ1bmN0aW9uIHVuc2FmZUFkZFByb3Aoc3R5bGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICB2YXIgZGljdCA9IHsgfTtcbiAgZGljdFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgcmV0dXJuIGNvbWJpbmUoc3R5bGUsIGRpY3QpO1xufVxuXG52YXIgU3R5bGUgPSAvKiBtb2R1bGUgKi9bXG4gIC8qIGNvbWJpbmUgKi9jb21iaW5lLFxuICAvKiB1bnNhZmVBZGRQcm9wICovdW5zYWZlQWRkUHJvcFxuXTtcblxuZXhwb3J0cy5yZW5kZXJUb0VsZW1lbnRXaXRoQ2xhc3NOYW1lID0gcmVuZGVyVG9FbGVtZW50V2l0aENsYXNzTmFtZTtcbmV4cG9ydHMucmVuZGVyVG9FbGVtZW50V2l0aElkID0gcmVuZGVyVG9FbGVtZW50V2l0aElkO1xuZXhwb3J0cy5oeWRyYXRlVG9FbGVtZW50V2l0aENsYXNzTmFtZSA9IGh5ZHJhdGVUb0VsZW1lbnRXaXRoQ2xhc3NOYW1lO1xuZXhwb3J0cy5oeWRyYXRlVG9FbGVtZW50V2l0aElkID0gaHlkcmF0ZVRvRWxlbWVudFdpdGhJZDtcbmV4cG9ydHMuU3R5bGUgPSBTdHlsZTtcbi8qIHJlYWN0LWRvbSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJCRBcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5LmpzXCIpO1xuXG52YXIgaW5pdCA9ICQkQXJyYXkuaW5pdDtcblxudmFyIG1ha2VfbWF0cml4ID0gJCRBcnJheS5tYWtlX21hdHJpeDtcblxudmFyIGNyZWF0ZV9tYXRyaXggPSAkJEFycmF5LmNyZWF0ZV9tYXRyaXg7XG5cbnZhciBhcHBlbmQgPSAkJEFycmF5LmFwcGVuZDtcblxudmFyIGNvbmNhdCA9ICQkQXJyYXkuY29uY2F0O1xuXG52YXIgc3ViID0gJCRBcnJheS5zdWI7XG5cbnZhciBjb3B5ID0gJCRBcnJheS5jb3B5O1xuXG52YXIgZmlsbCA9ICQkQXJyYXkuZmlsbDtcblxudmFyIGJsaXQgPSAkJEFycmF5LmJsaXQ7XG5cbnZhciB0b19saXN0ID0gJCRBcnJheS50b19saXN0O1xuXG52YXIgb2ZfbGlzdCA9ICQkQXJyYXkub2ZfbGlzdDtcblxudmFyIGl0ZXIgPSAkJEFycmF5Lml0ZXI7XG5cbnZhciBtYXAgPSAkJEFycmF5Lm1hcDtcblxudmFyIGl0ZXJpID0gJCRBcnJheS5pdGVyaTtcblxudmFyIG1hcGkgPSAkJEFycmF5Lm1hcGk7XG5cbnZhciBmb2xkX2xlZnQgPSAkJEFycmF5LmZvbGRfbGVmdDtcblxudmFyIGZvbGRfcmlnaHQgPSAkJEFycmF5LmZvbGRfcmlnaHQ7XG5cbnZhciBzb3J0ID0gJCRBcnJheS5zb3J0O1xuXG52YXIgc3RhYmxlX3NvcnQgPSAkJEFycmF5LnN0YWJsZV9zb3J0O1xuXG52YXIgZmFzdF9zb3J0ID0gJCRBcnJheS5mYXN0X3NvcnQ7XG5cbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLm1ha2VfbWF0cml4ID0gbWFrZV9tYXRyaXg7XG5leHBvcnRzLmNyZWF0ZV9tYXRyaXggPSBjcmVhdGVfbWF0cml4O1xuZXhwb3J0cy5hcHBlbmQgPSBhcHBlbmQ7XG5leHBvcnRzLmNvbmNhdCA9IGNvbmNhdDtcbmV4cG9ydHMuc3ViID0gc3ViO1xuZXhwb3J0cy5jb3B5ID0gY29weTtcbmV4cG9ydHMuZmlsbCA9IGZpbGw7XG5leHBvcnRzLmJsaXQgPSBibGl0O1xuZXhwb3J0cy50b19saXN0ID0gdG9fbGlzdDtcbmV4cG9ydHMub2ZfbGlzdCA9IG9mX2xpc3Q7XG5leHBvcnRzLml0ZXIgPSBpdGVyO1xuZXhwb3J0cy5tYXAgPSBtYXA7XG5leHBvcnRzLml0ZXJpID0gaXRlcmk7XG5leHBvcnRzLm1hcGkgPSBtYXBpO1xuZXhwb3J0cy5mb2xkX2xlZnQgPSBmb2xkX2xlZnQ7XG5leHBvcnRzLmZvbGRfcmlnaHQgPSBmb2xkX3JpZ2h0O1xuZXhwb3J0cy5zb3J0ID0gc29ydDtcbmV4cG9ydHMuc3RhYmxlX3NvcnQgPSBzdGFibGVfc29ydDtcbmV4cG9ydHMuZmFzdF9zb3J0ID0gZmFzdF9zb3J0O1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQgVkVSU0lPTiAzLjAuMCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDc3MgPSByZXF1aXJlKFwiYnMtY3NzL2xpYi9qcy9zcmMvQ3NzLmpzXCIpO1xudmFyIEN1cnJ5ID0gcmVxdWlyZShcImJzLXBsYXRmb3JtL2xpYi9qcy9jdXJyeS5qc1wiKTtcbnZhciBMb2dpYyA9IHJlcXVpcmUoXCIuL2xvZ2ljXCIpO1xudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIFBlcnZhc2l2ZXMgPSByZXF1aXJlKFwiYnMtcGxhdGZvcm0vbGliL2pzL3BlcnZhc2l2ZXMuanNcIik7XG52YXIgUmVhc29uUmVhY3QgPSByZXF1aXJlKFwicmVhc29uLXJlYWN0L2xpYi9qcy9zcmMvUmVhc29uUmVhY3QuanNcIik7XG5cbnZhciBjb21wb25lbnQgPSBSZWFzb25SZWFjdC5zdGF0ZWxlc3NDb21wb25lbnQoXCJUb29sQmFyXCIpO1xuXG52YXIgdG9vbEJhciA9IENzcy5zdHlsZSgvKiA6OiAqL1tcbiAgICAgIENzcy5kaXNwbGF5KENzcy5mbGV4Qm94KSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MuZmxleERpcmVjdGlvbihDc3MuY29sdW1uKSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdXG4gICAgXSk7XG5cbnZhciB0b29sQmFyUm93ID0gQ3NzLnN0eWxlKC8qIDo6ICovW1xuICAgICAgQ3NzLmRpc3BsYXkoQ3NzLmZsZXhCb3gpLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5mbGV4RGlyZWN0aW9uKENzcy5yb3cpLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBDc3MuanVzdGlmeUNvbnRlbnQoQ3NzLmNlbnRlciksXG4gICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICBDc3MuYmFja2dyb3VuZENvbG9yKENzcy5kYXJrb2xpdmVncmVlbiksXG4gICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgQ3NzLm1pbkhlaWdodChDc3MucHQoNTApKSxcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgQ3NzLm1hcmdpbihDc3MucHgoMTApKSxcbiAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXVxuICAgICAgICAgIF1cbiAgICAgICAgXVxuICAgICAgXVxuICAgIF0pO1xuXG52YXIgdG9vbEJhckl0ZW0gPSBDc3Muc3R5bGUoLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheSgvKiBmbGV4ICovLTEwMTA5NTQ0MzkpLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5mbGV4RGlyZWN0aW9uKC8qIGNvbHVtbiAqLy05NjM5NDg4NDIpLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBDc3MuYWxpZ25JdGVtcygvKiBjZW50ZXIgKi85ODI0ODE0OSksXG4gICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICBDc3MuanVzdGlmeUNvbnRlbnQoLyogY2VudGVyICovOTgyNDgxNDkpLFxuICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgIENzcy5mbGV4R3JvdygxKSxcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgQ3NzLndpZHRoKENzcy5wY3QoMTAwLjApKSxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIENzcy5taW5IZWlnaHQoQ3NzLnB0KDUwKSksXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgQ3NzLmJhY2tncm91bmRDb2xvcihDc3Mud2hpdGUpLFxuICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBDc3MudGV4dEFsaWduKENzcy5jZW50ZXIpLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgQ3NzLmFsaWduSXRlbXMoQ3NzLmNlbnRlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICBdXG4gICAgICAgIF1cbiAgICAgIF1cbiAgICBdKTtcblxudmFyIHRvcFN0eWxlID0gQ3NzLnN0eWxlKC8qIDo6ICovW1xuICAgICAgQ3NzLmRpc3BsYXkoQ3NzLmZsZXhCb3gpLFxuICAgICAgLyogW10gKi8wXG4gICAgXSk7XG5cbnZhciBtaWRkbGVTdHlsZSA9IENzcy5zdHlsZSgvKiA6OiAqL1tcbiAgICAgIENzcy5kaXNwbGF5KENzcy5mbGV4Qm94KSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MuanVzdGlmeUNvbnRlbnQoQ3NzLmNlbnRlciksXG4gICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgIENzcy5mb250U2l6ZShDc3MucHgoMTAwKSksXG4gICAgICAgICAgLyogW10gKi8wXG4gICAgICAgIF1cbiAgICAgIF1cbiAgICBdKTtcblxudmFyIGJvdHRvbVN0eWxlID0gQ3NzLnN0eWxlKC8qIDo6ICovW1xuICAgICAgQ3NzLmRpc3BsYXkoQ3NzLmZsZXhCb3gpLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5qdXN0aWZ5Q29udGVudChDc3MuZmxleEVuZCksXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXVxuICAgIF0pO1xuXG5mdW5jdGlvbiBhY3Rpb25CdXR0b24oZGlzYWJsZWQpIHtcbiAgcmV0dXJuIENzcy5zdHlsZSgvKiA6OiAqL1tcbiAgICAgICAgICAgICAgQ3NzLmJhY2tncm91bmQoZGlzYWJsZWQgPyBDc3MuZGFya2dyYXkgOiBDc3Mud2hpdGUpLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBDc3MuY29sb3IoQ3NzLmJsYWNrKSxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIENzcy5ib3JkZXIoQ3NzLnB4KDEpLCBDc3Muc29saWQsIENzcy5ibGFjayksXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgQ3NzLmJvcmRlclJhZGl1cyhDc3MucHgoMykpLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xufVxuXG52YXIgU3R5bGVzID0gLyogbW9kdWxlICovW1xuICAvKiB0b29sQmFyICovdG9vbEJhcixcbiAgLyogdG9vbEJhclJvdyAqL3Rvb2xCYXJSb3csXG4gIC8qIHRvb2xCYXJJdGVtICovdG9vbEJhckl0ZW0sXG4gIC8qIHRvcFN0eWxlICovdG9wU3R5bGUsXG4gIC8qIG1pZGRsZVN0eWxlICovbWlkZGxlU3R5bGUsXG4gIC8qIGJvdHRvbVN0eWxlICovYm90dG9tU3R5bGUsXG4gIC8qIGFjdGlvbkJ1dHRvbiAqL2FjdGlvbkJ1dHRvblxuXTtcblxuZnVuY3Rpb24gbWFrZShzZW5kLCBnYW1lLCBfKSB7XG4gIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgLyogZGVidWdOYW1lICovY29tcG9uZW50Wy8qIGRlYnVnTmFtZSAqLzBdLFxuICAgICAgICAgIC8qIHJlYWN0Q2xhc3NJbnRlcm5hbCAqL2NvbXBvbmVudFsvKiByZWFjdENsYXNzSW50ZXJuYWwgKi8xXSxcbiAgICAgICAgICAvKiBoYW5kZWRPZmZTdGF0ZSAqL2NvbXBvbmVudFsvKiBoYW5kZWRPZmZTdGF0ZSAqLzJdLFxuICAgICAgICAgIC8qIHdpbGxSZWNlaXZlUHJvcHMgKi9jb21wb25lbnRbLyogd2lsbFJlY2VpdmVQcm9wcyAqLzNdLFxuICAgICAgICAgIC8qIGRpZE1vdW50ICovY29tcG9uZW50Wy8qIGRpZE1vdW50ICovNF0sXG4gICAgICAgICAgLyogZGlkVXBkYXRlICovY29tcG9uZW50Wy8qIGRpZFVwZGF0ZSAqLzVdLFxuICAgICAgICAgIC8qIHdpbGxVbm1vdW50ICovY29tcG9uZW50Wy8qIHdpbGxVbm1vdW50ICovNl0sXG4gICAgICAgICAgLyogd2lsbFVwZGF0ZSAqL2NvbXBvbmVudFsvKiB3aWxsVXBkYXRlICovN10sXG4gICAgICAgICAgLyogc2hvdWxkVXBkYXRlICovY29tcG9uZW50Wy8qIHNob3VsZFVwZGF0ZSAqLzhdLFxuICAgICAgICAgIC8qIHJlbmRlciAqLyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IHRvb2xCYXJSb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IHRvb2xCYXJJdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoM1wiLCB1bmRlZmluZWQsIExvZ2ljLmdhbWVTdGF0ZVRvU3RyaW5nKGdhbWVbLyogZ2FtZVN0YXRlICovMl0pKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHVuZGVmaW5lZCwgU3RyaW5nKExvZ2ljLmNhbGN1bGF0ZUhhbmQoZ2FtZVsvKiBib2FyZCAqLzBdWy8qIHBsYXllckhhbmQgKi8wXSkpKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogdG9vbEJhckl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogdG9vbEJhckl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiAhTG9naWMuY2FuRGVhbChnYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShzZW5kLCAvKiBEZWFsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoM1wiLCB1bmRlZmluZWQsIFwiRGVhbCBDYXJkc1wiKSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IHRvb2xCYXJJdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IHRvb2xCYXJJdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogIUxvZ2ljLmNhbkhpdChnYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShzZW5kLCAvKiBIaXQgKi8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHVuZGVmaW5lZCwgXCJIaXQgTWVcIikpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiB0b29sQmFySXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiB0b29sQmFySXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICFMb2dpYy5jYW5TdGFuZChnYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShzZW5kLCAvKiBTdGFuZCAqLzIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDNcIiwgdW5kZWZpbmVkLCBcIlN0YW5kXCIpKSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogdG9vbEJhclJvd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogdG9vbEJhckl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHVuZGVmaW5lZCwgUGVydmFzaXZlcy5zdHJpbmdfb2ZfZmxvYXQoZ2FtZVsvKiBwbGF5ZXJUb3RhbCAqLzRdKSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IHRvb2xCYXJJdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoM1wiLCB1bmRlZmluZWQsIFwiQmV0OiBcIiksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogUGVydmFzaXZlcy5zdHJpbmdfb2ZfZmxvYXQoZ2FtZVsvKiBwbGF5ZXJCZXQgKi8zXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSkpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgLyogaW5pdGlhbFN0YXRlICovY29tcG9uZW50Wy8qIGluaXRpYWxTdGF0ZSAqLzEwXSxcbiAgICAgICAgICAvKiByZXRhaW5lZFByb3BzICovY29tcG9uZW50Wy8qIHJldGFpbmVkUHJvcHMgKi8xMV0sXG4gICAgICAgICAgLyogcmVkdWNlciAqL2NvbXBvbmVudFsvKiByZWR1Y2VyICovMTJdLFxuICAgICAgICAgIC8qIHN1YnNjcmlwdGlvbnMgKi9jb21wb25lbnRbLyogc3Vic2NyaXB0aW9ucyAqLzEzXSxcbiAgICAgICAgICAvKiBqc0VsZW1lbnRXcmFwcGVkICovY29tcG9uZW50Wy8qIGpzRWxlbWVudFdyYXBwZWQgKi8xNF1cbiAgICAgICAgXTtcbn1cblxuZXhwb3J0cy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG5leHBvcnRzLlN0eWxlcyA9IFN0eWxlcztcbmV4cG9ydHMubWFrZSA9IG1ha2U7XG4vKiBjb21wb25lbnQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tYWluLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tYWluLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbWFpbi5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmdldENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZztcbmV4cG9ydHMubWVyZ2VDaGlsZE1hcHBpbmdzID0gbWVyZ2VDaGlsZE1hcHBpbmdzO1xuZXhwb3J0cy5nZXRJbml0aWFsQ2hpbGRNYXBwaW5nID0gZ2V0SW5pdGlhbENoaWxkTWFwcGluZztcbmV4cG9ydHMuZ2V0TmV4dENoaWxkTWFwcGluZyA9IGdldE5leHRDaGlsZE1hcHBpbmc7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5mdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgX3JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH1cblxuICAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChwcmV2S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGkgPSB2b2lkIDA7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfVxuXG4gIC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcChjaGlsZCwgcHJvcCwgcHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9IG51bGwgPyBwcm9wc1twcm9wXSA6IGNoaWxkLnByb3BzW3Byb3BdO1xufVxuXG5mdW5jdGlvbiBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKHByb3BzLCBvbkV4aXRlZCkge1xuICByZXR1cm4gZ2V0Q2hpbGRNYXBwaW5nKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICBpbjogdHJ1ZSxcbiAgICAgIGFwcGVhcjogZ2V0UHJvcChjaGlsZCwgJ2FwcGVhcicsIHByb3BzKSxcbiAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBwcm9wcyksXG4gICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIHByb3BzKVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIG9uRXhpdGVkKSB7XG4gIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gIHZhciBjaGlsZHJlbiA9IG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKTtcblxuICBPYmplY3Qua2V5cyhjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcblxuICAgIGlmICghKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpKSByZXR1cm47XG5cbiAgICB2YXIgaGFzUHJldiA9IGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nO1xuICAgIHZhciBoYXNOZXh0ID0ga2V5IGluIG5leHRDaGlsZE1hcHBpbmc7XG5cbiAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkTWFwcGluZ1trZXldO1xuICAgIHZhciBpc0xlYXZpbmcgPSAoMCwgX3JlYWN0LmlzVmFsaWRFbGVtZW50KShwcmV2Q2hpbGQpICYmICFwcmV2Q2hpbGQucHJvcHMuaW47XG5cbiAgICAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7IGluOiBmYWxzZSB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiAoMCwgX3JlYWN0LmlzVmFsaWRFbGVtZW50KShwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY2hpbGRyZW47XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfVHJhbnNpdGlvbkdyb3VwID0gcmVxdWlyZSgnLi9UcmFuc2l0aW9uR3JvdXAnKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhbnNpdGlvbkdyb3VwKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGluOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKHByb3BzLCBwcm9wTmFtZSkge1xuICAgIGlmIChfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4uY291bnQocHJvcHNbcHJvcE5hbWVdKSAhPT0gMikgcmV0dXJuIG5ldyBFcnJvcignXCInICsgcHJvcE5hbWUgKyAnXCIgbXVzdCBiZSBleGFjdGx5IHR3byB0cmFuc2l0aW9uIGNvbXBvbmVudHMuJyk7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgYDxSZXBsYWNlVHJhbnNpdGlvbj5gIGNvbXBvbmVudCBpcyBhIHNwZWNpYWxpemVkIGBUcmFuc2l0aW9uYCBjb21wb25lbnRcbiAqIHRoYXQgYW5pbWF0ZXMgYmV0d2VlbiB0d28gY2hpbGRyZW4uXG4gKlxuICogYGBganN4XG4gKiA8UmVwbGFjZVRyYW5zaXRpb24gaW4+XG4gKiAgIDxGYWRlPjxkaXY+SSBhcHBlYXIgZmlyc3Q8L2Rpdj48L0ZhZGU+XG4gKiAgIDxGYWRlPjxkaXY+SSByZXBsYWNlIHRoZSBhYm92ZTwvZGl2PjwvRmFkZT5cbiAqIDwvUmVwbGFjZVRyYW5zaXRpb24+XG4gKiBgYGBcbiAqL1xuXG52YXIgUmVwbGFjZVRyYW5zaXRpb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVwbGFjZVRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlcGxhY2VUcmFuc2l0aW9uKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVwbGFjZVRyYW5zaXRpb24pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUmVwbGFjZVRyYW5zaXRpb24ucHJvdG90eXBlLmhhbmRsZUxpZmVjeWNsZSA9IGZ1bmN0aW9uIGhhbmRsZUxpZmVjeWNsZShoYW5kbGVyLCBpZHgsIG9yaWdpbmFsQXJncykge1xuICAgIHZhciBfY2hpbGQkcHJvcHM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIGNoaWxkID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pW2lkeF07XG5cbiAgICBpZiAoY2hpbGQucHJvcHNbaGFuZGxlcl0pIChfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcylbaGFuZGxlcl0uYXBwbHkoX2NoaWxkJHByb3BzLCBvcmlnaW5hbEFyZ3MpO1xuICAgIGlmICh0aGlzLnByb3BzW2hhbmRsZXJdKSB0aGlzLnByb3BzW2hhbmRsZXJdKCgwLCBfcmVhY3REb20uZmluZERPTU5vZGUpKHRoaXMpKTtcbiAgfTtcblxuICBSZXBsYWNlVHJhbnNpdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaW5Qcm9wID0gX3Byb3BzLmluLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2hpbGRyZW4nLCAnaW4nXSk7XG5cbiAgICB2YXIgX1JlYWN0JENoaWxkcmVuJHRvQXJyID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLFxuICAgICAgICBmaXJzdCA9IF9SZWFjdCRDaGlsZHJlbiR0b0FyclswXSxcbiAgICAgICAgc2Vjb25kID0gX1JlYWN0JENoaWxkcmVuJHRvQXJyWzFdO1xuXG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXJlZDtcbiAgICBkZWxldGUgcHJvcHMub25FeGl0O1xuICAgIGRlbGV0ZSBwcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIHByb3BzLm9uRXhpdGVkO1xuXG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgX1RyYW5zaXRpb25Hcm91cDIuZGVmYXVsdCxcbiAgICAgIHByb3BzLFxuICAgICAgaW5Qcm9wID8gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChmaXJzdCwge1xuICAgICAgICBrZXk6ICdmaXJzdCcsXG4gICAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXIsXG4gICAgICAgIG9uRW50ZXJpbmc6IHRoaXMuaGFuZGxlRW50ZXJpbmcsXG4gICAgICAgIG9uRW50ZXJlZDogdGhpcy5oYW5kbGVFbnRlcmVkXG5cbiAgICAgIH0pIDogX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChzZWNvbmQsIHtcbiAgICAgICAga2V5OiAnc2Vjb25kJyxcbiAgICAgICAgb25FbnRlcjogdGhpcy5oYW5kbGVFeGl0LFxuICAgICAgICBvbkVudGVyaW5nOiB0aGlzLmhhbmRsZUV4aXRpbmcsXG4gICAgICAgIG9uRW50ZXJlZDogdGhpcy5oYW5kbGVFeGl0ZWRcbiAgICAgIH0pXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gUmVwbGFjZVRyYW5zaXRpb247XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIHRoaXMuaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXMyLmhhbmRsZUxpZmVjeWNsZSgnb25FbnRlcicsIDAsIGFyZ3MpO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXMyLmhhbmRsZUxpZmVjeWNsZSgnb25FbnRlcmluZycsIDAsIGFyZ3MpO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlRW50ZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpczIuaGFuZGxlTGlmZWN5Y2xlKCdvbkVudGVyZWQnLCAwLCBhcmdzKTtcbiAgfTtcblxuICB0aGlzLmhhbmRsZUV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICAgIGFyZ3NbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXMyLmhhbmRsZUxpZmVjeWNsZSgnb25FeGl0JywgMSwgYXJncyk7XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVFeGl0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgICBhcmdzW19rZXk2XSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzMi5oYW5kbGVMaWZlY3ljbGUoJ29uRXhpdGluZycsIDEsIGFyZ3MpO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgICBhcmdzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzMi5oYW5kbGVMaWZlY3ljbGUoJ29uRXhpdGVkJywgMSwgYXJncyk7XG4gIH07XG59O1xuXG5SZXBsYWNlVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUmVwbGFjZVRyYW5zaXRpb247XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBiYT1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLGVhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxBPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLEM9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksZmE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksaGE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxqYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGthPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKTtcbmZ1bmN0aW9uIEQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cDovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2JhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9ZWE/dm9pZCAwOkQoXCIyMjdcIik7XG5mdW5jdGlvbiBtYShhLGIsYyxkLGUsZixoLGcsayl7dGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITE7dGhpcy5fY2F1Z2h0RXJyb3I9bnVsbDt2YXIgdj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyx2KX1jYXRjaChsKXt0aGlzLl9jYXVnaHRFcnJvcj1sLHRoaXMuX2hhc0NhdWdodEVycm9yPSEwfX1cbnZhciBFPXtfY2F1Z2h0RXJyb3I6bnVsbCxfaGFzQ2F1Z2h0RXJyb3I6ITEsX3JldGhyb3dFcnJvcjpudWxsLF9oYXNSZXRocm93RXJyb3I6ITEsaW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXttYS5hcHBseShFLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKEUuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHY9RS5jbGVhckNhdWdodEVycm9yKCk7RS5faGFzUmV0aHJvd0Vycm9yfHwoRS5faGFzUmV0aHJvd0Vycm9yPSEwLEUuX3JldGhyb3dFcnJvcj12KX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBuYS5hcHBseShFLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEUuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoRS5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVxuRS5fY2F1Z2h0RXJyb3I7RS5fY2F1Z2h0RXJyb3I9bnVsbDtFLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1EKFwiMTk4XCIpfX07ZnVuY3Rpb24gbmEoKXtpZihFLl9oYXNSZXRocm93RXJyb3Ipe3ZhciBhPUUuX3JldGhyb3dFcnJvcjtFLl9yZXRocm93RXJyb3I9bnVsbDtFLl9oYXNSZXRocm93RXJyb3I9ITE7dGhyb3cgYTt9fXZhciBvYT1udWxsLHBhPXt9O1xuZnVuY3Rpb24gcWEoKXtpZihvYSlmb3IodmFyIGEgaW4gcGEpe3ZhciBiPXBhW2FdLGM9b2EuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDpEKFwiOTZcIixhKTtpZighcmFbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6RChcIjk3XCIsYSk7cmFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtzYS5oYXNPd25Qcm9wZXJ0eShnKT9EKFwiOTlcIixnKTp2b2lkIDA7c2FbZ109Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmdGEoa1tlXSxoLGcpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHRhKGYucmVnaXN0cmF0aW9uTmFtZSxoLGcpLGU9ITApOmU9ITE7ZT92b2lkIDA6RChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHRhKGEsYixjKXt1YVthXT9EKFwiMTAwXCIsYSk6dm9pZCAwO3VhW2FdPWI7dmFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgcmE9W10sc2E9e30sdWE9e30sdmE9e307ZnVuY3Rpb24gd2EoYSl7b2E/RChcIjEwMVwiKTp2b2lkIDA7b2E9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7cWEoKX1mdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtwYS5oYXNPd25Qcm9wZXJ0eShjKSYmcGFbY109PT1kfHwocGFbY10/RChcIjEwMlwiLGMpOnZvaWQgMCxwYVtjXT1kLGI9ITApfWImJnFhKCl9XG52YXIgQ2E9T2JqZWN0LmZyZWV6ZSh7cGx1Z2luczpyYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6c2EscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6dWEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczp2YSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp3YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6eGF9KSxEYT1udWxsLEVhPW51bGwsRmE9bnVsbDtmdW5jdGlvbiBHYShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PUZhKGQpO0UuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBIYShhLGIpe251bGw9PWI/RChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gSWEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIEphPW51bGw7XG5mdW5jdGlvbiBLYShhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKylHYShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJkdhKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIExhKGEpe3JldHVybiBLYShhLCEwKX1mdW5jdGlvbiBNYShhKXtyZXR1cm4gS2EoYSwhMSl9dmFyIE5hPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOndhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp4YX07XG5mdW5jdGlvbiBPYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPURhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBQYShhLGIpe251bGwhPT1hJiYoSmE9SGEoSmEsYSkpO2E9SmE7SmE9bnVsbDthJiYoYj9JYShhLExhKTpJYShhLE1hKSxKYT9EKFwiOTVcIik6dm9pZCAwLEUucmV0aHJvd0NhdWdodEVycm9yKCkpfWZ1bmN0aW9uIFFhKGEsYixjLGQpe2Zvcih2YXIgZT1udWxsLGY9MDtmPHJhLmxlbmd0aDtmKyspe3ZhciBoPXJhW2ZdO2gmJihoPWguZXh0cmFjdEV2ZW50cyhhLGIsYyxkKSkmJihlPUhhKGUsaCkpfVBhKGUsITEpfXZhciBSYT1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246TmEsZ2V0TGlzdGVuZXI6T2EscnVuRXZlbnRzSW5CYXRjaDpQYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOlFhfSksU2E9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRj1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK1NhLFRhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrU2E7XG5mdW5jdGlvbiBVYShhKXtpZihhW0ZdKXJldHVybiBhW0ZdO2Zvcig7IWFbRl07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIFZhKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTtEKFwiMzNcIil9ZnVuY3Rpb24gWGEoYSl7cmV0dXJuIGFbVGFdfHxudWxsfXZhciBiYj1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbRl09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6VWEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbRl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpWYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlhhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW1RhXT1ifX0pO1xuZnVuY3Rpb24gTChhKXtkbyBhPWFbXCJyZXR1cm5cIl07d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gY2IoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1MKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIGRiKGEsYixjKXtpZihiPU9hKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9SGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9SGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gZWIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmY2IoYS5fdGFyZ2V0SW5zdCxkYixhKX1cbmZ1bmN0aW9uIGZiKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0woYik6bnVsbDtjYihiLGRiLGEpfX1mdW5jdGlvbiBnYihhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1PYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9SGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9SGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIGhiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmZ2IoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIGliKGEpe0lhKGEsZWIpfVxuZnVuY3Rpb24gamIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGg9MCxnPWU7ZztnPUwoZykpaCsrO2c9MDtmb3IodmFyIGs9ZjtrO2s9TChrKSlnKys7Zm9yKDswPGgtZzspZT1MKGUpLGgtLTtmb3IoOzA8Zy1oOylmPUwoZiksZy0tO2Zvcig7aC0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9TChlKTtmPUwoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2g9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2UucHVzaChjKTtjPUwoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtoPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztjLnB1c2goZCk7ZD1MKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspZ2IoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspZ2IoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIga2I9T2JqZWN0LmZyZWV6ZSh7YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczppYixhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtJYShhLGZiKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOmpiLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0lhKGEsaGIpfX0pLGxiPW51bGw7ZnVuY3Rpb24gbWIoKXshbGImJm0uY2FuVXNlRE9NJiYobGI9XCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1widGV4dENvbnRlbnRcIjpcImlubmVyVGV4dFwiKTtyZXR1cm4gbGJ9dmFyIE09e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH07XG5mdW5jdGlvbiBuYigpe2lmKE0uX2ZhbGxiYWNrVGV4dClyZXR1cm4gTS5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9TS5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW9iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgaD1jLWE7Zm9yKGQ9MTtkPD1oJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtNLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gTS5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG9iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gTS5fcm9vdD9NLl9yb290LnZhbHVlOk0uX3Jvb3RbbWIoKV19XG52YXIgcGI9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxxYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6Qy50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIE4oYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP0MudGhhdFJldHVybnNUcnVlOkMudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbkEoTi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1DLnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OkMudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxwYi5sZW5ndGg7YSsrKXRoaXNbcGJbYV1dPW51bGx9fSk7Ti5JbnRlcmZhY2U9cWI7Ti5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7QShlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9QSh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtyYihjKTtyZXR1cm4gY307cmIoTik7XG5mdW5jdGlvbiBzYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiB0YihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6RChcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcmIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9c2I7YS5yZWxlYXNlPXRifXZhciB1Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksdmI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHdiPVs5LDEzLDI3LDMyXSx4Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseWI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeWI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB6Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXliLEFiPW0uY2FuVXNlRE9NJiYoIXhifHx5YiYmODx5YiYmMTE+PXliKSxCYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxLYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uU3RhcnQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25VcGRhdGUgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9fSxMYj0hMTtcbmZ1bmN0aW9uIE1iKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlVcFwiOnJldHVybi0xIT09d2IuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJ0b3BLZXlEb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwidG9wS2V5UHJlc3NcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBOYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBPYj0hMTtmdW5jdGlvbiBQYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gTmIoYik7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0xiPSEwO3JldHVybiBCYjtjYXNlIFwidG9wVGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1CYiYmTGI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gUWIoYSxiKXtpZihPYilyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwheGImJk1iKGEsYik/KGE9bmIoKSxNLl9yb290PW51bGwsTS5fc3RhcnRUZXh0PW51bGwsTS5fZmFsbGJhY2tUZXh0PW51bGwsT2I9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIEFiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIFJiPXtldmVudFR5cGVzOktiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih4YiliOntzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uU3RhcnRcIjplPUtiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjplPUtiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uVXBkYXRlXCI6ZT1LYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgT2I/TWIoYSxjKSYmKGU9S2IuY29tcG9zaXRpb25FbmQpOlwidG9wS2V5RG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1LYi5jb21wb3NpdGlvblN0YXJ0KTtlPyhBYiYmKE9ifHxlIT09S2IuY29tcG9zaXRpb25TdGFydD9lPT09S2IuY29tcG9zaXRpb25FbmQmJk9iJiYoZj1uYigpKTooTS5fcm9vdD1kLE0uX3N0YXJ0VGV4dD1vYigpLE9iPSEwKSksZT11Yi5nZXRQb29sZWQoZSxcbmIsYyxkKSxmP2UuZGF0YT1mOihmPU5iKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxpYihlKSxmPWUpOmY9bnVsbDsoYT16Yj9QYihhLGMpOlFiKGEsYykpPyhiPXZiLmdldFBvb2xlZChLYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsaWIoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sU2I9bnVsbCxUYj17aW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDpmdW5jdGlvbihhKXtTYj1hfX0sVWI9bnVsbCxWYj1udWxsO2Z1bmN0aW9uIFdiKGEpe2lmKGE9RWEoYSkpe1NiJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgU2IucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZT92b2lkIDA6RChcIjE5NFwiKTt2YXIgYj1EYShhLnN0YXRlTm9kZSk7U2IucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIFhiKGEpe1ViP1ZiP1ZiLnB1c2goYSk6VmI9W2FdOlViPWF9XG5mdW5jdGlvbiBZYigpe3JldHVybiBudWxsIT09VWJ8fG51bGwhPT1WYn1mdW5jdGlvbiBaYigpe2lmKFViKXt2YXIgYT1VYixiPVZiO1ZiPVViPW51bGw7V2IoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKVdiKGJbYV0pfX12YXIgJGI9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOlRiLGVucXVldWVTdGF0ZVJlc3RvcmU6WGIsbmVlZHNTdGF0ZVJlc3RvcmU6WWIscmVzdG9yZVN0YXRlSWZOZWVkZWQ6WmJ9KTtmdW5jdGlvbiBhYyhhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIGJjKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIGNjKCl7fXZhciBkYz0hMTtmdW5jdGlvbiBlYyhhLGIpe2lmKGRjKXJldHVybiBhKGIpO2RjPSEwO3RyeXtyZXR1cm4gYWMoYSxiKX1maW5hbGx5e2RjPSExLFliKCkmJihjYygpLFpiKCkpfX1cbnZhciBmYz17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBnYyhhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWZjW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBoYyhhKXthPWEudGFyZ2V0fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfVxuZnVuY3Rpb24gaWMoYSxiKXtpZighbS5jYW5Vc2VET018fGImJiEoXCJhZGRFdmVudExpc3RlbmVyXCJpbiBkb2N1bWVudCkpcmV0dXJuITE7YT1cIm9uXCIrYTtiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBqYyhhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24ga2MoYSl7dmFyIGI9amMoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5nZXQuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2Muc2V0LmNhbGwodGhpcyxhKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pLHtnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPW51bGw7ZGVsZXRlIGFbYl19fX1cbmZ1bmN0aW9uIGxjKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1rYyhhKSl9ZnVuY3Rpb24gbWMoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPWpjKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9XG52YXIgbmM9ZWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsTz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sb2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHBjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY2FsbFwiKTo2MDEwNCxxYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnJldHVyblwiKTo2MDEwNSxyYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixzYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHRjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx2Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsd2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLFxueGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5Yz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gemMoYSl7aWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXljJiZhW3ljXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gQWMoYSl7YT1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2Ugc2M6cmV0dXJuXCJSZWFjdEZyYWdtZW50XCI7Y2FzZSByYzpyZXR1cm5cIlJlYWN0UG9ydGFsXCI7Y2FzZSBwYzpyZXR1cm5cIlJlYWN0Q2FsbFwiO2Nhc2UgcWM6cmV0dXJuXCJSZWFjdFJldHVyblwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeGM6cmV0dXJuIGE9YS5yZW5kZXIuZGlzcGxheU5hbWV8fGEucmVuZGVyLm5hbWV8fFwiXCIsXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCJ9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBCYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPUFjKGEpO3ZhciBmPW51bGw7YyYmKGY9QWMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWFbXCJyZXR1cm5cIl19d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgQ2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLERjPXt9LEVjPXt9O2Z1bmN0aW9uIEZjKGEpe2lmKEVjLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKERjLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKENjLnRlc3QoYSkpcmV0dXJuIEVjW2FdPSEwO0RjW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gR2MoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gSGMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8R2MoYSxiLGMsZCkpcmV0dXJuITA7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBVKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgVj17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtWW2JdPW5ldyBVKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIFNjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gVGMoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsXG5UYyk7VltiXT1uZXcgVShiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtWLnRhYkluZGV4PW5ldyBVKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTtcbmZ1bmN0aW9uIFVjKGEsYixjLGQpe3ZhciBlPVYuaGFzT3duUHJvcGVydHkoYik/VltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KEhjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9GYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gVmMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFdjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVhjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gWWMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZVYyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gWmMoYSxiKXtZYyhhLGIpO3ZhciBjPVhjKGIudmFsdWUpO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWIudHlwZSl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtiLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/JGMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmJGMoYSxiLnR5cGUsWGMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBhZChhLGIpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSlcIlwiPT09YS52YWx1ZSYmKGEudmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlKSxhLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Yj1hLm5hbWU7XCJcIiE9PWImJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO1wiXCIhPT1iJiYoYS5uYW1lPWIpfWZ1bmN0aW9uICRjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1cbmZ1bmN0aW9uIFhjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX12YXIgYmQ9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ2hhbmdlIHRvcENsaWNrIHRvcEZvY3VzIHRvcElucHV0IHRvcEtleURvd24gdG9wS2V5VXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gY2QoYSxiLGMpe2E9Ti5nZXRQb29sZWQoYmQuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtYYihjKTtpYihhKTtyZXR1cm4gYX12YXIgZGQ9bnVsbCxlZD1udWxsO2Z1bmN0aW9uIGZkKGEpe1BhKGEsITEpfVxuZnVuY3Rpb24gZ2QoYSl7dmFyIGI9VmEoYSk7aWYobWMoYikpcmV0dXJuIGF9ZnVuY3Rpb24gaGQoYSxiKXtpZihcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgaWQ9ITE7bS5jYW5Vc2VET00mJihpZD1pYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBqZCgpe2RkJiYoZGQuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsa2QpLGVkPWRkPW51bGwpfWZ1bmN0aW9uIGtkKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZnZChlZCkmJihhPWNkKGVkLGEsaGMoYSkpLGVjKGZkLGEpKX1mdW5jdGlvbiBsZChhLGIsYyl7XCJ0b3BGb2N1c1wiPT09YT8oamQoKSxkZD1iLGVkPWMsZGQuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsa2QpKTpcInRvcEJsdXJcIj09PWEmJmpkKCl9XG5mdW5jdGlvbiBtZChhKXtpZihcInRvcFNlbGVjdGlvbkNoYW5nZVwiPT09YXx8XCJ0b3BLZXlVcFwiPT09YXx8XCJ0b3BLZXlEb3duXCI9PT1hKXJldHVybiBnZChlZCl9ZnVuY3Rpb24gbmQoYSxiKXtpZihcInRvcENsaWNrXCI9PT1hKXJldHVybiBnZChiKX1mdW5jdGlvbiBvZChhLGIpe2lmKFwidG9wSW5wdXRcIj09PWF8fFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBnZChiKX1cbnZhciBwZD17ZXZlbnRUeXBlczpiZCxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOmlkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9WYShiKTp3aW5kb3csZj12b2lkIDAsaD12b2lkIDAsZz1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWd8fFwiaW5wdXRcIj09PWcmJlwiZmlsZVwiPT09ZS50eXBlP2Y9aGQ6Z2MoZSk/aWQ/Zj1vZDooZj1tZCxoPWxkKTooZz1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zy50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1uZCk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gY2QoZixjLGQpO2gmJmgoYSxlLGIpO1widG9wQmx1clwiPT09YSYmbnVsbCE9YiYmKGE9Yi5fd3JhcHBlclN0YXRlfHxlLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJiRjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LHFkPU4uZXh0ZW5kKHt2aWV3Om51bGwsXG5kZXRhaWw6bnVsbH0pLHJkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBzZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPXJkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gdGQoKXtyZXR1cm4gc2R9XG52YXIgdWQ9cWQuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pLHZkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LHdkPXtldmVudFR5cGVzOnZkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxcbmIsYyxkKXtpZihcInRvcE1vdXNlT3ZlclwiPT09YSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fFwidG9wTW91c2VPdXRcIiE9PWEmJlwidG9wTW91c2VPdmVyXCIhPT1hKXJldHVybiBudWxsO3ZhciBlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O1widG9wTW91c2VPdXRcIj09PWE/KGE9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP1VhKGIpOm51bGwpOmE9bnVsbDtpZihhPT09YilyZXR1cm4gbnVsbDt2YXIgZj1udWxsPT1hP2U6VmEoYSk7ZT1udWxsPT1iP2U6VmEoYik7dmFyIGg9dWQuZ2V0UG9vbGVkKHZkLm1vdXNlTGVhdmUsYSxjLGQpO2gudHlwZT1cIm1vdXNlbGVhdmVcIjtoLnRhcmdldD1mO2gucmVsYXRlZFRhcmdldD1lO2M9dWQuZ2V0UG9vbGVkKHZkLm1vdXNlRW50ZXIsYixjLGQpO2MudHlwZT1cIm1vdXNlZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1cbmY7amIoaCxjLGEsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiB4ZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7YltcInJldHVyblwiXTspYj1iW1wicmV0dXJuXCJdO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2JbXCJyZXR1cm5cIl07KWlmKGI9YltcInJldHVyblwiXSwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIHlkKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PXhkKGEpOiExfWZ1bmN0aW9uIHpkKGEpezIhPT14ZChhKT9EKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIEFkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPXhkKGEpLDM9PT1iP0QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Y1tcInJldHVyblwiXSxmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09YylyZXR1cm4gemQoZSksYTtpZihoPT09ZClyZXR1cm4gemQoZSksYjtoPWguc2libGluZ31EKFwiMTg4XCIpfWlmKGNbXCJyZXR1cm5cIl0hPT1kW1wicmV0dXJuXCJdKWM9ZSxkPWY7ZWxzZXtoPSExO2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZjtkPWU7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1mO2M9ZTticmVha31nPWcuc2libGluZ31oP1xudm9pZCAwOkQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9EKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/RChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBCZChhKXthPUFkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gQ2QoYSl7YT1BZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBEZD1OLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksRWQ9Ti5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxGZD1xZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gR2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgSGQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LElkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxKZD1xZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9SGRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9R2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP0lkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9HZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9HZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLEtkPXVkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxMZD1xZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZH0pLE1kPU4uZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLE5kPXVkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksT2Q9e30sUGQ9e307ZnVuY3Rpb24gUWQoYSxiKXt2YXIgYz1hWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSxkPVwib25cIitjO2M9XCJ0b3BcIitjO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O09kW2FdPWI7UGRbY109Yn1cblwiYmx1ciBjYW5jZWwgY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZG91YmxlQ2xpY2sgZHJhZ0VuZCBkcmFnU3RhcnQgZHJvcCBmb2N1cyBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbW91c2VEb3duIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSByYXRlQ2hhbmdlIHJlc2V0IHNlZWtlZCBzdWJtaXQgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtRZChhLCEwKX0pO1xuXCJhYm9ydCBhbmltYXRpb25FbmQgYW5pbWF0aW9uSXRlcmF0aW9uIGFuaW1hdGlvblN0YXJ0IGNhblBsYXkgY2FuUGxheVRocm91Z2ggZHJhZyBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBwbGF5aW5nIHByb2dyZXNzIHNjcm9sbCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvZ2dsZSB0b3VjaE1vdmUgdHJhbnNpdGlvbkVuZCB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UWQoYSwhMSl9KTtcbnZhciBSZD17ZXZlbnRUeXBlczpPZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1QZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9UGRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDA9PT1HZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOmE9SmQ7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpjYXNlIFwidG9wRm9jdXNcIjphPUZkO2JyZWFrO2Nhc2UgXCJ0b3BDbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwidG9wRG91YmxlQ2xpY2tcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcE1vdXNlTW92ZVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6Y2FzZSBcInRvcE1vdXNlT3V0XCI6Y2FzZSBcInRvcE1vdXNlT3ZlclwiOmNhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmE9XG51ZDticmVhaztjYXNlIFwidG9wRHJhZ1wiOmNhc2UgXCJ0b3BEcmFnRW5kXCI6Y2FzZSBcInRvcERyYWdFbnRlclwiOmNhc2UgXCJ0b3BEcmFnRXhpdFwiOmNhc2UgXCJ0b3BEcmFnTGVhdmVcIjpjYXNlIFwidG9wRHJhZ092ZXJcIjpjYXNlIFwidG9wRHJhZ1N0YXJ0XCI6Y2FzZSBcInRvcERyb3BcIjphPUtkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9TGQ7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPURkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1NZDticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1xZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPU5kO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9RWQ7YnJlYWs7ZGVmYXVsdDphPVxuTn1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO2liKGIpO3JldHVybiBifX0sU2Q9UmQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFRkPVtdO2Z1bmN0aW9uIFVkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2NbXCJyZXR1cm5cIl07KWM9Y1tcInJldHVyblwiXTtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPVVhKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sUWEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LGhjKGEubmF0aXZlRXZlbnQpKX12YXIgVmQ9ITA7ZnVuY3Rpb24gV2QoYSl7VmQ9ISFhfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oU2QoYSk/WGQ6WWQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCExKX1mdW5jdGlvbiBaZChhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oU2QoYSk/WGQ6WWQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCEwKX1mdW5jdGlvbiBYZChhLGIpe2JjKFlkLGEsYil9XG5mdW5jdGlvbiBZZChhLGIpe2lmKFZkKXt2YXIgYz1oYyhiKTtjPVVhKGMpO251bGwhPT1jJiZcIm51bWJlclwiPT09dHlwZW9mIGMudGFnJiYyIT09eGQoYykmJihjPW51bGwpO2lmKFRkLmxlbmd0aCl7dmFyIGQ9VGQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7ZWMoVWQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5UZC5sZW5ndGgmJlRkLnB1c2goYSl9fX1cbnZhciAkZD1PYmplY3QuZnJlZXplKHtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gVmR9LHNldEVuYWJsZWQ6V2QsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIFZkfSx0cmFwQnViYmxlZEV2ZW50OlcsdHJhcENhcHR1cmVkRXZlbnQ6WmQsZGlzcGF0Y2hFdmVudDpZZH0pO2Z1bmN0aW9uIGFlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYmU9e2FuaW1hdGlvbmVuZDphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOmFlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sY2U9e30sZGU9e307bS5jYW5Vc2VET00mJihkZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBiZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBiZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBiZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBiZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZWUoYSl7aWYoY2VbYV0pcmV0dXJuIGNlW2FdO2lmKCFiZVthXSlyZXR1cm4gYTt2YXIgYj1iZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBkZSlyZXR1cm4gY2VbYV09YltjXTtyZXR1cm4gYX1cbnZhciBmZT17dG9wQW5pbWF0aW9uRW5kOmVlKFwiYW5pbWF0aW9uZW5kXCIpLHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjplZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSx0b3BBbmltYXRpb25TdGFydDplZShcImFuaW1hdGlvbnN0YXJ0XCIpLHRvcEJsdXI6XCJibHVyXCIsdG9wQ2FuY2VsOlwiY2FuY2VsXCIsdG9wQ2hhbmdlOlwiY2hhbmdlXCIsdG9wQ2xpY2s6XCJjbGlja1wiLHRvcENsb3NlOlwiY2xvc2VcIix0b3BDb21wb3NpdGlvbkVuZDpcImNvbXBvc2l0aW9uZW5kXCIsdG9wQ29tcG9zaXRpb25TdGFydDpcImNvbXBvc2l0aW9uc3RhcnRcIix0b3BDb21wb3NpdGlvblVwZGF0ZTpcImNvbXBvc2l0aW9udXBkYXRlXCIsdG9wQ29udGV4dE1lbnU6XCJjb250ZXh0bWVudVwiLHRvcENvcHk6XCJjb3B5XCIsdG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsXG50b3BEcmFnT3ZlcjpcImRyYWdvdmVyXCIsdG9wRHJhZ1N0YXJ0OlwiZHJhZ3N0YXJ0XCIsdG9wRHJvcDpcImRyb3BcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkOlwibG9hZFwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcE1vdXNlRG93bjpcIm1vdXNlZG93blwiLHRvcE1vdXNlTW92ZTpcIm1vdXNlbW92ZVwiLHRvcE1vdXNlT3V0OlwibW91c2VvdXRcIix0b3BNb3VzZU92ZXI6XCJtb3VzZW92ZXJcIix0b3BNb3VzZVVwOlwibW91c2V1cFwiLHRvcFBhc3RlOlwicGFzdGVcIix0b3BTY3JvbGw6XCJzY3JvbGxcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BUZXh0SW5wdXQ6XCJ0ZXh0SW5wdXRcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOmVlKFwidHJhbnNpdGlvbmVuZFwiKSx0b3BXaGVlbDpcIndoZWVsXCJ9LGdlPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWRlZE1ldGFkYXRhOlwibG9hZGVkbWV0YWRhdGFcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsXG50b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIix0b3BXYWl0aW5nOlwid2FpdGluZ1wifSxoZT17fSxpZT0wLGplPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBrZShhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxqZSl8fChhW2plXT1pZSsrLGhlW2FbamVdXT17fSk7cmV0dXJuIGhlW2FbamVdXX1mdW5jdGlvbiBsZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBtZShhLGIpe3ZhciBjPWxlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPWxlKGMpfX1mdW5jdGlvbiBuZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgb2U9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxwZT17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb250ZXh0TWVudSB0b3BGb2N1cyB0b3BLZXlEb3duIHRvcEtleVVwIHRvcE1vdXNlRG93biB0b3BNb3VzZVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LHFlPW51bGwscmU9bnVsbCxzZT1udWxsLHRlPSExO1xuZnVuY3Rpb24gdWUoYSxiKXtpZih0ZXx8bnVsbD09cWV8fHFlIT09ZmEoKSlyZXR1cm4gbnVsbDt2YXIgYz1xZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZuZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIHNlJiZoYShzZSxjKT9udWxsOihzZT1jLGE9Ti5nZXRQb29sZWQocGUuc2VsZWN0LHJlLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9cWUsaWIoYSksYSl9XG52YXIgdmU9e2V2ZW50VHlwZXM6cGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9a2UoZSk7Zj12YS5vblNlbGVjdDtmb3IodmFyIGg9MDtoPGYubGVuZ3RoO2grKyl7dmFyIGc9ZltoXTtpZighZS5oYXNPd25Qcm9wZXJ0eShnKXx8IWVbZ10pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1ZhKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcInRvcEZvY3VzXCI6aWYoZ2MoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpcWU9ZSxyZT1iLHNlPW51bGw7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpzZT1yZT1xZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BNb3VzZURvd25cIjp0ZT0hMDticmVhaztjYXNlIFwidG9wQ29udGV4dE1lbnVcIjpjYXNlIFwidG9wTW91c2VVcFwiOnJldHVybiB0ZT0hMSx1ZShjLGQpO2Nhc2UgXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIjppZihvZSlicmVhaztcbmNhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuIHVlKGMsZCl9cmV0dXJuIG51bGx9fTtOYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO0RhPWJiLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7RWE9YmIuZ2V0SW5zdGFuY2VGcm9tTm9kZTtGYT1iYi5nZXROb2RlRnJvbUluc3RhbmNlO05hLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46UmQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOndkLENoYW5nZUV2ZW50UGx1Z2luOnBkLFNlbGVjdEV2ZW50UGx1Z2luOnZlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46UmJ9KTtcbmZ1bmN0aW9uIHhlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzW1wicmV0dXJuXCJdPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24gemUoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyB4ZShhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmV4cGlyYXRpb25UaW1lPWM7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiBBZShhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO3ZhciBmPXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZClmPWQucHJvdG90eXBlJiZkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PzI6MDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTU7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBzYzpyZXR1cm4gQmUoYS5jaGlsZHJlbixiLGMsZSk7Y2FzZSB3YzpmPTExO2J8PTM7YnJlYWs7Y2FzZSB0YzpmPTExO2J8PTI7YnJlYWs7Y2FzZSBwYzpmPTc7YnJlYWs7Y2FzZSBxYzpmPTk7YnJlYWs7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXN3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHVjOmY9MTM7YnJlYWs7Y2FzZSB2YzpmPTEyO2JyZWFrO2Nhc2UgeGM6Zj0xNDticmVhaztkZWZhdWx0OmlmKFwibnVtYmVyXCI9PT10eXBlb2YgZC50YWcpcmV0dXJuIGI9ZCxiLnBlbmRpbmdQcm9wcz1hLGIuZXhwaXJhdGlvblRpbWU9YyxcbmI7RChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1lbHNlIEQoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9Yj1uZXcgeGUoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIEJlKGEsYixjLGQpe2E9bmV3IHhlKDEwLGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gQ2UoYSxiLGMpe2E9bmV3IHhlKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBEZShhLGIsYyl7Yj1uZXcgeGUoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9dmFyIEVlPW51bGwsRmU9bnVsbDtcbmZ1bmN0aW9uIEdlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19ZnVuY3Rpb24gSGUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7RWU9R2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO0ZlPUdlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9ZnVuY3Rpb24gSWUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEVlJiZFZShhKX1mdW5jdGlvbiBKZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRmUmJkZlKGEpfW5ldyBTZXQ7XG5mdW5jdGlvbiBLZShhKXtyZXR1cm57YmFzZVN0YXRlOmEsZXhwaXJhdGlvblRpbWU6MCxmaXJzdDpudWxsLGxhc3Q6bnVsbCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMSxpc0luaXRpYWxpemVkOiExLGNhcHR1cmVkVmFsdWVzOm51bGx9fWZ1bmN0aW9uIExlKGEsYil7bnVsbD09PWEubGFzdD9hLmZpcnN0PWEubGFzdD1iOihhLmxhc3QubmV4dD1iLGEubGFzdD1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iLmV4cGlyYXRpb25UaW1lKWEuZXhwaXJhdGlvblRpbWU9Yi5leHBpcmF0aW9uVGltZX12YXIgTWU9dm9pZCAwLE5lPXZvaWQgMDtcbmZ1bmN0aW9uIE9lKGEpe01lPU5lPW51bGw7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jJiYoYz1hLnVwZGF0ZVF1ZXVlPUtlKG51bGwpKTtudWxsIT09Yj8oYT1iLnVwZGF0ZVF1ZXVlLG51bGw9PT1hJiYoYT1iLnVwZGF0ZVF1ZXVlPUtlKG51bGwpKSk6YT1udWxsO01lPWM7TmU9YSE9PWM/YTpudWxsfWZ1bmN0aW9uIFBlKGEsYil7T2UoYSk7YT1NZTt2YXIgYz1OZTtudWxsPT09Yz9MZShhLGIpOm51bGw9PT1hLmxhc3R8fG51bGw9PT1jLmxhc3Q/KExlKGEsYiksTGUoYyxiKSk6KExlKGEsYiksYy5sYXN0PWIpfWZ1bmN0aW9uIFFlKGEsYixjLGQpe2E9YS5wYXJ0aWFsU3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIsYyxkKTphfVxuZnVuY3Rpb24gUmUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYXB0dXJlZFZhbHVlczpjLmNhcHR1cmVkVmFsdWVzLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExfSk7Yy5leHBpcmF0aW9uVGltZT0wO2MuaXNJbml0aWFsaXplZD9hPWMuYmFzZVN0YXRlOihhPWMuYmFzZVN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxjLmlzSW5pdGlhbGl6ZWQ9ITApO2Zvcih2YXIgaD0hMCxnPWMuZmlyc3Qsaz0hMTtudWxsIT09Zzspe3ZhciB2PWcuZXhwaXJhdGlvblRpbWU7aWYodj5mKXt2YXIgbD1jLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1sfHxsPnYpYy5leHBpcmF0aW9uVGltZT12O2t8fChrPSEwLGMuYmFzZVN0YXRlPWEpfWVsc2V7a3x8XG4oYy5maXJzdD1nLm5leHQsbnVsbD09PWMuZmlyc3QmJihjLmxhc3Q9bnVsbCkpO2lmKGcuaXNSZXBsYWNlKWE9UWUoZyxkLGEsZSksaD0hMDtlbHNlIGlmKHY9UWUoZyxkLGEsZSkpYT1oP0Eoe30sYSx2KTpBKGEsdiksaD0hMTtnLmlzRm9yY2VkJiYoYy5oYXNGb3JjZVVwZGF0ZT0hMCk7bnVsbCE9PWcuY2FsbGJhY2smJih2PWMuY2FsbGJhY2tMaXN0LG51bGw9PT12JiYodj1jLmNhbGxiYWNrTGlzdD1bXSksdi5wdXNoKGcpKTtudWxsIT09Zy5jYXB0dXJlZFZhbHVlJiYodj1jLmNhcHR1cmVkVmFsdWVzLG51bGw9PT12P2MuY2FwdHVyZWRWYWx1ZXM9W2cuY2FwdHVyZWRWYWx1ZV06di5wdXNoKGcuY2FwdHVyZWRWYWx1ZSkpfWc9Zy5uZXh0fW51bGwhPT1jLmNhbGxiYWNrTGlzdD9iLmVmZmVjdFRhZ3w9MzI6bnVsbCE9PWMuZmlyc3R8fGMuaGFzRm9yY2VVcGRhdGV8fG51bGwhPT1jLmNhcHR1cmVkVmFsdWVzfHwoYi51cGRhdGVRdWV1ZT1udWxsKTtrfHwoYy5iYXNlU3RhdGU9YSk7XG5yZXR1cm4gYX1mdW5jdGlvbiBTZShhLGIpe3ZhciBjPWEuY2FsbGJhY2tMaXN0O2lmKG51bGwhPT1jKWZvcihhLmNhbGxiYWNrTGlzdD1udWxsLGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXSxlPWQuY2FsbGJhY2s7ZC5jYWxsYmFjaz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlP0QoXCIxOTFcIixlKTp2b2lkIDA7ZS5jYWxsKGIpfX1cbmZ1bmN0aW9uIFRlKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhLGIsYyxkLGUsZil7aWYobnVsbD09PWJ8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKXJldHVybiEwO3ZhciBuPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLnNob3VsZENvbXBvbmVudFVwZGF0ZT9uLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFoYShiLGMpfHwhaGEoZCxlKTohMH1mdW5jdGlvbiBoKGEsYil7Yi51cGRhdGVyPXI7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX1mdW5jdGlvbiBnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5iLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9ZnVuY3Rpb24gayhhLGIsYyxkKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpcmV0dXJuIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLmNhbGwobnVsbCxjLGQpfXZhciB2PWEuY2FjaGVDb250ZXh0LGw9YS5nZXRNYXNrZWRDb250ZXh0LHA9YS5nZXRVbm1hc2tlZENvbnRleHQsej1hLmlzQ29udGV4dENvbnN1bWVyLEI9YS5oYXNDb250ZXh0Q2hhbmdlZCxyPXtpc01vdW50ZWQ6eWQsZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxcbmNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiEwLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGQpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGU9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOmQsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiEwLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZSl9fTtyZXR1cm57YWRvcHRDbGFzc0luc3RhbmNlOmgsY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczprLFxuY29uc3RydWN0Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPXAoYSksZT16KGEpLGY9ZT9sKGEsZCk6a2E7Yz1uZXcgYyhiLGYpO3ZhciBuPW51bGwhPT1jLnN0YXRlJiZ2b2lkIDAhPT1jLnN0YXRlP2Muc3RhdGU6bnVsbDtoKGEsYyk7YS5tZW1vaXplZFN0YXRlPW47Yj1rKGEsYyxiLG4pO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoYS5tZW1vaXplZFN0YXRlPUEoe30sYS5tZW1vaXplZFN0YXRlLGIpKTtlJiZ2KGEsZCxmKTtyZXR1cm4gY30sbW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5hbHRlcm5hdGUsZT1hLnN0YXRlTm9kZSxmPWEucGVuZGluZ1Byb3BzLG49cChhKTtlLnByb3BzPWY7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWthO2UuY29udGV4dD1sKGEsbik7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChjPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1lLnN0YXRlJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGUuc3RhdGU9UmUoZCxhLGMsZSxmLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9LHJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxuPWEuc3RhdGVOb2RlO24ucHJvcHM9YS5tZW1vaXplZFByb3BzO24uc3RhdGU9XG5hLm1lbW9pemVkU3RhdGU7dmFyIGg9YS5tZW1vaXplZFByb3BzLHI9YS5wZW5kaW5nUHJvcHMsej1uLmNvbnRleHQscT1wKGEpO3E9bChhLHEpOyhjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1yfHx6IT09cSkmJmcoYSxuLHIscSk7ej1hLm1lbW9pemVkU3RhdGU7Yj1udWxsIT09YS51cGRhdGVRdWV1ZT9SZShudWxsLGEsYS51cGRhdGVRdWV1ZSxuLHIsYik6ejt2YXIgdT12b2lkIDA7aCE9PXImJih1PWsoYSxuLHIsYikpO2lmKG51bGwhPT11JiZ2b2lkIDAhPT11KXtiPW51bGw9PT1ifHx2b2lkIDA9PT1iP3U6QSh7fSxiLHUpO3ZhciB0PWEudXBkYXRlUXVldWU7XG5udWxsIT09dCYmKHQuYmFzZVN0YXRlPUEoe30sdC5iYXNlU3RhdGUsdSkpfWlmKCEoaCE9PXJ8fHohPT1ifHxCKCl8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KSwhMTsoaD1mKGEsaCxyLHosYixxKSk/KGN8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudCYmbi5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9XG40KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpLGQoYSxyKSxlKGEsYikpO24ucHJvcHM9cjtuLnN0YXRlPWI7bi5jb250ZXh0PXE7cmV0dXJuIGh9LHVwZGF0ZUNsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBuPWIudHlwZSx4PWIuc3RhdGVOb2RlO3gucHJvcHM9Yi5tZW1vaXplZFByb3BzO3guc3RhdGU9Yi5tZW1vaXplZFN0YXRlO3ZhciBoPWIubWVtb2l6ZWRQcm9wcyxyPWIucGVuZGluZ1Byb3BzLHE9eC5jb250ZXh0LHU9cChiKTt1PWwoYix1KTsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1yfHxxIT09dSkmJmcoYix4LHIsdSk7cT1iLm1lbW9pemVkU3RhdGU7Yz1udWxsIT09Yi51cGRhdGVRdWV1ZT9SZShhLGIsYi51cGRhdGVRdWV1ZSx4LHIsYyk6cTt2YXIgdD12b2lkIDA7aCE9PXImJih0PWsoYix4LHIsYykpO2lmKG51bGwhPT10JiZ2b2lkIDAhPT10KXtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP3Q6QSh7fSxjLHQpO3ZhciB5PWIudXBkYXRlUXVldWU7bnVsbCE9PXkmJih5LmJhc2VTdGF0ZT1BKHt9LHkuYmFzZVN0YXRlLHQpKX1pZighKGghPT1yfHxxIT09Y3x8QigpfHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZcbnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksITE7KHQ9ZihiLGgscixxLGMsdSkpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxVcGRhdGUmJnguY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJnguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUocixjLHUpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjA0OCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJlxucT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yMDQ4KSxkKGIsciksZShiLGMpKTt4LnByb3BzPXI7eC5zdGF0ZT1jO3guY29udGV4dD11O3JldHVybiB0fX19dmFyIFVlPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBWZShhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigyIT09Yy50YWc/RChcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6RChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1rYT9kLnJlZnM9e306ZC5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP0QoXCIxNDhcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDpEKFwiMjU0XCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBXZShhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmRChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gWGUoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT16ZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGgoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gZyhhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPUNlKGMsYS5tb2RlLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1WZShhLGIsYyksZFtcInJldHVyblwiXT1hLGQ7ZD1BZShjLGEubW9kZSxkKTtkLnJlZj1WZShhLGIsYyk7ZFtcInJldHVyblwiXT1hO3JldHVybiBkfWZ1bmN0aW9uIHYoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuRGUoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8MTAhPT1iLnRhZylyZXR1cm4gYj1CZShjLGEubW9kZSxkLGYpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPUNlKFwiXCIrYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGM9QWUoYixhLm1vZGUsYyksYy5yZWY9VmUoYSxudWxsLGIpLGNbXCJyZXR1cm5cIl09YSxjO2Nhc2UgcmM6cmV0dXJuIGI9RGUoYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGJ9aWYoVWUoYil8fHpjKGIpKXJldHVybiBiPUJlKGIsXG5hLm1vZGUsYyxudWxsKSxiW1wicmV0dXJuXCJdPWEsYjtXZShhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpnKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1zYz9sKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgcmM6cmV0dXJuIGMua2V5PT09ZT92KGEsYixjLGQpOm51bGx9aWYoVWUoYyl8fHpjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOmwoYSxiLGMsZCxudWxsKTtXZShhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEIoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGcoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09c2M/bChiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgcmM6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLHYoYixhLGQsZSl9aWYoVWUoZCl8fHpjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGwoYixhLGQsZSxudWxsKTtXZShiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoZSxsLGcsaCl7Zm9yKHZhciByPW51bGwsaz1udWxsLHE9bCx1PWw9MCx0PW51bGw7bnVsbCE9PXEmJnU8Zy5sZW5ndGg7dSsrKXtxLmluZGV4PnU/KHQ9cSxxPW51bGwpOnQ9cS5zaWJsaW5nO3ZhciBuPXooZSxxLGdbdV0saCk7aWYobnVsbD09PW4pe251bGw9PT1xJiYocT10KTticmVha31hJiZxJiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHEpO2w9ZihuLGwsdSk7bnVsbD09PWs/cj1uOmsuc2libGluZz1uO2s9bjtxPXR9aWYodT09PWcubGVuZ3RoKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDt1PGcubGVuZ3RoO3UrKylpZihxPXAoZSxnW3VdLGgpKWw9ZihxLGwsdSksbnVsbD09PWs/cj1xOmsuc2libGluZz1xLGs9cTtyZXR1cm4gcn1mb3IocT1kKGUscSk7dTxnLmxlbmd0aDt1KyspaWYodD1CKHEsZSx1LGdbdV0saCkpe2lmKGEmJm51bGwhPT10LmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT10LmtleT91OnQua2V5KTtsPWYodCxsLHUpO251bGw9PT1rP3I9dDprLnNpYmxpbmc9dDtrPXR9YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1mdW5jdGlvbiBRKGUsbCxnLGgpe3ZhciByPXpjKGcpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiByP0QoXCIxNTBcIik6dm9pZCAwO2c9ci5jYWxsKGcpO251bGw9PWc/RChcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciBrPVxucj1udWxsLHE9bCx1PWw9MCx0PW51bGwsbj1nLm5leHQoKTtudWxsIT09cSYmIW4uZG9uZTt1Kyssbj1nLm5leHQoKSl7cS5pbmRleD51Pyh0PXEscT1udWxsKTp0PXEuc2libGluZzt2YXIgSD16KGUscSxuLnZhbHVlLGgpO2lmKG51bGw9PT1IKXtxfHwocT10KTticmVha31hJiZxJiZudWxsPT09SC5hbHRlcm5hdGUmJmIoZSxxKTtsPWYoSCxsLHUpO251bGw9PT1rP3I9SDprLnNpYmxpbmc9SDtrPUg7cT10fWlmKG4uZG9uZSlyZXR1cm4gYyhlLHEpLHI7aWYobnVsbD09PXEpe2Zvcig7IW4uZG9uZTt1Kyssbj1nLm5leHQoKSluPXAoZSxuLnZhbHVlLGgpLG51bGwhPT1uJiYobD1mKG4sbCx1KSxudWxsPT09az9yPW46ay5zaWJsaW5nPW4saz1uKTtyZXR1cm4gcn1mb3IocT1kKGUscSk7IW4uZG9uZTt1Kyssbj1nLm5leHQoKSlpZihuPUIocSxlLHUsbi52YWx1ZSxoKSxudWxsIT09bil7aWYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PW4ua2V5P3U6bi5rZXkpO1xubD1mKG4sbCx1KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1ufWEmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHJ9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGwpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXNjJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBnPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYoZylzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBvYzphOnt2YXIgaz1mLmtleTtmb3IoZz1kO251bGwhPT1nOyl7aWYoZy5rZXk9PT1rKWlmKDEwPT09Zy50YWc/Zi50eXBlPT09c2M6Zy50eXBlPT09Zi50eXBlKXtjKGEsZy5zaWJsaW5nKTtkPWUoZyxmLnR5cGU9PT1zYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsbCk7ZC5yZWY9VmUoYSxnLGYpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxnKTticmVha31lbHNlIGIoYSxnKTtnPWcuc2libGluZ31mLnR5cGU9PT1cbnNjPyhkPUJlKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGwsZi5rZXkpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihsPUFlKGYsYS5tb2RlLGwpLGwucmVmPVZlKGEsZCxmKSxsW1wicmV0dXJuXCJdPWEsYT1sKX1yZXR1cm4gaChhKTtjYXNlIHJjOmE6e2ZvcihnPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1nKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxsKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1EZShmLGEubW9kZSxsKTtkW1wicmV0dXJuXCJdPWE7YT1kfXJldHVybiBoKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmXG42PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsbCksZFtcInJldHVyblwiXT1hLGE9ZCk6KGMoYSxkKSxkPUNlKGYsYS5tb2RlLGwpLGRbXCJyZXR1cm5cIl09YSxhPWQpLGgoYSk7aWYoVWUoZikpcmV0dXJuIHIoYSxkLGYsbCk7aWYoemMoZikpcmV0dXJuIFEoYSxkLGYsbCk7ZyYmV2UoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYpc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxOmw9YS50eXBlLEQoXCIxNTJcIixsLmRpc3BsYXlOYW1lfHxsLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBZZT1YZSghMCksWmU9WGUoITEpO1xuZnVuY3Rpb24gJGUoYSxiLGMsZCxlLGYsaCl7ZnVuY3Rpb24gZyhhLGIsYyl7ayhhLGIsYyxiLmV4cGlyYXRpb25UaW1lKX1mdW5jdGlvbiBrKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmUoYixudWxsLGMsZCk6WWUoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gdihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGwoYSxiLGMsZCxlLGYpe3YoYSxiKTtpZighYyYmIWUpcmV0dXJuIGQmJnkoYiwhMSkscihhLGIpO2M9Yi5zdGF0ZU5vZGU7bmMuY3VycmVudD1iO3ZhciBsPWU/bnVsbDpjLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2UmJihrKGEsYixudWxsLGYpLGIuY2hpbGQ9bnVsbCk7ayhhLGIsbCxmKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZ5KGIsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHAoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7XG5iLnBlbmRpbmdDb250ZXh0P3QoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmdChhLGIuY29udGV4dCwhMSk7WShhLGIuY29udGFpbmVySW5mbyl9ZnVuY3Rpb24geihhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2ZvcihudWxsIT09ZSYmKGVbXCJyZXR1cm5cIl09YSk7bnVsbCE9PWU7KXtzd2l0Y2goZS50YWcpe2Nhc2UgMTI6dmFyIGY9ZS5zdGF0ZU5vZGV8MDtpZihlLnR5cGU9PT1iJiYwIT09KGYmYykpe2ZvcihmPWU7bnVsbCE9PWY7KXt2YXIgbD1mLmFsdGVybmF0ZTtpZigwPT09Zi5leHBpcmF0aW9uVGltZXx8Zi5leHBpcmF0aW9uVGltZT5kKWYuZXhwaXJhdGlvblRpbWU9ZCxudWxsIT09bCYmKDA9PT1sLmV4cGlyYXRpb25UaW1lfHxsLmV4cGlyYXRpb25UaW1lPmQpJiYobC5leHBpcmF0aW9uVGltZT1kKTtlbHNlIGlmKG51bGwhPT1sJiYoMD09PWwuZXhwaXJhdGlvblRpbWV8fGwuZXhwaXJhdGlvblRpbWU+ZCkpbC5leHBpcmF0aW9uVGltZT1cbmQ7ZWxzZSBicmVhaztmPWZbXCJyZXR1cm5cIl19Zj1udWxsfWVsc2UgZj1lLmNoaWxkO2JyZWFrO2Nhc2UgMTM6Zj1lLnR5cGU9PT1hLnR5cGU/bnVsbDplLmNoaWxkO2JyZWFrO2RlZmF1bHQ6Zj1lLmNoaWxkfWlmKG51bGwhPT1mKWZbXCJyZXR1cm5cIl09ZTtlbHNlIGZvcihmPWU7bnVsbCE9PWY7KXtpZihmPT09YSl7Zj1udWxsO2JyZWFrfWU9Zi5zaWJsaW5nO2lmKG51bGwhPT1lKXtmPWU7YnJlYWt9Zj1mW1wicmV0dXJuXCJdfWU9Zn19ZnVuY3Rpb24gQihhLGIsYyl7dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkUHJvcHM7aWYoIXEoKSYmZj09PWUpcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYik7dmFyIGw9ZS52YWx1ZTtiLm1lbW9pemVkUHJvcHM9ZTtpZihudWxsPT09ZilsPTEwNzM3NDE4MjM7ZWxzZSBpZihmLnZhbHVlPT09ZS52YWx1ZSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxcbnIoYSxiKTtsPTB9ZWxzZXt2YXIgaD1mLnZhbHVlO2lmKGg9PT1sJiYoMCE9PWh8fDEvaD09PTEvbCl8fGghPT1oJiZsIT09bCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYik7bD0wfWVsc2UgaWYobD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxsKToxMDczNzQxODIzLGx8PTAsMD09PWwpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpfWVsc2UgeihiLGQsbCxjKX1iLnN0YXRlTm9kZT1sO0coYik7ZyhhLGIsZS5jaGlsZHJlbik7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcihhLGIpe251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD9EKFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO3ZhciBjPXplKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7XG5iLmNoaWxkPWM7Zm9yKGNbXCJyZXR1cm5cIl09YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz16ZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGNbXCJyZXR1cm5cIl09YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH12YXIgUT1hLnNob3VsZFNldFRleHRDb250ZW50LG49YS5zaG91bGREZXByaW9yaXRpemVTdWJ0cmVlLHg9Yi5wdXNoSG9zdENvbnRleHQsWT1iLnB1c2hIb3N0Q29udGFpbmVyLEc9ZC5wdXNoUHJvdmlkZXIsUj1jLmdldE1hc2tlZENvbnRleHQsUz1jLmdldFVubWFza2VkQ29udGV4dCxxPWMuaGFzQ29udGV4dENoYW5nZWQsdT1jLnB1c2hDb250ZXh0UHJvdmlkZXIsdD1jLnB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QseT1jLmludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIsSD1lLmVudGVySHlkcmF0aW9uU3RhdGUsV2E9ZS5yZXNldEh5ZHJhdGlvblN0YXRlLENiPWUudHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U7XG5hPVRlKGMsZixoLGZ1bmN0aW9uKGEsYil7YS5tZW1vaXplZFByb3BzPWJ9LGZ1bmN0aW9uKGEsYil7YS5tZW1vaXplZFN0YXRlPWJ9KTt2YXIgSmM9YS5hZG9wdENsYXNzSW5zdGFuY2UsS2M9YS5jYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLExjPWEuY29uc3RydWN0Q2xhc3NJbnN0YW5jZSxEYj1hLm1vdW50Q2xhc3NJbnN0YW5jZSxNYz1hLnJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSxFYj1hLnVwZGF0ZUNsYXNzSW5zdGFuY2U7cmV0dXJue2JlZ2luV29yazpmdW5jdGlvbihhLGIsYyl7aWYoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+Yyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6cChiKTticmVhaztjYXNlIDI6dShiKTticmVhaztjYXNlIDQ6WShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTM6RyhiKX1yZXR1cm4gbnVsbH1zd2l0Y2goYi50YWcpe2Nhc2UgMDpudWxsIT09YT9EKFwiMTU1XCIpOnZvaWQgMDt2YXIgZD1iLnR5cGUsXG5lPWIucGVuZGluZ1Byb3BzLGY9UyhiKTtmPVIoYixmKTtkPWQoZSxmKTtiLmVmZmVjdFRhZ3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5yZW5kZXImJnZvaWQgMD09PWQuJCR0eXBlb2Y/KGY9Yi50eXBlLGIudGFnPTIsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1kLnN0YXRlJiZ2b2lkIDAhPT1kLnN0YXRlP2Quc3RhdGU6bnVsbCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJihlPUtjKGIsZCxlLGIubWVtb2l6ZWRTdGF0ZSksbnVsbCE9PWUmJnZvaWQgMCE9PWUmJihiLm1lbW9pemVkU3RhdGU9QSh7fSxiLm1lbW9pemVkU3RhdGUsZSkpKSxlPXUoYiksSmMoYixkKSxEYihiLGMpLGE9bChhLGIsITAsZSwhMSxjKSk6KGIudGFnPTEsZyhhLGIsZCksYi5tZW1vaXplZFByb3BzPWUsYT1iLmNoaWxkKTtyZXR1cm4gYTtjYXNlIDE6cmV0dXJuIGU9Yi50eXBlLGM9Yi5wZW5kaW5nUHJvcHMscSgpfHxcbmIubWVtb2l6ZWRQcm9wcyE9PWM/KGQ9UyhiKSxkPVIoYixkKSxlPWUoYyxkKSxiLmVmZmVjdFRhZ3w9MSxnKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAyOmU9dShiKTtudWxsPT09YT9udWxsPT09Yi5zdGF0ZU5vZGU/KExjKGIsYi5wZW5kaW5nUHJvcHMpLERiKGIsYyksZD0hMCk6ZD1NYyhiLGMpOmQ9RWIoYSxiLGMpO2Y9ITE7dmFyIGg9Yi51cGRhdGVRdWV1ZTtudWxsIT09aCYmbnVsbCE9PWguY2FwdHVyZWRWYWx1ZXMmJihmPWQ9ITApO3JldHVybiBsKGEsYixkLGUsZixjKTtjYXNlIDM6YTppZihwKGIpLGQ9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZCl7Zj1iLm1lbW9pemVkU3RhdGU7ZT1SZShhLGIsZCxudWxsLG51bGwsYyk7Yi5tZW1vaXplZFN0YXRlPWU7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1kJiZudWxsIT09ZC5jYXB0dXJlZFZhbHVlcylkPW51bGw7ZWxzZSBpZihmPT09ZSl7V2EoKTthPXIoYSxiKTticmVhayBhfWVsc2UgZD1cbmUuZWxlbWVudDtmPWIuc3RhdGVOb2RlOyhudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZmLmh5ZHJhdGUmJkgoYik/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9WmUoYixudWxsLGQsYykpOihXYSgpLGcoYSxiLGQpKTtiLm1lbW9pemVkU3RhdGU9ZTthPWIuY2hpbGR9ZWxzZSBXYSgpLGE9cihhLGIpO3JldHVybiBhO2Nhc2UgNTphOnt4KGIpO251bGw9PT1hJiZDYihiKTtlPWIudHlwZTtoPWIubWVtb2l6ZWRQcm9wcztkPWIucGVuZGluZ1Byb3BzO2Y9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7aWYoIXEoKSYmaD09PWQpe2lmKGg9Yi5tb2RlJjEmJm4oZSxkKSliLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7aWYoIWh8fDEwNzM3NDE4MjMhPT1jKXthPXIoYSxiKTticmVhayBhfX1oPWQuY2hpbGRyZW47UShlLGQpP2g9bnVsbDpmJiZRKGUsZikmJihiLmVmZmVjdFRhZ3w9MTYpO3YoYSxiKTsxMDczNzQxODIzIT09YyYmYi5tb2RlJjEmJm4oZSxkKT8oYi5leHBpcmF0aW9uVGltZT1cbjEwNzM3NDE4MjMsYi5tZW1vaXplZFByb3BzPWQsYT1udWxsKTooZyhhLGIsaCksYi5tZW1vaXplZFByb3BzPWQsYT1iLmNoaWxkKX1yZXR1cm4gYTtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZDYihiKSxiLm1lbW9pemVkUHJvcHM9Yi5wZW5kaW5nUHJvcHMsbnVsbDtjYXNlIDg6Yi50YWc9NztjYXNlIDc6cmV0dXJuIGU9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1lfHwoZT1iLm1lbW9pemVkUHJvcHMpLGQ9ZS5jaGlsZHJlbixiLnN0YXRlTm9kZT1udWxsPT09YT9aZShiLGIuc3RhdGVOb2RlLGQsYyk6WWUoYixhLnN0YXRlTm9kZSxkLGMpLGIubWVtb2l6ZWRQcm9wcz1lLGIuc3RhdGVOb2RlO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIFkoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxlPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09ZT8obnVsbD09PWE/Yi5jaGlsZD1ZZShiLG51bGwsZSxjKTpnKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9XG5lLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDE0OnJldHVybiBjPWIudHlwZS5yZW5kZXIsYz1jKGIucGVuZGluZ1Byb3BzLGIucmVmKSxnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxiLmNoaWxkO2Nhc2UgMTA6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1jPyhnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxMTpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixxKCl8fG51bGwhPT1jJiZiLm1lbW9pemVkUHJvcHMhPT1jPyhnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxMzpyZXR1cm4gQihhLGIsYyk7Y2FzZSAxMjphOntkPWIudHlwZTtmPWIucGVuZGluZ1Byb3BzO2g9Yi5tZW1vaXplZFByb3BzO2U9ZC5fY3VycmVudFZhbHVlO3ZhciB0PWQuX2NoYW5nZWRCaXRzO2lmKHEoKXx8MCE9PXR8fGghPT1mKXtiLm1lbW9pemVkUHJvcHM9XG5mO3ZhciBrPWYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO2lmKHZvaWQgMD09PWt8fG51bGw9PT1rKWs9MTA3Mzc0MTgyMztiLnN0YXRlTm9kZT1rO2lmKDAhPT0odCZrKSl6KGIsZCx0LGMpO2Vsc2UgaWYoaD09PWYpe2E9cihhLGIpO2JyZWFrIGF9Yz1mLmNoaWxkcmVuO2M9YyhlKTtnKGEsYixjKTthPWIuY2hpbGR9ZWxzZSBhPXIoYSxiKX1yZXR1cm4gYTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiBhZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGg9YS5jcmVhdGVJbnN0YW5jZSxnPWEuY3JlYXRlVGV4dEluc3RhbmNlLGs9YS5hcHBlbmRJbml0aWFsQ2hpbGQsdj1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGw9YS5wcmVwYXJlVXBkYXRlLHA9YS5wZXJzaXN0ZW5jZSx6PWIuZ2V0Um9vdEhvc3RDb250YWluZXIsQj1iLnBvcEhvc3RDb250ZXh0LHI9Yi5nZXRIb3N0Q29udGV4dCxRPWIucG9wSG9zdENvbnRhaW5lcixuPWMucG9wQ29udGV4dFByb3ZpZGVyLHg9Yy5wb3BUb3BMZXZlbENvbnRleHRPYmplY3QsWT1kLnBvcFByb3ZpZGVyLEc9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlLFI9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSxTPWUucG9wSHlkcmF0aW9uU3RhdGUscT12b2lkIDAsdT12b2lkIDAsdD12b2lkIDA7YS5tdXRhdGlvbj8ocT1mdW5jdGlvbigpe30sdT1mdW5jdGlvbihhLGIsYyl7KGIudXBkYXRlUXVldWU9XG5jKSYmZihiKX0sdD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmZihiKX0pOnA/RChcIjIzNVwiKTpEKFwiMjM2XCIpO3JldHVybntjb21wbGV0ZVdvcms6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gbihiKSxhPWIuc3RhdGVOb2RlLGQ9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZyY9LTY1LFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudERpZENhdGNoP2IuZWZmZWN0VGFnfD0yNTY6ZC5jYXB0dXJlZFZhbHVlcz1udWxsKSxudWxsO2Nhc2UgMzpRKGIpO3goYik7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpUyhiKSxiLmVmZmVjdFRhZyY9LTM7cShiKTthPWIudXBkYXRlUXVldWU7XG5udWxsIT09YSYmbnVsbCE9PWEuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZ3w9MjU2KTtyZXR1cm4gbnVsbDtjYXNlIDU6QihiKTtjPXooKTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXt2YXIgcD1hLm1lbW9pemVkUHJvcHMsSD1iLnN0YXRlTm9kZSx5PXIoKTtIPWwoSCxlLHAsZCxjLHkpO3UoYSxiLEgsZSxwLGQsYyx5KTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT1yKCk7aWYoUyhiKSlHKGIsYyxhKSYmZihiKTtlbHNle3A9aChlLGQsYyxhLGIpO2E6Zm9yKHk9Yi5jaGlsZDtudWxsIT09eTspe2lmKDU9PT15LnRhZ3x8Nj09PXkudGFnKWsocCx5LnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09eS50YWcmJm51bGwhPT15LmNoaWxkKXt5LmNoaWxkW1wicmV0dXJuXCJdPXk7eT15LmNoaWxkO2NvbnRpbnVlfWlmKHk9PT1iKWJyZWFrO1xuZm9yKDtudWxsPT09eS5zaWJsaW5nOyl7aWYobnVsbD09PXlbXCJyZXR1cm5cIl18fHlbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7eT15W1wicmV0dXJuXCJdfXkuc2libGluZ1tcInJldHVyblwiXT15W1wicmV0dXJuXCJdO3k9eS5zaWJsaW5nfXYocCxlLGQsYyxhKSYmZihiKTtiLnN0YXRlTm9kZT1wfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl0KGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9eigpO2M9cigpO1MoYik/UihiKSYmZihiKTpiLnN0YXRlTm9kZT1nKGQsYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzooZD1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpEKFwiMTY1XCIpO2IudGFnPTg7ZT1bXTthOmZvcigocD1iLnN0YXRlTm9kZSkmJihwW1wicmV0dXJuXCJdPWIpO251bGwhPT1cbnA7KXtpZig1PT09cC50YWd8fDY9PT1wLnRhZ3x8ND09PXAudGFnKUQoXCIyNDdcIik7ZWxzZSBpZig5PT09cC50YWcpZS5wdXNoKHAucGVuZGluZ1Byb3BzLnZhbHVlKTtlbHNlIGlmKG51bGwhPT1wLmNoaWxkKXtwLmNoaWxkW1wicmV0dXJuXCJdPXA7cD1wLmNoaWxkO2NvbnRpbnVlfWZvcig7bnVsbD09PXAuc2libGluZzspe2lmKG51bGw9PT1wW1wicmV0dXJuXCJdfHxwW1wicmV0dXJuXCJdPT09YilicmVhayBhO3A9cFtcInJldHVyblwiXX1wLnNpYmxpbmdbXCJyZXR1cm5cIl09cFtcInJldHVyblwiXTtwPXAuc2libGluZ31wPWQuaGFuZGxlcjtkPXAoZC5wcm9wcyxlKTtiLmNoaWxkPVllKGIsbnVsbCE9PWE/YS5jaGlsZDpudWxsLGQsYyk7cmV0dXJuIGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBiLnRhZz03LG51bGw7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxMDpyZXR1cm4gbnVsbDtjYXNlIDExOnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gUShiKSxxKGIpLG51bGw7XG5jYXNlIDEzOnJldHVybiBZKGIpLG51bGw7Y2FzZSAxMjpyZXR1cm4gbnVsbDtjYXNlIDA6RChcIjE2N1wiKTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiBiZihhLGIsYyxkLGUpe3ZhciBmPWEucG9wSG9zdENvbnRhaW5lcixoPWEucG9wSG9zdENvbnRleHQsZz1iLnBvcENvbnRleHRQcm92aWRlcixrPWIucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHY9Yy5wb3BQcm92aWRlcjtyZXR1cm57dGhyb3dFeGNlcHRpb246ZnVuY3Rpb24oYSxiLGMpe2IuZWZmZWN0VGFnfD01MTI7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtiPXt2YWx1ZTpjLHNvdXJjZTpiLHN0YWNrOkJjKGIpfTtkb3tzd2l0Y2goYS50YWcpe2Nhc2UgMzpPZShhKTthLnVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzPVtiXTthLmVmZmVjdFRhZ3w9MTAyNDtyZXR1cm47Y2FzZSAyOmlmKGM9YS5zdGF0ZU5vZGUsMD09PShhLmVmZmVjdFRhZyY2NCkmJm51bGwhPT1jJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnREaWRDYXRjaCYmIWUoYykpe09lKGEpO2M9YS51cGRhdGVRdWV1ZTt2YXIgZD1jLmNhcHR1cmVkVmFsdWVzO251bGw9PT1kP1xuYy5jYXB0dXJlZFZhbHVlcz1bYl06ZC5wdXNoKGIpO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybn19YT1hW1wicmV0dXJuXCJdfXdoaWxlKG51bGwhPT1hKX0sdW53aW5kV29yazpmdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpnKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIGYoYSksayhhKSxiPWEuZWZmZWN0VGFnLGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgNTpyZXR1cm4gaChhKSxudWxsO2Nhc2UgNDpyZXR1cm4gZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHYoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX0sdW53aW5kSW50ZXJydXB0ZWRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7YnJlYWs7Y2FzZSAzOmYoYSk7ayhhKTticmVhaztjYXNlIDU6aChhKTticmVhaztjYXNlIDQ6ZihhKTticmVhaztjYXNlIDEzOnYoYSl9fX19XG5mdW5jdGlvbiBjZihhLGIpe3ZhciBjPWIuc291cmNlO251bGw9PT1iLnN0YWNrJiZCYyhjKTtudWxsIT09YyYmQWMoYyk7Yj1iLnZhbHVlO251bGwhPT1hJiYyPT09YS50YWcmJkFjKGEpO3RyeXtiJiZiLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZCl7ZCYmZC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGQpfX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaCh0KXtiKGEsdCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBKZSYmSmUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZihhKTt2YXIgYz1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yy5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYy5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYy5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe2IoYSx0KX1icmVhaztjYXNlIDU6ZihhKTticmVhaztjYXNlIDc6ZyhhLnN0YXRlTm9kZSk7YnJlYWs7Y2FzZSA0OnAmJnYoYSl9fWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWE7OylpZihoKGIpLG51bGw9PT1iLmNoaWxkfHxwJiY0PT09Yi50YWcpe2lmKGI9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9ZWxzZSBiLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9ZnVuY3Rpb24gdihhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWJbXCJyZXR1cm5cIl07YTpmb3IoOzspe251bGw9PT1jP0QoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jPSEwfWlmKDU9PT1cbmIudGFnfHw2PT09Yi50YWcpZyhiKSxlP1MoZCxiLnN0YXRlTm9kZSk6UihkLGIuc3RhdGVOb2RlKTtlbHNlIGlmKDQ9PT1iLnRhZz9kPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86aChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZFtcInJldHVyblwiXT1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXTs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319dmFyIGw9YS5nZXRQdWJsaWNJbnN0YW5jZSxwPWEubXV0YXRpb247YT1hLnBlcnNpc3RlbmNlO3B8fChhP0QoXCIyMzVcIik6RChcIjIzNlwiKSk7dmFyIHo9cC5jb21taXRNb3VudCxCPXAuY29tbWl0VXBkYXRlLHI9cC5yZXNldFRleHRDb250ZW50LFE9cC5jb21taXRUZXh0VXBkYXRlLG49cC5hcHBlbmRDaGlsZCxcbng9cC5hcHBlbmRDaGlsZFRvQ29udGFpbmVyLFk9cC5pbnNlcnRCZWZvcmUsRz1wLmluc2VydEluQ29udGFpbmVyQmVmb3JlLFI9cC5yZW1vdmVDaGlsZCxTPXAucmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyO3JldHVybntjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjppZihiLmVmZmVjdFRhZyYyMDQ4JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGMsZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRSZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe3IoYS5zdGF0ZU5vZGUpfSxcbmNvbW1pdFBsYWNlbWVudDpmdW5jdGlvbihhKXthOntmb3IodmFyIGI9YVtcInJldHVyblwiXTtudWxsIT09Yjspe2lmKGsoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWJbXCJyZXR1cm5cIl19RChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkQoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihyKGIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jW1wicmV0dXJuXCJdfHxrKGNbXCJyZXR1cm5cIl0pKXtjPW51bGw7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yy5zaWJsaW5nW1wicmV0dXJuXCJdPWNbXCJyZXR1cm5cIl07Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PVxuYy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZFtcInJldHVyblwiXT1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWM/ZD9HKGIsZS5zdGF0ZU5vZGUsYyk6WShiLGUuc3RhdGVOb2RlLGMpOmQ/eChiLGUuc3RhdGVOb2RlKTpuKGIsZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZFtcInJldHVyblwiXT1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZVtcInJldHVyblwiXXx8ZVtcInJldHVyblwiXT09PWEpcmV0dXJuO2U9ZVtcInJldHVyblwiXX1lLnNpYmxpbmdbXCJyZXR1cm5cIl09ZVtcInJldHVyblwiXTtlPWUuc2libGluZ319LGNvbW1pdERlbGV0aW9uOmZ1bmN0aW9uKGEpe3YoYSk7XG5hW1wicmV0dXJuXCJdPW51bGw7YS5jaGlsZD1udWxsO2EuYWx0ZXJuYXRlJiYoYS5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxhLmFsdGVybmF0ZVtcInJldHVyblwiXT1udWxsKX0sY29tbWl0V29yazpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmQihjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTYyXCIpOnZvaWQgMDtjPWIubWVtb2l6ZWRQcm9wcztRKGIuc3RhdGVOb2RlLG51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpjLGMpO2JyZWFrO2Nhc2UgMzpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRMaWZlQ3ljbGVzOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMjphPVxuYy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7Yj1iLm1lbW9pemVkU3RhdGU7YS5wcm9wcz1jLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1jLm1lbW9pemVkU3RhdGU7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWM9Yy51cGRhdGVRdWV1ZTtudWxsIT09YyYmU2UoYyxhKTticmVhaztjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1sKGMuY2hpbGQuc3RhdGVOb2RlKTticmVhaztjYXNlIDI6YT1jLmNoaWxkLnN0YXRlTm9kZX1TZShiLGEpfWJyZWFrO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyZcbjQmJnooYSxjLnR5cGUsYy5tZW1vaXplZFByb3BzLGMpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0RXJyb3JMb2dnaW5nOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDI6dmFyIGM9YS50eXBlO2I9YS5zdGF0ZU5vZGU7dmFyIGQ9YS51cGRhdGVRdWV1ZTtudWxsPT09ZHx8bnVsbD09PWQuY2FwdHVyZWRWYWx1ZXM/RChcIjI2NFwiKTp2b2lkIDA7dmFyIGY9ZC5jYXB0dXJlZFZhbHVlcztkLmNhcHR1cmVkVmFsdWVzPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoJiZlKGIpO2IucHJvcHM9YS5tZW1vaXplZFByb3BzO2Iuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspe2Q9ZltjXTt2YXIgbD1kLnZhbHVlLGc9ZC5zdGFjaztjZihhLGQpO2IuY29tcG9uZW50RGlkQ2F0Y2gobCx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWc/ZzpcIlwifSl9YnJlYWs7XG5jYXNlIDM6Yz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jfHxudWxsPT09Yy5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDtmPWMuY2FwdHVyZWRWYWx1ZXM7Yy5jYXB0dXJlZFZhbHVlcz1udWxsO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspZD1mW2NdLGNmKGEsZCksYihkLnZhbHVlKTticmVhaztkZWZhdWx0OkQoXCIyNjVcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9bChjKTticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX0sY29tbWl0RGV0YWNoUmVmOmZ1bmN0aW9uKGEpe2E9YS5yZWY7bnVsbCE9PWEmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hKG51bGwpOmEuY3VycmVudD1udWxsKX19fXZhciBlZj17fTtcbmZ1bmN0aW9uIGZmKGEsYil7ZnVuY3Rpb24gYyhhKXthPT09ZWY/RChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGQ9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGU9YS5nZXRSb290SG9zdENvbnRleHQ7YT1iLmNyZWF0ZUN1cnNvcjt2YXIgZj1iLnB1c2gsaD1iLnBvcCxnPWEoZWYpLGs9YShlZiksdj1hKGVmKTtyZXR1cm57Z2V0SG9zdENvbnRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gYyhnLmN1cnJlbnQpfSxnZXRSb290SG9zdENvbnRhaW5lcjpmdW5jdGlvbigpe3JldHVybiBjKHYuY3VycmVudCl9LHBvcEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSl7aChnLGEpO2goayxhKTtoKHYsYSl9LHBvcEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe2suY3VycmVudD09PWEmJihoKGcsYSksaChrLGEpKX0scHVzaEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSxiKXtmKHYsYixhKTtmKGssYSxhKTtmKGcsZWYsYSk7Yj1lKGIpO2goZyxhKTtmKGcsYixhKX0scHVzaEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPVxuYyh2LmN1cnJlbnQpLGU9YyhnLmN1cnJlbnQpO2I9ZChlLGEudHlwZSxiKTtlIT09YiYmKGYoayxhLGEpLGYoZyxiLGEpKX19fVxuZnVuY3Rpb24gZ2YoYSl7ZnVuY3Rpb24gYihhLGIpe3ZhciBjPW5ldyB4ZSg1LG51bGwsbnVsbCwwKTtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjW1wicmV0dXJuXCJdPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIGMoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gYj1mKGIsYS50eXBlLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPWgoYixhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGQoYSl7Zm9yKGE9YVtcInJldHVyblwiXTtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YVtcInJldHVyblwiXTtwPWF9dmFyIGU9YS5zaG91bGRTZXRUZXh0Q29udGVudDtcbmE9YS5oeWRyYXRpb247aWYoIWEpcmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe30sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oKXtEKFwiMTc1XCIpfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzZcIil9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9fTt2YXIgZj1hLmNhbkh5ZHJhdGVJbnN0YW5jZSxoPWEuY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSxnPWEuZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nLGs9YS5nZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCx2PWEuaHlkcmF0ZUluc3RhbmNlLGw9YS5oeWRyYXRlVGV4dEluc3RhbmNlLHA9bnVsbCx6PW51bGwsQj0hMTtyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbihhKXt6PVxuayhhLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtwPWE7cmV0dXJuIEI9ITB9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt6PXA9bnVsbDtCPSExfSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbihhKXtpZihCKXt2YXIgZD16O2lmKGQpe2lmKCFjKGEsZCkpe2Q9ZyhkKTtpZighZHx8IWMoYSxkKSl7YS5lZmZlY3RUYWd8PTI7Qj0hMTtwPWE7cmV0dXJufWIocCx6KX1wPWE7ej1rKGQpfWVsc2UgYS5lZmZlY3RUYWd8PTIsQj0hMSxwPWF9fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXtiPXYoYS5zdGF0ZU5vZGUsYS50eXBlLGEubWVtb2l6ZWRQcm9wcyxiLGMsYSk7YS51cGRhdGVRdWV1ZT1iO3JldHVybiBudWxsIT09Yj8hMDohMX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGwoYS5zdGF0ZU5vZGUsYS5tZW1vaXplZFByb3BzLGEpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbihhKXtpZihhIT09XG5wKXJldHVybiExO2lmKCFCKXJldHVybiBkKGEpLEI9ITAsITE7dmFyIGM9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1jJiZcImJvZHlcIiE9PWMmJiFlKGMsYS5tZW1vaXplZFByb3BzKSlmb3IoYz16O2M7KWIoYSxjKSxjPWcoYyk7ZChhKTt6PXA/ZyhhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH19fVxuZnVuY3Rpb24gaGYoYSl7ZnVuY3Rpb24gYihhLGIsYyl7YT1hLnN0YXRlTm9kZTthLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YjthLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWN9ZnVuY3Rpb24gYyhhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXN9ZnVuY3Rpb24gZChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpEKFwiMTA4XCIsQWMoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBBKHt9LGIsYyl9dmFyIGU9YS5jcmVhdGVDdXJzb3IsZj1hLnB1c2gsaD1hLnBvcCxnPWUoa2EpLGs9ZSghMSksdj1rYTtyZXR1cm57Z2V0VW5tYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBjKGEpP1xudjpnLmN1cnJlbnR9LGNhY2hlQ29udGV4dDpiLGdldE1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSxjKXt2YXIgZD1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFkKXJldHVybiBrYTt2YXIgZT1hLnN0YXRlTm9kZTtpZihlJiZlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1jKXJldHVybiBlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBmPXt9LGc7Zm9yKGcgaW4gZClmW2ddPWNbZ107ZSYmYihhLGMsZik7cmV0dXJuIGZ9LGhhc0NvbnRleHRDaGFuZ2VkOmZ1bmN0aW9uKCl7cmV0dXJuIGsuY3VycmVudH0saXNDb250ZXh0Q29uc3VtZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNvbnRleHRUeXBlc30saXNDb250ZXh0UHJvdmlkZXI6Yyxwb3BDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSl7YyhhKSYmKGgoayxhKSxoKGcsYSkpfSxwb3BUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSl7aChrLFxuYSk7aChnLGEpfSxwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0OmZ1bmN0aW9uKGEsYixjKXtudWxsIT1nLmN1cnNvcj9EKFwiMTY4XCIpOnZvaWQgMDtmKGcsYixhKTtmKGssYyxhKX0scHJvY2Vzc0NoaWxkQ29udGV4dDpkLHB1c2hDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSl7aWYoIWMoYSkpcmV0dXJuITE7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxrYTt2PWcuY3VycmVudDtmKGcsYixhKTtmKGssay5jdXJyZW50LGEpO3JldHVybiEwfSxpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7Yz92b2lkIDA6RChcIjE2OVwiKTtpZihiKXt2YXIgZT1kKGEsdik7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1lO2goayxhKTtoKGcsYSk7ZihnLGUsYSl9ZWxzZSBoKGssYSk7ZihrLGIsYSl9LGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEpe2ZvcigyIT09XG54ZChhKXx8MiE9PWEudGFnP0QoXCIxNzBcIik6dm9pZCAwOzMhPT1hLnRhZzspe2lmKGMoYSkpcmV0dXJuIGEuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0OyhhPWFbXCJyZXR1cm5cIl0pP3ZvaWQgMDpEKFwiMTcxXCIpfXJldHVybiBhLnN0YXRlTm9kZS5jb250ZXh0fX19XG5mdW5jdGlvbiBqZihhKXt2YXIgYj1hLmNyZWF0ZUN1cnNvcixjPWEucHVzaCxkPWEucG9wLGU9YihudWxsKSxmPWIobnVsbCksaD1iKDApO3JldHVybntwdXNoUHJvdmlkZXI6ZnVuY3Rpb24oYSl7dmFyIGI9YS50eXBlLl9jb250ZXh0O2MoaCxiLl9jaGFuZ2VkQml0cyxhKTtjKGYsYi5fY3VycmVudFZhbHVlLGEpO2MoZSxhLGEpO2IuX2N1cnJlbnRWYWx1ZT1hLnBlbmRpbmdQcm9wcy52YWx1ZTtiLl9jaGFuZ2VkQml0cz1hLnN0YXRlTm9kZX0scG9wUHJvdmlkZXI6ZnVuY3Rpb24oYSl7dmFyIGI9aC5jdXJyZW50LGM9Zi5jdXJyZW50O2QoZSxhKTtkKGYsYSk7ZChoLGEpO2E9YS50eXBlLl9jb250ZXh0O2EuX2N1cnJlbnRWYWx1ZT1jO2EuX2NoYW5nZWRCaXRzPWJ9fX1cbmZ1bmN0aW9uIGtmKCl7dmFyIGE9W10sYj0tMTtyZXR1cm57Y3JlYXRlQ3Vyc29yOmZ1bmN0aW9uKGEpe3JldHVybntjdXJyZW50OmF9fSxpc0VtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuLTE9PT1ifSxwb3A6ZnVuY3Rpb24oYyl7MD5ifHwoYy5jdXJyZW50PWFbYl0sYVtiXT1udWxsLGItLSl9LHB1c2g6ZnVuY3Rpb24oYyxkKXtiKys7YVtiXT1jLmN1cnJlbnQ7Yy5jdXJyZW50PWR9LGNoZWNrVGhhdFN0YWNrSXNFbXB0eTpmdW5jdGlvbigpe30scmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2OmZ1bmN0aW9uKCl7fX19XG5mdW5jdGlvbiBsZihhKXtmdW5jdGlvbiBiKCl7aWYobnVsbCE9PUkpZm9yKHZhciBhPUlbXCJyZXR1cm5cIl07bnVsbCE9PWE7KUxjKGEpLGE9YVtcInJldHVyblwiXTtZYT1udWxsO1o9MDtJPW51bGw7TmM9ITF9ZnVuY3Rpb24gYyhhKXtyZXR1cm4gbnVsbCE9PXlhJiZ5YS5oYXMoYSl9ZnVuY3Rpb24gZChhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YVtcInJldHVyblwiXSxkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjUxMikpe2I9Q2IoYixhLFopO3ZhciBlPWE7aWYoMTA3Mzc0MTgyMz09PVp8fDEwNzM3NDE4MjMhPT1lLmV4cGlyYXRpb25UaW1lKXtiOnN3aXRjaChlLnRhZyl7Y2FzZSAzOmNhc2UgMjp2YXIgZj1lLnVwZGF0ZVF1ZXVlO2Y9bnVsbD09PWY/MDpmLmV4cGlyYXRpb25UaW1lO2JyZWFrIGI7ZGVmYXVsdDpmPTB9Zm9yKHZhciBnPWUuY2hpbGQ7bnVsbCE9PWc7KTAhPT1nLmV4cGlyYXRpb25UaW1lJiYoMD09PWZ8fGY+Zy5leHBpcmF0aW9uVGltZSkmJihmPVxuZy5leHBpcmF0aW9uVGltZSksZz1nLnNpYmxpbmc7ZS5leHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjUxMikmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNle05jPSEwO2JyZWFrfX1lbHNle2E9S2MoYSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0yNTU5LGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1cbm51bGwsYy5lZmZlY3RUYWd8PTUxMik7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9fXJldHVybiBudWxsfWZ1bmN0aW9uIGUoYSl7dmFyIGI9V2EoYS5hbHRlcm5hdGUsYSxaKTtudWxsPT09YiYmKGI9ZChhKSk7bmMuY3VycmVudD1udWxsO3JldHVybiBifWZ1bmN0aW9uIGYoYSxjLGYpe2NhP0QoXCIyNDNcIik6dm9pZCAwO2NhPSEwO2lmKGMhPT1afHxhIT09WWF8fG51bGw9PT1JKWIoKSxZYT1hLFo9YyxJPXplKFlhLmN1cnJlbnQsbnVsbCxaKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBnPSExO2Rve3RyeXtpZihmKWZvcig7bnVsbCE9PUkmJiFTKCk7KUk9ZShJKTtlbHNlIGZvcig7bnVsbCE9PUk7KUk9ZShJKX1jYXRjaChPYyl7aWYobnVsbD09PUkpe2c9ITA7cShPYyk7YnJlYWt9Zj1JO3ZhciBoPWZbXCJyZXR1cm5cIl07aWYobnVsbD09PWgpe2c9ITA7cShPYyk7YnJlYWt9SmMoaCxmLE9jKTtJPWQoZil9YnJlYWt9d2hpbGUoMSk7XG5jYT0hMTtpZihnfHxudWxsIT09SSlyZXR1cm4gbnVsbDtpZihOYylyZXR1cm4gYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmN1cnJlbnQuYWx0ZXJuYXRlO0QoXCIyNjJcIil9ZnVuY3Rpb24gaChhLGIsYyxkKXthPXt2YWx1ZTpjLHNvdXJjZTphLHN0YWNrOkJjKGEpfTtQZShiLHtleHBpcmF0aW9uVGltZTpkLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOm51bGwsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6YSxuZXh0Om51bGx9KTt2KGIsZCl9ZnVuY3Rpb24gZyhhLGIpe2E6e2NhJiYhWmE/RChcIjI2M1wiKTp2b2lkIDA7Zm9yKHZhciBkPWFbXCJyZXR1cm5cIl07bnVsbCE9PWQ7KXtzd2l0Y2goZC50YWcpe2Nhc2UgMjp2YXIgZT1kLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkQ2F0Y2gmJiFjKGUpKXtoKGEsZCxiLFxuMSk7YT12b2lkIDA7YnJlYWsgYX1icmVhaztjYXNlIDM6aChhLGQsYiwxKTthPXZvaWQgMDticmVhayBhfWQ9ZFtcInJldHVyblwiXX0zPT09YS50YWcmJmgoYSxhLGIsMSk7YT12b2lkIDB9cmV0dXJuIGF9ZnVuY3Rpb24gayhhKXthPTAhPT1pYT9pYTpjYT9aYT8xOlo6YS5tb2RlJjE/emE/MTAqKCgobCgpKzE1KS8xMHwwKSsxKToyNSooKChsKCkrNTAwKS8yNXwwKSsxKToxO3phJiYoMD09PWRhfHxhPmRhKSYmKGRhPWEpO3JldHVybiBhfWZ1bmN0aW9uIHYoYSxjKXthOntmb3IoO251bGwhPT1hOyl7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+YylhLmV4cGlyYXRpb25UaW1lPWM7bnVsbCE9PWEuYWx0ZXJuYXRlJiYoMD09PWEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lfHxhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT5jKSYmKGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPWMpO2lmKG51bGw9PT1hW1wicmV0dXJuXCJdKWlmKDM9PT1hLnRhZyl7dmFyIGQ9XG5hLnN0YXRlTm9kZTshY2EmJjAhPT1aJiZjPFomJmIoKTtjYSYmIVphJiZZYT09PWR8fEIoZCxjKTtGYj54ZyYmRChcIjE4NVwiKX1lbHNle2M9dm9pZCAwO2JyZWFrIGF9YT1hW1wicmV0dXJuXCJdfWM9dm9pZCAwfXJldHVybiBjfWZ1bmN0aW9uIGwoKXt5ZT1JYygpLVBjO3JldHVybiB5Zz0oeWUvMTB8MCkrMn1mdW5jdGlvbiBwKGEsYixjLGQsZSl7dmFyIGY9aWE7aWE9MTt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtpYT1mfX1mdW5jdGlvbiB6KGEpe2lmKDAhPT1HYil7aWYoYT5HYilyZXR1cm47bWcoUWMpfXZhciBiPUljKCktUGM7R2I9YTtRYz1sZyhRLHt0aW1lb3V0OjEwKihhLTIpLWJ9KX1mdW5jdGlvbiBCKGEsYil7aWYobnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3QpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iLG51bGw9PT1LPyhsYT1LPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooSz1LLm5leHRTY2hlZHVsZWRSb290PWEsSy5uZXh0U2NoZWR1bGVkUm9vdD1sYSk7XG5lbHNle3ZhciBjPWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWN8fGI8YylhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9VHx8KEo/SGImJihhYT1hLFA9MSxHKGEsMSwhMSkpOjE9PT1iP24oKTp6KGIpKX1mdW5jdGlvbiByKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PUspZm9yKHZhciBjPUssZD1sYTtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Sz9EKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7bGE9Sz1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09bGEpbGE9ZT1kLm5leHRTY2hlZHVsZWRSb290LEsubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Syl7Sz1jO0submV4dFNjaGVkdWxlZFJvb3Q9bGE7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1cbmQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2lmKDA9PT1hfHxlPGEpYT1lLGI9ZDtpZihkPT09SylicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1jPWFhO251bGwhPT1jJiZjPT09YiYmMT09PWE/RmIrKzpGYj0wO2FhPWI7UD1hfWZ1bmN0aW9uIFEoYSl7eCgwLCEwLGEpfWZ1bmN0aW9uIG4oKXt4KDEsITEsbnVsbCl9ZnVuY3Rpb24geChhLGIsYyl7JGE9YztyKCk7aWYoYilmb3IoO251bGwhPT1hYSYmMCE9PVAmJigwPT09YXx8YT49UCkmJighSWJ8fGwoKT49UCk7KUcoYWEsUCwhSWIpLHIoKTtlbHNlIGZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKTspRyhhYSxQLCExKSxyKCk7bnVsbCE9PSRhJiYoR2I9MCxRYz0tMSk7MCE9PVAmJnooUCk7JGE9bnVsbDtJYj0hMTtZKCl9ZnVuY3Rpb24gWSgpe0ZiPTA7aWYobnVsbCE9PUFhKXt2YXIgYT1BYTtBYT1udWxsO2Zvcih2YXIgYj1cbjA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaCh3Zyl7QmF8fChCYT0hMCxKYj13Zyl9fX1pZihCYSl0aHJvdyBhPUpiLEpiPW51bGwsQmE9ITEsYTt9ZnVuY3Rpb24gRyhhLGIsYyl7VD9EKFwiMjQ1XCIpOnZvaWQgMDtUPSEwO2M/KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/UihhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz1mKGEsYiwhMCksbnVsbCE9PWMmJihTKCk/YS5maW5pc2hlZFdvcms9YzpSKGEsYyxiKSkpKTooYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCExKSxudWxsIT09YyYmUihhLGMsYikpKTtUPSExfWZ1bmN0aW9uIFIoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWMmJihudWxsPT09QWE/QWE9W2RdOkFhLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9XG4wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO1phPWNhPSEwO2M9Yi5zdGF0ZU5vZGU7Yy5jdXJyZW50PT09Yj9EKFwiMTc3XCIpOnZvaWQgMDtkPWMucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1kP0QoXCIyNjFcIik6dm9pZCAwO2MucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGU9bCgpO25jLmN1cnJlbnQ9bnVsbDtpZigxPGIuZWZmZWN0VGFnKWlmKG51bGwhPT1iLmxhc3RFZmZlY3Qpe2IubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI7dmFyIGY9Yi5maXJzdEVmZmVjdH1lbHNlIGY9YjtlbHNlIGY9Yi5maXJzdEVmZmVjdDt6ZyhjLmNvbnRhaW5lckluZm8pO2Zvcih3PWY7bnVsbCE9PXc7KXt2YXIgaD0hMSxrPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dzspdy5lZmZlY3RUYWcmMjA0OCYmRGIody5hbHRlcm5hdGUsdyksdz13Lm5leHRFZmZlY3R9Y2F0Y2goYWIpe2g9ITAsaz1hYn1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT1cbncmJih3PXcubmV4dEVmZmVjdCkpfWZvcih3PWY7bnVsbCE9PXc7KXtoPSExO2s9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl7dmFyIHA9dy5lZmZlY3RUYWc7cCYxNiYmTWModyk7aWYocCYxMjgpe3ZhciBuPXcuYWx0ZXJuYXRlO251bGwhPT1uJiZrZyhuKX1zd2l0Y2gocCYxNCl7Y2FzZSAyOkViKHcpO3cuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6RWIodyk7dy5lZmZlY3RUYWcmPS0zO3dlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgNDp3ZSh3LmFsdGVybmF0ZSx3KTticmVhaztjYXNlIDg6Z2codyl9dz13Lm5leHRFZmZlY3R9fWNhdGNoKGFiKXtoPSEwLGs9YWJ9aCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxrKSxudWxsIT09dyYmKHc9dy5uZXh0RWZmZWN0KSl9QWcoYy5jb250YWluZXJJbmZvKTtjLmN1cnJlbnQ9Yjtmb3Iodz1mO251bGwhPT13Oyl7cD0hMTtuPXZvaWQgMDt0cnl7Zm9yKGY9YyxoPWUsaz1kO251bGwhPT13Oyl7dmFyIHI9dy5lZmZlY3RUYWc7XG5yJjM2JiZoZyhmLHcuYWx0ZXJuYXRlLHcsaCxrKTtyJjI1NiYmaWcodyxxKTtyJjEyOCYmamcodyk7dmFyIHQ9dy5uZXh0RWZmZWN0O3cubmV4dEVmZmVjdD1udWxsO3c9dH19Y2F0Y2goYWIpe3A9ITAsbj1hYn1wJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LG4pLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1jYT1aYT0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgSWUmJkllKGIuc3RhdGVOb2RlKTtiPWMuY3VycmVudC5leHBpcmF0aW9uVGltZTswPT09YiYmKHlhPW51bGwpO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1mdW5jdGlvbiBTKCl7cmV0dXJuIG51bGw9PT0kYXx8JGEudGltZVJlbWFpbmluZygpPkJnPyExOkliPSEwfWZ1bmN0aW9uIHEoYSl7bnVsbD09PWFhP0QoXCIyNDZcIik6dm9pZCAwO2FhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7QmF8fChCYT0hMCxKYj1hKX12YXIgdT1rZigpLHQ9ZmYoYSx1KSx5PWhmKHUpO3U9amYodSk7dmFyIEg9Z2YoYSksXG5XYT0kZShhLHQseSx1LEgsdixrKS5iZWdpbldvcmssQ2I9YWYoYSx0LHksdSxIKS5jb21wbGV0ZVdvcms7dD1iZih0LHksdSx2LGMpO3ZhciBKYz10LnRocm93RXhjZXB0aW9uLEtjPXQudW53aW5kV29yayxMYz10LnVud2luZEludGVycnVwdGVkV29yazt0PWRmKGEsZyx2LGssZnVuY3Rpb24oYSl7bnVsbD09PXlhP3lhPW5ldyBTZXQoW2FdKTp5YS5hZGQoYSl9LGwpO3ZhciBEYj10LmNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyxNYz10LmNvbW1pdFJlc2V0VGV4dENvbnRlbnQsRWI9dC5jb21taXRQbGFjZW1lbnQsZ2c9dC5jb21taXREZWxldGlvbix3ZT10LmNvbW1pdFdvcmssaGc9dC5jb21taXRMaWZlQ3ljbGVzLGlnPXQuY29tbWl0RXJyb3JMb2dnaW5nLGpnPXQuY29tbWl0QXR0YWNoUmVmLGtnPXQuY29tbWl0RGV0YWNoUmVmLEljPWEubm93LGxnPWEuc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrLG1nPWEuY2FuY2VsRGVmZXJyZWRDYWxsYmFjayx6Zz1hLnByZXBhcmVGb3JDb21taXQsXG5BZz1hLnJlc2V0QWZ0ZXJDb21taXQsUGM9SWMoKSx5Zz0yLHllPVBjLFJjPTAsaWE9MCxjYT0hMSxJPW51bGwsWWE9bnVsbCxaPTAsdz1udWxsLFphPSExLE5jPSExLHlhPW51bGwsbGE9bnVsbCxLPW51bGwsR2I9MCxRYz0tMSxUPSExLGFhPW51bGwsUD0wLGRhPTAsSWI9ITEsQmE9ITEsSmI9bnVsbCwkYT1udWxsLEo9ITEsSGI9ITEsemE9ITEsQWE9bnVsbCx4Zz0xRTMsRmI9MCxCZz0xO3JldHVybntyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lOmwsY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcjprLHNjaGVkdWxlV29yazp2LHJlcXVlc3RXb3JrOkIsZmx1c2hSb290OmZ1bmN0aW9uKGEsYil7VD9EKFwiMjUzXCIpOnZvaWQgMDthYT1hO1A9YjtHKGEsYiwhMSk7bigpO1koKX0sYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1KO0o9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KEo9Yyl8fFR8fG4oKX19LHVuYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXtpZihKJiYhSGIpe0hiPVxuITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7SGI9ITF9fXJldHVybiBhKGIpfSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtUP0QoXCIxODdcIik6dm9pZCAwO3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIHAoYSxiKX1maW5hbGx5e0o9YyxuKCl9fSxmbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9SjtKPSEwO3RyeXtwKGEpfWZpbmFsbHl7KEo9Yil8fFR8fHgoMSwhMSxudWxsKX19LGRlZmVycmVkVXBkYXRlczpmdW5jdGlvbihhKXt2YXIgYj1pYTtpYT0yNSooKChsKCkrNTAwKS8yNXwwKSsxKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2lhPWJ9fSxzeW5jVXBkYXRlczpwLGludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbihhLGIsYyl7aWYoemEpcmV0dXJuIGEoYixjKTtKfHxUfHwwPT09ZGF8fCh4KGRhLCExLG51bGwpLGRhPTApO3ZhciBkPXphLGU9SjtKPXphPSEwO3RyeXtyZXR1cm4gYShiLGMpfWZpbmFsbHl7emE9ZCwoSj1lKXx8VHx8bigpfX0sZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oKXtUfHxcbjA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCl9LGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246ZnVuY3Rpb24oKXt2YXIgYT0yNSooKChsKCkrNTAwKS8yNXwwKSsxKTthPD1SYyYmKGE9UmMrMSk7cmV0dXJuIFJjPWF9LGxlZ2FjeUNvbnRleHQ6eX19XG5mdW5jdGlvbiBtZihhKXtmdW5jdGlvbiBiKGEsYixjLGQsZSxoKXtkPWIuY3VycmVudDtpZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgbD1nKGMpO2M9ayhjKT92KGMsbCk6bH1lbHNlIGM9a2E7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1oO1BlKGQse2V4cGlyYXRpb25UaW1lOmUscGFydGlhbFN0YXRlOntlbGVtZW50OmF9LGNhbGxiYWNrOnZvaWQgMD09PWI/bnVsbDpiLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7ZihkLGUpO3JldHVybiBlfXZhciBjPWEuZ2V0UHVibGljSW5zdGFuY2U7YT1sZihhKTt2YXIgZD1hLnJlY2FsY3VsYXRlQ3VycmVudFRpbWUsZT1hLmNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsZj1hLnNjaGVkdWxlV29yayxoPWEubGVnYWN5Q29udGV4dCxnPWguZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQsaz1oLmlzQ29udGV4dFByb3ZpZGVyLHY9XG5oLnByb2Nlc3NDaGlsZENvbnRleHQ7cmV0dXJue2NyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7Yj1uZXcgeGUoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfSx1cGRhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxjLGYsaCl7dmFyIGc9Yy5jdXJyZW50LGs9ZCgpO2c9ZShnKTtyZXR1cm4gYihhLGMsZixrLGcsaCl9LHVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWU6ZnVuY3Rpb24oYSxjLGUsZixnKXt2YXIgaD1kKCk7cmV0dXJuIGIoYSxjLGUsaCxmLGcpfSxmbHVzaFJvb3Q6YS5mbHVzaFJvb3QsXG5yZXF1ZXN0V29yazphLnJlcXVlc3RXb3JrLGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246YS5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uLGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLHN5bmNVcGRhdGVzOmEuc3luY1VwZGF0ZXMsaW50ZXJhY3RpdmVVcGRhdGVzOmEuaW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmEuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hDb250cm9sbGVkOmEuZmx1c2hDb250cm9sbGVkLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGMoYS5jaGlsZC5zdGF0ZU5vZGUpO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX0sXG5maW5kSG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP0QoXCIxODhcIik6RChcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1CZChiKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1DZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEhlKEEoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1CZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX19fVxudmFyIG5mPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6bWZ9KSxvZj1uZiYmbWZ8fG5mLHBmPW9mW1wiZGVmYXVsdFwiXT9vZltcImRlZmF1bHRcIl06b2Y7ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpyYyxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX12YXIgcmY9XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyxzZj12b2lkIDA7c2Y9cmY/ZnVuY3Rpb24oKXtyZXR1cm4gcGVyZm9ybWFuY2Uubm93KCl9OmZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCl9O3ZhciB0Zj12b2lkIDAsdWY9dm9pZCAwO1xuaWYobS5jYW5Vc2VET00paWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHJlcXVlc3RJZGxlQ2FsbGJhY2t8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjYW5jZWxJZGxlQ2FsbGJhY2spe3ZhciB2Zj1udWxsLHdmPSExLHhmPS0xLHlmPSExLHpmPTAsQWY9MzMsQmY9MzMsQ2Y9dm9pZCAwO0NmPXJmP3tkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT16Zi1wZXJmb3JtYW5jZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19OntkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT16Zi1EYXRlLm5vdygpO3JldHVybiAwPGE/YTowfX07dmFyIERmPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09RGYpe3dmPSExO2E9c2YoKTtpZigwPj16Zi1hKWlmKC0xIT09XG54ZiYmeGY8PWEpQ2YuZGlkVGltZW91dD0hMDtlbHNle3lmfHwoeWY9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKEVmKSk7cmV0dXJufWVsc2UgQ2YuZGlkVGltZW91dD0hMTt4Zj0tMTthPXZmO3ZmPW51bGw7bnVsbCE9PWEmJmEoQ2YpfX0sITEpO3ZhciBFZj1mdW5jdGlvbihhKXt5Zj0hMTt2YXIgYj1hLXpmK0JmO2I8QmYmJkFmPEJmPyg4PmImJihiPTgpLEJmPWI8QWY/QWY6Yik6QWY9Yjt6Zj1hK0JmO3dmfHwod2Y9ITAsd2luZG93LnBvc3RNZXNzYWdlKERmLFwiKlwiKSl9O3RmPWZ1bmN0aW9uKGEsYil7dmY9YTtudWxsIT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCYmKHhmPXNmKCkrYi50aW1lb3V0KTt5Znx8KHlmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShFZikpO3JldHVybiAwfTt1Zj1mdW5jdGlvbigpe3ZmPW51bGw7d2Y9ITE7eGY9LTF9fWVsc2UgdGY9d2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2ssdWY9d2luZG93LmNhbmNlbElkbGVDYWxsYmFjaztlbHNlIHRmPVxuZnVuY3Rpb24oYSl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXthKHt0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIEluZmluaXR5fSxkaWRUaW1lb3V0OiExfSl9KX0sdWY9ZnVuY3Rpb24oYSl7Y2xlYXJUaW1lb3V0KGEpfTtmdW5jdGlvbiBGZihhKXt2YXIgYj1cIlwiO2VhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsPT1hfHxcInN0cmluZ1wiIT09dHlwZW9mIGEmJlwibnVtYmVyXCIhPT10eXBlb2YgYXx8KGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2YoYSxiKXthPUEoe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1GZihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBIZihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrYztiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWYoYSxiKXt2YXIgYz1iLnZhbHVlO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOm51bGwhPWM/YzpiLmRlZmF1bHRWYWx1ZSx3YXNNdWx0aXBsZTohIWIubXVsdGlwbGV9fWZ1bmN0aW9uIEpmKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9EKFwiOTFcIik6dm9pZCAwO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/RChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOkQoXCI5M1wiKSxiPWJbMF0pLGM9XCJcIitiKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIitjfX1cbmZ1bmN0aW9uIExmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9Yi5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIE1mKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBOZj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBPZihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIFBmKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9PZihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBRZj12b2lkIDAsUmY9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09TmYuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UWY9UWZ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UWYuaW5uZXJIVE1MPVwiXFx4M2NzdmdcXHgzZVwiK2IrXCJcXHgzYy9zdmdcXHgzZVwiO2ZvcihiPVFmLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFNmKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgVGY9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxcbnN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sVWY9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKFRmKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1VmLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7VGZbYl09VGZbYV19KX0pO1xuZnVuY3Rpb24gVmYoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8VGYuaGFzT3duUHJvcGVydHkoZSkmJlRmW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIFdmPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBYZihhLGIsYyl7YiYmKFdmW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9EKFwiMTM3XCIsYSxjKCkpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/RChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDpEKFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT9EKFwiNjJcIixjKCkpOnZvaWQgMCl9XG5mdW5jdGlvbiBZZihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIFpmPUMudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiAkZihhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1rZShhKTtiPXZhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2MuaGFzT3duUHJvcGVydHkoZSkmJmNbZV18fChcInRvcFNjcm9sbFwiPT09ZT9aZChcInRvcFNjcm9sbFwiLFwic2Nyb2xsXCIsYSk6XCJ0b3BGb2N1c1wiPT09ZXx8XCJ0b3BCbHVyXCI9PT1lPyhaZChcInRvcEZvY3VzXCIsXCJmb2N1c1wiLGEpLFpkKFwidG9wQmx1clwiLFwiYmx1clwiLGEpLGMudG9wQmx1cj0hMCxjLnRvcEZvY3VzPSEwKTpcInRvcENhbmNlbFwiPT09ZT8oaWMoXCJjYW5jZWxcIiwhMCkmJlpkKFwidG9wQ2FuY2VsXCIsXCJjYW5jZWxcIixhKSxjLnRvcENhbmNlbD0hMCk6XCJ0b3BDbG9zZVwiPT09ZT8oaWMoXCJjbG9zZVwiLCEwKSYmWmQoXCJ0b3BDbG9zZVwiLFwiY2xvc2VcIixhKSxjLnRvcENsb3NlPSEwKTpmZS5oYXNPd25Qcm9wZXJ0eShlKSYmVyhlLGZlW2VdLGEpLGNbZV09ITApfX1cbmZ1bmN0aW9uIGFnKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PU5mLmh0bWwmJihkPU9mKGEpKTtkPT09TmYuaHRtbD9cInNjcmlwdFwiPT09YT8oYT1jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCJcXHgzY3NjcmlwdFxceDNlXFx4M2Mvc2NyaXB0XFx4M2VcIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6YT1cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM/Yy5jcmVhdGVFbGVtZW50KGEse2lzOmIuaXN9KTpjLmNyZWF0ZUVsZW1lbnQoYSk6YT1jLmNyZWF0ZUVsZW1lbnROUyhkLGEpO3JldHVybiBhfWZ1bmN0aW9uIGJnKGEsYil7cmV0dXJuKDk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShhKX1cbmZ1bmN0aW9uIGNnKGEsYixjLGQpe3ZhciBlPVlmKGIsYyk7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6VyhcInRvcExvYWRcIixcImxvYWRcIixhKTt2YXIgZj1jO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihmIGluIGdlKWdlLmhhc093blByb3BlcnR5KGYpJiZXKGYsZ2VbZl0sYSk7Zj1jO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZm9ybVwiOlcoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtXKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6V2MoYSxjKTtmPVZjKGEsYyk7VyhcInRvcEludmFsaWRcIixcblwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpJZihhLGMpO2Y9QSh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpLZihhLGMpO2Y9SmYoYSxjKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmY9Y31YZihiLGYsWmYpO3ZhciBoPWYsZztmb3IoZyBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZykpe3ZhciBrPWhbZ107XCJzdHlsZVwiPT09Zz9WZihhLGssWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmUmYoYSxrKSk6XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWJ8fFwiXCIhPT1rKSYmU2YoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJlxuU2YoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZyYmXCJhdXRvRm9jdXNcIiE9PWcmJih1YS5oYXNPd25Qcm9wZXJ0eShnKT9udWxsIT1rJiYkZihkLGcpOm51bGwhPWsmJlVjKGEsZyxrLGUpKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6bGMoYSk7YWQoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpsYyhhKTtNZihhLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYy52YWx1ZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFjLm11bHRpcGxlO2I9Yy52YWx1ZTtudWxsIT1iP0hmKGEsISFjLm11bHRpcGxlLGIsITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZIZihhLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoYS5vbmNsaWNrPUMpfX1cbmZ1bmN0aW9uIGRnKGEsYixjLGQsZSl7dmFyIGY9bnVsbDtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Yz1WYyhhLGMpO2Q9VmMoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpjPUdmKGEsYyk7ZD1HZihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9QSh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjPUpmKGEsYyk7ZD1KZihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUMpfVhmKGIsZCxaZik7Yj1hPXZvaWQgMDt2YXIgaD1udWxsO2ZvcihhIGluIGMpaWYoIWQuaGFzT3duUHJvcGVydHkoYSkmJmMuaGFzT3duUHJvcGVydHkoYSkmJm51bGwhPWNbYV0paWYoXCJzdHlsZVwiPT09YSl7dmFyIGc9Y1thXTtmb3IoYiBpbiBnKWcuaGFzT3duUHJvcGVydHkoYikmJihofHxcbihoPXt9KSxoW2JdPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1hJiZcImNoaWxkcmVuXCIhPT1hJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJlwiYXV0b0ZvY3VzXCIhPT1hJiYodWEuaGFzT3duUHJvcGVydHkoYSk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGEsbnVsbCkpO2ZvcihhIGluIGQpe3ZhciBrPWRbYV07Zz1udWxsIT1jP2NbYV06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYSkmJmshPT1nJiYobnVsbCE9a3x8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09YSlpZihnKXtmb3IoYiBpbiBnKSFnLmhhc093blByb3BlcnR5KGIpfHxrJiZrLmhhc093blByb3BlcnR5KGIpfHwoaHx8KGg9e30pLGhbYl09XCJcIik7Zm9yKGIgaW4gaylrLmhhc093blByb3BlcnR5KGIpJiZnW2JdIT09a1tiXSYmKGh8fChoPXt9KSxoW2JdPWtbYl0pfWVsc2UgaHx8KGZ8fChmPVtdKSxmLnB1c2goYSxoKSksXG5oPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWE/KGs9az9rLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1rJiZnIT09ayYmKGY9Znx8W10pLnB1c2goYSxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1hP2c9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmKHVhLmhhc093blByb3BlcnR5KGEpPyhudWxsIT1rJiYkZihlLGEpLGZ8fGc9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGEsaykpfWgmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixoKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIGVnKGEsYixjLGQsZSl7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJlljKGEsZSk7WWYoYyxkKTtkPVlmKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgaD1iW2ZdLGc9YltmKzFdO1wic3R5bGVcIj09PWg/VmYoYSxnLFpmKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oP1JmKGEsZyk6XCJjaGlsZHJlblwiPT09aD9TZihhLGcpOlVjKGEsaCxnLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpaYyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkxmKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwLGI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/SGYoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP1xuSGYoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsITApOkhmKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1cbmZ1bmN0aW9uIGZnKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6VyhcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IodmFyIGYgaW4gZ2UpZ2UuaGFzT3duUHJvcGVydHkoZikmJlcoZixnZVtmXSxhKTticmVhaztjYXNlIFwic291cmNlXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6VyhcInRvcFRvZ2dsZVwiLFwidG9nZ2xlXCIsYSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6V2MoYSxjKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6SWYoYSxcbmMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktmKGEsYyksVyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKSwkZihlLFwib25DaGFuZ2VcIil9WGYoYixjLFpmKTtkPW51bGw7Zm9yKHZhciBoIGluIGMpYy5oYXNPd25Qcm9wZXJ0eShoKSYmKGY9Y1toXSxcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2YgZj9hLnRleHRDb250ZW50IT09ZiYmKGQ9W1wiY2hpbGRyZW5cIixmXSk6XCJudW1iZXJcIj09PXR5cGVvZiBmJiZhLnRleHRDb250ZW50IT09XCJcIitmJiYoZD1bXCJjaGlsZHJlblwiLFwiXCIrZl0pOnVhLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mJiYkZihlLGgpKTtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6bGMoYSk7YWQoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpsYyhhKTtNZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5vbkNsaWNrJiZcbihhLm9uY2xpY2s9Qyl9cmV0dXJuIGR9ZnVuY3Rpb24gbmcoYSxiKXtyZXR1cm4gYS5ub2RlVmFsdWUhPT1ifVxudmFyIG9nPU9iamVjdC5mcmVlemUoe2NyZWF0ZUVsZW1lbnQ6YWcsY3JlYXRlVGV4dE5vZGU6Ymcsc2V0SW5pdGlhbFByb3BlcnRpZXM6Y2csZGlmZlByb3BlcnRpZXM6ZGcsdXBkYXRlUHJvcGVydGllczplZyxkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzOmZnLGRpZmZIeWRyYXRlZFRleHQ6bmcsd2FybkZvclVubWF0Y2hlZFRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0OmZ1bmN0aW9uKCl7fSxyZXN0b3JlQ29udHJvbGxlZFN0YXRlOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6WmMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPVxuYy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZVxceDNkXCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlXFx4M2RcInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1YYShkKTtlP3ZvaWQgMDpEKFwiOTBcIik7bWMoZCk7WmMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkxmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZIZihhLCEhYy5tdWx0aXBsZSxiLCExKX19fSk7VGIuaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudChvZyk7dmFyIHBnPW51bGwscWc9bnVsbDtcbmZ1bmN0aW9uIHJnKGEpe3RoaXMuX2V4cGlyYXRpb25UaW1lPVguY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbigpO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9cmcucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6RChcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IHNnO1gudXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5yZy5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5yZy5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6RChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD9EKFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO1guZmx1c2hSb290KGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O3JnLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBzZygpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfXNnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5zZy5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9EKFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtmdW5jdGlvbiB0ZyhhLGIsYyl7dGhpcy5faW50ZXJuYWxSb290PVguY3JlYXRlQ29udGFpbmVyKGEsYixjKX10Zy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IHNnO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTtYLnVwZGF0ZUNvbnRhaW5lcihhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xudGcucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IHNnO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtYLnVwZGF0ZUNvbnRhaW5lcihudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O3RnLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBzZztjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7WC51cGRhdGVDb250YWluZXIoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcbnRnLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyByZyh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIHVnKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHZnKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbnZhciBYPXBmKHtnZXRSb290SG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlVHlwZTtzd2l0Y2goYil7Y2FzZSA5OmNhc2UgMTE6YT0oYT1hLmRvY3VtZW50RWxlbWVudCk/YS5uYW1lc3BhY2VVUkk6UGYobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmI9OD09PWI/YS5wYXJlbnROb2RlOmEsYT1iLm5hbWVzcGFjZVVSSXx8bnVsbCxiPWIudGFnTmFtZSxhPVBmKGEsYil9cmV0dXJuIGF9LGdldENoaWxkSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUGYoYSxiKX0sZ2V0UHVibGljSW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHByZXBhcmVGb3JDb21taXQ6ZnVuY3Rpb24oKXtwZz1WZDt2YXIgYT1mYSgpO2lmKG5lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBiPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOnt2YXIgYz13aW5kb3cuZ2V0U2VsZWN0aW9uJiZ3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5pZihjJiYwIT09Yy5yYW5nZUNvdW50KXtiPWMuYW5jaG9yTm9kZTt2YXIgZD1jLmFuY2hvck9mZnNldCxlPWMuZm9jdXNOb2RlO2M9Yy5mb2N1c09mZnNldDt0cnl7Yi5ub2RlVHlwZSxlLm5vZGVUeXBlfWNhdGNoKEIpe2I9bnVsbDticmVhayBhfXZhciBmPTAsaD0tMSxnPS0xLGs9MCx2PTAsbD1hLHA9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB6Ozspe2whPT1ifHwwIT09ZCYmMyE9PWwubm9kZVR5cGV8fChoPWYrZCk7bCE9PWV8fDAhPT1jJiYzIT09bC5ub2RlVHlwZXx8KGc9ZitjKTszPT09bC5ub2RlVHlwZSYmKGYrPWwubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh6PWwuZmlyc3RDaGlsZCkpYnJlYWs7cD1sO2w9en1mb3IoOzspe2lmKGw9PT1hKWJyZWFrIGI7cD09PWImJisraz09PWQmJihoPWYpO3A9PT1lJiYrK3Y9PT1jJiYoZz1mKTtpZihudWxsIT09KHo9bC5uZXh0U2libGluZykpYnJlYWs7bD1wO3A9bC5wYXJlbnROb2RlfWw9en1iPS0xPT09aHx8LTE9PT1nP251bGw6XG57c3RhcnQ6aCxlbmQ6Z319ZWxzZSBiPW51bGx9Yj1ifHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBiPW51bGw7cWc9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Yn07V2QoITEpfSxyZXNldEFmdGVyQ29tbWl0OmZ1bmN0aW9uKCl7dmFyIGE9cWcsYj1mYSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmphKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZih3aW5kb3cuZ2V0U2VsZWN0aW9uKXtiPXdpbmRvdy5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jW21iKCldLmxlbmd0aDthPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9hOk1hdGgubWluKGQuZW5kLGUpOyFiLmV4dGVuZCYmYT5cbmQmJihlPWQsZD1hLGE9ZSk7ZT1tZShjLGEpO3ZhciBmPW1lKGMsZCk7aWYoZSYmZiYmKDEhPT1iLnJhbmdlQ291bnR8fGIuYW5jaG9yTm9kZSE9PWUubm9kZXx8Yi5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8Yi5mb2N1c05vZGUhPT1mLm5vZGV8fGIuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkpe3ZhciBoPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7aC5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpO2IucmVtb3ZlQWxsUmFuZ2VzKCk7YT5kPyhiLmFkZFJhbmdlKGgpLGIuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihoLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLGIuYWRkUmFuZ2UoaCkpfX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LFxuYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH1xZz1udWxsO1dkKHBnKTtwZz1udWxsfSxjcmVhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUpe2E9YWcoYSxiLGMsZCk7YVtGXT1lO2FbVGFdPWI7cmV0dXJuIGF9LGFwcGVuZEluaXRpYWxDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGZpbmFsaXplSW5pdGlhbENoaWxkcmVuOmZ1bmN0aW9uKGEsYixjLGQpe2NnKGEsYixjLGQpO3JldHVybiB2ZyhiLGMpfSxwcmVwYXJlVXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIGRnKGEsYixjLGQsZSl9LHNob3VsZFNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwic3RyaW5nXCI9PT1cbnR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH0sc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZTpmdW5jdGlvbihhLGIpe3JldHVybiEhYi5oaWRkZW59LGNyZWF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkKXthPWJnKGEsYik7YVtGXT1kO3JldHVybiBhfSxub3c6c2YsbXV0YXRpb246e2NvbW1pdE1vdW50OmZ1bmN0aW9uKGEsYixjKXt2ZyhiLGMpJiZhLmZvY3VzKCl9LGNvbW1pdFVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe2FbVGFdPWU7ZWcoYSxiLGMsZCxlKX0scmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXtTZihhLFwiXCIpfSxjb21taXRUZXh0VXBkYXRlOmZ1bmN0aW9uKGEsYixjKXthLm5vZGVWYWx1ZT1jfSxhcHBlbmRDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGFwcGVuZENoaWxkVG9Db250YWluZXI6ZnVuY3Rpb24oYSxiKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYSk6YS5hcHBlbmRDaGlsZChiKX0sXG5pbnNlcnRCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpe2EuaW5zZXJ0QmVmb3JlKGIsYyl9LGluc2VydEluQ29udGFpbmVyQmVmb3JlOmZ1bmN0aW9uKGEsYixjKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYyk6YS5pbnNlcnRCZWZvcmUoYixjKX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLnJlbW92ZUNoaWxkKGIpfSxyZW1vdmVDaGlsZEZyb21Db250YWluZXI6ZnVuY3Rpb24oYSxiKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik6YS5yZW1vdmVDaGlsZChiKX19LGh5ZHJhdGlvbjp7Y2FuSHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDEhPT1hLm5vZGVUeXBlfHxiLnRvTG93ZXJDYXNlKCkhPT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDphfSxjYW5IeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJcIj09PWJ8fDMhPT1hLm5vZGVUeXBlP251bGw6YX0sZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nOmZ1bmN0aW9uKGEpe2ZvcihhPVxuYS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0sZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQ6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxoeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2FbRl09ZjthW1RhXT1jO3JldHVybiBmZyhhLGIsYyxlLGQpfSxoeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXthW0ZdPWM7cmV0dXJuIG5nKGEsYil9LGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxcbmRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZTpmdW5jdGlvbigpe319LHNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjazp0ZixjYW5jZWxEZWZlcnJlZENhbGxiYWNrOnVmfSksQ2c9WDthYz1DZy5iYXRjaGVkVXBkYXRlcztiYz1DZy5pbnRlcmFjdGl2ZVVwZGF0ZXM7Y2M9Q2cuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM7XG5mdW5jdGlvbiBEZyhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHRnKGEsITEsYil9XG5mdW5jdGlvbiBFZyhhLGIsYyxkLGUpe3VnKGMpP3ZvaWQgMDpEKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1EZyhjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19WC51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBYLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gRmcoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDt1ZyhiKT92b2lkIDA6RChcIjIwMFwiKTtyZXR1cm4gcWYoYSxiLG51bGwsYyl9XG52YXIgR2c9e2NyZWF0ZVBvcnRhbDpGZyxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9udWxsOjE9PT1hLm5vZGVUeXBlP2E6WC5maW5kSG9zdEluc3RhbmNlKGEpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gRWcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7dWcoYSk/dm9pZCAwOkQoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtFZyhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1cbm51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEZnLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpYLmJhdGNoZWRVcGRhdGVzLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpYLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6WC5mbHVzaFN5bmMsdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOlguZmx1c2hDb250cm9sbGVkLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpSYSxFdmVudFBsdWdpblJlZ2lzdHJ5OkNhLEV2ZW50UHJvcGFnYXRvcnM6a2IsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OiRiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpiYixSZWFjdERPTUV2ZW50TGlzdGVuZXI6JGR9LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IHRnKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07XG5YLmluamVjdEludG9EZXZUb29scyh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6VWEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4zLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgSGc9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpHZ30pLElnPUhnJiZHZ3x8SGc7bW9kdWxlLmV4cG9ydHM9SWdbXCJkZWZhdWx0XCJdP0lnW1wiZGVmYXVsdFwiXTpJZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gcmVwbGFjZUNsYXNzTmFtZShvcmlnQ2xhc3MsIGNsYXNzVG9SZW1vdmUpIHtcbiAgcmV0dXJuIG9yaWdDbGFzcy5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBjbGFzc1RvUmVtb3ZlICsgJyg/OlxcXFxzfCQpJywgJ2cnKSwgJyQxJykucmVwbGFjZSgvXFxzKy9nLCAnICcpLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtlbHNlIGlmICh0eXBlb2YgZWxlbWVudC5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSBlbGVtZW50LmNsYXNzTmFtZSA9IHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUsIGNsYXNzTmFtZSk7ZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCByZXBsYWNlQ2xhc3NOYW1lKGVsZW1lbnQuY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NOYW1lLmJhc2VWYWwgfHwgJycsIGNsYXNzTmFtZSkpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGhhc0NsYXNzO1xuZnVuY3Rpb24gaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgcmV0dXJuICEhY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7ZWxzZSByZXR1cm4gKFwiIFwiICsgKGVsZW1lbnQuY2xhc3NOYW1lLmJhc2VWYWwgfHwgZWxlbWVudC5jbGFzc05hbWUpICsgXCIgXCIpLmluZGV4T2YoXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIikgIT09IC0xO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRDbGFzcztcblxudmFyIF9oYXNDbGFzcyA9IHJlcXVpcmUoJy4vaGFzQ2xhc3MnKTtcblxudmFyIF9oYXNDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYXNDbGFzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO2Vsc2UgaWYgKCEoMCwgX2hhc0NsYXNzMi5kZWZhdWx0KShlbGVtZW50LCBjbGFzc05hbWUpKSBpZiAodHlwZW9mIGVsZW1lbnQuY2xhc3NOYW1lID09PSAnc3RyaW5nJykgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnKSArICcgJyArIGNsYXNzTmFtZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3Byb3BUeXBlcyk7XG5cbnZhciBfYWRkQ2xhc3MgPSByZXF1aXJlKCdkb20taGVscGVycy9jbGFzcy9hZGRDbGFzcycpO1xuXG52YXIgX2FkZENsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZENsYXNzKTtcblxudmFyIF9yZW1vdmVDbGFzcyA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL2NsYXNzL3JlbW92ZUNsYXNzJyk7XG5cbnZhciBfcmVtb3ZlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVtb3ZlQ2xhc3MpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfVHJhbnNpdGlvbiA9IHJlcXVpcmUoJy4vVHJhbnNpdGlvbicpO1xuXG52YXIgX1RyYW5zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhbnNpdGlvbik7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZSgnLi91dGlscy9Qcm9wVHlwZXMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbiBhZGRDbGFzcyhub2RlLCBjbGFzc2VzKSB7XG4gIHJldHVybiBub2RlICYmIGNsYXNzZXMgJiYgY2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gKDAsIF9hZGRDbGFzczIuZGVmYXVsdCkobm9kZSwgYyk7XG4gIH0pO1xufTtcbnZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzZXMpIHtcbiAgcmV0dXJuIG5vZGUgJiYgY2xhc3NlcyAmJiBjbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAoMCwgX3JlbW92ZUNsYXNzMi5kZWZhdWx0KShub2RlLCBjKTtcbiAgfSk7XG59O1xuXG52YXIgcHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIF9UcmFuc2l0aW9uMi5kZWZhdWx0LnByb3BUeXBlcywge1xuXG4gIC8qKlxuICAgKiBUaGUgYW5pbWF0aW9uIGNsYXNzTmFtZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50IGFzIGl0IGVudGVycywgZXhpdHMgb3IgaGFzIGZpbmlzaGVkIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBBIHNpbmdsZSBuYW1lIGNhbiBiZSBwcm92aWRlZCBhbmQgaXQgd2lsbCBiZSBzdWZmaXhlZCBmb3IgZWFjaCBzdGFnZTogZS5nLlxuICAgKlxuICAgKiBgY2xhc3NOYW1lcz1cImZhZGVcImAgYXBwbGllcyBgZmFkZS1lbnRlcmAsIGBmYWRlLWVudGVyLWFjdGl2ZWAsIGBmYWRlLWVudGVyLWRvbmVgLFxuICAgKiBgZmFkZS1leGl0YCwgYGZhZGUtZXhpdC1hY3RpdmVgLCBgZmFkZS1leGl0LWRvbmVgLCBgZmFkZS1hcHBlYXJgLCBhbmQgYGZhZGUtYXBwZWFyLWFjdGl2ZWAuXG4gICAqIEVhY2ggaW5kaXZpZHVhbCBjbGFzc05hbWVzIGNhbiBhbHNvIGJlIHNwZWNpZmllZCBpbmRlcGVuZGVudGx5IGxpa2U6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGNsYXNzTmFtZXM9e3tcbiAgICogIGFwcGVhcjogJ215LWFwcGVhcicsXG4gICAqICBhcHBlYXJBY3RpdmU6ICdteS1hY3RpdmUtYXBwZWFyJyxcbiAgICogIGVudGVyOiAnbXktZW50ZXInLFxuICAgKiAgZW50ZXJBY3RpdmU6ICdteS1hY3RpdmUtZW50ZXInLFxuICAgKiAgZW50ZXJEb25lOiAnbXktZG9uZS1lbnRlcicsXG4gICAqICBleGl0OiAnbXktZXhpdCcsXG4gICAqICBleGl0QWN0aXZlOiAnbXktYWN0aXZlLWV4aXQnLFxuICAgKiAgZXhpdERvbmU6ICdteS1kb25lLWV4aXQnLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogSWYgeW91IHdhbnQgdG8gc2V0IHRoZXNlIGNsYXNzZXMgdXNpbmcgQ1NTIE1vZHVsZXM6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMuY3NzJztcbiAgICogYGBgXG4gICAqXG4gICAqIHlvdSBtaWdodCB3YW50IHRvIHVzZSBjYW1lbENhc2UgaW4geW91ciBDU1MgZmlsZSwgdGhhdCB3YXkgY291bGQgc2ltcGx5IHNwcmVhZFxuICAgKiB0aGVtIGluc3RlYWQgb2YgbGlzdGluZyB0aGVtIG9uZSBieSBvbmU6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGNsYXNzTmFtZXM9e3sgLi4uc3R5bGVzIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nIHwge1xuICAgKiAgYXBwZWFyPzogc3RyaW5nLFxuICAgKiAgYXBwZWFyQWN0aXZlPzogc3RyaW5nLFxuICAgKiAgZW50ZXI/OiBzdHJpbmcsXG4gICAqICBlbnRlckFjdGl2ZT86IHN0cmluZyxcbiAgICogIGVudGVyRG9uZT86IHN0cmluZyxcbiAgICogIGV4aXQ/OiBzdHJpbmcsXG4gICAqICBleGl0QWN0aXZlPzogc3RyaW5nLFxuICAgKiAgZXhpdERvbmU/OiBzdHJpbmcsXG4gICAqIH19XG4gICAqL1xuICBjbGFzc05hbWVzOiBfUHJvcFR5cGVzLmNsYXNzTmFtZXNTaGFwZSxcblxuICAvKipcbiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2VudGVyJyBvciAnYXBwZWFyJyBjbGFzcyBpc1xuICAgKiBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2VudGVyLWFjdGl2ZScgb3JcbiAgICogJ2FwcGVhci1hY3RpdmUnIGNsYXNzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZW50ZXInIG9yXG4gICAqICdhcHBlYXInIGNsYXNzZXMgYXJlICoqcmVtb3ZlZCoqIGFuZCB0aGUgYGRvbmVgIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBET00gbm9kZS5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2V4aXQnIGNsYXNzIGlzXG4gICAqIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2V4aXQtYWN0aXZlJyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2V4aXQnIGNsYXNzZXNcbiAgICogYXJlICoqcmVtb3ZlZCoqIGFuZCB0aGUgYGV4aXQtZG9uZWAgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIERPTSBub2RlLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudClcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSk7XG5cbi8qKlxuICogQSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IHVzaW5nIENTUyB0cmFuc2l0aW9ucyBhbmQgYW5pbWF0aW9ucy5cbiAqIEl0J3MgaW5zcGlyZWQgYnkgdGhlIGV4Y2VsbGVudCBbbmctYW5pbWF0ZV0oaHR0cDovL3d3dy5uZ2FuaW1hdGUub3JnLykgbGlicmFyeS5cbiAqXG4gKiBgQ1NTVHJhbnNpdGlvbmAgYXBwbGllcyBhIHBhaXIgb2YgY2xhc3MgbmFtZXMgZHVyaW5nIHRoZSBgYXBwZWFyYCwgYGVudGVyYCxcbiAqIGFuZCBgZXhpdGAgc3RhZ2VzIG9mIHRoZSB0cmFuc2l0aW9uLiBUaGUgZmlyc3QgY2xhc3MgaXMgYXBwbGllZCBhbmQgdGhlbiBhXG4gKiBzZWNvbmQgXCJhY3RpdmVcIiBjbGFzcyBpbiBvcmRlciB0byBhY3RpdmF0ZSB0aGUgY3NzIGFuaW1hdGlvbi4gQWZ0ZXIgdGhlIGFuaW1hdGlvbixcbiAqIG1hdGNoaW5nIGBkb25lYCBjbGFzcyBuYW1lcyBhcmUgYXBwbGllZCB0byBwZXJzaXN0IHRoZSBhbmltYXRpb24gc3RhdGUuXG4gKlxuICogV2hlbiB0aGUgYGluYCBwcm9wIGlzIHRvZ2dsZWQgdG8gYHRydWVgIHRoZSBDb21wb25lbnQgd2lsbCBnZXRcbiAqIHRoZSBgZXhhbXBsZS1lbnRlcmAgQ1NTIGNsYXNzIGFuZCB0aGUgYGV4YW1wbGUtZW50ZXItYWN0aXZlYCBDU1MgY2xhc3NcbiAqIGFkZGVkIGluIHRoZSBuZXh0IHRpY2suIFRoaXMgaXMgYSBjb252ZW50aW9uIGJhc2VkIG9uIHRoZSBgY2xhc3NOYW1lc2AgcHJvcC5cbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogPGlmcmFtZSBzcmM9XCJodHRwczovL2NvZGVzYW5kYm94LmlvL2VtYmVkL203N2wydnAwMHg/Zm9udHNpemU9MTRcIiBzdHlsZT1cIndpZHRoOjEwMCU7IGhlaWdodDo1MDBweDsgYm9yZGVyOjA7IGJvcmRlci1yYWRpdXM6IDRweDsgb3ZlcmZsb3c6aGlkZGVuO1wiIHNhbmRib3g9XCJhbGxvdy1tb2RhbHMgYWxsb3ctZm9ybXMgYWxsb3ctcG9wdXBzIGFsbG93LXNjcmlwdHMgYWxsb3ctc2FtZS1vcmlnaW5cIj48L2lmcmFtZT5cbiAqL1xuXG52YXIgQ1NTVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDU1NUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDU1NUcmFuc2l0aW9uKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ1NTVHJhbnNpdGlvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMub25FbnRlciA9IGZ1bmN0aW9uIChub2RlLCBhcHBlYXJpbmcpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcyhhcHBlYXJpbmcgPyAnYXBwZWFyJyA6ICdlbnRlcicpLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXMuY2xhc3NOYW1lO1xuXG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdleGl0Jyk7XG4gICAgICBhZGRDbGFzcyhub2RlLCBjbGFzc05hbWUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyKG5vZGUpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLm9uRW50ZXJpbmcgPSBmdW5jdGlvbiAobm9kZSwgYXBwZWFyaW5nKSB7XG4gICAgICB2YXIgX3RoaXMkZ2V0Q2xhc3NOYW1lczIgPSBfdGhpcy5nZXRDbGFzc05hbWVzKGFwcGVhcmluZyA/ICdhcHBlYXInIDogJ2VudGVyJyksXG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczIuYWN0aXZlQ2xhc3NOYW1lO1xuXG4gICAgICBfdGhpcy5yZWZsb3dBbmRBZGRDbGFzcyhub2RlLCBhY3RpdmVDbGFzc05hbWUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcmluZykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyaW5nKG5vZGUpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLm9uRW50ZXJlZCA9IGZ1bmN0aW9uIChub2RlLCBhcHBlYXJpbmcpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzMyA9IF90aGlzLmdldENsYXNzTmFtZXMoJ2VudGVyJyksXG4gICAgICAgICAgZG9uZUNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXMzLmRvbmVDbGFzc05hbWU7XG5cbiAgICAgIF90aGlzLnJlbW92ZUNsYXNzZXMobm9kZSwgYXBwZWFyaW5nID8gJ2FwcGVhcicgOiAnZW50ZXInKTtcbiAgICAgIGFkZENsYXNzKG5vZGUsIGRvbmVDbGFzc05hbWUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcmVkKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5vbkV4aXQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXM0ID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcygnZXhpdCcpLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXM0LmNsYXNzTmFtZTtcblxuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCAnYXBwZWFyJyk7XG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdlbnRlcicpO1xuICAgICAgYWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMub25FeGl0aW5nID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzNSA9IF90aGlzLmdldENsYXNzTmFtZXMoJ2V4aXQnKSxcbiAgICAgICAgICBhY3RpdmVDbGFzc05hbWUgPSBfdGhpcyRnZXRDbGFzc05hbWVzNS5hY3RpdmVDbGFzc05hbWU7XG5cbiAgICAgIF90aGlzLnJlZmxvd0FuZEFkZENsYXNzKG5vZGUsIGFjdGl2ZUNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRpbmcpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0aW5nKG5vZGUpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLm9uRXhpdGVkID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzNiA9IF90aGlzLmdldENsYXNzTmFtZXMoJ2V4aXQnKSxcbiAgICAgICAgICBkb25lQ2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczYuZG9uZUNsYXNzTmFtZTtcblxuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCAnZXhpdCcpO1xuICAgICAgYWRkQ2xhc3Mobm9kZSwgZG9uZUNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5nZXRDbGFzc05hbWVzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHZhciBjbGFzc05hbWVzID0gX3RoaXMucHJvcHMuY2xhc3NOYW1lcztcblxuXG4gICAgICB2YXIgY2xhc3NOYW1lID0gdHlwZW9mIGNsYXNzTmFtZXMgIT09ICdzdHJpbmcnID8gY2xhc3NOYW1lc1t0eXBlXSA6IGNsYXNzTmFtZXMgKyAnLScgKyB0eXBlO1xuXG4gICAgICB2YXIgYWN0aXZlQ2xhc3NOYW1lID0gdHlwZW9mIGNsYXNzTmFtZXMgIT09ICdzdHJpbmcnID8gY2xhc3NOYW1lc1t0eXBlICsgJ0FjdGl2ZSddIDogY2xhc3NOYW1lICsgJy1hY3RpdmUnO1xuXG4gICAgICB2YXIgZG9uZUNsYXNzTmFtZSA9IHR5cGVvZiBjbGFzc05hbWVzICE9PSAnc3RyaW5nJyA/IGNsYXNzTmFtZXNbdHlwZSArICdEb25lJ10gOiBjbGFzc05hbWUgKyAnLWRvbmUnO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgYWN0aXZlQ2xhc3NOYW1lOiBhY3RpdmVDbGFzc05hbWUsXG4gICAgICAgIGRvbmVDbGFzc05hbWU6IGRvbmVDbGFzc05hbWVcbiAgICAgIH07XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBDU1NUcmFuc2l0aW9uLnByb3RvdHlwZS5yZW1vdmVDbGFzc2VzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3Nlcyhub2RlLCB0eXBlKSB7XG4gICAgdmFyIF9nZXRDbGFzc05hbWVzID0gdGhpcy5nZXRDbGFzc05hbWVzKHR5cGUpLFxuICAgICAgICBjbGFzc05hbWUgPSBfZ2V0Q2xhc3NOYW1lcy5jbGFzc05hbWUsXG4gICAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9nZXRDbGFzc05hbWVzLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgICAgZG9uZUNsYXNzTmFtZSA9IF9nZXRDbGFzc05hbWVzLmRvbmVDbGFzc05hbWU7XG5cbiAgICBjbGFzc05hbWUgJiYgcmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcbiAgICBhY3RpdmVDbGFzc05hbWUgJiYgcmVtb3ZlQ2xhc3Mobm9kZSwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICBkb25lQ2xhc3NOYW1lICYmIHJlbW92ZUNsYXNzKG5vZGUsIGRvbmVDbGFzc05hbWUpO1xuICB9O1xuXG4gIENTU1RyYW5zaXRpb24ucHJvdG90eXBlLnJlZmxvd0FuZEFkZENsYXNzID0gZnVuY3Rpb24gcmVmbG93QW5kQWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKSB7XG4gICAgLy8gVGhpcyBpcyBmb3IgdG8gZm9yY2UgYSByZXBhaW50LFxuICAgIC8vIHdoaWNoIGlzIG5lY2Vzc2FyeSBpbiBvcmRlciB0byB0cmFuc2l0aW9uIHN0eWxlcyB3aGVuIGFkZGluZyBhIGNsYXNzIG5hbWUuXG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gICAgICBub2RlICYmIG5vZGUuc2Nyb2xsVG9wO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbiAgICAgIGFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIENTU1RyYW5zaXRpb24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICBkZWxldGUgcHJvcHMuY2xhc3NOYW1lcztcblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJhbnNpdGlvbjIuZGVmYXVsdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBvbkVudGVyOiB0aGlzLm9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQ6IHRoaXMub25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZzogdGhpcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0OiB0aGlzLm9uRXhpdCxcbiAgICAgIG9uRXhpdGluZzogdGhpcy5vbkV4aXRpbmcsXG4gICAgICBvbkV4aXRlZDogdGhpcy5vbkV4aXRlZFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ1NTVHJhbnNpdGlvbjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkNTU1RyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENTU1RyYW5zaXRpb247XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfQ1NTVHJhbnNpdGlvbiA9IHJlcXVpcmUoJy4vQ1NTVHJhbnNpdGlvbicpO1xuXG52YXIgX0NTU1RyYW5zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ1NTVHJhbnNpdGlvbik7XG5cbnZhciBfUmVwbGFjZVRyYW5zaXRpb24gPSByZXF1aXJlKCcuL1JlcGxhY2VUcmFuc2l0aW9uJyk7XG5cbnZhciBfUmVwbGFjZVRyYW5zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVwbGFjZVRyYW5zaXRpb24pO1xuXG52YXIgX1RyYW5zaXRpb25Hcm91cCA9IHJlcXVpcmUoJy4vVHJhbnNpdGlvbkdyb3VwJyk7XG5cbnZhciBfVHJhbnNpdGlvbkdyb3VwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RyYW5zaXRpb25Hcm91cCk7XG5cbnZhciBfVHJhbnNpdGlvbiA9IHJlcXVpcmUoJy4vVHJhbnNpdGlvbicpO1xuXG52YXIgX1RyYW5zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhbnNpdGlvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBUcmFuc2l0aW9uOiBfVHJhbnNpdGlvbjIuZGVmYXVsdCxcbiAgVHJhbnNpdGlvbkdyb3VwOiBfVHJhbnNpdGlvbkdyb3VwMi5kZWZhdWx0LFxuICBSZXBsYWNlVHJhbnNpdGlvbjogX1JlcGxhY2VUcmFuc2l0aW9uMi5kZWZhdWx0LFxuICBDU1NUcmFuc2l0aW9uOiBfQ1NTVHJhbnNpdGlvbjIuZGVmYXVsdFxufTsiLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBUIFZFUlNJT04gMy4wLjAsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3VycnkgPSByZXF1aXJlKFwiYnMtcGxhdGZvcm0vbGliL2pzL2N1cnJ5LmpzXCIpO1xudmFyIFJlYXNvblJlYWN0ID0gcmVxdWlyZShcInJlYXNvbi1yZWFjdC9saWIvanMvc3JjL1JlYXNvblJlYWN0LmpzXCIpO1xudmFyIFJlYWN0VHJhbnNpdGlvbkdyb3VwID0gcmVxdWlyZShcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXBcIik7XG5cbmZ1bmN0aW9uIG1ha2Uoc2hvdywgdGltZW91dCwgY2xhc3NOYW1lcywgY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYXNvblJlYWN0LndyYXBKc0ZvclJlYXNvbihSZWFjdFRyYW5zaXRpb25Hcm91cC5DU1NUcmFuc2l0aW9uLCB7XG4gICAgICAgICAgICAgIGluOiBzaG93LFxuICAgICAgICAgICAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgICAgICAgICAgICBjbGFzc05hbWVzOiBjbGFzc05hbWVzXG4gICAgICAgICAgICB9LCBjaGlsZHJlbik7XG59XG5cbnZhciBDU1NUcmFuc2l0aW9uID0gLyogbW9kdWxlICovWy8qIG1ha2UgKi9tYWtlXTtcblxuZnVuY3Rpb24gbWFrZSQxKGNsYXNzTmFtZSwgXywgY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYXNvblJlYWN0LndyYXBKc0ZvclJlYXNvbihSZWFjdFRyYW5zaXRpb25Hcm91cC5UcmFuc2l0aW9uR3JvdXAsIHtcbiAgICAgICAgICAgICAgY29tcG9uZW50OiBcImRpdlwiLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgICAgICAgfSwgY2hpbGRyZW4pO1xufVxuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0gLyogbW9kdWxlICovWy8qIG1ha2UgKi9tYWtlJDFdO1xuXG5mdW5jdGlvbiBzdGF0ZU9mU3RyaW5nKHN0cikge1xuICBzd2l0Y2ggKHN0cikge1xuICAgIGNhc2UgXCJlbnRlcmVkXCIgOiBcbiAgICAgICAgcmV0dXJuIC8qIEVudGVyZWQgKi8xO1xuICAgIGNhc2UgXCJlbnRlcmluZ1wiIDogXG4gICAgICAgIHJldHVybiAvKiBFbnRlcmluZyAqLzA7XG4gICAgY2FzZSBcImV4aXRlZFwiIDogXG4gICAgICAgIHJldHVybiAvKiBFeGl0ZWQgKi8zO1xuICAgIGNhc2UgXCJleGl0aW5nXCIgOiBcbiAgICAgICAgcmV0dXJuIC8qIEV4aXRpbmcgKi8yO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gLyogTm90VHJhbnNpdGlvbmluZyAqLzQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nT2ZTdGF0ZShzdHIpIHtcbiAgc3dpdGNoIChzdHIpIHtcbiAgICBjYXNlIDAgOiBcbiAgICAgICAgcmV0dXJuIFwiZW50ZXJpbmdcIjtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIFwiZW50ZXJlZFwiO1xuICAgIGNhc2UgMiA6IFxuICAgICAgICByZXR1cm4gXCJleGl0aW5nXCI7XG4gICAgY2FzZSAzIDogXG4gICAgICAgIHJldHVybiBcImV4aXRlZFwiO1xuICAgIGNhc2UgNCA6IFxuICAgICAgICByZXR1cm4gXCJOb3RcIjtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlJDIoaW5fLCB0aW1lb3V0LCBjbGFzc05hbWUsIGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFzb25SZWFjdC53cmFwSnNGb3JSZWFzb24oUmVhY3RUcmFuc2l0aW9uR3JvdXAuVHJhbnNpdGlvbiwge1xuICAgICAgICAgICAgICBpbjogaW5fLFxuICAgICAgICAgICAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgICAgICAgfSwgKGZ1bmN0aW9uIChzdHJTdGF0ZSwgXykge1xuICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShjaGlsZHJlbiwgc3RhdGVPZlN0cmluZyhzdHJTdGF0ZSkpO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbnZhciBUcmFuc2l0aW9uID0gLyogbW9kdWxlICovW1xuICAvKiBzdGF0ZU9mU3RyaW5nICovc3RhdGVPZlN0cmluZyxcbiAgLyogc3RyaW5nT2ZTdGF0ZSAqL3N0cmluZ09mU3RhdGUsXG4gIC8qIG1ha2UgKi9tYWtlJDJcbl07XG5cbmV4cG9ydHMuQ1NTVHJhbnNpdGlvbiA9IENTU1RyYW5zaXRpb247XG5leHBvcnRzLlRyYW5zaXRpb25Hcm91cCA9IFRyYW5zaXRpb25Hcm91cDtcbmV4cG9ydHMuVHJhbnNpdGlvbiA9IFRyYW5zaXRpb247XG4vKiBSZWFzb25SZWFjdCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3VycnkgPSByZXF1aXJlKFwiLi9jdXJyeS5qc1wiKTtcbnZhciBCZWx0X0FycmF5ID0gcmVxdWlyZShcIi4vYmVsdF9BcnJheS5qc1wiKTtcblxuZnVuY3Rpb24gc29ydGVkTGVuZ3RoQXV4TW9yZSh4cywgX3ByZWMsIF9hY2MsIGxlbiwgbHQpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgaWYgKGFjYyA+PSBsZW4pIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2ID0geHNbYWNjXTtcbiAgICAgIGlmIChsdCh2LCBwcmVjKSkge1xuICAgICAgICBfYWNjID0gYWNjICsgMSB8IDA7XG4gICAgICAgIF9wcmVjID0gdjtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdGx5U29ydGVkTGVuZ3RoVSh4cywgbHQpIHtcbiAgdmFyIGxlbiA9IHhzLmxlbmd0aDtcbiAgaWYgKGxlbiA9PT0gMCB8fCBsZW4gPT09IDEpIHtcbiAgICByZXR1cm4gbGVuO1xuICB9IGVsc2Uge1xuICAgIHZhciB4MCA9IHhzWzBdO1xuICAgIHZhciB4MSA9IHhzWzFdO1xuICAgIGlmIChsdCh4MCwgeDEpKSB7XG4gICAgICB2YXIgeHMkMSA9IHhzO1xuICAgICAgdmFyIF9wcmVjID0geDE7XG4gICAgICB2YXIgX2FjYyA9IDI7XG4gICAgICB2YXIgbGVuJDEgPSBsZW47XG4gICAgICB2YXIgbHQkMSA9IGx0O1xuICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICAgICAgaWYgKGFjYyA+PSBsZW4kMSkge1xuICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHYgPSB4cyQxW2FjY107XG4gICAgICAgICAgaWYgKGx0JDEocHJlYywgdikpIHtcbiAgICAgICAgICAgIF9hY2MgPSBhY2MgKyAxIHwgMDtcbiAgICAgICAgICAgIF9wcmVjID0gdjtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChsdCh4MSwgeDApKSB7XG4gICAgICByZXR1cm4gLXNvcnRlZExlbmd0aEF1eE1vcmUoeHMsIHgxLCAyLCBsZW4sIGx0KSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpY3RseVNvcnRlZExlbmd0aCh4cywgbHQpIHtcbiAgcmV0dXJuIHN0cmljdGx5U29ydGVkTGVuZ3RoVSh4cywgQ3VycnkuX18yKGx0KSk7XG59XG5cbmZ1bmN0aW9uIGlzU29ydGVkVShhLCBjbXApIHtcbiAgdmFyIGxlbiA9IGEubGVuZ3RoO1xuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGEkMSA9IGE7XG4gICAgdmFyIF9pID0gMDtcbiAgICB2YXIgY21wJDEgPSBjbXA7XG4gICAgdmFyIGxhc3RfYm91bmQgPSBsZW4gLSAxIHwgMDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgaSA9IF9pO1xuICAgICAgaWYgKGkgPT09IGxhc3RfYm91bmQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNtcCQxKGEkMVtpXSwgYSQxW2kgKyAxIHwgMF0pIDw9IDApIHtcbiAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzU29ydGVkKGEsIGNtcCkge1xuICByZXR1cm4gaXNTb3J0ZWRVKGEsIEN1cnJ5Ll9fMihjbXApKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2Uoc3JjLCBzcmMxb2ZzLCBzcmMxbGVuLCBzcmMyLCBzcmMyb2ZzLCBzcmMybGVuLCBkc3QsIGRzdG9mcywgY21wKSB7XG4gIHZhciBzcmMxciA9IHNyYzFvZnMgKyBzcmMxbGVuIHwgMDtcbiAgdmFyIHNyYzJyID0gc3JjMm9mcyArIHNyYzJsZW4gfCAwO1xuICB2YXIgX2kxID0gc3JjMW9mcztcbiAgdmFyIF9zMSA9IHNyY1tzcmMxb2ZzXTtcbiAgdmFyIF9pMiA9IHNyYzJvZnM7XG4gIHZhciBfczIgPSBzcmMyW3NyYzJvZnNdO1xuICB2YXIgX2QgPSBkc3RvZnM7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgZCA9IF9kO1xuICAgIHZhciBzMiA9IF9zMjtcbiAgICB2YXIgaTIgPSBfaTI7XG4gICAgdmFyIHMxID0gX3MxO1xuICAgIHZhciBpMSA9IF9pMTtcbiAgICBpZiAoY21wKHMxLCBzMikgPD0gMCkge1xuICAgICAgZHN0W2RdID0gczE7XG4gICAgICB2YXIgaTEkMSA9IGkxICsgMSB8IDA7XG4gICAgICBpZiAoaTEkMSA8IHNyYzFyKSB7XG4gICAgICAgIF9kID0gZCArIDEgfCAwO1xuICAgICAgICBfczEgPSBzcmNbaTEkMV07XG4gICAgICAgIF9pMSA9IGkxJDE7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBCZWx0X0FycmF5LmJsaXRVbnNhZmUoc3JjMiwgaTIsIGRzdCwgZCArIDEgfCAwLCBzcmMyciAtIGkyIHwgMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRzdFtkXSA9IHMyO1xuICAgICAgdmFyIGkyJDEgPSBpMiArIDEgfCAwO1xuICAgICAgaWYgKGkyJDEgPCBzcmMycikge1xuICAgICAgICBfZCA9IGQgKyAxIHwgMDtcbiAgICAgICAgX3MyID0gc3JjMltpMiQxXTtcbiAgICAgICAgX2kyID0gaTIkMTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEJlbHRfQXJyYXkuYmxpdFVuc2FmZShzcmMsIGkxLCBkc3QsIGQgKyAxIHwgMCwgc3JjMXIgLSBpMSB8IDApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdW5pb25VKHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICB2YXIgc3JjMXIgPSBzcmMxb2ZzICsgc3JjMWxlbiB8IDA7XG4gIHZhciBzcmMyciA9IHNyYzJvZnMgKyBzcmMybGVuIHwgMDtcbiAgdmFyIF9pMSA9IHNyYzFvZnM7XG4gIHZhciBfczEgPSBzcmNbc3JjMW9mc107XG4gIHZhciBfaTIgPSBzcmMyb2ZzO1xuICB2YXIgX3MyID0gc3JjMltzcmMyb2ZzXTtcbiAgdmFyIF9kID0gZHN0b2ZzO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGQgPSBfZDtcbiAgICB2YXIgczIgPSBfczI7XG4gICAgdmFyIGkyID0gX2kyO1xuICAgIHZhciBzMSA9IF9zMTtcbiAgICB2YXIgaTEgPSBfaTE7XG4gICAgdmFyIGMgPSBjbXAoczEsIHMyKTtcbiAgICBpZiAoYyA8IDApIHtcbiAgICAgIGRzdFtkXSA9IHMxO1xuICAgICAgdmFyIGkxJDEgPSBpMSArIDEgfCAwO1xuICAgICAgdmFyIGQkMSA9IGQgKyAxIHwgMDtcbiAgICAgIGlmIChpMSQxIDwgc3JjMXIpIHtcbiAgICAgICAgX2QgPSBkJDE7XG4gICAgICAgIF9zMSA9IHNyY1tpMSQxXTtcbiAgICAgICAgX2kxID0gaTEkMTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQmVsdF9BcnJheS5ibGl0VW5zYWZlKHNyYzIsIGkyLCBkc3QsIGQkMSwgc3JjMnIgLSBpMiB8IDApO1xuICAgICAgICByZXR1cm4gKGQkMSArIHNyYzJyIHwgMCkgLSBpMiB8IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjID09PSAwKSB7XG4gICAgICBkc3RbZF0gPSBzMTtcbiAgICAgIHZhciBpMSQyID0gaTEgKyAxIHwgMDtcbiAgICAgIHZhciBpMiQxID0gaTIgKyAxIHwgMDtcbiAgICAgIHZhciBkJDIgPSBkICsgMSB8IDA7XG4gICAgICBpZiAoaTEkMiA8IHNyYzFyICYmIGkyJDEgPCBzcmMycikge1xuICAgICAgICBfZCA9IGQkMjtcbiAgICAgICAgX3MyID0gc3JjMltpMiQxXTtcbiAgICAgICAgX2kyID0gaTIkMTtcbiAgICAgICAgX3MxID0gc3JjW2kxJDJdO1xuICAgICAgICBfaTEgPSBpMSQyO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9IGVsc2UgaWYgKGkxJDIgPT09IHNyYzFyKSB7XG4gICAgICAgIEJlbHRfQXJyYXkuYmxpdFVuc2FmZShzcmMyLCBpMiQxLCBkc3QsIGQkMiwgc3JjMnIgLSBpMiQxIHwgMCk7XG4gICAgICAgIHJldHVybiAoZCQyICsgc3JjMnIgfCAwKSAtIGkyJDEgfCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQmVsdF9BcnJheS5ibGl0VW5zYWZlKHNyYywgaTEkMiwgZHN0LCBkJDIsIHNyYzFyIC0gaTEkMiB8IDApO1xuICAgICAgICByZXR1cm4gKGQkMiArIHNyYzFyIHwgMCkgLSBpMSQyIHwgMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZHN0W2RdID0gczI7XG4gICAgICB2YXIgaTIkMiA9IGkyICsgMSB8IDA7XG4gICAgICB2YXIgZCQzID0gZCArIDEgfCAwO1xuICAgICAgaWYgKGkyJDIgPCBzcmMycikge1xuICAgICAgICBfZCA9IGQkMztcbiAgICAgICAgX3MyID0gc3JjMltpMiQyXTtcbiAgICAgICAgX2kyID0gaTIkMjtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQmVsdF9BcnJheS5ibGl0VW5zYWZlKHNyYywgaTEsIGRzdCwgZCQzLCBzcmMxciAtIGkxIHwgMCk7XG4gICAgICAgIHJldHVybiAoZCQzICsgc3JjMXIgfCAwKSAtIGkxIHwgMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVuaW9uKHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICByZXR1cm4gdW5pb25VKHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIEN1cnJ5Ll9fMihjbXApKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0VShzcmMsIHNyYzFvZnMsIHNyYzFsZW4sIHNyYzIsIHNyYzJvZnMsIHNyYzJsZW4sIGRzdCwgZHN0b2ZzLCBjbXApIHtcbiAgdmFyIHNyYzFyID0gc3JjMW9mcyArIHNyYzFsZW4gfCAwO1xuICB2YXIgc3JjMnIgPSBzcmMyb2ZzICsgc3JjMmxlbiB8IDA7XG4gIHZhciBfaTEgPSBzcmMxb2ZzO1xuICB2YXIgX3MxID0gc3JjW3NyYzFvZnNdO1xuICB2YXIgX2kyID0gc3JjMm9mcztcbiAgdmFyIF9zMiA9IHNyYzJbc3JjMm9mc107XG4gIHZhciBfZCA9IGRzdG9mcztcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBkID0gX2Q7XG4gICAgdmFyIHMyID0gX3MyO1xuICAgIHZhciBpMiA9IF9pMjtcbiAgICB2YXIgczEgPSBfczE7XG4gICAgdmFyIGkxID0gX2kxO1xuICAgIHZhciBjID0gY21wKHMxLCBzMik7XG4gICAgaWYgKGMgPCAwKSB7XG4gICAgICB2YXIgaTEkMSA9IGkxICsgMSB8IDA7XG4gICAgICBpZiAoaTEkMSA8IHNyYzFyKSB7XG4gICAgICAgIF9zMSA9IHNyY1tpMSQxXTtcbiAgICAgICAgX2kxID0gaTEkMTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjID09PSAwKSB7XG4gICAgICBkc3RbZF0gPSBzMTtcbiAgICAgIHZhciBpMSQyID0gaTEgKyAxIHwgMDtcbiAgICAgIHZhciBpMiQxID0gaTIgKyAxIHwgMDtcbiAgICAgIHZhciBkJDEgPSBkICsgMSB8IDA7XG4gICAgICBpZiAoaTEkMiA8IHNyYzFyICYmIGkyJDEgPCBzcmMycikge1xuICAgICAgICBfZCA9IGQkMTtcbiAgICAgICAgX3MyID0gc3JjMltpMiQxXTtcbiAgICAgICAgX2kyID0gaTIkMTtcbiAgICAgICAgX3MxID0gc3JjW2kxJDJdO1xuICAgICAgICBfaTEgPSBpMSQyO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZCQxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaTIkMiA9IGkyICsgMSB8IDA7XG4gICAgICBpZiAoaTIkMiA8IHNyYzJyKSB7XG4gICAgICAgIF9zMiA9IHNyYzJbaTIkMl07XG4gICAgICAgIF9pMiA9IGkyJDI7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0KHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICByZXR1cm4gaW50ZXJzZWN0VShzcmMsIHNyYzFvZnMsIHNyYzFsZW4sIHNyYzIsIHNyYzJvZnMsIHNyYzJsZW4sIGRzdCwgZHN0b2ZzLCBDdXJyeS5fXzIoY21wKSk7XG59XG5cbmZ1bmN0aW9uIGRpZmZVKHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICB2YXIgc3JjMXIgPSBzcmMxb2ZzICsgc3JjMWxlbiB8IDA7XG4gIHZhciBzcmMyciA9IHNyYzJvZnMgKyBzcmMybGVuIHwgMDtcbiAgdmFyIF9pMSA9IHNyYzFvZnM7XG4gIHZhciBfczEgPSBzcmNbc3JjMW9mc107XG4gIHZhciBfaTIgPSBzcmMyb2ZzO1xuICB2YXIgX3MyID0gc3JjMltzcmMyb2ZzXTtcbiAgdmFyIF9kID0gZHN0b2ZzO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGQgPSBfZDtcbiAgICB2YXIgczIgPSBfczI7XG4gICAgdmFyIGkyID0gX2kyO1xuICAgIHZhciBzMSA9IF9zMTtcbiAgICB2YXIgaTEgPSBfaTE7XG4gICAgdmFyIGMgPSBjbXAoczEsIHMyKTtcbiAgICBpZiAoYyA8IDApIHtcbiAgICAgIGRzdFtkXSA9IHMxO1xuICAgICAgdmFyIGQkMSA9IGQgKyAxIHwgMDtcbiAgICAgIHZhciBpMSQxID0gaTEgKyAxIHwgMDtcbiAgICAgIGlmIChpMSQxIDwgc3JjMXIpIHtcbiAgICAgICAgX2QgPSBkJDE7XG4gICAgICAgIF9zMSA9IHNyY1tpMSQxXTtcbiAgICAgICAgX2kxID0gaTEkMTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGQkMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGMgPT09IDApIHtcbiAgICAgIHZhciBpMSQyID0gaTEgKyAxIHwgMDtcbiAgICAgIHZhciBpMiQxID0gaTIgKyAxIHwgMDtcbiAgICAgIGlmIChpMSQyIDwgc3JjMXIgJiYgaTIkMSA8IHNyYzJyKSB7XG4gICAgICAgIF9zMiA9IHNyYzJbaTIkMV07XG4gICAgICAgIF9pMiA9IGkyJDE7XG4gICAgICAgIF9zMSA9IHNyY1tpMSQyXTtcbiAgICAgICAgX2kxID0gaTEkMjtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIGlmIChpMSQyID09PSBzcmMxcikge1xuICAgICAgICByZXR1cm4gZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEJlbHRfQXJyYXkuYmxpdFVuc2FmZShzcmMsIGkxJDIsIGRzdCwgZCwgc3JjMXIgLSBpMSQyIHwgMCk7XG4gICAgICAgIHJldHVybiAoZCArIHNyYzFyIHwgMCkgLSBpMSQyIHwgMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGkyJDIgPSBpMiArIDEgfCAwO1xuICAgICAgaWYgKGkyJDIgPCBzcmMycikge1xuICAgICAgICBfczIgPSBzcmMyW2kyJDJdO1xuICAgICAgICBfaTIgPSBpMiQyO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBCZWx0X0FycmF5LmJsaXRVbnNhZmUoc3JjLCBpMSwgZHN0LCBkLCBzcmMxciAtIGkxIHwgMCk7XG4gICAgICAgIHJldHVybiAoZCArIHNyYzFyIHwgMCkgLSBpMSB8IDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBkaWZmKHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICByZXR1cm4gZGlmZlUoc3JjLCBzcmMxb2ZzLCBzcmMxbGVuLCBzcmMyLCBzcmMyb2ZzLCBzcmMybGVuLCBkc3QsIGRzdG9mcywgQ3VycnkuX18yKGNtcCkpO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRpb25Tb3J0KHNyYywgc3Jjb2ZzLCBkc3QsIGRzdG9mcywgbGVuLCBjbXApIHtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsZW4gLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICB2YXIgZSA9IHNyY1tzcmNvZnMgKyBpIHwgMF07XG4gICAgdmFyIGogPSAoZHN0b2ZzICsgaSB8IDApIC0gMSB8IDA7XG4gICAgd2hpbGUoaiA+PSBkc3RvZnMgJiYgY21wKGRzdFtqXSwgZSkgPiAwKSB7XG4gICAgICBkc3RbaiArIDEgfCAwXSA9IGRzdFtqXTtcbiAgICAgIGogPSBqIC0gMSB8IDA7XG4gICAgfTtcbiAgICBkc3RbaiArIDEgfCAwXSA9IGU7XG4gIH1cbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gc29ydFRvKHNyYywgc3Jjb2ZzLCBkc3QsIGRzdG9mcywgbGVuLCBjbXApIHtcbiAgaWYgKGxlbiA8PSA1KSB7XG4gICAgcmV0dXJuIGluc2VydGlvblNvcnQoc3JjLCBzcmNvZnMsIGRzdCwgZHN0b2ZzLCBsZW4sIGNtcCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGwxID0gbGVuIC8gMiB8IDA7XG4gICAgdmFyIGwyID0gbGVuIC0gbDEgfCAwO1xuICAgIHNvcnRUbyhzcmMsIHNyY29mcyArIGwxIHwgMCwgZHN0LCBkc3RvZnMgKyBsMSB8IDAsIGwyLCBjbXApO1xuICAgIHNvcnRUbyhzcmMsIHNyY29mcywgc3JjLCBzcmNvZnMgKyBsMiB8IDAsIGwxLCBjbXApO1xuICAgIHJldHVybiBtZXJnZShzcmMsIHNyY29mcyArIGwyIHwgMCwgbDEsIGRzdCwgZHN0b2ZzICsgbDEgfCAwLCBsMiwgZHN0LCBkc3RvZnMsIGNtcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEluUGxhY2VCeVUoYSwgY21wKSB7XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIGlmIChsIDw9IDUpIHtcbiAgICByZXR1cm4gaW5zZXJ0aW9uU29ydChhLCAwLCBhLCAwLCBsLCBjbXApO1xuICB9IGVsc2Uge1xuICAgIHZhciBsMSA9IGwgLyAyIHwgMDtcbiAgICB2YXIgbDIgPSBsIC0gbDEgfCAwO1xuICAgIHZhciB0ID0gbmV3IEFycmF5KGwyKTtcbiAgICBzb3J0VG8oYSwgbDEsIHQsIDAsIGwyLCBjbXApO1xuICAgIHNvcnRUbyhhLCAwLCBhLCBsMiwgbDEsIGNtcCk7XG4gICAgcmV0dXJuIG1lcmdlKGEsIGwyLCBsMSwgdCwgMCwgbDIsIGEsIDAsIGNtcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEluUGxhY2VCeShhLCBjbXApIHtcbiAgcmV0dXJuIHN0YWJsZVNvcnRJblBsYWNlQnlVKGEsIEN1cnJ5Ll9fMihjbXApKTtcbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEJ5VShhLCBjbXApIHtcbiAgdmFyIGIgPSBhLnNsaWNlKDApO1xuICBzdGFibGVTb3J0SW5QbGFjZUJ5VShiLCBjbXApO1xuICByZXR1cm4gYjtcbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEJ5KGEsIGNtcCkge1xuICByZXR1cm4gc3RhYmxlU29ydEJ5VShhLCBDdXJyeS5fXzIoY21wKSk7XG59XG5cbmZ1bmN0aW9uIGJpbmFyeVNlYXJjaEJ5VShzb3J0ZWQsIGtleSwgY21wKSB7XG4gIHZhciBsZW4gPSBzb3J0ZWQubGVuZ3RoO1xuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2Uge1xuICAgIHZhciBsbyA9IHNvcnRlZFswXTtcbiAgICB2YXIgYyA9IGNtcChrZXksIGxvKTtcbiAgICBpZiAoYyA8IDApIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGhpID0gc29ydGVkW2xlbiAtIDEgfCAwXTtcbiAgICAgIHZhciBjMiA9IGNtcChrZXksIGhpKTtcbiAgICAgIGlmIChjMiA+IDApIHtcbiAgICAgICAgcmV0dXJuIC0obGVuICsgMSB8IDApIHwgMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhcnIgPSBzb3J0ZWQ7XG4gICAgICAgIHZhciBfbG8gPSAwO1xuICAgICAgICB2YXIgX2hpID0gbGVuIC0gMSB8IDA7XG4gICAgICAgIHZhciBrZXkkMSA9IGtleTtcbiAgICAgICAgdmFyIGNtcCQxID0gY21wO1xuICAgICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgICAgdmFyIGhpJDEgPSBfaGk7XG4gICAgICAgICAgdmFyIGxvJDEgPSBfbG87XG4gICAgICAgICAgdmFyIG1pZCA9IChsbyQxICsgaGkkMSB8IDApIC8gMiB8IDA7XG4gICAgICAgICAgdmFyIG1pZFZhbCA9IGFyclttaWRdO1xuICAgICAgICAgIHZhciBjJDEgPSBjbXAkMShrZXkkMSwgbWlkVmFsKTtcbiAgICAgICAgICBpZiAoYyQxID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbWlkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyQxIDwgMCkge1xuICAgICAgICAgICAgaWYgKGhpJDEgPT09IG1pZCkge1xuICAgICAgICAgICAgICBpZiAoY21wJDEoYXJyW2xvJDFdLCBrZXkkMSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG8kMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLShoaSQxICsgMSB8IDApIHwgMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgX2hpID0gbWlkO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChsbyQxID09PSBtaWQpIHtcbiAgICAgICAgICAgIGlmIChjbXAkMShhcnJbaGkkMV0sIGtleSQxKSA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gaGkkMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiAtKGhpJDEgKyAxIHwgMCkgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfbG8gPSBtaWQ7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5hcnlTZWFyY2hCeShzb3J0ZWQsIGtleSwgY21wKSB7XG4gIHJldHVybiBiaW5hcnlTZWFyY2hCeVUoc29ydGVkLCBrZXksIEN1cnJ5Ll9fMihjbXApKTtcbn1cblxudmFyIEludCA9IDA7XG5cbnZhciAkJFN0cmluZyA9IDA7XG5cbmV4cG9ydHMuSW50ID0gSW50O1xuZXhwb3J0cy4kJFN0cmluZyA9ICQkU3RyaW5nO1xuZXhwb3J0cy5zdHJpY3RseVNvcnRlZExlbmd0aFUgPSBzdHJpY3RseVNvcnRlZExlbmd0aFU7XG5leHBvcnRzLnN0cmljdGx5U29ydGVkTGVuZ3RoID0gc3RyaWN0bHlTb3J0ZWRMZW5ndGg7XG5leHBvcnRzLmlzU29ydGVkVSA9IGlzU29ydGVkVTtcbmV4cG9ydHMuaXNTb3J0ZWQgPSBpc1NvcnRlZDtcbmV4cG9ydHMuc3RhYmxlU29ydEluUGxhY2VCeVUgPSBzdGFibGVTb3J0SW5QbGFjZUJ5VTtcbmV4cG9ydHMuc3RhYmxlU29ydEluUGxhY2VCeSA9IHN0YWJsZVNvcnRJblBsYWNlQnk7XG5leHBvcnRzLnN0YWJsZVNvcnRCeVUgPSBzdGFibGVTb3J0QnlVO1xuZXhwb3J0cy5zdGFibGVTb3J0QnkgPSBzdGFibGVTb3J0Qnk7XG5leHBvcnRzLmJpbmFyeVNlYXJjaEJ5VSA9IGJpbmFyeVNlYXJjaEJ5VTtcbmV4cG9ydHMuYmluYXJ5U2VhcmNoQnkgPSBiaW5hcnlTZWFyY2hCeTtcbmV4cG9ydHMudW5pb25VID0gdW5pb25VO1xuZXhwb3J0cy51bmlvbiA9IHVuaW9uO1xuZXhwb3J0cy5pbnRlcnNlY3RVID0gaW50ZXJzZWN0VTtcbmV4cG9ydHMuaW50ZXJzZWN0ID0gaW50ZXJzZWN0O1xuZXhwb3J0cy5kaWZmVSA9IGRpZmZVO1xuZXhwb3J0cy5kaWZmID0gZGlmZjtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gZXF1YWwoeCwgeSkge1xuICByZXR1cm4geCA9PT0geTtcbn1cblxudmFyIG1heCA9IDIxNDc0ODM2NDc7XG5cbnZhciBtaW4gPSAtMjE0NzQ4MzY0ODtcblxuZXhwb3J0cy5lcXVhbCA9IGVxdWFsO1xuZXhwb3J0cy5tYXggPSBtYXg7XG5leHBvcnRzLm1pbiA9IG1pbjtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBKc19pbnQgPSByZXF1aXJlKFwiLi9qc19pbnQuanNcIik7XG5cbmZ1bmN0aW9uIHVuc2FmZV9jZWlsKHByaW0pIHtcbiAgcmV0dXJuIE1hdGguY2VpbChwcmltKTtcbn1cblxuZnVuY3Rpb24gY2VpbF9pbnQoZikge1xuICBpZiAoZiA+IEpzX2ludC5tYXgpIHtcbiAgICByZXR1cm4gSnNfaW50Lm1heDtcbiAgfSBlbHNlIGlmIChmIDwgSnNfaW50Lm1pbikge1xuICAgIHJldHVybiBKc19pbnQubWluO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBNYXRoLmNlaWwoZik7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zYWZlX2Zsb29yKHByaW0pIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IocHJpbSk7XG59XG5cbmZ1bmN0aW9uIGZsb29yX2ludChmKSB7XG4gIGlmIChmID4gSnNfaW50Lm1heCkge1xuICAgIHJldHVybiBKc19pbnQubWF4O1xuICB9IGVsc2UgaWYgKGYgPCBKc19pbnQubWluKSB7XG4gICAgcmV0dXJuIEpzX2ludC5taW47XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZik7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmFuZG9tX2ludChtaW4sIG1heCkge1xuICByZXR1cm4gZmxvb3JfaW50KE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluIHwgMCkpICsgbWluIHwgMDtcbn1cblxudmFyIGNlaWwgPSBjZWlsX2ludDtcblxudmFyIGZsb29yID0gZmxvb3JfaW50O1xuXG5leHBvcnRzLnVuc2FmZV9jZWlsID0gdW5zYWZlX2NlaWw7XG5leHBvcnRzLmNlaWxfaW50ID0gY2VpbF9pbnQ7XG5leHBvcnRzLmNlaWwgPSBjZWlsO1xuZXhwb3J0cy51bnNhZmVfZmxvb3IgPSB1bnNhZmVfZmxvb3I7XG5leHBvcnRzLmZsb29yX2ludCA9IGZsb29yX2ludDtcbmV4cG9ydHMuZmxvb3IgPSBmbG9vcjtcbmV4cG9ydHMucmFuZG9tX2ludCA9IHJhbmRvbV9pbnQ7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FtbF9leGNlcHRpb25zID0gcmVxdWlyZShcIi4vY2FtbF9leGNlcHRpb25zLmpzXCIpO1xuXG52YXIgJCRFcnJvciA9IENhbWxfZXhjZXB0aW9ucy5jcmVhdGUoXCJKc19leG4uRXJyb3JcIik7XG5cbmZ1bmN0aW9uIGludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbihlKSB7XG4gIGlmIChDYW1sX2V4Y2VwdGlvbnMuaXNDYW1sRXhjZXB0aW9uT3JPcGVuVmFyaWFudChlKSkge1xuICAgIHJldHVybiBlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbXG4gICAgICAgICAgICAkJEVycm9yLFxuICAgICAgICAgICAgZVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gcmFpc2VFcnJvcihzdHIpIHtcbiAgdGhyb3cgbmV3IEVycm9yKHN0cik7XG59XG5cbmZ1bmN0aW9uIHJhaXNlRXZhbEVycm9yKHN0cikge1xuICB0aHJvdyBuZXcgRXZhbEVycm9yKHN0cik7XG59XG5cbmZ1bmN0aW9uIHJhaXNlUmFuZ2VFcnJvcihzdHIpIHtcbiAgdGhyb3cgbmV3IFJhbmdlRXJyb3Ioc3RyKTtcbn1cblxuZnVuY3Rpb24gcmFpc2VSZWZlcmVuY2VFcnJvcihzdHIpIHtcbiAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKHN0cik7XG59XG5cbmZ1bmN0aW9uIHJhaXNlU3ludGF4RXJyb3Ioc3RyKSB7XG4gIHRocm93IG5ldyBTeW50YXhFcnJvcihzdHIpO1xufVxuXG5mdW5jdGlvbiByYWlzZVR5cGVFcnJvcihzdHIpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihzdHIpO1xufVxuXG5mdW5jdGlvbiByYWlzZVVyaUVycm9yKHN0cikge1xuICB0aHJvdyBuZXcgVVJJRXJyb3Ioc3RyKTtcbn1cblxuZXhwb3J0cy4kJEVycm9yID0gJCRFcnJvcjtcbmV4cG9ydHMuaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uID0gaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uO1xuZXhwb3J0cy5yYWlzZUVycm9yID0gcmFpc2VFcnJvcjtcbmV4cG9ydHMucmFpc2VFdmFsRXJyb3IgPSByYWlzZUV2YWxFcnJvcjtcbmV4cG9ydHMucmFpc2VSYW5nZUVycm9yID0gcmFpc2VSYW5nZUVycm9yO1xuZXhwb3J0cy5yYWlzZVJlZmVyZW5jZUVycm9yID0gcmFpc2VSZWZlcmVuY2VFcnJvcjtcbmV4cG9ydHMucmFpc2VTeW50YXhFcnJvciA9IHJhaXNlU3ludGF4RXJyb3I7XG5leHBvcnRzLnJhaXNlVHlwZUVycm9yID0gcmFpc2VUeXBlRXJyb3I7XG5leHBvcnRzLnJhaXNlVXJpRXJyb3IgPSByYWlzZVVyaUVycm9yO1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG5mdW5jdGlvbiBfYXNzaWduKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihwcmltLCBwcmltJDEpO1xufVxuXG52YXIgZW1wdHlPYmplY3QgPSB7IH07XG5cblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbi8vICd1c2Ugc3RyaWN0JztcblxuLy8gdmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbi8vIHZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2VtcHR5T2JqZWN0Jyk7XG4vLyB2YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG4vLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuLy8gICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbi8vIH1cblxudmFyIE1JWElOU19LRVkgPSAnbWl4aW5zJztcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGFsbG93IHRoZSBjcmVhdGlvbiBvZiBhbm9ueW1vdXMgZnVuY3Rpb25zIHdoaWNoIGRvIG5vdFxuLy8gaGF2ZSAubmFtZSBzZXQgdG8gdGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlIGJlaW5nIGFzc2lnbmVkIHRvLlxuZnVuY3Rpb24gaWRlbnRpdHkoZm4pIHtcbiAgcmV0dXJuIGZuO1xufVxuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXM7XG4vLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuLy8gICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHtcbi8vICAgICBwcm9wOiAncHJvcCcsXG4vLyAgICAgY29udGV4dDogJ2NvbnRleHQnLFxuLy8gICAgIGNoaWxkQ29udGV4dDogJ2NoaWxkIGNvbnRleHQnXG4vLyAgIH07XG4vLyB9IGVsc2Uge1xuICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHt9O1xuLy8gfVxuXG47XG5cbnZhciBmYWN0b3J5ID0gKFxuZnVuY3Rpb24gZmFjdG9yeShSZWFjdENvbXBvbmVudCwgaXNWYWxpZEVsZW1lbnQsIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlKSB7XG4gIC8qKlxuICAgKiBQb2xpY2llcyB0aGF0IGRlc2NyaWJlIG1ldGhvZHMgaW4gYFJlYWN0Q2xhc3NJbnRlcmZhY2VgLlxuICAgKi9cblxuICB2YXIgaW5qZWN0ZWRNaXhpbnMgPSBbXTtcblxuICAvKipcbiAgICogQ29tcG9zaXRlIGNvbXBvbmVudHMgYXJlIGhpZ2hlci1sZXZlbCBjb21wb25lbnRzIHRoYXQgY29tcG9zZSBvdGhlciBjb21wb3NpdGVcbiAgICogb3IgaG9zdCBjb21wb25lbnRzLlxuICAgKlxuICAgKiBUbyBjcmVhdGUgYSBuZXcgdHlwZSBvZiBgUmVhY3RDbGFzc2AsIHBhc3MgYSBzcGVjaWZpY2F0aW9uIG9mXG4gICAqIHlvdXIgbmV3IGNsYXNzIHRvIGBSZWFjdC5jcmVhdGVDbGFzc2AuIFRoZSBvbmx5IHJlcXVpcmVtZW50IG9mIHlvdXIgY2xhc3NcbiAgICogc3BlY2lmaWNhdGlvbiBpcyB0aGF0IHlvdSBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuXG4gICAqXG4gICAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICogICAgICAgcmV0dXJuIDxkaXY+SGVsbG8gV29ybGQ8L2Rpdj47XG4gICAqICAgICB9XG4gICAqICAgfSk7XG4gICAqXG4gICAqIFRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIHN1cHBvcnRzIGEgc3BlY2lmaWMgcHJvdG9jb2wgb2YgbWV0aG9kcyB0aGF0IGhhdmVcbiAgICogc3BlY2lhbCBtZWFuaW5nIChlLmcuIGByZW5kZXJgKS4gU2VlIGBSZWFjdENsYXNzSW50ZXJmYWNlYCBmb3JcbiAgICogbW9yZSB0aGUgY29tcHJlaGVuc2l2ZSBwcm90b2NvbC4gQW55IG90aGVyIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgaW4gdGhlXG4gICAqIGNsYXNzIHNwZWNpZmljYXRpb24gd2lsbCBiZSBhdmFpbGFibGUgb24gdGhlIHByb3RvdHlwZS5cbiAgICpcbiAgICogQGludGVyZmFjZSBSZWFjdENsYXNzSW50ZXJmYWNlXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdmFyIFJlYWN0Q2xhc3NJbnRlcmZhY2UgPSB7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgTWl4aW4gb2JqZWN0cyB0byBpbmNsdWRlIHdoZW4gZGVmaW5pbmcgeW91ciBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7YXJyYXl9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgbWl4aW5zOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0aGF0IHNob3VsZCBiZSBkZWZpbmVkIG9uXG4gICAgICogdGhlIGNvbXBvbmVudCdzIGNvbnN0cnVjdG9yIGluc3RlYWQgb2YgaXRzIHByb3RvdHlwZSAoc3RhdGljIG1ldGhvZHMpLlxuICAgICAqXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBzdGF0aWNzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5pdGlvbiBvZiBwcm9wIHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgcHJvcFR5cGVzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5pdGlvbiBvZiBjb250ZXh0IHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29udGV4dFR5cGVzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5pdGlvbiBvZiBjb250ZXh0IHR5cGVzIHRoaXMgY29tcG9uZW50IHNldHMgZm9yIGl0cyBjaGlsZHJlbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY2hpbGRDb250ZXh0VHlwZXM6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvLyA9PT09IERlZmluaXRpb24gbWV0aG9kcyA9PT09XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBWYWx1ZXMgaW4gdGhlIG1hcHBpbmcgd2lsbCBiZSBzZXQgb25cbiAgICAgKiBgdGhpcy5wcm9wc2AgaWYgdGhhdCBwcm9wIGlzIG5vdCBzcGVjaWZpZWQgKGkuZS4gdXNpbmcgYW4gYGluYCBjaGVjaykuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIGJlZm9yZSBgZ2V0SW5pdGlhbFN0YXRlYCBhbmQgdGhlcmVmb3JlIGNhbm5vdCByZWx5XG4gICAgICogb24gYHRoaXMuc3RhdGVgIG9yIHVzZSBgdGhpcy5zZXRTdGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgZ2V0RGVmYXVsdFByb3BzOiAnREVGSU5FX01BTllfTUVSR0VEJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgb25jZSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgICAqIGFzIHRoZSBpbml0aWFsIHZhbHVlIG9mIGB0aGlzLnN0YXRlYC5cbiAgICAgKlxuICAgICAqICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgcmV0dXJuIHtcbiAgICAgKiAgICAgICBpc09uOiBmYWxzZSxcbiAgICAgKiAgICAgICBmb29CYXo6IG5ldyBCYXpGb28oKVxuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiAnREVGSU5FX01BTllfTUVSR0VEJyxcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBnZXRDaGlsZENvbnRleHQ6ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuXG4gICAgLyoqXG4gICAgICogVXNlcyBwcm9wcyBmcm9tIGB0aGlzLnByb3BzYCBhbmQgc3RhdGUgZnJvbSBgdGhpcy5zdGF0ZWAgdG8gcmVuZGVyIHRoZVxuICAgICAqIHN0cnVjdHVyZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogTm8gZ3VhcmFudGVlcyBhcmUgbWFkZSBhYm91dCB3aGVuIG9yIGhvdyBvZnRlbiB0aGlzIG1ldGhvZCBpcyBpbnZva2VkLCBzb1xuICAgICAqIGl0IG11c3Qgbm90IGhhdmUgc2lkZSBlZmZlY3RzLlxuICAgICAqXG4gICAgICogICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAqICAgICB2YXIgbmFtZSA9IHRoaXMucHJvcHMubmFtZTtcbiAgICAgKiAgICAgcmV0dXJuIDxkaXY+SGVsbG8sIHtuYW1lfSE8L2Rpdj47XG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH1cbiAgICAgKiBAcmVxdWlyZWRcbiAgICAgKi9cbiAgICByZW5kZXI6ICdERUZJTkVfT05DRScsXG5cbiAgICAvLyA9PT09IERlbGVnYXRlIG1ldGhvZHMgPT09PVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgaW5pdGlhbGx5IGNyZWF0ZWQgYW5kIGFib3V0IHRvIGJlIG1vdW50ZWQuXG4gICAgICogVGhpcyBtYXkgaGF2ZSBzaWRlIGVmZmVjdHMsIGJ1dCBhbnkgZXh0ZXJuYWwgc3Vic2NyaXB0aW9ucyBvciBkYXRhIGNyZWF0ZWRcbiAgICAgKiBieSB0aGlzIG1ldGhvZCBtdXN0IGJlIGNsZWFuZWQgdXAgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YC5cbiAgICAgKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbXBvbmVudFdpbGxNb3VudDogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgYW5kIGhhcyBhIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBIb3dldmVyLCB0aGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGUgRE9NIG5vZGUgaXMgaW4gdGhlIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICAgKiBiZWVuIG1vdW50ZWQgKGluaXRpYWxpemVkIGFuZCByZW5kZXJlZCkgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb21wb25lbnREaWRNb3VudDogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzLlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gcmVhY3QgdG8gYSBwcm9wIHRyYW5zaXRpb24gYnkgdXBkYXRpbmcgdGhlXG4gICAgICogc3RhdGUgdXNpbmcgYHRoaXMuc2V0U3RhdGVgLiBDdXJyZW50IHByb3BzIGFyZSBhY2Nlc3NlZCB2aWEgYHRoaXMucHJvcHNgLlxuICAgICAqXG4gICAgICogICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgICogICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAqICAgICAgIGxpa2VzSW5jcmVhc2luZzogbmV4dFByb3BzLmxpa2VDb3VudCA+IHRoaXMucHJvcHMubGlrZUNvdW50XG4gICAgICogICAgIH0pO1xuICAgICAqICAgfVxuICAgICAqXG4gICAgICogTk9URTogVGhlcmUgaXMgbm8gZXF1aXZhbGVudCBgY29tcG9uZW50V2lsbFJlY2VpdmVTdGF0ZWAuIEFuIGluY29taW5nIHByb3BcbiAgICAgKiB0cmFuc2l0aW9uIG1heSBjYXVzZSBhIHN0YXRlIGNoYW5nZSwgYnV0IHRoZSBvcHBvc2l0ZSBpcyBub3QgdHJ1ZS4gSWYgeW91XG4gICAgICogbmVlZCBpdCwgeW91IGFyZSBwcm9iYWJseSBsb29raW5nIGZvciBgY29tcG9uZW50V2lsbFVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hpbGUgZGVjaWRpbmcgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgYmUgdXBkYXRlZCBhcyBhIHJlc3VsdCBvZlxuICAgICAqIHJlY2VpdmluZyBuZXcgcHJvcHMsIHN0YXRlIGFuZC9vciBjb250ZXh0LlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gYHJldHVybiBmYWxzZWAgd2hlbiB5b3UncmUgY2VydGFpbiB0aGF0IHRoZVxuICAgICAqIHRyYW5zaXRpb24gdG8gdGhlIG5ldyBwcm9wcy9zdGF0ZS9jb250ZXh0IHdpbGwgbm90IHJlcXVpcmUgYSBjb21wb25lbnRcbiAgICAgKiB1cGRhdGUuXG4gICAgICpcbiAgICAgKiAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KSB7XG4gICAgICogICAgIHJldHVybiAhZXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fFxuICAgICAqICAgICAgICFlcXVhbChuZXh0U3RhdGUsIHRoaXMuc3RhdGUpIHx8XG4gICAgICogICAgICAgIWVxdWFsKG5leHRDb250ZXh0LCB0aGlzLmNvbnRleHQpO1xuICAgICAqICAgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgdXBkYXRlLlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogJ0RFRklORV9PTkNFJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFib3V0IHRvIHVwZGF0ZSBkdWUgdG8gYSB0cmFuc2l0aW9uIGZyb21cbiAgICAgKiBgdGhpcy5wcm9wc2AsIGB0aGlzLnN0YXRlYCBhbmQgYHRoaXMuY29udGV4dGAgdG8gYG5leHRQcm9wc2AsIGBuZXh0U3RhdGVgXG4gICAgICogYW5kIGBuZXh0Q29udGV4dGAuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBwZXJmb3JtIHByZXBhcmF0aW9uIGJlZm9yZSBhbiB1cGRhdGUgb2NjdXJzLlxuICAgICAqXG4gICAgICogTk9URTogWW91ICoqY2Fubm90KiogdXNlIGB0aGlzLnNldFN0YXRlKClgIGluIHRoaXMgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dFxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb21wb25lbnRXaWxsVXBkYXRlOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQncyBET00gcmVwcmVzZW50YXRpb24gaGFzIGJlZW4gdXBkYXRlZC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIG9wZXJhdGUgb24gdGhlIERPTSB3aGVuIHRoZSBjb21wb25lbnQgaGFzXG4gICAgICogYmVlbiB1cGRhdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHByZXZQcm9wc1xuICAgICAqIEBwYXJhbSB7P29iamVjdH0gcHJldlN0YXRlXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q29udGV4dFxuICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcm9vdE5vZGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nIHRoZSBjb21wb25lbnQuXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50RGlkVXBkYXRlOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQgYW5kIGhhdmVcbiAgICAgKiBpdHMgRE9NIHJlcHJlc2VudGF0aW9uIGRlc3Ryb3llZC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGRlYWxsb2NhdGUgYW55IGV4dGVybmFsIHJlc291cmNlcy5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoZXJlIGlzIG5vIGBjb21wb25lbnREaWRVbm1vdW50YCBzaW5jZSB5b3VyIGNvbXBvbmVudCB3aWxsIGhhdmUgYmVlblxuICAgICAqIGRlc3Ryb3llZCBieSB0aGF0IHBvaW50LlxuICAgICAqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvLyA9PT09IEFkdmFuY2VkIG1ldGhvZHMgPT09PVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY29tcG9uZW50J3MgY3VycmVudGx5IG1vdW50ZWQgRE9NIHJlcHJlc2VudGF0aW9uLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG4gICAgICogU29waGlzdGljYXRlZCBjbGllbnRzIG1heSB3aXNoIHRvIG92ZXJyaWRlIHRoaXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQGludGVybmFsXG4gICAgICogQG92ZXJyaWRhYmxlXG4gICAgICovXG4gICAgdXBkYXRlQ29tcG9uZW50OiAnT1ZFUlJJREVfQkFTRSdcbiAgfTtcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGNsYXNzIHNwZWNpZmljYXRpb24ga2V5cyB0byBzcGVjaWFsIHByb2Nlc3NpbmcgZnVuY3Rpb25zLlxuICAgKlxuICAgKiBBbHRob3VnaCB0aGVzZSBhcmUgZGVjbGFyZWQgbGlrZSBpbnN0YW5jZSBwcm9wZXJ0aWVzIGluIHRoZSBzcGVjaWZpY2F0aW9uXG4gICAqIHdoZW4gZGVmaW5pbmcgY2xhc3NlcyB1c2luZyBgUmVhY3QuY3JlYXRlQ2xhc3NgLCB0aGV5IGFyZSBhY3R1YWxseSBzdGF0aWNcbiAgICogYW5kIGFyZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRoZSBwcm90b3R5cGUuIERlc3BpdGVcbiAgICogYmVpbmcgc3RhdGljLCB0aGV5IG11c3QgYmUgZGVmaW5lZCBvdXRzaWRlIG9mIHRoZSBcInN0YXRpY3NcIiBrZXkgdW5kZXJcbiAgICogd2hpY2ggYWxsIG90aGVyIHN0YXRpYyBtZXRob2RzIGFyZSBkZWZpbmVkLlxuICAgKi9cbiAgdmFyIFJFU0VSVkVEX1NQRUNfS0VZUyA9IHtcbiAgICBkaXNwbGF5TmFtZTogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGRpc3BsYXlOYW1lKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgIH0sXG4gICAgbWl4aW5zOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgbWl4aW5zKSB7XG4gICAgICBpZiAobWl4aW5zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIG1peGluc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNoaWxkQ29udGV4dFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMpIHtcbiAgICAgIC8vIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMsICdjaGlsZENvbnRleHQnKTtcbiAgICAgIC8vIH1cbiAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID0gX2Fzc2lnbihcbiAgICAgICAge30sXG4gICAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgICBjaGlsZENvbnRleHRUeXBlc1xuICAgICAgKTtcbiAgICB9LFxuICAgIGNvbnRleHRUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGNvbnRleHRUeXBlcykge1xuICAgICAgLy8gaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMsICdjb250ZXh0Jyk7XG4gICAgICAvLyB9XG4gICAgICBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMgPSBfYXNzaWduKFxuICAgICAgICB7fSxcbiAgICAgICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzLFxuICAgICAgICBjb250ZXh0VHlwZXNcbiAgICAgICk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBTcGVjaWFsIGNhc2UgZ2V0RGVmYXVsdFByb3BzIHdoaWNoIHNob3VsZCBtb3ZlIGludG8gc3RhdGljcyBidXQgcmVxdWlyZXNcbiAgICAgKiBhdXRvbWF0aWMgbWVyZ2luZy5cbiAgICAgKi9cbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBnZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oXG4gICAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzLFxuICAgICAgICAgIGdldERlZmF1bHRQcm9wc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJvcFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgcHJvcFR5cGVzKSB7XG4gICAgICAvLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIHByb3BUeXBlcywgJ3Byb3AnKTtcbiAgICAgIC8vIH1cbiAgICAgIENvbnN0cnVjdG9yLnByb3BUeXBlcyA9IF9hc3NpZ24oe30sIENvbnN0cnVjdG9yLnByb3BUeXBlcywgcHJvcFR5cGVzKTtcbiAgICB9LFxuICAgIHN0YXRpY3M6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgICBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcyk7XG4gICAgfSxcbiAgICBhdXRvYmluZDogZnVuY3Rpb24oKSB7fVxuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgdHlwZURlZiwgbG9jYXRpb24pIHtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiB0eXBlRGVmKSB7XG4gICAgICAvLyBpZiAodHlwZURlZi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgIC8vICAgLy8gdXNlIGEgd2FybmluZyBpbnN0ZWFkIG9mIGFuIF9pbnZhcmlhbnQgc28gY29tcG9uZW50c1xuICAgICAgLy8gICAvLyBkb24ndCBzaG93IHVwIGluIHByb2QgYnV0IG9ubHkgaW4gX19ERVZfX1xuICAgICAgLy8gICAvLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gICAvLyAgIHdhcm5pbmcoXG4gICAgICAvLyAgIC8vICAgICB0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsXG4gICAgICAvLyAgIC8vICAgICAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICtcbiAgICAgIC8vICAgLy8gICAgICAgJ1JlYWN0LlByb3BUeXBlcy4nLFxuICAgICAgLy8gICAvLyAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q2xhc3MnLFxuICAgICAgLy8gICAvLyAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLFxuICAgICAgLy8gICAvLyAgICAgcHJvcE5hbWVcbiAgICAgIC8vICAgLy8gICApO1xuICAgICAgLy8gICAvLyB9XG4gICAgICAvLyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKSB7XG4gICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpXG4gICAgICA/IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV1cbiAgICAgIDogbnVsbDtcblxuICAgIC8vIERpc2FsbG93IG92ZXJyaWRpbmcgb2YgYmFzZSBjbGFzcyBtZXRob2RzIHVubGVzcyBleHBsaWNpdGx5IGFsbG93ZWQuXG4gICAgaWYgKFJlYWN0Q2xhc3NNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgLy8gX2ludmFyaWFudChcbiAgICAgIC8vICAgc3BlY1BvbGljeSA9PT0gJ09WRVJSSURFX0JBU0UnLFxuICAgICAgLy8gICAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIG92ZXJyaWRlICcgK1xuICAgICAgLy8gICAgICdgJXNgIGZyb20geW91ciBjbGFzcyBzcGVjaWZpY2F0aW9uLiBFbnN1cmUgdGhhdCB5b3VyIG1ldGhvZCBuYW1lcyAnICtcbiAgICAgIC8vICAgICAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsXG4gICAgICAvLyAgIG5hbWVcbiAgICAgIC8vICk7XG4gICAgfVxuXG4gICAgLy8gRGlzYWxsb3cgZGVmaW5pbmcgbWV0aG9kcyBtb3JlIHRoYW4gb25jZSB1bmxlc3MgZXhwbGljaXRseSBhbGxvd2VkLlxuICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAvLyBfaW52YXJpYW50KFxuICAgICAgLy8gICBzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTlknIHx8IHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuICAgICAgLy8gICAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICtcbiAgICAgIC8vICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlICcgK1xuICAgICAgLy8gICAgICd0byBhIG1peGluLicsXG4gICAgICAvLyAgIG5hbWVcbiAgICAgIC8vICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1peGluIGhlbHBlciB3aGljaCBoYW5kbGVzIHBvbGljeSB2YWxpZGF0aW9uIGFuZCByZXNlcnZlZFxuICAgKiBzcGVjaWZpY2F0aW9uIGtleXMgd2hlbiBidWlsZGluZyBSZWFjdCBjbGFzc2VzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMpIHtcbiAgICAgIC8vIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyAgIHZhciB0eXBlb2ZTcGVjID0gdHlwZW9mIHNwZWM7XG4gICAgICAvLyAgIHZhciBpc01peGluVmFsaWQgPSB0eXBlb2ZTcGVjID09PSAnb2JqZWN0JyAmJiBzcGVjICE9PSBudWxsO1xuICAgICAgLy9cbiAgICAgIC8vICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vICAgICB3YXJuaW5nKFxuICAgICAgLy8gICAgICAgaXNNaXhpblZhbGlkLFxuICAgICAgLy8gICAgICAgXCIlczogWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5jbHVkZSBhIG1peGluIHRoYXQgaXMgZWl0aGVyIG51bGwgXCIgK1xuICAgICAgLy8gICAgICAgICAnb3Igbm90IGFuIG9iamVjdC4gQ2hlY2sgdGhlIG1peGlucyBpbmNsdWRlZCBieSB0aGUgY29tcG9uZW50LCAnICtcbiAgICAgIC8vICAgICAgICAgJ2FzIHdlbGwgYXMgYW55IG1peGlucyB0aGV5IGluY2x1ZGUgdGhlbXNlbHZlcy4gJyArXG4gICAgICAvLyAgICAgICAgICdFeHBlY3RlZCBvYmplY3QgYnV0IGdvdCAlcy4nLFxuICAgICAgLy8gICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q2xhc3MnLFxuICAgICAgLy8gICAgICAgc3BlYyA9PT0gbnVsbCA/IG51bGwgOiB0eXBlb2ZTcGVjXG4gICAgICAvLyAgICAgKTtcbiAgICAgIC8vICAgfVxuICAgICAgLy8gfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gX2ludmFyaWFudChcbiAgICAvLyAgIHR5cGVvZiBzcGVjICE9PSAnZnVuY3Rpb24nLFxuICAgIC8vICAgXCJSZWFjdENsYXNzOiBZb3UncmUgYXR0ZW1wdGluZyB0byBcIiArXG4gICAgLy8gICAgICd1c2UgYSBjb21wb25lbnQgY2xhc3Mgb3IgZnVuY3Rpb24gYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSAnICtcbiAgICAvLyAgICAgJ3JlZ3VsYXIgb2JqZWN0LidcbiAgICAvLyApO1xuICAgIC8vIF9pbnZhcmlhbnQoXG4gICAgLy8gICAhaXNWYWxpZEVsZW1lbnQoc3BlYyksXG4gICAgLy8gICBcIlJlYWN0Q2xhc3M6IFlvdSdyZSBhdHRlbXB0aW5nIHRvIFwiICtcbiAgICAvLyAgICAgJ3VzZSBhIGNvbXBvbmVudCBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhIHJlZ3VsYXIgb2JqZWN0LidcbiAgICAvLyApO1xuXG4gICAgdmFyIHByb3RvID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgIHZhciBhdXRvQmluZFBhaXJzID0gcHJvdG8uX19yZWFjdEF1dG9CaW5kUGFpcnM7XG5cbiAgICAvLyBCeSBoYW5kbGluZyBtaXhpbnMgYmVmb3JlIGFueSBvdGhlciBwcm9wZXJ0aWVzLCB3ZSBlbnN1cmUgdGhlIHNhbWVcbiAgICAvLyBjaGFpbmluZyBvcmRlciBpcyBhcHBsaWVkIHRvIG1ldGhvZHMgd2l0aCBERUZJTkVfTUFOWSBwb2xpY3ksIHdoZXRoZXJcbiAgICAvLyBtaXhpbnMgYXJlIGxpc3RlZCBiZWZvcmUgb3IgYWZ0ZXIgdGhlc2UgbWV0aG9kcyBpbiB0aGUgc3BlYy5cbiAgICBpZiAoc3BlYy5oYXNPd25Qcm9wZXJ0eShNSVhJTlNfS0VZKSkge1xuICAgICAgUkVTRVJWRURfU1BFQ19LRVlTLm1peGlucyhDb25zdHJ1Y3Rvciwgc3BlYy5taXhpbnMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3BlYykge1xuICAgICAgaWYgKCFzcGVjLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobmFtZSA9PT0gTUlYSU5TX0tFWSkge1xuICAgICAgICAvLyBXZSBoYXZlIGFscmVhZHkgaGFuZGxlZCBtaXhpbnMgaW4gYSBzcGVjaWFsIGNhc2UgYWJvdmUuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvcGVydHkgPSBzcGVjW25hbWVdO1xuICAgICAgdmFyIGlzQWxyZWFkeURlZmluZWQgPSBwcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgIHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUoaXNBbHJlYWR5RGVmaW5lZCwgbmFtZSk7XG5cbiAgICAgIGlmIChSRVNFUlZFRF9TUEVDX0tFWVMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgUkVTRVJWRURfU1BFQ19LRVlTW25hbWVdKENvbnN0cnVjdG9yLCBwcm9wZXJ0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZXR1cCBtZXRob2RzIG9uIHByb3RvdHlwZTpcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBtZW1iZXIgbWV0aG9kcyBzaG91bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgYm91bmQ6XG4gICAgICAgIC8vIDEuIEV4cGVjdGVkIFJlYWN0Q2xhc3MgbWV0aG9kcyAoaW4gdGhlIFwiaW50ZXJmYWNlXCIpLlxuICAgICAgICAvLyAyLiBPdmVycmlkZGVuIG1ldGhvZHMgKHRoYXQgd2VyZSBtaXhlZCBpbikuXG4gICAgICAgIHZhciBpc1JlYWN0Q2xhc3NNZXRob2QgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgdmFyIHNob3VsZEF1dG9CaW5kID1cbiAgICAgICAgICBpc0Z1bmN0aW9uICYmXG4gICAgICAgICAgIWlzUmVhY3RDbGFzc01ldGhvZCAmJlxuICAgICAgICAgICFpc0FscmVhZHlEZWZpbmVkICYmXG4gICAgICAgICAgc3BlYy5hdXRvYmluZCAhPT0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNob3VsZEF1dG9CaW5kKSB7XG4gICAgICAgICAgYXV0b0JpbmRQYWlycy5wdXNoKG5hbWUsIHByb3BlcnR5KTtcbiAgICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV07XG5cbiAgICAgICAgICAgIC8vIFRoZXNlIGNhc2VzIHNob3VsZCBhbHJlYWR5IGJlIGNhdWdodCBieSB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlLlxuICAgICAgICAgICAgLy8gX2ludmFyaWFudChcbiAgICAgICAgICAgIC8vICAgaXNSZWFjdENsYXNzTWV0aG9kICYmXG4gICAgICAgICAgICAvLyAgICAgKHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWV9NRVJHRUQnIHx8XG4gICAgICAgICAgICAvLyAgICAgICBzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTlknKSxcbiAgICAgICAgICAgIC8vICAgJ1JlYWN0Q2xhc3M6IFVuZXhwZWN0ZWQgc3BlYyBwb2xpY3kgJXMgZm9yIGtleSAlcyAnICtcbiAgICAgICAgICAgIC8vICAgICAnd2hlbiBtaXhpbmcgaW4gY29tcG9uZW50IHNwZWNzLicsXG4gICAgICAgICAgICAvLyAgIHNwZWNQb2xpY3ksXG4gICAgICAgICAgICAvLyAgIG5hbWVcbiAgICAgICAgICAgIC8vICk7XG5cbiAgICAgICAgICAgIC8vIEZvciBtZXRob2RzIHdoaWNoIGFyZSBkZWZpbmVkIG1vcmUgdGhhbiBvbmNlLCBjYWxsIHRoZSBleGlzdGluZ1xuICAgICAgICAgICAgLy8gbWV0aG9kcyBiZWZvcmUgY2FsbGluZyB0aGUgbmV3IHByb3BlcnR5LCBtZXJnaW5nIGlmIGFwcHJvcHJpYXRlLlxuICAgICAgICAgICAgaWYgKHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWV9NRVJHRUQnKSB7XG4gICAgICAgICAgICAgIHByb3RvW25hbWVdID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3BlY1BvbGljeSA9PT0gJ0RFRklORV9NQU5ZJykge1xuICAgICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgICAgLy8gaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIC8vICAgLy8gQWRkIHZlcmJvc2UgZGlzcGxheU5hbWUgdG8gdGhlIGZ1bmN0aW9uLCB3aGljaCBoZWxwcyB3aGVuIGxvb2tpbmdcbiAgICAgICAgICAgIC8vICAgLy8gYXQgcHJvZmlsaW5nIHRvb2xzLlxuICAgICAgICAgICAgLy8gICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nICYmIHNwZWMuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgICAgIC8vICAgICBwcm90b1tuYW1lXS5kaXNwbGF5TmFtZSA9IHNwZWMuZGlzcGxheU5hbWUgKyAnXycgKyBuYW1lO1xuICAgICAgICAgICAgLy8gICB9XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWl4U3RhdGljU3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHN0YXRpY3MpIHtcbiAgICBpZiAoIXN0YXRpY3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdGF0aWNzKSB7XG4gICAgICB2YXIgcHJvcGVydHkgPSBzdGF0aWNzW25hbWVdO1xuICAgICAgaWYgKCFzdGF0aWNzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNSZXNlcnZlZCA9IG5hbWUgaW4gUkVTRVJWRURfU1BFQ19LRVlTO1xuICAgICAgLy8gX2ludmFyaWFudChcbiAgICAgIC8vICAgIWlzUmVzZXJ2ZWQsXG4gICAgICAvLyAgICdSZWFjdENsYXNzOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lIGEgcmVzZXJ2ZWQgJyArXG4gICAgICAvLyAgICAgJ3Byb3BlcnR5LCBgJXNgLCB0aGF0IHNob3VsZG5cXCd0IGJlIG9uIHRoZSBcInN0YXRpY3NcIiBrZXkuIERlZmluZSBpdCAnICtcbiAgICAgIC8vICAgICAnYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSAnICtcbiAgICAgIC8vICAgICAnY29uc3RydWN0b3IuJyxcbiAgICAgIC8vICAgbmFtZVxuICAgICAgLy8gKTtcblxuICAgICAgdmFyIGlzSW5oZXJpdGVkID0gbmFtZSBpbiBDb25zdHJ1Y3RvcjtcbiAgICAgIC8vIF9pbnZhcmlhbnQoXG4gICAgICAvLyAgICFpc0luaGVyaXRlZCxcbiAgICAgIC8vICAgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArXG4gICAgICAvLyAgICAgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlICcgK1xuICAgICAgLy8gICAgICdkdWUgdG8gYSBtaXhpbi4nLFxuICAgICAgLy8gICBuYW1lXG4gICAgICAvLyApO1xuICAgICAgQ29uc3RydWN0b3JbbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgdHdvIG9iamVjdHMsIGJ1dCB0aHJvdyBpZiBib3RoIGNvbnRhaW4gdGhlIHNhbWUga2V5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb25lIFRoZSBmaXJzdCBvYmplY3QsIHdoaWNoIGlzIG11dGF0ZWQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0d28gVGhlIHNlY29uZCBvYmplY3RcbiAgICogQHJldHVybiB7b2JqZWN0fSBvbmUgYWZ0ZXIgaXQgaGFzIGJlZW4gbXV0YXRlZCB0byBjb250YWluIGV2ZXJ5dGhpbmcgaW4gdHdvLlxuICAgKi9cbiAgZnVuY3Rpb24gbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhvbmUsIHR3bykge1xuICAgIC8vIF9pbnZhcmlhbnQoXG4gICAgLy8gICBvbmUgJiYgdHdvICYmIHR5cGVvZiBvbmUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0d28gPT09ICdvYmplY3QnLFxuICAgIC8vICAgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLidcbiAgICAvLyApO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHR3bykge1xuICAgICAgaWYgKHR3by5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIC8vIF9pbnZhcmlhbnQoXG4gICAgICAgIC8vICAgb25lW2tleV0gPT09IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gICAnbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiAnICtcbiAgICAgICAgLy8gICAgICdUcmllZCB0byBtZXJnZSB0d28gb2JqZWN0cyB3aXRoIHRoZSBzYW1lIGtleTogYCVzYC4gVGhpcyBjb25mbGljdCAnICtcbiAgICAgICAgLy8gICAgICdtYXkgYmUgZHVlIHRvIGEgbWl4aW47IGluIHBhcnRpY3VsYXIsIHRoaXMgbWF5IGJlIGNhdXNlZCBieSB0d28gJyArXG4gICAgICAgIC8vICAgICAnZ2V0SW5pdGlhbFN0YXRlKCkgb3IgZ2V0RGVmYXVsdFByb3BzKCkgbWV0aG9kcyByZXR1cm5pbmcgb2JqZWN0cyAnICtcbiAgICAgICAgLy8gICAgICd3aXRoIGNsYXNoaW5nIGtleXMuJyxcbiAgICAgICAgLy8gICBrZXlcbiAgICAgICAgLy8gKTtcbiAgICAgICAgb25lW2tleV0gPSB0d29ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9uZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIG1lcmdlcyB0aGVpciByZXR1cm4gdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZFJlc3VsdCgpIHtcbiAgICAgIHZhciBhID0gb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB2YXIgYiA9IHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYjtcbiAgICAgIH0gZWxzZSBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgICAgdmFyIGMgPSB7fTtcbiAgICAgIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoYywgYSk7XG4gICAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGIpO1xuICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIGlnbm9yZXMgdGhlaXIgcmV0dXJuIHZhbGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbmUsIHR3bykge1xuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQmluZHMgYSBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgd2hvc2UgbWV0aG9kIGlzIGdvaW5nIHRvIGJlIGJvdW5kLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgTWV0aG9kIHRvIGJlIGJvdW5kLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGJvdW5kIG1ldGhvZC5cbiAgICovXG4gIGZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCkge1xuICAgIHZhciBib3VuZE1ldGhvZCA9IG1ldGhvZC5iaW5kKGNvbXBvbmVudCk7XG4gICAgLy8gaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgLy8gICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgLy8gICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBudWxsO1xuICAgIC8vICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgLy8gICB2YXIgX2JpbmQgPSBib3VuZE1ldGhvZC5iaW5kO1xuICAgIC8vICAgYm91bmRNZXRob2QuYmluZCA9IGZ1bmN0aW9uKG5ld1RoaXMpIHtcbiAgICAvLyAgICAgZm9yIChcbiAgICAvLyAgICAgICB2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgLy8gICAgICAgICBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLFxuICAgIC8vICAgICAgICAgX2tleSA9IDE7XG4gICAgLy8gICAgICAgX2tleSA8IF9sZW47XG4gICAgLy8gICAgICAgX2tleSsrXG4gICAgLy8gICAgICkge1xuICAgIC8vICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIC8vICAgICB9XG4gICAgLy9cbiAgICAvLyAgICAgLy8gVXNlciBpcyB0cnlpbmcgdG8gYmluZCgpIGFuIGF1dG9ib3VuZCBtZXRob2Q7IHdlIGVmZmVjdGl2ZWx5IHdpbGxcbiAgICAvLyAgICAgLy8gaWdub3JlIHRoZSB2YWx1ZSBvZiBcInRoaXNcIiB0aGF0IHRoZSB1c2VyIGlzIHRyeWluZyB0byB1c2UsIHNvXG4gICAgLy8gICAgIC8vIGxldCdzIHdhcm4uXG4gICAgLy8gICAgIGlmIChuZXdUaGlzICE9PSBjb21wb25lbnQgJiYgbmV3VGhpcyAhPT0gbnVsbCkge1xuICAgIC8vICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gICAgICAgICB3YXJuaW5nKFxuICAgIC8vICAgICAgICAgICBmYWxzZSxcbiAgICAvLyAgICAgICAgICAgJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgK1xuICAgIC8vICAgICAgICAgICAgICdjb21wb25lbnQgaW5zdGFuY2UuIFNlZSAlcycsXG4gICAgLy8gICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAgICAvLyAgICAgICAgICk7XG4gICAgLy8gICAgICAgfVxuICAgIC8vICAgICB9IGVsc2UgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgIC8vICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gICAgICAgICB3YXJuaW5nKFxuICAgIC8vICAgICAgICAgICBmYWxzZSxcbiAgICAvLyAgICAgICAgICAgJ2JpbmQoKTogWW91IGFyZSBiaW5kaW5nIGEgY29tcG9uZW50IG1ldGhvZCB0byB0aGUgY29tcG9uZW50LiAnICtcbiAgICAvLyAgICAgICAgICAgICAnUmVhY3QgZG9lcyB0aGlzIGZvciB5b3UgYXV0b21hdGljYWxseSBpbiBhIGhpZ2gtcGVyZm9ybWFuY2UgJyArXG4gICAgLy8gICAgICAgICAgICAgJ3dheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICVzJyxcbiAgICAvLyAgICAgICAgICAgY29tcG9uZW50TmFtZVxuICAgIC8vICAgICAgICAgKTtcbiAgICAvLyAgICAgICB9XG4gICAgLy8gICAgICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHZhciByZWJvdW5kTWV0aG9kID0gX2JpbmQuYXBwbHkoYm91bmRNZXRob2QsIGFyZ3VtZW50cyk7XG4gICAgLy8gICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dCA9IGNvbXBvbmVudDtcbiAgICAvLyAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgLy8gICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gYXJncztcbiAgICAvLyAgICAgcmV0dXJuIHJlYm91bmRNZXRob2Q7XG4gICAgLy8gICB9O1xuICAgIC8vIH1cbiAgICByZXR1cm4gYm91bmRNZXRob2Q7XG4gIH1cblxuICAvKipcbiAgICogQmluZHMgYWxsIGF1dG8tYm91bmQgbWV0aG9kcyBpbiBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgd2hvc2UgbWV0aG9kIGlzIGdvaW5nIHRvIGJlIGJvdW5kLlxuICAgKi9cbiAgZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kcyhjb21wb25lbnQpIHtcbiAgICB2YXIgcGFpcnMgPSBjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kUGFpcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgdmFyIGF1dG9CaW5kS2V5ID0gcGFpcnNbaV07XG4gICAgICB2YXIgbWV0aG9kID0gcGFpcnNbaSArIDFdO1xuICAgICAgY29tcG9uZW50W2F1dG9CaW5kS2V5XSA9IGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIElzTW91bnRlZFByZU1peGluID0ge1xuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX19pc01vdW50ZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgSXNNb3VudGVkUG9zdE1peGluID0ge1xuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX19pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBtb3JlIHRvIHRoZSBSZWFjdENsYXNzIGJhc2UgY2xhc3MuIFRoZXNlIGFyZSBhbGwgbGVnYWN5IGZlYXR1cmVzIGFuZFxuICAgKiB0aGVyZWZvcmUgbm90IGFscmVhZHkgcGFydCBvZiB0aGUgbW9kZXJuIFJlYWN0Q29tcG9uZW50LlxuICAgKi9cbiAgdmFyIFJlYWN0Q2xhc3NNaXhpbiA9IHtcbiAgICAvKipcbiAgICAgKiBUT0RPOiBUaGlzIHdpbGwgYmUgZGVwcmVjYXRlZCBiZWNhdXNlIHN0YXRlIHNob3VsZCBhbHdheXMga2VlcCBhIGNvbnNpc3RlbnRcbiAgICAgKiB0eXBlIHNpZ25hdHVyZSBhbmQgdGhlIG9ubHkgdXNlIGNhc2UgZm9yIHRoaXMsIGlzIHRvIGF2b2lkIHRoYXQuXG4gICAgICovXG4gICAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbihuZXdTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKHRoaXMsIG5ld1N0YXRlLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQGZpbmFsXG4gICAgICovXG4gICAgaXNNb3VudGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyAgIHdhcm5pbmcoXG4gICAgICAvLyAgICAgdGhpcy5fX2RpZFdhcm5Jc01vdW50ZWQsXG4gICAgICAvLyAgICAgJyVzOiBpc01vdW50ZWQgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwICcgK1xuICAgICAgLy8gICAgICAgJ3N1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gY29tcG9uZW50V2lsbFVubW91bnQgdG8gJyArXG4gICAgICAvLyAgICAgICAncHJldmVudCBtZW1vcnkgbGVha3MuJyxcbiAgICAgIC8vICAgICAodGhpcy5jb25zdHJ1Y3RvciAmJiB0aGlzLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lKSB8fFxuICAgICAgLy8gICAgICAgdGhpcy5uYW1lIHx8XG4gICAgICAvLyAgICAgICAnQ29tcG9uZW50J1xuICAgICAgLy8gICApO1xuICAgICAgLy8gICB0aGlzLl9fZGlkV2FybklzTW91bnRlZCA9IHRydWU7XG4gICAgICAvLyB9XG4gICAgICByZXR1cm4gISF0aGlzLl9faXNNb3VudGVkO1xuICAgIH1cbiAgfTtcblxuICB2YXIgUmVhY3RDbGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uKCkge307XG4gIF9hc3NpZ24oXG4gICAgUmVhY3RDbGFzc0NvbXBvbmVudC5wcm90b3R5cGUsXG4gICAgUmVhY3RDb21wb25lbnQucHJvdG90eXBlLFxuICAgIFJlYWN0Q2xhc3NNaXhpblxuICApO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY29tcG9zaXRlIGNvbXBvbmVudCBjbGFzcyBnaXZlbiBhIGNsYXNzIHNwZWNpZmljYXRpb24uXG4gICAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jcmVhdGVjbGFzc1xuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3BlYyBDbGFzcyBzcGVjaWZpY2F0aW9uICh3aGljaCBtdXN0IGRlZmluZSBgcmVuZGVyYCkuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBDb21wb25lbnQgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZUNsYXNzKHNwZWMpIHtcbiAgICAvLyBUbyBrZWVwIG91ciB3YXJuaW5ncyBtb3JlIHVuZGVyc3RhbmRhYmxlLCB3ZSdsbCB1c2UgYSBsaXR0bGUgaGFjayBoZXJlIHRvXG4gICAgLy8gZW5zdXJlIHRoYXQgQ29uc3RydWN0b3IubmFtZSAhPT0gJ0NvbnN0cnVjdG9yJy4gVGhpcyBtYWtlcyBzdXJlIHdlIGRvbid0XG4gICAgLy8gdW5uZWNlc3NhcmlseSBpZGVudGlmeSBhIGNsYXNzIHdpdGhvdXQgZGlzcGxheU5hbWUgYXMgJ0NvbnN0cnVjdG9yJy5cbiAgICB2YXIgQ29uc3RydWN0b3IgPSBpZGVudGl0eShmdW5jdGlvbihwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICAgICAgLy8gVGhpcyBjb25zdHJ1Y3RvciBnZXRzIG92ZXJyaWRkZW4gYnkgbW9ja3MuIFRoZSBhcmd1bWVudCBpcyB1c2VkXG4gICAgICAvLyBieSBtb2NrcyB0byBhc3NlcnQgb24gd2hhdCBnZXRzIG1vdW50ZWQuXG5cbiAgICAgIC8vIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyAgIHdhcm5pbmcoXG4gICAgICAvLyAgICAgdGhpcyBpbnN0YW5jZW9mIENvbnN0cnVjdG9yLFxuICAgICAgLy8gICAgICdTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciAnICtcbiAgICAgIC8vICAgICAgICdKU1ggaW5zdGVhZC4gU2VlOiBodHRwczovL2ZiLm1lL3JlYWN0LWxlZ2FjeWZhY3RvcnknXG4gICAgICAvLyAgICk7XG4gICAgICAvLyB9XG5cbiAgICAgIC8vIFdpcmUgdXAgYXV0by1iaW5kaW5nXG4gICAgICBpZiAodGhpcy5fX3JlYWN0QXV0b0JpbmRQYWlycy5sZW5ndGgpIHtcbiAgICAgICAgYmluZEF1dG9CaW5kTWV0aG9kcyh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICAgICAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcblxuICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG5cbiAgICAgIC8vIFJlYWN0Q2xhc3NlcyBkb2Vzbid0IGhhdmUgY29uc3RydWN0b3JzLiBJbnN0ZWFkLCB0aGV5IHVzZSB0aGVcbiAgICAgIC8vIGdldEluaXRpYWxTdGF0ZSBhbmQgY29tcG9uZW50V2lsbE1vdW50IG1ldGhvZHMgZm9yIGluaXRpYWxpemF0aW9uLlxuXG4gICAgICB2YXIgaW5pdGlhbFN0YXRlID0gdGhpcy5nZXRJbml0aWFsU3RhdGUgPyB0aGlzLmdldEluaXRpYWxTdGF0ZSgpIDogbnVsbDtcbiAgICAgIC8vIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyAgIC8vIFdlIGFsbG93IGF1dG8tbW9ja3MgdG8gcHJvY2VlZCBhcyBpZiB0aGV5J3JlIHJldHVybmluZyBudWxsLlxuICAgICAgLy8gICBpZiAoXG4gICAgICAvLyAgICAgaW5pdGlhbFN0YXRlID09PSB1bmRlZmluZWQgJiZcbiAgICAgIC8vICAgICB0aGlzLmdldEluaXRpYWxTdGF0ZS5faXNNb2NrRnVuY3Rpb25cbiAgICAgIC8vICAgKSB7XG4gICAgICAvLyAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBiYWQgcHJhY3RpY2UuIENvbnNpZGVyIHdhcm5pbmcgaGVyZSBhbmRcbiAgICAgIC8vICAgICAvLyBkZXByZWNhdGluZyB0aGlzIGNvbnZlbmllbmNlLlxuICAgICAgLy8gICAgIGluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vIH1cbiAgICAgIC8vIF9pbnZhcmlhbnQoXG4gICAgICAvLyAgIHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGluaXRpYWxTdGF0ZSksXG4gICAgICAvLyAgICclcy5nZXRJbml0aWFsU3RhdGUoKTogbXVzdCByZXR1cm4gYW4gb2JqZWN0IG9yIG51bGwnLFxuICAgICAgLy8gICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnXG4gICAgICAvLyApO1xuXG4gICAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIH0pO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IG5ldyBSZWFjdENsYXNzQ29tcG9uZW50KCk7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLl9fcmVhY3RBdXRvQmluZFBhaXJzID0gW107XG5cbiAgICBpbmplY3RlZE1peGlucy5mb3JFYWNoKG1peFNwZWNJbnRvQ29tcG9uZW50LmJpbmQobnVsbCwgQ29uc3RydWN0b3IpKTtcblxuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBJc01vdW50ZWRQcmVNaXhpbik7XG4gICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpO1xuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBJc01vdW50ZWRQb3N0TWl4aW4pO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgZGVmYXVsdFByb3BzIHByb3BlcnR5IGFmdGVyIGFsbCBtaXhpbnMgaGF2ZSBiZWVuIG1lcmdlZC5cbiAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5kZWZhdWx0UHJvcHMgPSBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMoKTtcbiAgICB9XG5cbiAgICAvLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICAgLy8gVGhpcyBpcyBhIHRhZyB0byBpbmRpY2F0ZSB0aGF0IHRoZSB1c2Ugb2YgdGhlc2UgbWV0aG9kIG5hbWVzIGlzIG9rLFxuICAgIC8vICAgLy8gc2luY2UgaXQncyB1c2VkIHdpdGggY3JlYXRlQ2xhc3MuIElmIGl0J3Mgbm90LCB0aGVuIGl0J3MgbGlrZWx5IGFcbiAgICAvLyAgIC8vIG1pc3Rha2Ugc28gd2UnbGwgd2FybiB5b3UgdG8gdXNlIHRoZSBzdGF0aWMgcHJvcGVydHksIHByb3BlcnR5XG4gICAgLy8gICAvLyBpbml0aWFsaXplciBvciBjb25zdHJ1Y3RvciByZXNwZWN0aXZlbHkuXG4gICAgLy8gICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgLy8gICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgIC8vICAgfVxuICAgIC8vICAgaWYgKENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUpIHtcbiAgICAvLyAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgIC8vICAgfVxuICAgIC8vIH1cblxuICAgIC8vIF9pbnZhcmlhbnQoXG4gICAgLy8gICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVuZGVyLFxuICAgIC8vICAgJ2NyZWF0ZUNsYXNzKC4uLik6IENsYXNzIHNwZWNpZmljYXRpb24gbXVzdCBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuJ1xuICAgIC8vICk7XG5cbiAgICAvLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICAgd2FybmluZyhcbiAgICAvLyAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRTaG91bGRVcGRhdGUsXG4gICAgLy8gICAgICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgK1xuICAgIC8vICAgICAgICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICtcbiAgICAvLyAgICAgICAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgK1xuICAgIC8vICAgICAgICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLFxuICAgIC8vICAgICBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCdcbiAgICAvLyAgICk7XG4gICAgLy8gICB3YXJuaW5nKFxuICAgIC8vICAgICAhQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMsXG4gICAgLy8gICAgICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgK1xuICAgIC8vICAgICAgICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/JyxcbiAgICAvLyAgICAgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnXG4gICAgLy8gICApO1xuICAgIC8vIH1cblxuICAgIC8vIFJlZHVjZSB0aW1lIHNwZW50IGRvaW5nIGxvb2t1cHMgYnkgc2V0dGluZyB0aGVzZSBvbiB0aGUgcHJvdG90eXBlLlxuICAgIGZvciAodmFyIG1ldGhvZE5hbWUgaW4gUmVhY3RDbGFzc0ludGVyZmFjZSkge1xuICAgICAgaWYgKCFDb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlQ2xhc3M7XG59XG4pO1xuXG52YXIgcmVhY3ROb29wVXBkYXRlUXVldWUgPSBuZXcgUmVhY3QuQ29tcG9uZW50KCkudXBkYXRlcjtcblxudmFyIGNyZWF0ZUNsYXNzID0gZmFjdG9yeShSZWFjdC5Db21wb25lbnQsIFJlYWN0LmlzVmFsaWRFbGVtZW50LCByZWFjdE5vb3BVcGRhdGVRdWV1ZSk7XG5cbmV4cG9ydHMuX2Fzc2lnbiA9IF9hc3NpZ247XG5leHBvcnRzLmVtcHR5T2JqZWN0ID0gZW1wdHlPYmplY3Q7XG5leHBvcnRzLmZhY3RvcnkgPSBmYWN0b3J5O1xuZXhwb3J0cy5yZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xuZXhwb3J0cy5jcmVhdGVDbGFzcyA9IGNyZWF0ZUNsYXNzO1xuLyogIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHE9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sdD1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNix2PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdz1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx5PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx6PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxBPXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6XG42MDExMixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cImh0dHA6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsYz0wO2M8YjtjKyspZSs9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtuKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9dmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O1xuZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxEfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0MoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RH12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RzttKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEwoYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLGw9MDtsPGY7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6SS5jdXJyZW50fX1cbmZ1bmN0aW9uIE0oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXR9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIlxceDNkXCI6XCJcXHgzZDBcIixcIjpcIjpcIlxceDNkMlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTj0vXFwvKy9nLE89W107ZnVuY3Rpb24gUChhLGIsZSxjKXtpZihPLmxlbmd0aCl7dmFyIGQ9Ty5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fWZ1bmN0aW9uIFEoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5PLmxlbmd0aCYmTy5wdXNoKGEpfVxuZnVuY3Rpb24gUihhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgdDpjYXNlIHU6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrUyhhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitTKGQsaCk7Zys9UihkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksXG5oPTA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1MoZCxoKyspLGcrPVIoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsQyhcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gUyhhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVChhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBVKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGUscS50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoTShhKSYmKGI9ZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxjLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpO2I9UChiLGcsYyxkKTtudWxsPT1hfHxSKGEsXCJcIixVLGIpO1EoYil9XG52YXIgVz17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1QKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFIoYSxcIlwiLFQsYik7UShiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpSKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TShhKT92b2lkIDA6QyhcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnksXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jaGFuZ2VkQml0czowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOnosY3JlYXRlRWxlbWVudDpMLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7bnVsbD09PWF8fHZvaWQgMD09PWE/QyhcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZD1tKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUkuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBrPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJlxuKGs9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilKLmNhbGwoYixjKSYmIUsuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWs/a1tjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YylkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGMpe2s9QXJyYXkoYyk7Zm9yKHZhciBsPTA7bDxjO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31yZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1MLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6TSx2ZXJzaW9uOlwiMTYuMy4yXCIsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudE93bmVyOkksYXNzaWduOm19fSxYPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6V30pLFxuWT1YJiZXfHxYO21vZHVsZS5leHBvcnRzPVlbXCJkZWZhdWx0XCJdP1lbXCJkZWZhdWx0XCJdOlk7XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBUIFZFUlNJT04gMy4wLjAsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3NzID0gcmVxdWlyZShcImJzLWNzcy9saWIvanMvc3JjL0Nzcy5qc1wiKTtcbnZhciBMaXN0ID0gcmVxdWlyZShcImJzLXBsYXRmb3JtL2xpYi9qcy9saXN0LmpzXCIpO1xudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIFJlYXNvblJlYWN0ID0gcmVxdWlyZShcInJlYXNvbi1yZWFjdC9saWIvanMvc3JjL1JlYXNvblJlYWN0LmpzXCIpO1xuXG5SZWFzb25SZWFjdC5zdGF0ZWxlc3NDb21wb25lbnQoXCJDYXJkXCIpO1xuXG52YXIgY2FyZF8wMDAgPSBDc3MuYmFja2dyb3VuZENvbG9yKENzcy53aGl0ZSk7XG5cbnZhciBjYXJkXzAwMSA9IC8qIDo6ICovW1xuICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gIC8qIDo6ICovW1xuICAgIENzcy5mbGV4RGlyZWN0aW9uKENzcy5jb2x1bW4pLFxuICAgIC8qIDo6ICovW1xuICAgICAgQ3NzLmp1c3RpZnlDb250ZW50KENzcy5zcGFjZUJldHdlZW4pLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5ib3hTaGFkb3coLyogTm9uZSAqLzAsIC8qIFNvbWUgKi9bQ3NzLnB4KDQpXSwgLyogU29tZSAqL1tDc3MucHgoNildLCAvKiBOb25lICovMCwgLyogTm9uZSAqLzAsIENzcy5yZ2JhKDAsIDAsIDAsIDAuMykpLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBDc3MuYm9yZGVyU3R5bGUoQ3NzLnNvbGlkKSxcbiAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgIENzcy5ib3JkZXJSYWRpdXMoQ3NzLnB4KDUpKSxcbiAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICBDc3MuYm9yZGVyV2lkdGgoQ3NzLnB4KDMpKSxcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgQ3NzLnBhZGRpbmcoQ3NzLnB4KDEwKSksXG4gICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBDc3MubWluV2lkdGgoQ3NzLnB4KDc1KSksXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgQ3NzLmJhY2tmYWNlVmlzaWJpbGl0eSgvKiBoaWRkZW4gKi8tODYyNTg0OTgyKSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdXG4gICAgICAgICAgXVxuICAgICAgICBdXG4gICAgICBdXG4gICAgXVxuICBdXG5dO1xuXG52YXIgY2FyZCA9IC8qIDo6ICovW1xuICBjYXJkXzAwMCxcbiAgY2FyZF8wMDFcbl07XG5cbnZhciBjYXJkRmxpcHBlZCA9IENzcy5zdHlsZShMaXN0LmNvbmNhdCgvKiA6OiAqL1tcbiAgICAgICAgICBjYXJkLFxuICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgIENzcy50cmFuc2l0aW9uKC8qIFNvbWUgKi9bMTAwMF0sIC8qIE5vbmUgKi8wLCAvKiBOb25lICovMCwgXCJ0cmFuc2Zvcm1cIiksXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIENzcy50cmFuc2Zvcm1TdHlsZSgvKiBwcmVzZXJ2ZTNkICovNTg5NzAyMDQ1KSxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIENzcy50cmFuc2Zvcm0oQ3NzLnJvdGF0ZVkoQ3NzLmRlZygwKSkpLFxuICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgXVxuICAgICAgICBdKSk7XG5cbnZhciBjYXJkVW5GbGlwcGVkID0gQ3NzLnN0eWxlKExpc3QuY29uY2F0KC8qIDo6ICovW1xuICAgICAgICAgIGNhcmQsXG4gICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgQ3NzLnRyYW5zaXRpb24oLyogU29tZSAqL1sxMDAwXSwgLyogTm9uZSAqLzAsIC8qIE5vbmUgKi8wLCBcInRyYW5zZm9ybVwiKSxcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgQ3NzLnRyYW5zZm9ybVN0eWxlKC8qIHByZXNlcnZlM2QgKi81ODk3MDIwNDUpLFxuICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgQ3NzLnRyYW5zZm9ybShDc3Mucm90YXRlWShDc3MuZGVnKDE4MCkpKSxcbiAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF1cbiAgICAgICAgXSkpO1xuXG52YXIgdG9wU3R5bGUgPSBDc3Muc3R5bGUoLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAvKiBbXSAqLzBcbiAgICBdKTtcblxudmFyIG1pZGRsZVN0eWxlID0gQ3NzLnN0eWxlKC8qIDo6ICovW1xuICAgICAgQ3NzLmRpc3BsYXkoQ3NzLmZsZXhCb3gpLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5qdXN0aWZ5Q29udGVudChDc3MuY2VudGVyKSxcbiAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgQ3NzLmZvbnRTaXplKENzcy5weCgxMDApKSxcbiAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgXVxuICAgICAgXVxuICAgIF0pO1xuXG52YXIgYm90dG9tU3R5bGUgPSBDc3Muc3R5bGUoLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3NzLmp1c3RpZnlDb250ZW50KENzcy5mbGV4RW5kKSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdXG4gICAgXSk7XG5cbmZ1bmN0aW9uIGFjdGlvbkJ1dHRvbihkaXNhYmxlZCkge1xuICByZXR1cm4gQ3NzLnN0eWxlKC8qIDo6ICovW1xuICAgICAgICAgICAgICBDc3MuYmFja2dyb3VuZChkaXNhYmxlZCA/IENzcy5kYXJrZ3JheSA6IENzcy53aGl0ZSksXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIENzcy5jb2xvcihDc3MuYmxhY2spLFxuICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgQ3NzLmJvcmRlcihDc3MucHgoMSksIENzcy5zb2xpZCwgQ3NzLmJsYWNrKSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBDc3MuYm9yZGVyUmFkaXVzKENzcy5weCgzKSksXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSk7XG59XG5cbnZhciBTdHlsZXMgPSAvKiBtb2R1bGUgKi9bXG4gIC8qIGNhcmQgKi9jYXJkLFxuICAvKiBjYXJkRmxpcHBlZCAqL2NhcmRGbGlwcGVkLFxuICAvKiBjYXJkVW5GbGlwcGVkICovY2FyZFVuRmxpcHBlZCxcbiAgLyogdG9wU3R5bGUgKi90b3BTdHlsZSxcbiAgLyogbWlkZGxlU3R5bGUgKi9taWRkbGVTdHlsZSxcbiAgLyogYm90dG9tU3R5bGUgKi9ib3R0b21TdHlsZSxcbiAgLyogYWN0aW9uQnV0dG9uICovYWN0aW9uQnV0dG9uXG5dO1xuXG5mdW5jdGlvbiBzdHlsZVRvU3RyaW5nKHN0eWxlKSB7XG4gIGlmICh0eXBlb2Ygc3R5bGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlIDAgOiBcbiAgICAgICAgICByZXR1cm4gXCJKYWNrXCI7XG4gICAgICBjYXNlIDEgOiBcbiAgICAgICAgICByZXR1cm4gXCJRdWVlblwiO1xuICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgcmV0dXJuIFwiS2luZ1wiO1xuICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgcmV0dXJuIFwiQWNlXCI7XG4gICAgICBcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFN0cmluZyhzdHlsZVswXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3VpdFRvU3ltYm9sKHN1aXQpIHtcbiAgc3dpdGNoIChzdWl0KSB7XG4gICAgY2FzZSAwIDogXG4gICAgICAgIHJldHVybiBcIlxcdTI2NjVcIjtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIFwiXFx1MjY2NlwiO1xuICAgIGNhc2UgMiA6IFxuICAgICAgICByZXR1cm4gXCJcXHUyNjYwXCI7XG4gICAgY2FzZSAzIDogXG4gICAgICAgIHJldHVybiBcIlxcdTI2NjNcIjtcbiAgICBcbiAgfVxufVxuXG52YXIgY29tcG9uZW50ID0gUmVhc29uUmVhY3Quc3RhdGVsZXNzQ29tcG9uZW50KFwiQ2FyZFwiKTtcblxuZnVuY3Rpb24gbWFrZShzdWl0LCBjYXJkU3R5bGUsICRzdGFyb3B0JHN0YXIsIF8sIF8kMSkge1xuICB2YXIgZmxpcHBlZCA9ICRzdGFyb3B0JHN0YXIgPyAkc3Rhcm9wdCRzdGFyWzBdIDogdHJ1ZTtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBkZWJ1Z05hbWUgKi9jb21wb25lbnRbLyogZGVidWdOYW1lICovMF0sXG4gICAgICAgICAgLyogcmVhY3RDbGFzc0ludGVybmFsICovY29tcG9uZW50Wy8qIHJlYWN0Q2xhc3NJbnRlcm5hbCAqLzFdLFxuICAgICAgICAgIC8qIGhhbmRlZE9mZlN0YXRlICovY29tcG9uZW50Wy8qIGhhbmRlZE9mZlN0YXRlICovMl0sXG4gICAgICAgICAgLyogd2lsbFJlY2VpdmVQcm9wcyAqL2NvbXBvbmVudFsvKiB3aWxsUmVjZWl2ZVByb3BzICovM10sXG4gICAgICAgICAgLyogZGlkTW91bnQgKi9jb21wb25lbnRbLyogZGlkTW91bnQgKi80XSxcbiAgICAgICAgICAvKiBkaWRVcGRhdGUgKi9jb21wb25lbnRbLyogZGlkVXBkYXRlICovNV0sXG4gICAgICAgICAgLyogd2lsbFVubW91bnQgKi9jb21wb25lbnRbLyogd2lsbFVubW91bnQgKi82XSxcbiAgICAgICAgICAvKiB3aWxsVXBkYXRlICovY29tcG9uZW50Wy8qIHdpbGxVcGRhdGUgKi83XSxcbiAgICAgICAgICAvKiBzaG91bGRVcGRhdGUgKi9jb21wb25lbnRbLyogc2hvdWxkVXBkYXRlICovOF0sXG4gICAgICAgICAgLyogcmVuZGVyICovKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGZsaXBwZWQgPyBjYXJkRmxpcHBlZCA6IGNhcmRVbkZsaXBwZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiB0b3BTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgdW5kZWZpbmVkLCBzdHlsZVRvU3RyaW5nKGNhcmRTdHlsZSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCwgc3VpdFRvU3ltYm9sKHN1aXQpKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBtaWRkbGVTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHN1aXRUb1N5bWJvbChzdWl0KSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBib3R0b21TdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgdW5kZWZpbmVkLCBzdHlsZVRvU3RyaW5nKGNhcmRTdHlsZSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCwgc3VpdFRvU3ltYm9sKHN1aXQpKSkpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgLyogaW5pdGlhbFN0YXRlICovY29tcG9uZW50Wy8qIGluaXRpYWxTdGF0ZSAqLzEwXSxcbiAgICAgICAgICAvKiByZXRhaW5lZFByb3BzICovY29tcG9uZW50Wy8qIHJldGFpbmVkUHJvcHMgKi8xMV0sXG4gICAgICAgICAgLyogcmVkdWNlciAqL2NvbXBvbmVudFsvKiByZWR1Y2VyICovMTJdLFxuICAgICAgICAgIC8qIHN1YnNjcmlwdGlvbnMgKi9jb21wb25lbnRbLyogc3Vic2NyaXB0aW9ucyAqLzEzXSxcbiAgICAgICAgICAvKiBqc0VsZW1lbnRXcmFwcGVkICovY29tcG9uZW50Wy8qIGpzRWxlbWVudFdyYXBwZWQgKi8xNF1cbiAgICAgICAgXTtcbn1cblxuZXhwb3J0cy5TdHlsZXMgPSBTdHlsZXM7XG5leHBvcnRzLnN0eWxlVG9TdHJpbmcgPSBzdHlsZVRvU3RyaW5nO1xuZXhwb3J0cy5zdWl0VG9TeW1ib2wgPSBzdWl0VG9TeW1ib2w7XG5leHBvcnRzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbmV4cG9ydHMubWFrZSA9IG1ha2U7XG4vKiAgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQgVkVSU0lPTiAzLjAuMCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDc3MgPSByZXF1aXJlKFwiYnMtY3NzL2xpYi9qcy9zcmMvQ3NzLmpzXCIpO1xudmFyIENhcmQgPSByZXF1aXJlKFwiLi9DYXJkXCIpO1xudmFyICQkQXJyYXkgPSByZXF1aXJlKFwiYnMtcGxhdGZvcm0vbGliL2pzL2FycmF5LmpzXCIpO1xudmFyIExvZ2ljID0gcmVxdWlyZShcIi4vbG9naWNcIik7XG52YXIgVHJhbnNpdGlvbiA9IHJlcXVpcmUoXCIuL1RyYW5zaXRpb25cIik7XG52YXIgUmVhc29uUmVhY3QgPSByZXF1aXJlKFwicmVhc29uLXJlYWN0L2xpYi9qcy9zcmMvUmVhc29uUmVhY3QuanNcIik7XG5cbigocmVxdWlyZSgnLi9tYWluLmNzcycpKSk7XG5cbnZhciBjb21wb25lbnQgPSBSZWFzb25SZWFjdC5zdGF0ZWxlc3NDb21wb25lbnQoXCJIYW5kXCIpO1xuXG52YXIgaGFuZCA9IENzcy5zdHlsZSgvKiA6OiAqL1tcbiAgICAgIENzcy5kaXNwbGF5KENzcy5mbGV4Qm94KSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MuanVzdGlmeUNvbnRlbnQoQ3NzLmNlbnRlciksXG4gICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgIENzcy5mbGV4KDEpLFxuICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICBdXG4gICAgICBdXG4gICAgXSk7XG5cbnZhciB0b3BTdHlsZSA9IENzcy5zdHlsZSgvKiA6OiAqL1tcbiAgICAgIENzcy5kaXNwbGF5KENzcy5mbGV4Qm94KSxcbiAgICAgIC8qIFtdICovMFxuICAgIF0pO1xuXG52YXIgbWlkZGxlU3R5bGUgPSBDc3Muc3R5bGUoLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3NzLmp1c3RpZnlDb250ZW50KENzcy5jZW50ZXIpLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBDc3MuZm9udFNpemUoQ3NzLnB4KDEwMCkpLFxuICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICBdXG4gICAgICBdXG4gICAgXSk7XG5cbnZhciBib3R0b21TdHlsZSA9IENzcy5zdHlsZSgvKiA6OiAqL1tcbiAgICAgIENzcy5kaXNwbGF5KENzcy5mbGV4Qm94KSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MuanVzdGlmeUNvbnRlbnQoQ3NzLmZsZXhFbmQpLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF1cbiAgICBdKTtcblxuZnVuY3Rpb24gYWN0aW9uQnV0dG9uKGRpc2FibGVkKSB7XG4gIHJldHVybiBDc3Muc3R5bGUoLyogOjogKi9bXG4gICAgICAgICAgICAgIENzcy5iYWNrZ3JvdW5kKGRpc2FibGVkID8gQ3NzLmRhcmtncmF5IDogQ3NzLndoaXRlKSxcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgQ3NzLmNvbG9yKENzcy5ibGFjayksXG4gICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBDc3MuYm9yZGVyKENzcy5weCgxKSwgQ3NzLnNvbGlkLCBDc3MuYmxhY2spLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIENzcy5ib3JkZXJSYWRpdXMoQ3NzLnB4KDMpKSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbn1cblxudmFyIFN0eWxlcyA9IC8qIG1vZHVsZSAqL1tcbiAgLyogaGFuZCAqL2hhbmQsXG4gIC8qIHRvcFN0eWxlICovdG9wU3R5bGUsXG4gIC8qIG1pZGRsZVN0eWxlICovbWlkZGxlU3R5bGUsXG4gIC8qIGJvdHRvbVN0eWxlICovYm90dG9tU3R5bGUsXG4gIC8qIGFjdGlvbkJ1dHRvbiAqL2FjdGlvbkJ1dHRvblxuXTtcblxuZnVuY3Rpb24gbWFrZShoYW5kJDEsICRzdGFyb3B0JHN0YXIsIF8pIHtcbiAgdmFyIGhpZGVTZWNvbmRDYXJkID0gJHN0YXJvcHQkc3RhciA/ICRzdGFyb3B0JHN0YXJbMF0gOiBmYWxzZTtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBkZWJ1Z05hbWUgKi9jb21wb25lbnRbLyogZGVidWdOYW1lICovMF0sXG4gICAgICAgICAgLyogcmVhY3RDbGFzc0ludGVybmFsICovY29tcG9uZW50Wy8qIHJlYWN0Q2xhc3NJbnRlcm5hbCAqLzFdLFxuICAgICAgICAgIC8qIGhhbmRlZE9mZlN0YXRlICovY29tcG9uZW50Wy8qIGhhbmRlZE9mZlN0YXRlICovMl0sXG4gICAgICAgICAgLyogd2lsbFJlY2VpdmVQcm9wcyAqL2NvbXBvbmVudFsvKiB3aWxsUmVjZWl2ZVByb3BzICovM10sXG4gICAgICAgICAgLyogZGlkTW91bnQgKi9jb21wb25lbnRbLyogZGlkTW91bnQgKi80XSxcbiAgICAgICAgICAvKiBkaWRVcGRhdGUgKi9jb21wb25lbnRbLyogZGlkVXBkYXRlICovNV0sXG4gICAgICAgICAgLyogd2lsbFVubW91bnQgKi9jb21wb25lbnRbLyogd2lsbFVubW91bnQgKi82XSxcbiAgICAgICAgICAvKiB3aWxsVXBkYXRlICovY29tcG9uZW50Wy8qIHdpbGxVcGRhdGUgKi83XSxcbiAgICAgICAgICAvKiBzaG91bGRVcGRhdGUgKi9jb21wb25lbnRbLyogc2hvdWxkVXBkYXRlICovOF0sXG4gICAgICAgICAgLyogcmVuZGVyICovKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlYXNvblJlYWN0LmVsZW1lbnQoLyogTm9uZSAqLzAsIC8qIE5vbmUgKi8wLCBUcmFuc2l0aW9uLlRyYW5zaXRpb25Hcm91cFsvKiBtYWtlICovMF0oLyogU29tZSAqL1toYW5kXSwgLyogTm9uZSAqLzAsIC8qIGFycmF5ICovWyQkQXJyYXkubWFwaSgoZnVuY3Rpb24gKGksIGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlYXNvblJlYWN0LmVsZW1lbnQoLyogU29tZSAqL1tMb2dpYy5zdWl0VG9TdHJpbmcoaFsvKiBzdWl0ICovMF0pICsgTG9naWMuc3R5bGVUb1N0cmluZyhoWy8qIHN0eWxlICovMV0pXSwgLyogTm9uZSAqLzAsIFRyYW5zaXRpb24uVHJhbnNpdGlvblsvKiBtYWtlICovMl0odHJ1ZSwgMjAsIC8qIE5vbmUgKi8wLCAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZsaXBwZWQgPSBzICE9PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hvdWxkRmxpcCA9IGhpZGVTZWNvbmRDYXJkICYmIGkgPT09IDEgPyBmYWxzZSA6IGZsaXBwZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWFzb25SZWFjdC5lbGVtZW50KC8qIFNvbWUgKi9bTG9naWMuc3VpdFRvU3RyaW5nKGhbLyogc3VpdCAqLzBdKSArIExvZ2ljLnN0eWxlVG9TdHJpbmcoaFsvKiBzdHlsZSAqLzFdKV0sIC8qIE5vbmUgKi8wLCBDYXJkLm1ha2UoaFsvKiBzdWl0ICovMF0sIGhbLyogc3R5bGUgKi8xXSwgLyogU29tZSAqL1tzaG91bGRGbGlwXSwgLyogTm9uZSAqLzAsIC8qIGFycmF5ICovW10pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgaGFuZCQxKV0pKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIC8qIGluaXRpYWxTdGF0ZSAqL2NvbXBvbmVudFsvKiBpbml0aWFsU3RhdGUgKi8xMF0sXG4gICAgICAgICAgLyogcmV0YWluZWRQcm9wcyAqL2NvbXBvbmVudFsvKiByZXRhaW5lZFByb3BzICovMTFdLFxuICAgICAgICAgIC8qIHJlZHVjZXIgKi9jb21wb25lbnRbLyogcmVkdWNlciAqLzEyXSxcbiAgICAgICAgICAvKiBzdWJzY3JpcHRpb25zICovY29tcG9uZW50Wy8qIHN1YnNjcmlwdGlvbnMgKi8xM10sXG4gICAgICAgICAgLyoganNFbGVtZW50V3JhcHBlZCAqL2NvbXBvbmVudFsvKiBqc0VsZW1lbnRXcmFwcGVkICovMTRdXG4gICAgICAgIF07XG59XG5cbmV4cG9ydHMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuZXhwb3J0cy5TdHlsZXMgPSBTdHlsZXM7XG5leHBvcnRzLm1ha2UgPSBtYWtlO1xuLyogIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBUIFZFUlNJT04gMy4wLjAsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3NzID0gcmVxdWlyZShcImJzLWNzcy9saWIvanMvc3JjL0Nzcy5qc1wiKTtcbnZhciBIYW5kID0gcmVxdWlyZShcIi4vSGFuZFwiKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbnZhciBSZWFzb25SZWFjdCA9IHJlcXVpcmUoXCJyZWFzb24tcmVhY3QvbGliL2pzL3NyYy9SZWFzb25SZWFjdC5qc1wiKTtcblxudmFyIGNvbXBvbmVudCA9IFJlYXNvblJlYWN0LnN0YXRlbGVzc0NvbXBvbmVudChcIkJvYXJkXCIpO1xuXG52YXIgYm9hcmQgPSBDc3Muc3R5bGUoLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3NzLmZsZXhEaXJlY3Rpb24oQ3NzLmNvbHVtbiksXG4gICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgIENzcy5qdXN0aWZ5Q29udGVudChDc3MuY2VudGVyKSxcbiAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgIENzcy5iYWNrZ3JvdW5kQ29sb3IoQ3NzLmRhcmtvbGl2ZWdyZWVuKSxcbiAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICBDc3MubWluSGVpZ2h0KENzcy52aCg1MC4wKSksXG4gICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgXVxuICAgICAgICAgIF1cbiAgICAgICAgXVxuICAgICAgXVxuICAgIF0pO1xuXG52YXIgdG9wU3R5bGUgPSBDc3Muc3R5bGUoLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAvKiBbXSAqLzBcbiAgICBdKTtcblxudmFyIG1pZGRsZVN0eWxlID0gQ3NzLnN0eWxlKC8qIDo6ICovW1xuICAgICAgQ3NzLmRpc3BsYXkoQ3NzLmZsZXhCb3gpLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5qdXN0aWZ5Q29udGVudChDc3MuY2VudGVyKSxcbiAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgQ3NzLmZvbnRTaXplKENzcy5weCgxMDApKSxcbiAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgXVxuICAgICAgXVxuICAgIF0pO1xuXG52YXIgYm90dG9tU3R5bGUgPSBDc3Muc3R5bGUoLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3NzLmp1c3RpZnlDb250ZW50KENzcy5mbGV4RW5kKSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdXG4gICAgXSk7XG5cbmZ1bmN0aW9uIGFjdGlvbkJ1dHRvbihkaXNhYmxlZCkge1xuICByZXR1cm4gQ3NzLnN0eWxlKC8qIDo6ICovW1xuICAgICAgICAgICAgICBDc3MuYmFja2dyb3VuZChkaXNhYmxlZCA/IENzcy5kYXJrZ3JheSA6IENzcy53aGl0ZSksXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIENzcy5jb2xvcihDc3MuYmxhY2spLFxuICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgQ3NzLmJvcmRlcihDc3MucHgoMSksIENzcy5zb2xpZCwgQ3NzLmJsYWNrKSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBDc3MuYm9yZGVyUmFkaXVzKENzcy5weCgzKSksXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSk7XG59XG5cbnZhciBTdHlsZXMgPSAvKiBtb2R1bGUgKi9bXG4gIC8qIGJvYXJkICovYm9hcmQsXG4gIC8qIHRvcFN0eWxlICovdG9wU3R5bGUsXG4gIC8qIG1pZGRsZVN0eWxlICovbWlkZGxlU3R5bGUsXG4gIC8qIGJvdHRvbVN0eWxlICovYm90dG9tU3R5bGUsXG4gIC8qIGFjdGlvbkJ1dHRvbiAqL2FjdGlvbkJ1dHRvblxuXTtcblxuZnVuY3Rpb24gc2hvdWxkSGlkZURlYWxlckNhcmQoZ2FtZVN0YXRlKSB7XG4gIGlmIChnYW1lU3RhdGUgIT09IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZShwbGF5ZXJIYW5kLCBkZWFsZXJIYW5kLCBnYW1lU3RhdGUsIF8pIHtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBkZWJ1Z05hbWUgKi9jb21wb25lbnRbLyogZGVidWdOYW1lICovMF0sXG4gICAgICAgICAgLyogcmVhY3RDbGFzc0ludGVybmFsICovY29tcG9uZW50Wy8qIHJlYWN0Q2xhc3NJbnRlcm5hbCAqLzFdLFxuICAgICAgICAgIC8qIGhhbmRlZE9mZlN0YXRlICovY29tcG9uZW50Wy8qIGhhbmRlZE9mZlN0YXRlICovMl0sXG4gICAgICAgICAgLyogd2lsbFJlY2VpdmVQcm9wcyAqL2NvbXBvbmVudFsvKiB3aWxsUmVjZWl2ZVByb3BzICovM10sXG4gICAgICAgICAgLyogZGlkTW91bnQgKi9jb21wb25lbnRbLyogZGlkTW91bnQgKi80XSxcbiAgICAgICAgICAvKiBkaWRVcGRhdGUgKi9jb21wb25lbnRbLyogZGlkVXBkYXRlICovNV0sXG4gICAgICAgICAgLyogd2lsbFVubW91bnQgKi9jb21wb25lbnRbLyogd2lsbFVubW91bnQgKi82XSxcbiAgICAgICAgICAvKiB3aWxsVXBkYXRlICovY29tcG9uZW50Wy8qIHdpbGxVcGRhdGUgKi83XSxcbiAgICAgICAgICAvKiBzaG91bGRVcGRhdGUgKi9jb21wb25lbnRbLyogc2hvdWxkVXBkYXRlICovOF0sXG4gICAgICAgICAgLyogcmVuZGVyICovKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGJvYXJkXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBSZWFzb25SZWFjdC5lbGVtZW50KC8qIE5vbmUgKi8wLCAvKiBOb25lICovMCwgSGFuZC5tYWtlKGRlYWxlckhhbmQsIC8qIFNvbWUgKi9bc2hvdWxkSGlkZURlYWxlckNhcmQoZ2FtZVN0YXRlKV0sIC8qIGFycmF5ICovW10pKSwgUmVhc29uUmVhY3QuZWxlbWVudCgvKiBOb25lICovMCwgLyogTm9uZSAqLzAsIEhhbmQubWFrZShwbGF5ZXJIYW5kLCAvKiBOb25lICovMCwgLyogYXJyYXkgKi9bXSkpKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIC8qIGluaXRpYWxTdGF0ZSAqL2NvbXBvbmVudFsvKiBpbml0aWFsU3RhdGUgKi8xMF0sXG4gICAgICAgICAgLyogcmV0YWluZWRQcm9wcyAqL2NvbXBvbmVudFsvKiByZXRhaW5lZFByb3BzICovMTFdLFxuICAgICAgICAgIC8qIHJlZHVjZXIgKi9jb21wb25lbnRbLyogcmVkdWNlciAqLzEyXSxcbiAgICAgICAgICAvKiBzdWJzY3JpcHRpb25zICovY29tcG9uZW50Wy8qIHN1YnNjcmlwdGlvbnMgKi8xM10sXG4gICAgICAgICAgLyoganNFbGVtZW50V3JhcHBlZCAqL2NvbXBvbmVudFsvKiBqc0VsZW1lbnRXcmFwcGVkICovMTRdXG4gICAgICAgIF07XG59XG5cbmV4cG9ydHMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuZXhwb3J0cy5TdHlsZXMgPSBTdHlsZXM7XG5leHBvcnRzLnNob3VsZEhpZGVEZWFsZXJDYXJkID0gc2hvdWxkSGlkZURlYWxlckNhcmQ7XG5leHBvcnRzLm1ha2UgPSBtYWtlO1xuLyogY29tcG9uZW50IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gYmluYXJ5U2VhcmNoKHVwcGVyLCBpZCwgYXJyYXkpIHtcbiAgdmFyIF9sb3dlciA9IDA7XG4gIHZhciBfdXBwZXIgPSB1cHBlcjtcbiAgdmFyIHhzID0gYXJyYXk7XG4gIHZhciBrID0gaWQ7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgdXBwZXIkMSA9IF91cHBlcjtcbiAgICB2YXIgbG93ZXIgPSBfbG93ZXI7XG4gICAgaWYgKGxvd2VyID49IHVwcGVyJDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZpbGUgXFxcImpzX21hcHBlclJ0Lm1sXFxcIiwgbGluZSAzNSwgY2hhcmFjdGVycyA0LTEwXCIpO1xuICAgIH1cbiAgICB2YXIgbWlkID0gKGxvd2VyICsgdXBwZXIkMSB8IDApIC8gMiB8IDA7XG4gICAgdmFyIG1hdGNoID0geHNbbWlkXTtcbiAgICB2YXIgaSA9IG1hdGNoWzBdO1xuICAgIGlmIChpID09PSBrKSB7XG4gICAgICByZXR1cm4gbWF0Y2hbMV07XG4gICAgfSBlbHNlIGlmIChpIDwgaykge1xuICAgICAgX2xvd2VyID0gbWlkICsgMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIF91cHBlciA9IG1pZDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJldlNlYXJjaChsZW4sIGFycmF5LCB4KSB7XG4gIHZhciBfaSA9IDA7XG4gIHZhciBsZW4kMSA9IGxlbjtcbiAgdmFyIHhzID0gYXJyYXk7XG4gIHZhciBrID0geDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPT09IGxlbiQxKSB7XG4gICAgICByZXR1cm4gLyogTm9uZSAqLzA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtYXRjaCA9IHhzW2ldO1xuICAgICAgaWYgKG1hdGNoWzFdID09PSBrKSB7XG4gICAgICAgIHJldHVybiAvKiBTb21lICovW21hdGNoWzBdXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXZTZWFyY2hBc3NlcnQobGVuLCBhcnJheSwgeCkge1xuICB2YXIgbGVuJDEgPSBsZW47XG4gIHZhciBfaSA9IDA7XG4gIHZhciB4cyA9IGFycmF5O1xuICB2YXIgayA9IHg7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID49IGxlbiQxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIFxcXCJqc19tYXBwZXJSdC5tbFxcXCIsIGxpbmUgNjQsIGNoYXJhY3RlcnMgNC0xMFwiKTtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0geHNbaV07XG4gICAgaWYgKG1hdGNoWzFdID09PSBrKSB7XG4gICAgICByZXR1cm4gbWF0Y2hbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9JbnQoaSwgeHMpIHtcbiAgcmV0dXJuIHhzW2ldO1xufVxuXG5mdW5jdGlvbiBmcm9tSW50KGxlbiwgeHMsICQkZW51bSkge1xuICB2YXIgJCRlbnVtJDEgPSAkJGVudW07XG4gIHZhciBfaSA9IDA7XG4gIHZhciBsZW4kMSA9IGxlbjtcbiAgdmFyIHhzJDEgPSB4cztcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPT09IGxlbiQxKSB7XG4gICAgICByZXR1cm4gLyogTm9uZSAqLzA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrID0geHMkMVtpXTtcbiAgICAgIGlmIChrID09PSAkJGVudW0kMSkge1xuICAgICAgICByZXR1cm4gLyogU29tZSAqL1tpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBmcm9tSW50QXNzZXJ0KGxlbiwgeHMsICQkZW51bSkge1xuICB2YXIgbGVuJDEgPSBsZW47XG4gIHZhciAkJGVudW0kMSA9ICQkZW51bTtcbiAgdmFyIF9pID0gMDtcbiAgdmFyIHhzJDEgPSB4cztcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPj0gbGVuJDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZpbGUgXFxcImpzX21hcHBlclJ0Lm1sXFxcIiwgbGluZSA4OCwgY2hhcmFjdGVycyA0LTEwXCIpO1xuICAgIH1cbiAgICB2YXIgayA9IHhzJDFbaV07XG4gICAgaWYgKGsgPT09ICQkZW51bSQxKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnRzLmJpbmFyeVNlYXJjaCA9IGJpbmFyeVNlYXJjaDtcbmV4cG9ydHMucmV2U2VhcmNoID0gcmV2U2VhcmNoO1xuZXhwb3J0cy5yZXZTZWFyY2hBc3NlcnQgPSByZXZTZWFyY2hBc3NlcnQ7XG5leHBvcnRzLnRvSW50ID0gdG9JbnQ7XG5leHBvcnRzLmZyb21JbnQgPSBmcm9tSW50O1xuZXhwb3J0cy5mcm9tSW50QXNzZXJ0ID0gZnJvbUludEFzc2VydDtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gc29tZSh4KSB7XG4gIHJldHVybiAvKiBTb21lICovW3hdO1xufVxuXG5mdW5jdGlvbiBpc1NvbWUocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzU29tZVZhbHVlKGVxLCB2LCB4KSB7XG4gIGlmICh4KSB7XG4gICAgcmV0dXJuIGVxKHYsIHhbMF0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc05vbmUocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEV4bih4KSB7XG4gIGlmICh4KSB7XG4gICAgcmV0dXJuIHhbMF07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZ2V0RXhuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVxdWFsKGVxLCBhLCBiKSB7XG4gIGlmIChhKSB7XG4gICAgaWYgKGIpIHtcbiAgICAgIHJldHVybiBlcShhWzBdLCBiWzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYiA9PT0gLyogTm9uZSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gYW5kVGhlbihmLCB4KSB7XG4gIGlmICh4KSB7XG4gICAgcmV0dXJuIGYoeFswXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcChmLCB4KSB7XG4gIGlmICh4KSB7XG4gICAgcmV0dXJuIC8qIFNvbWUgKi9bZih4WzBdKV07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFdpdGhEZWZhdWx0KGEsIHgpIHtcbiAgaWYgKHgpIHtcbiAgICByZXR1cm4geFswXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXIoZiwgeCkge1xuICBpZiAoeCkge1xuICAgIHZhciB4JDEgPSB4WzBdO1xuICAgIGlmIChmKHgkMSkpIHtcbiAgICAgIHJldHVybiAvKiBTb21lICovW3gkMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBOb25lICovMDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE5vbmUgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpcnN0U29tZShhLCBiKSB7XG4gIGlmIChhKSB7XG4gICAgcmV0dXJuIGE7XG4gIH0gZWxzZSBpZiAoYikge1xuICAgIHJldHVybiBiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBOb25lICovMDtcbiAgfVxufVxuXG52YXIgJCRkZWZhdWx0ID0gZ2V0V2l0aERlZmF1bHQ7XG5cbmV4cG9ydHMuc29tZSA9IHNvbWU7XG5leHBvcnRzLmlzU29tZSA9IGlzU29tZTtcbmV4cG9ydHMuaXNTb21lVmFsdWUgPSBpc1NvbWVWYWx1ZTtcbmV4cG9ydHMuaXNOb25lID0gaXNOb25lO1xuZXhwb3J0cy5nZXRFeG4gPSBnZXRFeG47XG5leHBvcnRzLmVxdWFsID0gZXF1YWw7XG5leHBvcnRzLmFuZFRoZW4gPSBhbmRUaGVuO1xuZXhwb3J0cy5tYXAgPSBtYXA7XG5leHBvcnRzLmdldFdpdGhEZWZhdWx0ID0gZ2V0V2l0aERlZmF1bHQ7XG5leHBvcnRzLiQkZGVmYXVsdCA9ICQkZGVmYXVsdDtcbmV4cG9ydHMuZGVmYXVsdCA9ICQkZGVmYXVsdDtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcbmV4cG9ydHMuZmlyc3RTb21lID0gZmlyc3RTb21lO1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgdW5zYWZlRGVsZXRlS2V5ID0gKFxuICBmdW5jdGlvbihkaWN0LGtleSl7XG4gICAgIGRlbGV0ZSBkaWN0W2tleV07XG4gICAgIHJldHVybiAwXG4gICB9XG4pO1xuXG5mdW5jdGlvbiBlbnRyaWVzKGRpY3QpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkaWN0KTtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShsKTtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFsdWVzW2ldID0gLyogdHVwbGUgKi9bXG4gICAgICBrZXksXG4gICAgICBkaWN0W2tleV1cbiAgICBdO1xuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmZ1bmN0aW9uIHZhbHVlcyhkaWN0KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGljdCk7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciB2YWx1ZXMkMSA9IG5ldyBBcnJheShsKTtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgdmFsdWVzJDFbaV0gPSBkaWN0W2tleXNbaV1dO1xuICB9XG4gIHJldHVybiB2YWx1ZXMkMTtcbn1cblxuZnVuY3Rpb24gZnJvbUxpc3QoZW50cmllcykge1xuICB2YXIgZGljdCA9IHsgfTtcbiAgdmFyIF9wYXJhbSA9IGVudHJpZXM7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBwYXJhbVswXTtcbiAgICAgIGRpY3RbbWF0Y2hbMF1dID0gbWF0Y2hbMV07XG4gICAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRpY3Q7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkoZW50cmllcykge1xuICB2YXIgZGljdCA9IHsgfTtcbiAgdmFyIGwgPSBlbnRyaWVzLmxlbmd0aDtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgdmFyIG1hdGNoID0gZW50cmllc1tpXTtcbiAgICBkaWN0W21hdGNoWzBdXSA9IG1hdGNoWzFdO1xuICB9XG4gIHJldHVybiBkaWN0O1xufVxuXG5mdW5jdGlvbiBtYXAoZiwgc291cmNlKSB7XG4gIHZhciB0YXJnZXQgPSB7IH07XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdGFyZ2V0W2tleV0gPSBmKHNvdXJjZVtrZXldKTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5leHBvcnRzLnVuc2FmZURlbGV0ZUtleSA9IHVuc2FmZURlbGV0ZUtleTtcbmV4cG9ydHMuZW50cmllcyA9IGVudHJpZXM7XG5leHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcbmV4cG9ydHMuZnJvbUxpc3QgPSBmcm9tTGlzdDtcbmV4cG9ydHMuZnJvbUFycmF5ID0gZnJvbUFycmF5O1xuZXhwb3J0cy5tYXAgPSBtYXA7XG4vKiB1bnNhZmVEZWxldGVLZXkgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZG9IYXNoO1xuLy8gbXVybXVyaGFzaDIgdmlhIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3JheWNtb3JnYW4vNTg4NDIzXG5cbmZ1bmN0aW9uIGRvSGFzaChzdHIsIHNlZWQpIHtcbiAgdmFyIG0gPSAweDViZDFlOTk1O1xuICB2YXIgciA9IDI0O1xuICB2YXIgaCA9IHNlZWQgXiBzdHIubGVuZ3RoO1xuICB2YXIgbGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgdmFyIGN1cnJlbnRJbmRleCA9IDA7XG5cbiAgd2hpbGUgKGxlbmd0aCA+PSA0KSB7XG4gICAgdmFyIGsgPSBVSW50MzIoc3RyLCBjdXJyZW50SW5kZXgpO1xuXG4gICAgayA9IFVtdWwzMihrLCBtKTtcbiAgICBrIF49IGsgPj4+IHI7XG4gICAgayA9IFVtdWwzMihrLCBtKTtcblxuICAgIGggPSBVbXVsMzIoaCwgbSk7XG4gICAgaCBePSBrO1xuXG4gICAgY3VycmVudEluZGV4ICs9IDQ7XG4gICAgbGVuZ3RoIC09IDQ7XG4gIH1cblxuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gVUludDE2KHN0ciwgY3VycmVudEluZGV4KTtcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoY3VycmVudEluZGV4ICsgMikgPDwgMTY7XG4gICAgICBoID0gVW11bDMyKGgsIG0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDI6XG4gICAgICBoIF49IFVJbnQxNihzdHIsIGN1cnJlbnRJbmRleCk7XG4gICAgICBoID0gVW11bDMyKGgsIG0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGN1cnJlbnRJbmRleCk7XG4gICAgICBoID0gVW11bDMyKGgsIG0pO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBoIF49IGggPj4+IDEzO1xuICBoID0gVW11bDMyKGgsIG0pO1xuICBoIF49IGggPj4+IDE1O1xuXG4gIHJldHVybiBoID4+PiAwO1xufVxuXG5mdW5jdGlvbiBVSW50MzIoc3RyLCBwb3MpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KHBvcysrKSArIChzdHIuY2hhckNvZGVBdChwb3MrKykgPDwgOCkgKyAoc3RyLmNoYXJDb2RlQXQocG9zKyspIDw8IDE2KSArIChzdHIuY2hhckNvZGVBdChwb3MpIDw8IDI0KTtcbn1cblxuZnVuY3Rpb24gVUludDE2KHN0ciwgcG9zKSB7XG4gIHJldHVybiBzdHIuY2hhckNvZGVBdChwb3MrKykgKyAoc3RyLmNoYXJDb2RlQXQocG9zKyspIDw8IDgpO1xufVxuXG5mdW5jdGlvbiBVbXVsMzIobiwgbSkge1xuICBuID0gbiB8IDA7XG4gIG0gPSBtIHwgMDtcbiAgdmFyIG5sbyA9IG4gJiAweGZmZmY7XG4gIHZhciBuaGkgPSBuID4+PiAxNjtcbiAgdmFyIHJlcyA9IG5sbyAqIG0gKyAoKG5oaSAqIG0gJiAweGZmZmYpIDw8IDE2KSB8IDA7XG4gIHJldHVybiByZXM7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC9bQS1aXS9nO1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcbnZhciBjYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZyBpbiBjYWNoZVxuICAgID8gY2FjaGVbc3RyaW5nXVxuICAgIDogY2FjaGVbc3RyaW5nXSA9IHN0cmluZ1xuICAgICAgLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgJy0kJicpXG4gICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZVByb3BlcnR5O1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZSA9IHJlcXVpcmUoJ2h5cGhlbmF0ZS1zdHlsZS1uYW1lJyk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGVOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h5cGhlbmF0ZVN0eWxlTmFtZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVByb3BlcnR5KHByb3BlcnR5KSB7XG4gIHJldHVybiAoMCwgX2h5cGhlbmF0ZVN0eWxlTmFtZTIuZGVmYXVsdCkocHJvcGVydHkpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdHJhbnNpdGlvbjtcblxudmFyIF9oeXBoZW5hdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaHlwaGVuYXRlUHJvcGVydHknKTtcblxudmFyIF9oeXBoZW5hdGVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oeXBoZW5hdGVQcm9wZXJ0eSk7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlID0gcmVxdWlyZSgnY3NzLWluLWpzLXV0aWxzL2xpYi9pc1ByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQcmVmaXhlZFZhbHVlKTtcblxudmFyIF9jYXBpdGFsaXplU3RyaW5nID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvY2FwaXRhbGl6ZVN0cmluZycpO1xuXG52YXIgX2NhcGl0YWxpemVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FwaXRhbGl6ZVN0cmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBwcm9wZXJ0aWVzID0ge1xuICB0cmFuc2l0aW9uOiB0cnVlLFxuICB0cmFuc2l0aW9uUHJvcGVydHk6IHRydWUsXG4gIFdlYmtpdFRyYW5zaXRpb246IHRydWUsXG4gIFdlYmtpdFRyYW5zaXRpb25Qcm9wZXJ0eTogdHJ1ZSxcbiAgTW96VHJhbnNpdGlvbjogdHJ1ZSxcbiAgTW96VHJhbnNpdGlvblByb3BlcnR5OiB0cnVlXG59O1xuXG5cbnZhciBwcmVmaXhNYXBwaW5nID0ge1xuICBXZWJraXQ6ICctd2Via2l0LScsXG4gIE1vejogJy1tb3otJyxcbiAgbXM6ICctbXMtJ1xufTtcblxuZnVuY3Rpb24gcHJlZml4VmFsdWUodmFsdWUsIHByb3BlcnR5UHJlZml4TWFwKSB7XG4gIGlmICgoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLy8gb25seSBzcGxpdCBtdWx0aSB2YWx1ZXMsIG5vdCBjdWJpYyBiZXppZXJzXG4gIHZhciBtdWx0aXBsZVZhbHVlcyA9IHZhbHVlLnNwbGl0KC8sKD8hW14oKV0qKD86XFwoW14oKV0qXFwpKT9cXCkpL2cpO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBtdWx0aXBsZVZhbHVlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciBzaW5nbGVWYWx1ZSA9IG11bHRpcGxlVmFsdWVzW2ldO1xuICAgIHZhciB2YWx1ZXMgPSBbc2luZ2xlVmFsdWVdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3BlcnR5UHJlZml4TWFwKSB7XG4gICAgICB2YXIgZGFzaENhc2VQcm9wZXJ0eSA9ICgwLCBfaHlwaGVuYXRlUHJvcGVydHkyLmRlZmF1bHQpKHByb3BlcnR5KTtcblxuICAgICAgaWYgKHNpbmdsZVZhbHVlLmluZGV4T2YoZGFzaENhc2VQcm9wZXJ0eSkgPiAtMSAmJiBkYXNoQ2FzZVByb3BlcnR5ICE9PSAnb3JkZXInKSB7XG4gICAgICAgIHZhciBwcmVmaXhlcyA9IHByb3BlcnR5UHJlZml4TWFwW3Byb3BlcnR5XTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDAsIHBMZW4gPSBwcmVmaXhlcy5sZW5ndGg7IGogPCBwTGVuOyArK2opIHtcbiAgICAgICAgICAvLyBqb2luIGFsbCBwcmVmaXhlcyBhbmQgY3JlYXRlIGEgbmV3IHZhbHVlXG4gICAgICAgICAgdmFsdWVzLnVuc2hpZnQoc2luZ2xlVmFsdWUucmVwbGFjZShkYXNoQ2FzZVByb3BlcnR5LCBwcmVmaXhNYXBwaW5nW3ByZWZpeGVzW2pdXSArIGRhc2hDYXNlUHJvcGVydHkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIG11bHRpcGxlVmFsdWVzW2ldID0gdmFsdWVzLmpvaW4oJywnKTtcbiAgfVxuXG4gIHJldHVybiBtdWx0aXBsZVZhbHVlcy5qb2luKCcsJyk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb24ocHJvcGVydHksIHZhbHVlLCBzdHlsZSwgcHJvcGVydHlQcmVmaXhNYXApIHtcbiAgLy8gYWxzbyBjaGVjayBmb3IgYWxyZWFkeSBwcmVmaXhlZCB0cmFuc2l0aW9uc1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiBwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgIHZhciBvdXRwdXRWYWx1ZSA9IHByZWZpeFZhbHVlKHZhbHVlLCBwcm9wZXJ0eVByZWZpeE1hcCk7XG4gICAgLy8gaWYgdGhlIHByb3BlcnR5IGlzIGFscmVhZHkgcHJlZml4ZWRcbiAgICB2YXIgd2Via2l0T3V0cHV0ID0gb3V0cHV0VmFsdWUuc3BsaXQoLywoPyFbXigpXSooPzpcXChbXigpXSpcXCkpP1xcKSkvZykuZmlsdGVyKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiAhLy1tb3otfC1tcy0vLnRlc3QodmFsKTtcbiAgICB9KS5qb2luKCcsJyk7XG5cbiAgICBpZiAocHJvcGVydHkuaW5kZXhPZignV2Via2l0JykgPiAtMSkge1xuICAgICAgcmV0dXJuIHdlYmtpdE91dHB1dDtcbiAgICB9XG5cbiAgICB2YXIgbW96T3V0cHV0ID0gb3V0cHV0VmFsdWUuc3BsaXQoLywoPyFbXigpXSooPzpcXChbXigpXSpcXCkpP1xcKSkvZykuZmlsdGVyKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiAhLy13ZWJraXQtfC1tcy0vLnRlc3QodmFsKTtcbiAgICB9KS5qb2luKCcsJyk7XG5cbiAgICBpZiAocHJvcGVydHkuaW5kZXhPZignTW96JykgPiAtMSkge1xuICAgICAgcmV0dXJuIG1vek91dHB1dDtcbiAgICB9XG5cbiAgICBzdHlsZVsnV2Via2l0JyArICgwLCBfY2FwaXRhbGl6ZVN0cmluZzIuZGVmYXVsdCkocHJvcGVydHkpXSA9IHdlYmtpdE91dHB1dDtcbiAgICBzdHlsZVsnTW96JyArICgwLCBfY2FwaXRhbGl6ZVN0cmluZzIuZGVmYXVsdCkocHJvcGVydHkpXSA9IG1vek91dHB1dDtcbiAgICByZXR1cm4gb3V0cHV0VmFsdWU7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNpemluZztcbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnJ107XG5cbnZhciBwcm9wZXJ0aWVzID0ge1xuICBtYXhIZWlnaHQ6IHRydWUsXG4gIG1heFdpZHRoOiB0cnVlLFxuICB3aWR0aDogdHJ1ZSxcbiAgaGVpZ2h0OiB0cnVlLFxuICBjb2x1bW5XaWR0aDogdHJ1ZSxcbiAgbWluV2lkdGg6IHRydWUsXG4gIG1pbkhlaWdodDogdHJ1ZVxufTtcbnZhciB2YWx1ZXMgPSB7XG4gICdtaW4tY29udGVudCc6IHRydWUsXG4gICdtYXgtY29udGVudCc6IHRydWUsXG4gICdmaWxsLWF2YWlsYWJsZSc6IHRydWUsXG4gICdmaXQtY29udGVudCc6IHRydWUsXG4gICdjb250YWluLWZsb2F0cyc6IHRydWVcbn07XG5cbmZ1bmN0aW9uIHNpemluZyhwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcG9zaXRpb247XG5mdW5jdGlvbiBwb3NpdGlvbihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAncG9zaXRpb24nICYmIHZhbHVlID09PSAnc3RpY2t5Jykge1xuICAgIHJldHVybiBbJy13ZWJraXQtc3RpY2t5JywgJ3N0aWNreSddO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpbWFnZVNldDtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBodHRwOi8vY2FuaXVzZS5jb20vI2ZlYXQ9Y3NzLWltYWdlLXNldFxudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICcnXTtcbmZ1bmN0aW9uIGltYWdlU2V0KHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZS5pbmRleE9mKCdpbWFnZS1zZXQoJykgPiAtMSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL2ltYWdlLXNldFxcKC9nLCBwcmVmaXggKyAnaW1hZ2Utc2V0KCcpO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBncmFkaWVudDtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJyddO1xuXG52YXIgdmFsdWVzID0gL2xpbmVhci1ncmFkaWVudHxyYWRpYWwtZ3JhZGllbnR8cmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudHxyZXBlYXRpbmctcmFkaWFsLWdyYWRpZW50LztcblxuZnVuY3Rpb24gZ3JhZGllbnQocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpICYmIHZhbHVlcy50ZXN0KHZhbHVlKSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmbGV4Ym94T2xkO1xudmFyIGFsdGVybmF0aXZlVmFsdWVzID0ge1xuICAnc3BhY2UtYXJvdW5kJzogJ2p1c3RpZnknLFxuICAnc3BhY2UtYmV0d2Vlbic6ICdqdXN0aWZ5JyxcbiAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAnZmxleC1lbmQnOiAnZW5kJyxcbiAgJ3dyYXAtcmV2ZXJzZSc6ICdtdWx0aXBsZScsXG4gIHdyYXA6ICdtdWx0aXBsZSdcbn07XG5cbnZhciBhbHRlcm5hdGl2ZVByb3BzID0ge1xuICBhbGlnbkl0ZW1zOiAnV2Via2l0Qm94QWxpZ24nLFxuICBqdXN0aWZ5Q29udGVudDogJ1dlYmtpdEJveFBhY2snLFxuICBmbGV4V3JhcDogJ1dlYmtpdEJveExpbmVzJ1xufTtcblxuZnVuY3Rpb24gZmxleGJveE9sZChwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2ZsZXhEaXJlY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodmFsdWUuaW5kZXhPZignY29sdW1uJykgPiAtMSkge1xuICAgICAgc3R5bGUuV2Via2l0Qm94T3JpZW50ID0gJ3ZlcnRpY2FsJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuV2Via2l0Qm94T3JpZW50ID0gJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAodmFsdWUuaW5kZXhPZigncmV2ZXJzZScpID4gLTEpIHtcbiAgICAgIHN0eWxlLldlYmtpdEJveERpcmVjdGlvbiA9ICdyZXZlcnNlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuV2Via2l0Qm94RGlyZWN0aW9uID0gJ25vcm1hbCc7XG4gICAgfVxuICB9XG4gIGlmIChhbHRlcm5hdGl2ZVByb3BzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgIHN0eWxlW2FsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldXSA9IGFsdGVybmF0aXZlVmFsdWVzW3ZhbHVlXSB8fCB2YWx1ZTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmxleDtcbnZhciB2YWx1ZXMgPSB7XG4gIGZsZXg6IFsnLXdlYmtpdC1ib3gnLCAnLW1vei1ib3gnLCAnLW1zLWZsZXhib3gnLCAnLXdlYmtpdC1mbGV4JywgJ2ZsZXgnXSxcbiAgJ2lubGluZS1mbGV4JzogWyctd2Via2l0LWlubGluZS1ib3gnLCAnLW1vei1pbmxpbmUtYm94JywgJy1tcy1pbmxpbmUtZmxleGJveCcsICctd2Via2l0LWlubGluZS1mbGV4JywgJ2lubGluZS1mbGV4J11cbn07XG5cbmZ1bmN0aW9uIGZsZXgocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2Rpc3BsYXknICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWVzW3ZhbHVlXTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmlsdGVyO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGh0dHA6Ly9jYW5pdXNlLmNvbS8jZmVhdD1jc3MtZmlsdGVyLWZ1bmN0aW9uXG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJyddO1xuZnVuY3Rpb24gZmlsdGVyKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZS5pbmRleE9mKCdmaWx0ZXIoJykgPiAtMSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL2ZpbHRlclxcKC9nLCBwcmVmaXggKyAnZmlsdGVyKCcpO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcm9zc0ZhZGU7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlID0gcmVxdWlyZSgnY3NzLWluLWpzLXV0aWxzL2xpYi9pc1ByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9Y3Jvc3MtZmFkZVxudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICcnXTtcbmZ1bmN0aW9uIGNyb3NzRmFkZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWUuaW5kZXhPZignY3Jvc3MtZmFkZSgnKSA+IC0xKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvY3Jvc3MtZmFkZVxcKC9nLCBwcmVmaXggKyAnY3Jvc3MtZmFkZSgnKTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3Vyc29yO1xudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICctbW96LScsICcnXTtcblxudmFyIHZhbHVlcyA9IHtcbiAgJ3pvb20taW4nOiB0cnVlLFxuICAnem9vbS1vdXQnOiB0cnVlLFxuICBncmFiOiB0cnVlLFxuICBncmFiYmluZzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gY3Vyc29yKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdjdXJzb3InICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwcmVmaXhWYWx1ZTtcbmZ1bmN0aW9uIHByZWZpeFZhbHVlKHBsdWdpbnMsIHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIG1ldGFEYXRhKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwbHVnaW5zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gcGx1Z2luc1tpXShwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBtZXRhRGF0YSk7XG5cbiAgICAvLyB3ZSBjYW4gc3RvcCBwcm9jZXNzaW5nIGlmIGEgdmFsdWUgaXMgcmV0dXJuZWRcbiAgICAvLyBhcyBhbGwgcGx1Z2luIGNyaXRlcmlhIGFyZSB1bmlxdWVcbiAgICBpZiAocHJvY2Vzc2VkVmFsdWUpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJlZml4UHJvcGVydHk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZyA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZVN0cmluZycpO1xuXG52YXIgX2NhcGl0YWxpemVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FwaXRhbGl6ZVN0cmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHByZWZpeFByb3BlcnR5KHByZWZpeFByb3BlcnRpZXMsIHByb3BlcnR5LCBzdHlsZSkge1xuICBpZiAocHJlZml4UHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICB2YXIgcmVxdWlyZWRQcmVmaXhlcyA9IHByZWZpeFByb3BlcnRpZXNbcHJvcGVydHldO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByZXF1aXJlZFByZWZpeGVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBzdHlsZVtyZXF1aXJlZFByZWZpeGVzW2ldICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gc3R5bGVbcHJvcGVydHldO1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciB3ID0gW1wiV2Via2l0XCJdO1xudmFyIG0gPSBbXCJNb3pcIl07XG52YXIgbXMgPSBbXCJtc1wiXTtcbnZhciB3bSA9IFtcIldlYmtpdFwiLCBcIk1velwiXTtcbnZhciB3bXMgPSBbXCJXZWJraXRcIiwgXCJtc1wiXTtcbnZhciB3bW1zID0gW1wiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIl07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgcGx1Z2luczogW10sXG4gIHByZWZpeE1hcDogeyBcImFwcGVhcmFuY2VcIjogd20sIFwidXNlclNlbGVjdFwiOiB3bW1zLCBcInRleHRFbXBoYXNpc1Bvc2l0aW9uXCI6IHcsIFwidGV4dEVtcGhhc2lzXCI6IHcsIFwidGV4dEVtcGhhc2lzU3R5bGVcIjogdywgXCJ0ZXh0RW1waGFzaXNDb2xvclwiOiB3LCBcImJveERlY29yYXRpb25CcmVha1wiOiB3LCBcImNsaXBQYXRoXCI6IHcsIFwibWFza0ltYWdlXCI6IHcsIFwibWFza01vZGVcIjogdywgXCJtYXNrUmVwZWF0XCI6IHcsIFwibWFza1Bvc2l0aW9uXCI6IHcsIFwibWFza0NsaXBcIjogdywgXCJtYXNrT3JpZ2luXCI6IHcsIFwibWFza1NpemVcIjogdywgXCJtYXNrQ29tcG9zaXRlXCI6IHcsIFwibWFza1wiOiB3LCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogdywgXCJtYXNrQm9yZGVyTW9kZVwiOiB3LCBcIm1hc2tCb3JkZXJTbGljZVwiOiB3LCBcIm1hc2tCb3JkZXJXaWR0aFwiOiB3LCBcIm1hc2tCb3JkZXJPdXRzZXRcIjogdywgXCJtYXNrQm9yZGVyUmVwZWF0XCI6IHcsIFwibWFza0JvcmRlclwiOiB3LCBcIm1hc2tUeXBlXCI6IHcsIFwidGV4dERlY29yYXRpb25TdHlsZVwiOiB3LCBcInRleHREZWNvcmF0aW9uU2tpcFwiOiB3LCBcInRleHREZWNvcmF0aW9uTGluZVwiOiB3LCBcInRleHREZWNvcmF0aW9uQ29sb3JcIjogdywgXCJmaWx0ZXJcIjogdywgXCJmb250RmVhdHVyZVNldHRpbmdzXCI6IHcsIFwiYnJlYWtBZnRlclwiOiB3bW1zLCBcImJyZWFrQmVmb3JlXCI6IHdtbXMsIFwiYnJlYWtJbnNpZGVcIjogd21tcywgXCJjb2x1bW5Db3VudFwiOiB3bSwgXCJjb2x1bW5GaWxsXCI6IHdtLCBcImNvbHVtbkdhcFwiOiB3bSwgXCJjb2x1bW5SdWxlXCI6IHdtLCBcImNvbHVtblJ1bGVDb2xvclwiOiB3bSwgXCJjb2x1bW5SdWxlU3R5bGVcIjogd20sIFwiY29sdW1uUnVsZVdpZHRoXCI6IHdtLCBcImNvbHVtbnNcIjogd20sIFwiY29sdW1uU3BhblwiOiB3bSwgXCJjb2x1bW5XaWR0aFwiOiB3bSwgXCJ3cml0aW5nTW9kZVwiOiB3bXMsIFwiZmxleFwiOiB3LCBcImZsZXhCYXNpc1wiOiB3LCBcImZsZXhEaXJlY3Rpb25cIjogdywgXCJmbGV4R3Jvd1wiOiB3LCBcImZsZXhGbG93XCI6IHcsIFwiZmxleFNocmlua1wiOiB3LCBcImZsZXhXcmFwXCI6IHcsIFwiYWxpZ25Db250ZW50XCI6IHcsIFwiYWxpZ25JdGVtc1wiOiB3LCBcImFsaWduU2VsZlwiOiB3LCBcImp1c3RpZnlDb250ZW50XCI6IHcsIFwib3JkZXJcIjogdywgXCJ0cmFuc2Zvcm1cIjogdywgXCJ0cmFuc2Zvcm1PcmlnaW5cIjogdywgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IHcsIFwidHJhbnNmb3JtT3JpZ2luWVwiOiB3LCBcImJhY2tmYWNlVmlzaWJpbGl0eVwiOiB3LCBcInBlcnNwZWN0aXZlXCI6IHcsIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogdywgXCJ0cmFuc2Zvcm1TdHlsZVwiOiB3LCBcInRyYW5zZm9ybU9yaWdpblpcIjogdywgXCJhbmltYXRpb25cIjogdywgXCJhbmltYXRpb25EZWxheVwiOiB3LCBcImFuaW1hdGlvbkRpcmVjdGlvblwiOiB3LCBcImFuaW1hdGlvbkZpbGxNb2RlXCI6IHcsIFwiYW5pbWF0aW9uRHVyYXRpb25cIjogdywgXCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB3LCBcImFuaW1hdGlvbk5hbWVcIjogdywgXCJhbmltYXRpb25QbGF5U3RhdGVcIjogdywgXCJhbmltYXRpb25UaW1pbmdGdW5jdGlvblwiOiB3LCBcImJhY2tkcm9wRmlsdGVyXCI6IHcsIFwiZm9udEtlcm5pbmdcIjogdywgXCJzY3JvbGxTbmFwVHlwZVwiOiB3bXMsIFwic2Nyb2xsU25hcFBvaW50c1hcIjogd21zLCBcInNjcm9sbFNuYXBQb2ludHNZXCI6IHdtcywgXCJzY3JvbGxTbmFwRGVzdGluYXRpb25cIjogd21zLCBcInNjcm9sbFNuYXBDb29yZGluYXRlXCI6IHdtcywgXCJzaGFwZUltYWdlVGhyZXNob2xkXCI6IHcsIFwic2hhcGVJbWFnZU1hcmdpblwiOiB3LCBcInNoYXBlSW1hZ2VPdXRzaWRlXCI6IHcsIFwiaHlwaGVuc1wiOiB3bW1zLCBcImZsb3dJbnRvXCI6IHdtcywgXCJmbG93RnJvbVwiOiB3bXMsIFwicmVnaW9uRnJhZ21lbnRcIjogd21zLCBcInRleHRBbGlnbkxhc3RcIjogbSwgXCJ0YWJTaXplXCI6IG0sIFwid3JhcEZsb3dcIjogbXMsIFwid3JhcFRocm91Z2hcIjogbXMsIFwid3JhcE1hcmdpblwiOiBtcywgXCJncmlkVGVtcGxhdGVDb2x1bW5zXCI6IG1zLCBcImdyaWRUZW1wbGF0ZVJvd3NcIjogbXMsIFwiZ3JpZFRlbXBsYXRlQXJlYXNcIjogbXMsIFwiZ3JpZFRlbXBsYXRlXCI6IG1zLCBcImdyaWRBdXRvQ29sdW1uc1wiOiBtcywgXCJncmlkQXV0b1Jvd3NcIjogbXMsIFwiZ3JpZEF1dG9GbG93XCI6IG1zLCBcImdyaWRcIjogbXMsIFwiZ3JpZFJvd1N0YXJ0XCI6IG1zLCBcImdyaWRDb2x1bW5TdGFydFwiOiBtcywgXCJncmlkUm93RW5kXCI6IG1zLCBcImdyaWRSb3dcIjogbXMsIFwiZ3JpZENvbHVtblwiOiBtcywgXCJncmlkQ29sdW1uRW5kXCI6IG1zLCBcImdyaWRDb2x1bW5HYXBcIjogbXMsIFwiZ3JpZFJvd0dhcFwiOiBtcywgXCJncmlkQXJlYVwiOiBtcywgXCJncmlkR2FwXCI6IG1zLCBcInRleHRTaXplQWRqdXN0XCI6IHdtcywgXCJib3JkZXJJbWFnZVwiOiB3LCBcImJvcmRlckltYWdlT3V0c2V0XCI6IHcsIFwiYm9yZGVySW1hZ2VSZXBlYXRcIjogdywgXCJib3JkZXJJbWFnZVNsaWNlXCI6IHcsIFwiYm9yZGVySW1hZ2VTb3VyY2VcIjogdywgXCJib3JkZXJJbWFnZVdpZHRoXCI6IHcsIFwidHJhbnNpdGlvbkRlbGF5XCI6IHcsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCI6IHcsIFwidHJhbnNpdGlvblByb3BlcnR5XCI6IHcsIFwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXCI6IHcgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJlZml4ZXI7XG5cbnZhciBfc3RhdGljRGF0YSA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvc3RhdGljRGF0YScpO1xuXG52YXIgX3N0YXRpY0RhdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RhdGljRGF0YSk7XG5cbnZhciBfcHJlZml4UHJvcGVydHkgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvcHJlZml4UHJvcGVydHknKTtcblxudmFyIF9wcmVmaXhQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXhQcm9wZXJ0eSk7XG5cbnZhciBfcHJlZml4VmFsdWUgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvcHJlZml4VmFsdWUnKTtcblxudmFyIF9wcmVmaXhWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXhWYWx1ZSk7XG5cbnZhciBfY3Vyc29yID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2N1cnNvcicpO1xuXG52YXIgX2N1cnNvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jdXJzb3IpO1xuXG52YXIgX2Nyb3NzRmFkZSA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9jcm9zc0ZhZGUnKTtcblxudmFyIF9jcm9zc0ZhZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3Jvc3NGYWRlKTtcblxudmFyIF9maWx0ZXIgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmlsdGVyJyk7XG5cbnZhciBfZmlsdGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZpbHRlcik7XG5cbnZhciBfZmxleCA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4Jyk7XG5cbnZhciBfZmxleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mbGV4KTtcblxudmFyIF9mbGV4Ym94T2xkID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZsZXhib3hPbGQnKTtcblxudmFyIF9mbGV4Ym94T2xkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsZXhib3hPbGQpO1xuXG52YXIgX2dyYWRpZW50ID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2dyYWRpZW50Jyk7XG5cbnZhciBfZ3JhZGllbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JhZGllbnQpO1xuXG52YXIgX2ltYWdlU2V0ID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ltYWdlU2V0Jyk7XG5cbnZhciBfaW1hZ2VTZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1hZ2VTZXQpO1xuXG52YXIgX3Bvc2l0aW9uID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3Bvc2l0aW9uJyk7XG5cbnZhciBfcG9zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zaXRpb24pO1xuXG52YXIgX3NpemluZyA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9zaXppbmcnKTtcblxudmFyIF9zaXppbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2l6aW5nKTtcblxudmFyIF90cmFuc2l0aW9uID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3RyYW5zaXRpb24nKTtcblxudmFyIF90cmFuc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcGx1Z2lucyA9IFtfY3Jvc3NGYWRlMi5kZWZhdWx0LCBfY3Vyc29yMi5kZWZhdWx0LCBfZmlsdGVyMi5kZWZhdWx0LCBfZmxleGJveE9sZDIuZGVmYXVsdCwgX2dyYWRpZW50Mi5kZWZhdWx0LCBfaW1hZ2VTZXQyLmRlZmF1bHQsIF9wb3NpdGlvbjIuZGVmYXVsdCwgX3NpemluZzIuZGVmYXVsdCwgX3RyYW5zaXRpb24yLmRlZmF1bHQsIF9mbGV4Mi5kZWZhdWx0XTsgLy8gY3VzdG9tIGZhY2FkZSBmb3IgaW5saW5lLXN0eWxlLXByZWZpeGVyXG5cbnZhciBwcmVmaXhNYXAgPSBfc3RhdGljRGF0YTIuZGVmYXVsdC5wcmVmaXhNYXA7XG5cbmZ1bmN0aW9uIHByZWZpeGVyKHN0eWxlKSB7XG4gIGZvciAodmFyIHByb3BlcnR5IGluIHN0eWxlKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcGVydHldO1xuXG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gKDAsIF9wcmVmaXhWYWx1ZTIuZGVmYXVsdCkocGx1Z2lucywgcHJvcGVydHksIHZhbHVlLCBzdHlsZSwgcHJlZml4TWFwKTtcblxuICAgIC8vIG9ubHkgbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCB3YXMgdG91Y2hlZFxuICAgIC8vIGJ5IGFueSBwbHVnaW4gdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBtdXRhdGlvbnNcbiAgICBpZiAocHJvY2Vzc2VkVmFsdWUpIHtcbiAgICAgIHN0eWxlW3Byb3BlcnR5XSA9IHByb2Nlc3NlZFZhbHVlO1xuICAgIH1cblxuICAgICgwLCBfcHJlZml4UHJvcGVydHkyLmRlZmF1bHQpKHByZWZpeE1hcCwgcHJvcGVydHksIHN0eWxlKTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5leHBvcnRzLlBsdWdpblNldCA9IFBsdWdpblNldDtcbmV4cG9ydHMuZmFsbGJhY2tzID0gZmFsbGJhY2tzO1xuZXhwb3J0cy5jb250ZW50V3JhcCA9IGNvbnRlbnRXcmFwO1xuZXhwb3J0cy5wcmVmaXhlcyA9IHByZWZpeGVzO1xuXG52YXIgX29iamVjdEFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9vYmplY3RBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0QXNzaWduKTtcblxudmFyIF9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5T3BlcmF0aW9ucycpO1xuXG52YXIgX3ByZWZpeGVyID0gcmVxdWlyZSgnLi9wcmVmaXhlcicpO1xuXG52YXIgX3ByZWZpeGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGlzRGV2ID0gZnVuY3Rpb24gKHgpIHtcbiAgcmV0dXJuIHggPT09ICdkZXZlbG9wbWVudCcgfHwgIXg7XG59KHByb2Nlc3MuZW52Lk5PREVfRU5WKTtcblxuZnVuY3Rpb24gUGx1Z2luU2V0KGluaXRpYWwpIHtcbiAgdGhpcy5mbnMgPSBpbml0aWFsIHx8IFtdO1xufVxuXG4oMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoUGx1Z2luU2V0LnByb3RvdHlwZSwge1xuICBhZGQ6IGZ1bmN0aW9uIGFkZCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZucyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgZm5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgaWYgKF90aGlzLmZucy5pbmRleE9mKGZuKSA+PSAwKSB7XG4gICAgICAgIGlmIChpc0Rldikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignYWRkaW5nIHRoZSBzYW1lIHBsdWdpbiBhZ2FpbiwgaWdub3JpbmcnKTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuZm5zID0gW2ZuXS5jb25jYXQoX3RoaXMuZm5zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoZm4pIHtcbiAgICB0aGlzLmZucyA9IHRoaXMuZm5zLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHggIT09IGZuO1xuICAgIH0pO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5mbnMgPSBbXTtcbiAgfSxcbiAgdHJhbnNmb3JtOiBmdW5jdGlvbiB0cmFuc2Zvcm0obykge1xuICAgIHJldHVybiB0aGlzLmZucy5yZWR1Y2UoZnVuY3Rpb24gKG8sIGZuKSB7XG4gICAgICByZXR1cm4gZm4obyk7XG4gICAgfSwgbyk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBmYWxsYmFja3Mobm9kZSkge1xuICB2YXIgaGFzQXJyYXkgPSBPYmplY3Qua2V5cyhub2RlLnN0eWxlKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShub2RlLnN0eWxlW3hdKTtcbiAgfSkuaW5kZXhPZih0cnVlKSA+PSAwO1xuICBpZiAoaGFzQXJyYXkpIHtcbiAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuXG4gICAgdmFyIGZsYXR0ZW5lZCA9IE9iamVjdC5rZXlzKHN0eWxlKS5yZWR1Y2UoZnVuY3Rpb24gKG8sIGtleSkge1xuICAgICAgb1trZXldID0gQXJyYXkuaXNBcnJheShzdHlsZVtrZXldKSA/IHN0eWxlW2tleV0uam9pbignOyAnICsgKDAsIF9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMucHJvY2Vzc1N0eWxlTmFtZSkoa2V5KSArICc6ICcpIDogc3R5bGVba2V5XTtcbiAgICAgIHJldHVybiBvO1xuICAgIH0sIHt9KTtcbiAgICAvLyB0b2RvIC0gXG4gICAgLy8gZmxhdHRlbiBhcnJheXMgd2hpY2ggaGF2ZW4ndCBiZWVuIGZsYXR0ZW5lZCB5ZXQgXG4gICAgcmV0dXJuICgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7fSwgbm9kZSwgeyBzdHlsZTogZmxhdHRlbmVkIH0pO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG52YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnY291bnRlcicsICdvcGVuLXF1b3RlJywgJ2Nsb3NlLXF1b3RlJywgJ25vLW9wZW4tcXVvdGUnLCAnbm8tY2xvc2UtcXVvdGUnLCAnaW5pdGlhbCcsICdpbmhlcml0J107XG5cbmZ1bmN0aW9uIGNvbnRlbnRXcmFwKG5vZGUpIHtcbiAgaWYgKG5vZGUuc3R5bGUuY29udGVudCkge1xuICAgIHZhciBjb250ID0gbm9kZS5zdHlsZS5jb250ZW50O1xuICAgIGlmIChjb250ZW50VmFsdWVzLmluZGV4T2YoY29udCkgPj0gMCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIGlmICgvXihhdHRyfGNhbGN8Y291bnRlcnM/fHVybClcXCgvLnRlc3QoY29udCkpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBpZiAoY29udC5jaGFyQXQoMCkgPT09IGNvbnQuY2hhckF0KGNvbnQubGVuZ3RoIC0gMSkgJiYgKGNvbnQuY2hhckF0KDApID09PSAnXCInIHx8IGNvbnQuY2hhckF0KDApID09PSBcIidcIikpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG5vZGUsIHsgc3R5bGU6IF9leHRlbmRzKHt9LCBub2RlLnN0eWxlLCB7IGNvbnRlbnQ6ICdcIicgKyBjb250ICsgJ1wiJyB9KSB9KTtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gcHJlZml4ZXMobm9kZSkge1xuICByZXR1cm4gKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHt9LCBub2RlLCB7IHN0eWxlOiAoMCwgX3ByZWZpeGVyMi5kZWZhdWx0KShfZXh0ZW5kcyh7fSwgbm9kZS5zdHlsZSkpIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjbGVhbjtcbi8vIFJldHVybnMgdHJ1ZSBmb3IgbnVsbCwgZmFsc2UsIHVuZGVmaW5lZCBhbmQge31cbmZ1bmN0aW9uIGlzRmFsc3kodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IGZhbHNlIHx8ICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG59XG5cbmZ1bmN0aW9uIGNsZWFuT2JqZWN0KG9iamVjdCkge1xuICBpZiAoaXNGYWxzeShvYmplY3QpKSByZXR1cm4gbnVsbDtcbiAgaWYgKCh0eXBlb2Ygb2JqZWN0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmplY3QpKSAhPT0gJ29iamVjdCcpIHJldHVybiBvYmplY3Q7XG5cbiAgdmFyIGFjYyA9IHt9LFxuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCksXG4gICAgICBoYXNGYWxzeSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5c1tpXV07XG4gICAgdmFyIGZpbHRlcmVkVmFsdWUgPSBjbGVhbih2YWx1ZSk7XG4gICAgaWYgKGZpbHRlcmVkVmFsdWUgPT09IG51bGwgfHwgZmlsdGVyZWRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIGhhc0ZhbHN5ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGZpbHRlcmVkVmFsdWUgIT09IG51bGwpIHtcbiAgICAgIGFjY1trZXlzW2ldXSA9IGZpbHRlcmVkVmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBPYmplY3Qua2V5cyhhY2MpLmxlbmd0aCA9PT0gMCA/IG51bGwgOiBoYXNGYWxzeSA/IGFjYyA6IG9iamVjdDtcbn1cblxuZnVuY3Rpb24gY2xlYW5BcnJheShydWxlcykge1xuICB2YXIgaGFzRmFsc3kgPSBmYWxzZTtcbiAgdmFyIGZpbHRlcmVkID0gW107XG4gIHJ1bGVzLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICB2YXIgZmlsdGVyZWRSdWxlID0gY2xlYW4ocnVsZSk7XG4gICAgaWYgKGZpbHRlcmVkUnVsZSA9PT0gbnVsbCB8fCBmaWx0ZXJlZFJ1bGUgIT09IHJ1bGUpIHtcbiAgICAgIGhhc0ZhbHN5ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGZpbHRlcmVkUnVsZSAhPT0gbnVsbCkge1xuICAgICAgZmlsdGVyZWQucHVzaChmaWx0ZXJlZFJ1bGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmaWx0ZXJlZC5sZW5ndGggPT0gMCA/IG51bGwgOiBoYXNGYWxzeSA/IGZpbHRlcmVkIDogcnVsZXM7XG59XG5cbi8vIFRha2VzIHN0eWxlIGFycmF5IG9yIG9iamVjdCBwcm92aWRlZCBieSB1c2VyIGFuZCBjbGVhcnMgYWxsIHRoZSBmYWxzeSBkYXRhIFxuLy8gSWYgdGhlcmUgaXMgbm8gc3R5bGVzIGxlZnQgYWZ0ZXIgZmlsdHJhdGlvbiByZXR1cm5zIG51bGxcbmZ1bmN0aW9uIGNsZWFuKGlucHV0KSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGlucHV0KSA/IGNsZWFuQXJyYXkoaW5wdXQpIDogY2xlYW5PYmplY3QoaW5wdXQpO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNZW1vaXplcyB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIG9uZSBzdHJpbmcgYXJndW1lbnQuXG4gKi9cblxuZnVuY3Rpb24gbWVtb2l6ZVN0cmluZ09ubHkoY2FsbGJhY2spIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgaWYgKCFjYWNoZS5oYXNPd25Qcm9wZXJ0eShzdHJpbmcpKSB7XG4gICAgICBjYWNoZVtzdHJpbmddID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbc3RyaW5nXTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplU3RyaW5nT25seTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgX3VwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICpcbiAqIEZvciBDU1Mgc3R5bGUgbmFtZXMsIHVzZSBgaHlwaGVuYXRlU3R5bGVOYW1lYCBpbnN0ZWFkIHdoaWNoIHdvcmtzIHByb3Blcmx5XG4gKiB3aXRoIGFsbCB2ZW5kb3IgcHJlZml4ZXMsIGluY2x1ZGluZyBgbXNgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX3VwcGVyY2FzZVBhdHRlcm4sICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaHlwaGVuYXRlID0gcmVxdWlyZSgnLi9oeXBoZW5hdGUnKTtcblxudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbW96LXRyYW5zaXRpb25cIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnbXNUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBNb2Rlcm5penIgc3VnZ2VzdHMgKGh0dHA6Ly9tb2Rlcm5penIuY29tL2RvY3MvI3ByZWZpeGVkKSwgYW4gYG1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBoeXBoZW5hdGUoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGVTdHlsZU5hbWU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENTU1Byb3BlcnR5XG4gKi9cblxuLyoqXG4gKiBDU1MgcHJvcGVydGllcyB3aGljaCBhY2NlcHQgbnVtYmVycyBidXQgYXJlIG5vdCBpbiB1bml0cyBvZiBcInB4XCIuXG4gKi9cblxudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiB0cnVlLFxuICBib3JkZXJJbWFnZU91dHNldDogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VTbGljZTogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogdHJ1ZSxcbiAgYm94RmxleDogdHJ1ZSxcbiAgYm94RmxleEdyb3VwOiB0cnVlLFxuICBib3hPcmRpbmFsR3JvdXA6IHRydWUsXG4gIGNvbHVtbkNvdW50OiB0cnVlLFxuICBmbGV4OiB0cnVlLFxuICBmbGV4R3JvdzogdHJ1ZSxcbiAgZmxleFBvc2l0aXZlOiB0cnVlLFxuICBmbGV4U2hyaW5rOiB0cnVlLFxuICBmbGV4TmVnYXRpdmU6IHRydWUsXG4gIGZsZXhPcmRlcjogdHJ1ZSxcbiAgZ3JpZFJvdzogdHJ1ZSxcbiAgZ3JpZFJvd1N0YXJ0OiB0cnVlLFxuICBncmlkUm93RW5kOiB0cnVlLFxuICBncmlkQ29sdW1uOiB0cnVlLFxuICBncmlkQ29sdW1uU3RhcnQ6IHRydWUsXG4gIGdyaWRDb2x1bW5FbmQ6IHRydWUsXG4gIGZvbnRXZWlnaHQ6IHRydWUsXG4gIGxpbmVDbGFtcDogdHJ1ZSxcbiAgbGluZUhlaWdodDogdHJ1ZSxcbiAgb3BhY2l0eTogdHJ1ZSxcbiAgb3JkZXI6IHRydWUsXG4gIG9ycGhhbnM6IHRydWUsXG4gIHRhYlNpemU6IHRydWUsXG4gIHdpZG93czogdHJ1ZSxcbiAgekluZGV4OiB0cnVlLFxuICB6b29tOiB0cnVlLFxuXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IHRydWUsXG4gIGZsb29kT3BhY2l0eTogdHJ1ZSxcbiAgc3RvcE9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZURhc2hhcnJheTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogdHJ1ZSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogdHJ1ZSxcbiAgc3Ryb2tlT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlV2lkdGg6IHRydWVcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCB2ZW5kb3Itc3BlY2lmaWMgcHJlZml4LCBlZzogV2Via2l0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHN0eWxlIG5hbWUgcHJlZml4ZWQgd2l0aCBgcHJlZml4YCwgcHJvcGVybHkgY2FtZWxDYXNlZCwgZWc6XG4gICAqIFdlYmtpdFRyYW5zaXRpb25EdXJhdGlvblxuICAgKi9cbn07ZnVuY3Rpb24gcHJlZml4S2V5KHByZWZpeCwga2V5KSB7XG4gIHJldHVybiBwcmVmaXggKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgc3R5bGUgbmFtZXMgdGhhdCBtYXkgY29tZSBwYXNzZWQgaW4gcHJlZml4ZWQgYnkgYWRkaW5nIHBlcm11dGF0aW9uc1xuICogb2YgdmVuZG9yIHByZWZpeGVzLlxuICovXG52YXIgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdtcycsICdNb3onLCAnTyddO1xuXG4vLyBVc2luZyBPYmplY3Qua2V5cyBoZXJlLCBvciBlbHNlIHRoZSB2YW5pbGxhIGZvci1pbiBsb29wIG1ha2VzIElFOCBnbyBpbnRvIGFuXG4vLyBpbmZpbml0ZSBsb29wLCBiZWNhdXNlIGl0IGl0ZXJhdGVzIG92ZXIgdGhlIG5ld2x5IGFkZGVkIHByb3BzIHRvby5cbk9iamVjdC5rZXlzKGlzVW5pdGxlc3NOdW1iZXIpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgaXNVbml0bGVzc051bWJlcltwcmVmaXhLZXkocHJlZml4LCBwcm9wKV0gPSBpc1VuaXRsZXNzTnVtYmVyW3Byb3BdO1xuICB9KTtcbn0pO1xuXG4vKipcbiAqIE1vc3Qgc3R5bGUgcHJvcGVydGllcyBjYW4gYmUgdW5zZXQgYnkgZG9pbmcgLnN0eWxlW3Byb3BdID0gJycgYnV0IElFOFxuICogZG9lc24ndCBsaWtlIGRvaW5nIHRoYXQgd2l0aCBzaG9ydGhhbmQgcHJvcGVydGllcyBzbyBmb3IgdGhlIHByb3BlcnRpZXMgdGhhdFxuICogSUU4IGJyZWFrcyBvbiwgd2hpY2ggYXJlIGxpc3RlZCBoZXJlLCB3ZSBpbnN0ZWFkIHVuc2V0IGVhY2ggb2YgdGhlXG4gKiBpbmRpdmlkdWFsIHByb3BlcnRpZXMuIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM4NS5cbiAqIFRoZSA0LXZhbHVlICdjbG9jaycgcHJvcGVydGllcyBsaWtlIG1hcmdpbiwgcGFkZGluZywgYm9yZGVyLXdpZHRoIHNlZW0gdG9cbiAqIGJlaGF2ZSB3aXRob3V0IGFueSBwcm9ibGVtcy4gQ3VyaW91c2x5LCBsaXN0LXN0eWxlIHdvcmtzIHRvbyB3aXRob3V0IGFueVxuICogc3BlY2lhbCBwcm9kZGluZy5cbiAqL1xudmFyIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9ucyA9IHtcbiAgYmFja2dyb3VuZDoge1xuICAgIGJhY2tncm91bmRBdHRhY2htZW50OiB0cnVlLFxuICAgIGJhY2tncm91bmRDb2xvcjogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IHRydWUsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25ZOiB0cnVlLFxuICAgIGJhY2tncm91bmRSZXBlYXQ6IHRydWVcbiAgfSxcbiAgYmFja2dyb3VuZFBvc2l0aW9uOiB7XG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25ZOiB0cnVlXG4gIH0sXG4gIGJvcmRlcjoge1xuICAgIGJvcmRlcldpZHRoOiB0cnVlLFxuICAgIGJvcmRlclN0eWxlOiB0cnVlLFxuICAgIGJvcmRlckNvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlckJvdHRvbToge1xuICAgIGJvcmRlckJvdHRvbVdpZHRoOiB0cnVlLFxuICAgIGJvcmRlckJvdHRvbVN0eWxlOiB0cnVlLFxuICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlckxlZnQ6IHtcbiAgICBib3JkZXJMZWZ0V2lkdGg6IHRydWUsXG4gICAgYm9yZGVyTGVmdFN0eWxlOiB0cnVlLFxuICAgIGJvcmRlckxlZnRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJSaWdodDoge1xuICAgIGJvcmRlclJpZ2h0V2lkdGg6IHRydWUsXG4gICAgYm9yZGVyUmlnaHRTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJSaWdodENvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlclRvcDoge1xuICAgIGJvcmRlclRvcFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlclRvcFN0eWxlOiB0cnVlLFxuICAgIGJvcmRlclRvcENvbG9yOiB0cnVlXG4gIH0sXG4gIGZvbnQ6IHtcbiAgICBmb250U3R5bGU6IHRydWUsXG4gICAgZm9udFZhcmlhbnQ6IHRydWUsXG4gICAgZm9udFdlaWdodDogdHJ1ZSxcbiAgICBmb250U2l6ZTogdHJ1ZSxcbiAgICBsaW5lSGVpZ2h0OiB0cnVlLFxuICAgIGZvbnRGYW1pbHk6IHRydWVcbiAgfSxcbiAgb3V0bGluZToge1xuICAgIG91dGxpbmVXaWR0aDogdHJ1ZSxcbiAgICBvdXRsaW5lU3R5bGU6IHRydWUsXG4gICAgb3V0bGluZUNvbG9yOiB0cnVlXG4gIH1cbn07XG5cbnZhciBDU1NQcm9wZXJ0eSA9IHtcbiAgaXNVbml0bGVzc051bWJlcjogaXNVbml0bGVzc051bWJlcixcbiAgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zOiBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENTU1Byb3BlcnR5OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9DU1NQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vQ1NTUHJvcGVydHknKTtcblxudmFyIF9DU1NQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DU1NQcm9wZXJ0eSk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZGFuZ2Vyb3VzU3R5bGVWYWx1ZVxuICovXG5cbnZhciBpc1VuaXRsZXNzTnVtYmVyID0gX0NTU1Byb3BlcnR5Mi5kZWZhdWx0LmlzVW5pdGxlc3NOdW1iZXI7XG52YXIgc3R5bGVXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSBpbnRvIHRoZSBwcm9wZXIgY3NzIHdyaXRhYmxlIHZhbHVlLiBUaGUgc3R5bGUgbmFtZSBgbmFtZWBcbiAqIHNob3VsZCBiZSBsb2dpY2FsIChubyBoeXBoZW5zKSwgYXMgc3BlY2lmaWVkXG4gKiBpbiBgQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcmAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ1NTIHByb3BlcnR5IG5hbWUgc3VjaCBhcyBgdG9wTWFyZ2luYC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQ1NTIHByb3BlcnR5IHZhbHVlIHN1Y2ggYXMgYDEwcHhgLlxuICogQHBhcmFtIHtSZWFjdERPTUNvbXBvbmVudH0gY29tcG9uZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgc3R5bGUgdmFsdWUgd2l0aCBkaW1lbnNpb25zIGFwcGxpZWQuXG4gKi9cbmZ1bmN0aW9uIGRhbmdlcm91c1N0eWxlVmFsdWUobmFtZSwgdmFsdWUsIGNvbXBvbmVudCkge1xuICAvLyBOb3RlIHRoYXQgd2UndmUgcmVtb3ZlZCBlc2NhcGVUZXh0Rm9yQnJvd3NlcigpIGNhbGxzIGhlcmUgc2luY2UgdGhlXG4gIC8vIHdob2xlIHN0cmluZyB3aWxsIGJlIGVzY2FwZWQgd2hlbiB0aGUgYXR0cmlidXRlIGlzIGluamVjdGVkIGludG9cbiAgLy8gdGhlIG1hcmt1cC4gSWYgeW91IHByb3ZpZGUgdW5zYWZlIHVzZXIgZGF0YSBoZXJlIHRoZXkgY2FuIGluamVjdFxuICAvLyBhcmJpdHJhcnkgQ1NTIHdoaWNoIG1heSBiZSBwcm9ibGVtYXRpYyAoSSBjb3VsZG4ndCByZXBybyB0aGlzKTpcbiAgLy8gaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9YU1NfRmlsdGVyX0V2YXNpb25fQ2hlYXRfU2hlZXRcbiAgLy8gaHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMDcvMTEvMjYvdWx0aW1hdGUteHNzLWNzcy1pbmplY3Rpb24vXG4gIC8vIFRoaXMgaXMgbm90IGFuIFhTUyBob2xlIGJ1dCBpbnN0ZWFkIGEgcG90ZW50aWFsIENTUyBpbmplY3Rpb24gaXNzdWVcbiAgLy8gd2hpY2ggaGFzIGxlYWQgdG8gYSBncmVhdGVyIGRpc2N1c3Npb24gYWJvdXQgaG93IHdlJ3JlIGdvaW5nIHRvXG4gIC8vIHRydXN0IFVSTHMgbW92aW5nIGZvcndhcmQuIFNlZSAjMjExNTkwMVxuXG4gIHZhciBpc0VtcHR5ID0gdmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB2YWx1ZSA9PT0gJyc7XG4gIGlmIChpc0VtcHR5KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIGlzTm9uTnVtZXJpYyA9IGlzTmFOKHZhbHVlKTtcbiAgaWYgKGlzTm9uTnVtZXJpYyB8fCB2YWx1ZSA9PT0gMCB8fCBpc1VuaXRsZXNzTnVtYmVyLmhhc093blByb3BlcnR5KG5hbWUpICYmIGlzVW5pdGxlc3NOdW1iZXJbbmFtZV0pIHtcbiAgICByZXR1cm4gJycgKyB2YWx1ZTsgLy8gY2FzdCB0byBzdHJpbmdcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEFsbG93ICcwJyB0byBwYXNzIHRocm91Z2ggd2l0aG91dCB3YXJuaW5nLiAwIGlzIGFscmVhZHkgc3BlY2lhbCBhbmRcbiAgICAgIC8vIGRvZXNuJ3QgcmVxdWlyZSB1bml0cywgc28gd2UgZG9uJ3QgbmVlZCB0byB3YXJuIGFib3V0IGl0LlxuICAgICAgaWYgKGNvbXBvbmVudCAmJiB2YWx1ZSAhPT0gJzAnKSB7XG4gICAgICAgIHZhciBvd25lciA9IGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgICB2YXIgb3duZXJOYW1lID0gb3duZXIgPyBvd25lci5nZXROYW1lKCkgOiBudWxsO1xuICAgICAgICBpZiAob3duZXJOYW1lICYmICFzdHlsZVdhcm5pbmdzW293bmVyTmFtZV0pIHtcbiAgICAgICAgICBzdHlsZVdhcm5pbmdzW293bmVyTmFtZV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2FybmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChvd25lck5hbWUpIHtcbiAgICAgICAgICB2YXIgd2FybmluZ3MgPSBzdHlsZVdhcm5pbmdzW293bmVyTmFtZV07XG4gICAgICAgICAgd2FybmVkID0gd2FybmluZ3NbbmFtZV07XG4gICAgICAgICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgICAgICAgIHdhcm5pbmdzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ2EgYCVzYCB0YWcgKG93bmVyOiBgJXNgKSB3YXMgcGFzc2VkIGEgbnVtZXJpYyBzdHJpbmcgdmFsdWUgJyArICdmb3IgQ1NTIHByb3BlcnR5IGAlc2AgKHZhbHVlOiBgJXNgKSB3aGljaCB3aWxsIGJlIHRyZWF0ZWQgJyArICdhcyBhIHVuaXRsZXNzIG51bWJlciBpbiBhIGZ1dHVyZSB2ZXJzaW9uIG9mIFJlYWN0LicsIGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQudHlwZSwgb3duZXJOYW1lIHx8ICd1bmtub3duJywgbmFtZSwgdmFsdWUpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuICB9XG4gIHJldHVybiB2YWx1ZSArICdweCc7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGRhbmdlcm91c1N0eWxlVmFsdWU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgX2h5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuXG4vKipcbiAqIENhbWVsY2FzZXMgYSBoeXBoZW5hdGVkIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF9oeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoXywgY2hhcmFjdGVyKSB7XG4gICAgcmV0dXJuIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FtZWxpemUgPSByZXF1aXJlKCcuL2NhbWVsaXplJyk7XG5cbnZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuXG4vKipcbiAqIENhbWVsY2FzZXMgYSBoeXBoZW5hdGVkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJ2JhY2tncm91bmQtY29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1vei10cmFuc2l0aW9uJylcbiAqICAgPCBcIk1velRyYW5zaXRpb25cIlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCctbXMtdHJhbnNpdGlvbicpXG4gKiAgIDwgXCJtc1RyYW5zaXRpb25cIlxuICpcbiAqIEFzIEFuZGkgU21pdGggc3VnZ2VzdHNcbiAqIChodHRwOi8vd3d3LmFuZGlzbWl0aC5jb20vYmxvZy8yMDEyLzAyL21vZGVybml6ci1wcmVmaXhlZC8pLCBhbiBgLW1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gY2FtZWxpemUoc3RyaW5nLnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbWVsaXplU3R5bGVOYW1lOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU3R5bGVTaGVldCA9IFN0eWxlU2hlZXQ7XG5cbnZhciBfb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX29iamVjdEFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RBc3NpZ24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuLyogXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXMgXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlcyBcbi0gdXNlcyBgaW5zZXJ0UnVsZWAgZm9yIGFwcGVuZGluZyBpbiBwcm9kdWN0aW9uIGZvciAqbXVjaCogZmFzdGVyIHBlcmZvcm1hbmNlXG4tICdwb2x5ZmlsbHMnIG9uIHNlcnZlciBzaWRlIFxuXG5cbi8vIHVzYWdlXG5cbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJ2dsYW1vci9saWIvc2hlZXQnXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KClcblxuc3R5bGVTaGVldC5pbmplY3QoKSBcbi0gJ2luamVjdHMnIHRoZSBzdHlsZXNoZWV0IGludG8gdGhlIHBhZ2UgKG9yIGludG8gbWVtb3J5IGlmIG9uIHNlcnZlcilcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKSBcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXQgXG5cbnN0eWxlU2hlZXQuZmx1c2goKSBcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cblxuKi9cblxuZnVuY3Rpb24gbGFzdChhcnIpIHtcbiAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5cbmZ1bmN0aW9uIHNoZWV0Rm9yVGFnKHRhZykge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfVxuXG4gIC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3ggXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGlzRGV2ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgIXByb2Nlc3MuZW52Lk5PREVfRU5WOyAvLyh4ID0+ICh4ID09PSAnZGV2ZWxvcG1lbnQnKSB8fCAheCkocHJvY2Vzcy5lbnYuTk9ERV9FTlYpXG52YXIgaXNUZXN0ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JztcblxudmFyIG9sZElFID0gZnVuY3Rpb24gKCkge1xuICBpZiAoaXNCcm93c2VyKSB7XG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdi5pbm5lckhUTUwgPSAnPCEtLVtpZiBsdCBJRSAxMF0+PGk+PC9pPjwhW2VuZGlmXS0tPic7XG4gICAgcmV0dXJuIGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaScpLmxlbmd0aCA9PT0gMTtcbiAgfVxufSgpO1xuXG5mdW5jdGlvbiBtYWtlU3R5bGVUYWcoKSB7XG4gIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB0YWcudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZ2xhbW9yJywgJycpO1xuICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSkuYXBwZW5kQ2hpbGQodGFnKTtcbiAgcmV0dXJuIHRhZztcbn1cblxuZnVuY3Rpb24gU3R5bGVTaGVldCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgX3JlZiRzcGVlZHkgPSBfcmVmLnNwZWVkeSxcbiAgICAgIHNwZWVkeSA9IF9yZWYkc3BlZWR5ID09PSB1bmRlZmluZWQgPyAhaXNEZXYgJiYgIWlzVGVzdCA6IF9yZWYkc3BlZWR5LFxuICAgICAgX3JlZiRtYXhMZW5ndGggPSBfcmVmLm1heExlbmd0aCxcbiAgICAgIG1heExlbmd0aCA9IF9yZWYkbWF4TGVuZ3RoID09PSB1bmRlZmluZWQgPyBpc0Jyb3dzZXIgJiYgb2xkSUUgPyA0MDAwIDogNjUwMDAgOiBfcmVmJG1heExlbmd0aDtcblxuICB0aGlzLmlzU3BlZWR5ID0gc3BlZWR5OyAvLyB0aGUgYmlnIGRyYXdiYWNrIGhlcmUgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gIHRoaXMuc2hlZXQgPSB1bmRlZmluZWQ7XG4gIHRoaXMudGFncyA9IFtdO1xuICB0aGlzLm1heExlbmd0aCA9IG1heExlbmd0aDtcbiAgdGhpcy5jdHIgPSAwO1xufVxuXG4oMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoU3R5bGVTaGVldC5wcm90b3R5cGUsIHtcbiAgZ2V0U2hlZXQ6IGZ1bmN0aW9uIGdldFNoZWV0KCkge1xuICAgIHJldHVybiBzaGVldEZvclRhZyhsYXN0KHRoaXMudGFncykpO1xuICB9LFxuICBpbmplY3Q6IGZ1bmN0aW9uIGluamVjdCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuaW5qZWN0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWxyZWFkeSBpbmplY3RlZCBzdHlsZXNoZWV0IScpO1xuICAgIH1cbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICB0aGlzLnRhZ3NbMF0gPSBtYWtlU3R5bGVUYWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc2VydmVyIHNpZGUgJ3BvbHlmaWxsJy4ganVzdCBlbm91Z2ggYmVoYXZpb3IgdG8gYmUgdXNlZnVsLlxuICAgICAgdGhpcy5zaGVldCA9IHtcbiAgICAgICAgY3NzUnVsZXM6IFtdLFxuICAgICAgICBpbnNlcnRSdWxlOiBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUpIHtcbiAgICAgICAgICAvLyBlbm91Z2ggJ3NwZWMgY29tcGxpYW5jZScgdG8gYmUgYWJsZSB0byBleHRyYWN0IHRoZSBydWxlcyBsYXRlciAgXG4gICAgICAgICAgLy8gaW4gb3RoZXIgd29yZHMsIGp1c3QgdGhlIGNzc1RleHQgZmllbGQgXG4gICAgICAgICAgX3RoaXMuc2hlZXQuY3NzUnVsZXMucHVzaCh7IGNzc1RleHQ6IHJ1bGUgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuaW5qZWN0ZWQgPSB0cnVlO1xuICB9LFxuICBzcGVlZHk6IGZ1bmN0aW9uIHNwZWVkeShib29sKSB7XG4gICAgaWYgKHRoaXMuY3RyICE9PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBjaGFuZ2Ugc3BlZWR5IG1vZGUgYWZ0ZXIgaW5zZXJ0aW5nIGFueSBydWxlIHRvIHNoZWV0LiBFaXRoZXIgY2FsbCBzcGVlZHkoJyArIGJvb2wgKyAnKSBlYXJsaWVyIGluIHlvdXIgYXBwLCBvciBjYWxsIGZsdXNoKCkgYmVmb3JlIHNwZWVkeSgnICsgYm9vbCArICcpJyk7XG4gICAgfVxuICAgIHRoaXMuaXNTcGVlZHkgPSAhIWJvb2w7XG4gIH0sXG4gIF9pbnNlcnQ6IGZ1bmN0aW9uIF9pbnNlcnQocnVsZSkge1xuICAgIC8vIHRoaXMgd2VpcmRuZXNzIGZvciBwZXJmLCBhbmQgY2hyb21lJ3Mgd2VpcmQgYnVnIFxuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIwMDA3OTkyL2Nocm9tZS1zdWRkZW5seS1zdG9wcGVkLWFjY2VwdGluZy1pbnNlcnRydWxlXG4gICAgdHJ5IHtcbiAgICAgIHZhciBzaGVldCA9IHRoaXMuZ2V0U2hlZXQoKTtcbiAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgcnVsZS5pbmRleE9mKCdAaW1wb3J0JykgIT09IC0xID8gMCA6IHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGlzRGV2KSB7XG4gICAgICAgIC8vIG1pZ2h0IG5lZWQgYmV0ZXIgZHggZm9yIHRoaXMgXG4gICAgICAgIGNvbnNvbGUud2Fybignd2hvb3BzLCBpbGxlZ2FsIHJ1bGUgaW5zZXJ0ZWQnLCBydWxlKTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcblxuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIC8vIHRoaXMgaXMgdGhlIHVsdHJhZmFzdCB2ZXJzaW9uLCB3b3JrcyBhY3Jvc3MgYnJvd3NlcnMgXG4gICAgICBpZiAodGhpcy5pc1NwZWVkeSAmJiB0aGlzLmdldFNoZWV0KCkuaW5zZXJ0UnVsZSkge1xuICAgICAgICB0aGlzLl9pbnNlcnQocnVsZSk7XG4gICAgICB9XG4gICAgICAvLyBtb3JlIGJyb3dzZXIgd2VpcmRuZXNzLiBJIGRvbid0IGV2ZW4ga25vdyAgICBcbiAgICAgIC8vIGVsc2UgaWYodGhpcy50YWdzLmxlbmd0aCA+IDAgJiYgdGhpcy50YWdzOjpsYXN0KCkuc3R5bGVTaGVldCkgeyAgICAgIFxuICAgICAgLy8gICB0aGlzLnRhZ3M6Omxhc3QoKS5zdHlsZVNoZWV0LmNzc1RleHQrPSBydWxlXG4gICAgICAvLyB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAocnVsZS5pbmRleE9mKCdAaW1wb3J0JykgIT09IC0xKSB7XG4gICAgICAgICAgICB2YXIgdGFnID0gbGFzdCh0aGlzLnRhZ3MpO1xuICAgICAgICAgICAgdGFnLmluc2VydEJlZm9yZShkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShydWxlKSwgdGFnLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXN0KHRoaXMudGFncykuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzZXJ2ZXIgc2lkZSBpcyBwcmV0dHkgc2ltcGxlICAgICAgICAgXG4gICAgICB0aGlzLnNoZWV0Lmluc2VydFJ1bGUocnVsZSwgcnVsZS5pbmRleE9mKCdAaW1wb3J0JykgIT09IC0xID8gMCA6IHRoaXMuc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICAgIGlmIChpc0Jyb3dzZXIgJiYgdGhpcy5jdHIgJSB0aGlzLm1heExlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy50YWdzLnB1c2gobWFrZVN0eWxlVGFnKCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jdHIgLSAxO1xuICB9LFxuXG4gIC8vIGNvbW1lbnRpbmcgdGhpcyBvdXQgdGlsbCB3ZSBkZWNpZGUgb24gdjMncyBkZWNpc2lvbiBcbiAgLy8gX3JlcGxhY2UoaW5kZXgsIHJ1bGUpIHtcbiAgLy8gICAvLyB0aGlzIHdlaXJkbmVzcyBmb3IgcGVyZiwgYW5kIGNocm9tZSdzIHdlaXJkIGJ1ZyBcbiAgLy8gICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMDAwNzk5Mi9jaHJvbWUtc3VkZGVubHktc3RvcHBlZC1hY2NlcHRpbmctaW5zZXJ0cnVsZVxuICAvLyAgIHRyeSB7ICBcbiAgLy8gICAgIGxldCBzaGVldCA9IHRoaXMuZ2V0U2hlZXQoKSAgICAgICAgXG4gIC8vICAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KSAvLyB0b2RvIC0gY29ycmVjdCBpbmRleCBoZXJlICAgICBcbiAgLy8gICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgaW5kZXgpXG4gIC8vICAgfVxuICAvLyAgIGNhdGNoKGUpIHtcbiAgLy8gICAgIGlmKGlzRGV2KSB7XG4gIC8vICAgICAgIC8vIG1pZ2h0IG5lZWQgYmV0ZXIgZHggZm9yIHRoaXMgXG4gIC8vICAgICAgIGNvbnNvbGUud2Fybignd2hvb3BzLCBwcm9ibGVtIHJlcGxhY2luZyBydWxlJywgcnVsZSkgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgLy8gICAgIH0gICAgICAgICAgXG4gIC8vICAgfSAgICAgICAgICBcblxuICAvLyB9XG4gIC8vIHJlcGxhY2UoaW5kZXgsIHJ1bGUpIHtcbiAgLy8gICBpZihpc0Jyb3dzZXIpIHtcbiAgLy8gICAgIGlmKHRoaXMuaXNTcGVlZHkgJiYgdGhpcy5nZXRTaGVldCgpLmluc2VydFJ1bGUpIHtcbiAgLy8gICAgICAgdGhpcy5fcmVwbGFjZShpbmRleCwgcnVsZSlcbiAgLy8gICAgIH1cbiAgLy8gICAgIGVsc2Uge1xuICAvLyAgICAgICBsZXQgX3Nsb3QgPSBNYXRoLmZsb29yKChpbmRleCAgKyB0aGlzLm1heExlbmd0aCkgLyB0aGlzLm1heExlbmd0aCkgLSAxICAgICAgICBcbiAgLy8gICAgICAgbGV0IF9pbmRleCA9IChpbmRleCAlIHRoaXMubWF4TGVuZ3RoKSArIDFcbiAgLy8gICAgICAgbGV0IHRhZyA9IHRoaXMudGFnc1tfc2xvdF1cbiAgLy8gICAgICAgdGFnLnJlcGxhY2VDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShydWxlKSwgdGFnLmNoaWxkTm9kZXNbX2luZGV4XSlcbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vICAgZWxzZSB7XG4gIC8vICAgICBsZXQgcnVsZXMgPSB0aGlzLnNoZWV0LmNzc1J1bGVzXG4gIC8vICAgICB0aGlzLnNoZWV0LmNzc1J1bGVzID0gWyAuLi5ydWxlcy5zbGljZSgwLCBpbmRleCksIHsgY3NzVGV4dDogcnVsZSB9LCAuLi5ydWxlcy5zbGljZShpbmRleCArIDEpIF1cbiAgLy8gICB9XG4gIC8vIH1cbiAgZGVsZXRlOiBmdW5jdGlvbiBfZGVsZXRlKGluZGV4KSB7XG4gICAgLy8gd2UgaW5zZXJ0IGEgYmxhbmsgcnVsZSB3aGVuICdkZWxldGluZycgc28gcHJldmlvdXNseSByZXR1cm5lZCBpbmRleGVzIHJlbWFpbiBzdGFibGVcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKGluZGV4LCAnJyk7XG4gIH0sXG4gIGZsdXNoOiBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgIHJldHVybiB0YWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWcpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICAgIHRoaXMuc2hlZXQgPSBudWxsO1xuICAgICAgdGhpcy5jdHIgPSAwO1xuICAgICAgLy8gdG9kbyAtIGxvb2sgZm9yIHJlbW5hbnRzIGluIGRvY3VtZW50LnN0eWxlU2hlZXRzXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHNpbXBsZXIgb24gc2VydmVyIFxuICAgICAgdGhpcy5zaGVldC5jc3NSdWxlcyA9IFtdO1xuICAgIH1cbiAgICB0aGlzLmluamVjdGVkID0gZmFsc2U7XG4gIH0sXG4gIHJ1bGVzOiBmdW5jdGlvbiBydWxlcygpIHtcbiAgICBpZiAoIWlzQnJvd3Nlcikge1xuICAgICAgcmV0dXJuIHRoaXMuc2hlZXQuY3NzUnVsZXM7XG4gICAgfVxuICAgIHZhciBhcnIgPSBbXTtcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZS5hcHBseShhcnIsIFthcnIubGVuZ3RoLCAwXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KEFycmF5LmZyb20oc2hlZXRGb3JUYWcodGFnKS5jc3NSdWxlcykpKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycjtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FtbF9zdHJpbmcgPSByZXF1aXJlKFwiLi9jYW1sX3N0cmluZy5qc1wiKTtcbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG5mdW5jdGlvbiBjaHIobikge1xuICBpZiAobiA8IDAgfHwgbiA+IDI1NSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQ2hhci5jaHJcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVzY2FwZWQoYykge1xuICB2YXIgZXhpdCA9IDA7XG4gIGlmIChjID49IDQwKSB7XG4gICAgaWYgKGMgIT09IDkyKSB7XG4gICAgICBleGl0ID0gYyA+PSAxMjcgPyAxIDogMjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXFxcXFxcXFxcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYyA+PSAzMikge1xuICAgIGlmIChjID49IDM5KSB7XG4gICAgICByZXR1cm4gXCJcXFxcJ1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGl0ID0gMjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYyA+PSAxNCkge1xuICAgIGV4aXQgPSAxO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoYykge1xuICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgcmV0dXJuIFwiXFxcXGJcIjtcbiAgICAgIGNhc2UgOSA6IFxuICAgICAgICAgIHJldHVybiBcIlxcXFx0XCI7XG4gICAgICBjYXNlIDEwIDogXG4gICAgICAgICAgcmV0dXJuIFwiXFxcXG5cIjtcbiAgICAgIGNhc2UgMCA6IFxuICAgICAgY2FzZSAxIDogXG4gICAgICBjYXNlIDIgOiBcbiAgICAgIGNhc2UgMyA6IFxuICAgICAgY2FzZSA0IDogXG4gICAgICBjYXNlIDUgOiBcbiAgICAgIGNhc2UgNiA6IFxuICAgICAgY2FzZSA3IDogXG4gICAgICBjYXNlIDExIDogXG4gICAgICBjYXNlIDEyIDogXG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEzIDogXG4gICAgICAgICAgcmV0dXJuIFwiXFxcXHJcIjtcbiAgICAgIFxuICAgIH1cbiAgfVxuICBzd2l0Y2ggKGV4aXQpIHtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgdmFyIHMgPSBDYW1sX3N0cmluZy5jYW1sX2NyZWF0ZV9zdHJpbmcoNCk7XG4gICAgICAgIHNbMF0gPSAvKiBcIlxcXFxcIiAqLzkyO1xuICAgICAgICBzWzFdID0gNDggKyAoYyAvIDEwMCB8IDApIHwgMDtcbiAgICAgICAgc1syXSA9IDQ4ICsgKGMgLyAxMCB8IDApICUgMTAgfCAwO1xuICAgICAgICBzWzNdID0gNDggKyBjICUgMTAgfCAwO1xuICAgICAgICByZXR1cm4gQ2FtbF9zdHJpbmcuYnl0ZXNfdG9fc3RyaW5nKHMpO1xuICAgIGNhc2UgMiA6IFxuICAgICAgICB2YXIgcyQxID0gQ2FtbF9zdHJpbmcuY2FtbF9jcmVhdGVfc3RyaW5nKDEpO1xuICAgICAgICBzJDFbMF0gPSBjO1xuICAgICAgICByZXR1cm4gQ2FtbF9zdHJpbmcuYnl0ZXNfdG9fc3RyaW5nKHMkMSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlKGMpIHtcbiAgaWYgKGMgPj0gLyogXCJBXCIgKi82NSAmJiBjIDw9IC8qIFwiWlwiICovOTAgfHwgYyA+PSAvKiBcIlxcMTkyXCIgKi8xOTIgJiYgYyA8PSAvKiBcIlxcMjE0XCIgKi8yMTQgfHwgYyA+PSAvKiBcIlxcMjE2XCIgKi8yMTYgJiYgYyA8PSAvKiBcIlxcMjIyXCIgKi8yMjIpIHtcbiAgICByZXR1cm4gYyArIDMyIHwgMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYztcbiAgfVxufVxuXG5mdW5jdGlvbiB1cHBlcmNhc2UoYykge1xuICBpZiAoYyA+PSAvKiBcImFcIiAqLzk3ICYmIGMgPD0gLyogXCJ6XCIgKi8xMjIgfHwgYyA+PSAvKiBcIlxcMjI0XCIgKi8yMjQgJiYgYyA8PSAvKiBcIlxcMjQ2XCIgKi8yNDYgfHwgYyA+PSAvKiBcIlxcMjQ4XCIgKi8yNDggJiYgYyA8PSAvKiBcIlxcMjU0XCIgKi8yNTQpIHtcbiAgICByZXR1cm4gYyAtIDMyIHwgMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYztcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wYXJlKGMxLCBjMikge1xuICByZXR1cm4gYzEgLSBjMiB8IDA7XG59XG5cbmV4cG9ydHMuY2hyID0gY2hyO1xuZXhwb3J0cy5lc2NhcGVkID0gZXNjYXBlZDtcbmV4cG9ydHMubG93ZXJjYXNlID0gbG93ZXJjYXNlO1xuZXhwb3J0cy51cHBlcmNhc2UgPSB1cHBlcmNhc2U7XG5leHBvcnRzLmNvbXBhcmUgPSBjb21wYXJlO1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENoYXIgPSByZXF1aXJlKFwiLi9jaGFyLmpzXCIpO1xudmFyIExpc3QgPSByZXF1aXJlKFwiLi9saXN0LmpzXCIpO1xudmFyIEN1cnJ5ID0gcmVxdWlyZShcIi4vY3VycnkuanNcIik7XG52YXIgQ2FtbF9vYmogPSByZXF1aXJlKFwiLi9jYW1sX29iai5qc1wiKTtcbnZhciBDYW1sX2ludDMyID0gcmVxdWlyZShcIi4vY2FtbF9pbnQzMi5qc1wiKTtcbnZhciBDYW1sX3N0cmluZyA9IHJlcXVpcmUoXCIuL2NhbWxfc3RyaW5nLmpzXCIpO1xudmFyIENhbWxfcHJpbWl0aXZlID0gcmVxdWlyZShcIi4vY2FtbF9wcmltaXRpdmUuanNcIik7XG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gbWFrZShuLCBjKSB7XG4gIHZhciBzID0gQ2FtbF9zdHJpbmcuY2FtbF9jcmVhdGVfc3RyaW5nKG4pO1xuICBDYW1sX3N0cmluZy5jYW1sX2ZpbGxfc3RyaW5nKHMsIDAsIG4sIGMpO1xuICByZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gaW5pdChuLCBmKSB7XG4gIHZhciBzID0gQ2FtbF9zdHJpbmcuY2FtbF9jcmVhdGVfc3RyaW5nKG4pO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IG4gLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICBzW2ldID0gQ3VycnkuXzEoZiwgaSk7XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cbnZhciBlbXB0eSA9IFtdO1xuXG5mdW5jdGlvbiBjb3B5KHMpIHtcbiAgdmFyIGxlbiA9IHMubGVuZ3RoO1xuICB2YXIgciA9IENhbWxfc3RyaW5nLmNhbWxfY3JlYXRlX3N0cmluZyhsZW4pO1xuICBDYW1sX3N0cmluZy5jYW1sX2JsaXRfYnl0ZXMocywgMCwgciwgMCwgbGVuKTtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHRvX3N0cmluZyhiKSB7XG4gIHJldHVybiBDYW1sX3N0cmluZy5ieXRlc190b19zdHJpbmcoY29weShiKSk7XG59XG5cbmZ1bmN0aW9uIG9mX3N0cmluZyhzKSB7XG4gIHJldHVybiBjb3B5KENhbWxfc3RyaW5nLmJ5dGVzX29mX3N0cmluZyhzKSk7XG59XG5cbmZ1bmN0aW9uIHN1YihzLCBvZnMsIGxlbikge1xuICBpZiAob2ZzIDwgMCB8fCBsZW4gPCAwIHx8IG9mcyA+IChzLmxlbmd0aCAtIGxlbiB8IDApKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcuc3ViIC8gQnl0ZXMuc3ViXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgciA9IENhbWxfc3RyaW5nLmNhbWxfY3JlYXRlX3N0cmluZyhsZW4pO1xuICAgIENhbWxfc3RyaW5nLmNhbWxfYmxpdF9ieXRlcyhzLCBvZnMsIHIsIDAsIGxlbik7XG4gICAgcmV0dXJuIHI7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3ViX3N0cmluZyhiLCBvZnMsIGxlbikge1xuICByZXR1cm4gQ2FtbF9zdHJpbmcuYnl0ZXNfdG9fc3RyaW5nKHN1YihiLCBvZnMsIGxlbikpO1xufVxuXG5mdW5jdGlvbiBleHRlbmQocywgbGVmdCwgcmlnaHQpIHtcbiAgdmFyIGxlbiA9IChzLmxlbmd0aCArIGxlZnQgfCAwKSArIHJpZ2h0IHwgMDtcbiAgdmFyIHIgPSBDYW1sX3N0cmluZy5jYW1sX2NyZWF0ZV9zdHJpbmcobGVuKTtcbiAgdmFyIG1hdGNoID0gbGVmdCA8IDAgPyAvKiB0dXBsZSAqL1tcbiAgICAgIC1sZWZ0IHwgMCxcbiAgICAgIDBcbiAgICBdIDogLyogdHVwbGUgKi9bXG4gICAgICAwLFxuICAgICAgbGVmdFxuICAgIF07XG4gIHZhciBkc3RvZmYgPSBtYXRjaFsxXTtcbiAgdmFyIHNyY29mZiA9IG1hdGNoWzBdO1xuICB2YXIgY3B5bGVuID0gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfbWluKHMubGVuZ3RoIC0gc3Jjb2ZmIHwgMCwgbGVuIC0gZHN0b2ZmIHwgMCk7XG4gIGlmIChjcHlsZW4gPiAwKSB7XG4gICAgQ2FtbF9zdHJpbmcuY2FtbF9ibGl0X2J5dGVzKHMsIHNyY29mZiwgciwgZHN0b2ZmLCBjcHlsZW4pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBmaWxsKHMsIG9mcywgbGVuLCBjKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKHMubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5maWxsIC8gQnl0ZXMuZmlsbFwiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENhbWxfc3RyaW5nLmNhbWxfZmlsbF9zdHJpbmcocywgb2ZzLCBsZW4sIGMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJsaXQoczEsIG9mczEsIHMyLCBvZnMyLCBsZW4pIHtcbiAgaWYgKGxlbiA8IDAgfHwgb2ZzMSA8IDAgfHwgb2ZzMSA+IChzMS5sZW5ndGggLSBsZW4gfCAwKSB8fCBvZnMyIDwgMCB8fCBvZnMyID4gKHMyLmxlbmd0aCAtIGxlbiB8IDApKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJCeXRlcy5ibGl0XCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ2FtbF9zdHJpbmcuY2FtbF9ibGl0X2J5dGVzKHMxLCBvZnMxLCBzMiwgb2ZzMiwgbGVuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBibGl0X3N0cmluZyhzMSwgb2ZzMSwgczIsIG9mczIsIGxlbikge1xuICBpZiAobGVuIDwgMCB8fCBvZnMxIDwgMCB8fCBvZnMxID4gKHMxLmxlbmd0aCAtIGxlbiB8IDApIHx8IG9mczIgPCAwIHx8IG9mczIgPiAoczIubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5ibGl0IC8gQnl0ZXMuYmxpdF9zdHJpbmdcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDYW1sX3N0cmluZy5jYW1sX2JsaXRfc3RyaW5nKHMxLCBvZnMxLCBzMiwgb2ZzMiwgbGVuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpdGVyKGYsIGEpIHtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBhLmxlbmd0aCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIEN1cnJ5Ll8xKGYsIGFbaV0pO1xuICB9XG4gIHJldHVybiAvKiAoKSAqLzA7XG59XG5cbmZ1bmN0aW9uIGl0ZXJpKGYsIGEpIHtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBhLmxlbmd0aCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIEN1cnJ5Ll8yKGYsIGksIGFbaV0pO1xuICB9XG4gIHJldHVybiAvKiAoKSAqLzA7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdChzZXAsIGwpIHtcbiAgaWYgKGwpIHtcbiAgICB2YXIgaGQgPSBsWzBdO1xuICAgIHZhciBudW0gPSBbMF07XG4gICAgdmFyIGxlbiA9IFswXTtcbiAgICBMaXN0Lml0ZXIoKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICBudW1bMF0gPSBudW1bMF0gKyAxIHwgMDtcbiAgICAgICAgICAgIGxlblswXSA9IGxlblswXSArIHMubGVuZ3RoIHwgMDtcbiAgICAgICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICAgICAgfSksIGwpO1xuICAgIHZhciByID0gQ2FtbF9zdHJpbmcuY2FtbF9jcmVhdGVfc3RyaW5nKGxlblswXSArIENhbWxfaW50MzIuaW11bChzZXAubGVuZ3RoLCBudW1bMF0gLSAxIHwgMCkgfCAwKTtcbiAgICBDYW1sX3N0cmluZy5jYW1sX2JsaXRfYnl0ZXMoaGQsIDAsIHIsIDAsIGhkLmxlbmd0aCk7XG4gICAgdmFyIHBvcyA9IFtoZC5sZW5ndGhdO1xuICAgIExpc3QuaXRlcigoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIENhbWxfc3RyaW5nLmNhbWxfYmxpdF9ieXRlcyhzZXAsIDAsIHIsIHBvc1swXSwgc2VwLmxlbmd0aCk7XG4gICAgICAgICAgICBwb3NbMF0gPSBwb3NbMF0gKyBzZXAubGVuZ3RoIHwgMDtcbiAgICAgICAgICAgIENhbWxfc3RyaW5nLmNhbWxfYmxpdF9ieXRlcyhzLCAwLCByLCBwb3NbMF0sIHMubGVuZ3RoKTtcbiAgICAgICAgICAgIHBvc1swXSA9IHBvc1swXSArIHMubGVuZ3RoIHwgMDtcbiAgICAgICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICAgICAgfSksIGxbMV0pO1xuICAgIHJldHVybiByO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbXB0eTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYXQoczEsIHMyKSB7XG4gIHZhciBsMSA9IHMxLmxlbmd0aDtcbiAgdmFyIGwyID0gczIubGVuZ3RoO1xuICB2YXIgciA9IENhbWxfc3RyaW5nLmNhbWxfY3JlYXRlX3N0cmluZyhsMSArIGwyIHwgMCk7XG4gIENhbWxfc3RyaW5nLmNhbWxfYmxpdF9ieXRlcyhzMSwgMCwgciwgMCwgbDEpO1xuICBDYW1sX3N0cmluZy5jYW1sX2JsaXRfYnl0ZXMoczIsIDAsIHIsIGwxLCBsMik7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBpc19zcGFjZShwYXJhbSkge1xuICB2YXIgc3dpdGNoZXIgPSBwYXJhbSAtIDkgfCAwO1xuICBpZiAoc3dpdGNoZXIgPiA0IHx8IHN3aXRjaGVyIDwgMCkge1xuICAgIGlmIChzd2l0Y2hlciAhPT0gMjMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9IGVsc2UgaWYgKHN3aXRjaGVyICE9PSAyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyaW0ocykge1xuICB2YXIgbGVuID0gcy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgd2hpbGUoaSA8IGxlbiAmJiBpc19zcGFjZShzW2ldKSkge1xuICAgIGkgPSBpICsgMSB8IDA7XG4gIH07XG4gIHZhciBqID0gbGVuIC0gMSB8IDA7XG4gIHdoaWxlKGogPj0gaSAmJiBpc19zcGFjZShzW2pdKSkge1xuICAgIGogPSBqIC0gMSB8IDA7XG4gIH07XG4gIGlmIChqID49IGkpIHtcbiAgICByZXR1cm4gc3ViKHMsIGksIChqIC0gaSB8IDApICsgMSB8IDApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbXB0eTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlc2NhcGVkKHMpIHtcbiAgdmFyIG4gPSAwO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IHMubGVuZ3RoIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgdmFyIG1hdGNoID0gc1tpXTtcbiAgICB2YXIgdG1wO1xuICAgIGlmIChtYXRjaCA+PSAzMikge1xuICAgICAgdmFyIHN3aXRjaGVyID0gbWF0Y2ggLSAzNCB8IDA7XG4gICAgICB0bXAgPSBzd2l0Y2hlciA+IDU4IHx8IHN3aXRjaGVyIDwgMCA/IChcbiAgICAgICAgICBzd2l0Y2hlciA+PSA5MyA/IDQgOiAxXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgc3dpdGNoZXIgPiA1NyB8fCBzd2l0Y2hlciA8IDEgPyAyIDogMVxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0bXAgPSBtYXRjaCA+PSAxMSA/IChcbiAgICAgICAgICBtYXRjaCAhPT0gMTMgPyA0IDogMlxuICAgICAgICApIDogKFxuICAgICAgICAgIG1hdGNoID49IDggPyAyIDogNFxuICAgICAgICApO1xuICAgIH1cbiAgICBuID0gbiArIHRtcCB8IDA7XG4gIH1cbiAgaWYgKG4gPT09IHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNvcHkocyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHMkcHJpbWUgPSBDYW1sX3N0cmluZy5jYW1sX2NyZWF0ZV9zdHJpbmcobik7XG4gICAgbiA9IDA7XG4gICAgZm9yKHZhciBpJDEgPSAwICxpX2ZpbmlzaCQxID0gcy5sZW5ndGggLSAxIHwgMDsgaSQxIDw9IGlfZmluaXNoJDE7ICsraSQxKXtcbiAgICAgIHZhciBjID0gc1tpJDFdO1xuICAgICAgdmFyIGV4aXQgPSAwO1xuICAgICAgaWYgKGMgPj0gMzUpIHtcbiAgICAgICAgaWYgKGMgIT09IDkyKSB7XG4gICAgICAgICAgaWYgKGMgPj0gMTI3KSB7XG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcyRwcmltZVtuXSA9IGM7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4aXQgPSAyO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMzIpIHtcbiAgICAgICAgaWYgKGMgPj0gMzQpIHtcbiAgICAgICAgICBleGl0ID0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzJHByaW1lW25dID0gYztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjID49IDE0KSB7XG4gICAgICAgIGV4aXQgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcIlxcXFxcIiAqLzkyO1xuICAgICAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJiXCIgKi85ODtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcIlxcXFxcIiAqLzkyO1xuICAgICAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJ0XCIgKi8xMTY7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcIm5cIiAqLzExMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgY2FzZSA2IDogXG4gICAgICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcInJcIiAqLzExNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoZXhpdCkge1xuICAgICAgICBjYXNlIDEgOiBcbiAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcIlxcXFxcIiAqLzkyO1xuICAgICAgICAgICAgbiA9IG4gKyAxIHwgMDtcbiAgICAgICAgICAgIHMkcHJpbWVbbl0gPSA0OCArIChjIC8gMTAwIHwgMCkgfCAwO1xuICAgICAgICAgICAgbiA9IG4gKyAxIHwgMDtcbiAgICAgICAgICAgIHMkcHJpbWVbbl0gPSA0OCArIChjIC8gMTAgfCAwKSAlIDEwIHwgMDtcbiAgICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgICBzJHByaW1lW25dID0gNDggKyBjICUgMTAgfCAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgICAgcyRwcmltZVtuXSA9IGM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICB9XG4gICAgICBuID0gbiArIDEgfCAwO1xuICAgIH1cbiAgICByZXR1cm4gcyRwcmltZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXAoZiwgcykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAobCA9PT0gMCkge1xuICAgIHJldHVybiBzO1xuICB9IGVsc2Uge1xuICAgIHZhciByID0gQ2FtbF9zdHJpbmcuY2FtbF9jcmVhdGVfc3RyaW5nKGwpO1xuICAgIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgICAgcltpXSA9IEN1cnJ5Ll8xKGYsIHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBpKGYsIHMpIHtcbiAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgaWYgKGwgPT09IDApIHtcbiAgICByZXR1cm4gcztcbiAgfSBlbHNlIHtcbiAgICB2YXIgciA9IENhbWxfc3RyaW5nLmNhbWxfY3JlYXRlX3N0cmluZyhsKTtcbiAgICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGwgLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgIHJbaV0gPSBDdXJyeS5fMihmLCBpLCBzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBwZXJjYXNlKHMpIHtcbiAgcmV0dXJuIG1hcChDaGFyLnVwcGVyY2FzZSwgcyk7XG59XG5cbmZ1bmN0aW9uIGxvd2VyY2FzZShzKSB7XG4gIHJldHVybiBtYXAoQ2hhci5sb3dlcmNhc2UsIHMpO1xufVxuXG5mdW5jdGlvbiBhcHBseTEoZiwgcykge1xuICBpZiAocy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gcztcbiAgfSBlbHNlIHtcbiAgICB2YXIgciA9IGNvcHkocyk7XG4gICAgclswXSA9IEN1cnJ5Ll8xKGYsIHNbMF0pO1xuICAgIHJldHVybiByO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUocykge1xuICByZXR1cm4gYXBwbHkxKENoYXIudXBwZXJjYXNlLCBzKTtcbn1cblxuZnVuY3Rpb24gdW5jYXBpdGFsaXplKHMpIHtcbiAgcmV0dXJuIGFwcGx5MShDaGFyLmxvd2VyY2FzZSwgcyk7XG59XG5cbmZ1bmN0aW9uIGluZGV4X3JlYyhzLCBsaW0sIF9pLCBjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID49IGxpbSkge1xuICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kO1xuICAgIH0gZWxzZSBpZiAoc1tpXSA9PT0gYykge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5kZXgocywgYykge1xuICByZXR1cm4gaW5kZXhfcmVjKHMsIHMubGVuZ3RoLCAwLCBjKTtcbn1cblxuZnVuY3Rpb24gaW5kZXhfZnJvbShzLCBpLCBjKSB7XG4gIHZhciBsID0gcy5sZW5ndGg7XG4gIGlmIChpIDwgMCB8fCBpID4gbCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLmluZGV4X2Zyb20gLyBCeXRlcy5pbmRleF9mcm9tXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaW5kZXhfcmVjKHMsIGwsIGksIGMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9yZWMocywgX2ksIGMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgfSBlbHNlIGlmIChzW2ldID09PSBjKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2kgPSBpIC0gMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByaW5kZXgocywgYykge1xuICByZXR1cm4gcmluZGV4X3JlYyhzLCBzLmxlbmd0aCAtIDEgfCAwLCBjKTtcbn1cblxuZnVuY3Rpb24gcmluZGV4X2Zyb20ocywgaSwgYykge1xuICBpZiAoaSA8IC0xIHx8IGkgPj0gcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5yaW5kZXhfZnJvbSAvIEJ5dGVzLnJpbmRleF9mcm9tXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmluZGV4X3JlYyhzLCBpLCBjKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb250YWluc19mcm9tKHMsIGksIGMpIHtcbiAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgaWYgKGkgPCAwIHx8IGkgPiBsKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcuY29udGFpbnNfZnJvbSAvIEJ5dGVzLmNvbnRhaW5zX2Zyb21cIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBpbmRleF9yZWMocywgbCwgaSwgYyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGV4bil7XG4gICAgICBpZiAoZXhuID09PSBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXhuO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb250YWlucyhzLCBjKSB7XG4gIHJldHVybiBjb250YWluc19mcm9tKHMsIDAsIGMpO1xufVxuXG5mdW5jdGlvbiByY29udGFpbnNfZnJvbShzLCBpLCBjKSB7XG4gIGlmIChpIDwgMCB8fCBpID49IHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcucmNvbnRhaW5zX2Zyb20gLyBCeXRlcy5yY29udGFpbnNfZnJvbVwiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIHJpbmRleF9yZWMocywgaSwgYyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGV4bil7XG4gICAgICBpZiAoZXhuID09PSBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXhuO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgY29tcGFyZSA9IENhbWxfb2JqLmNhbWxfY29tcGFyZTtcblxudmFyIHVuc2FmZV90b19zdHJpbmcgPSBDYW1sX3N0cmluZy5ieXRlc190b19zdHJpbmc7XG5cbnZhciB1bnNhZmVfb2Zfc3RyaW5nID0gQ2FtbF9zdHJpbmcuYnl0ZXNfb2Zfc3RyaW5nO1xuXG5leHBvcnRzLm1ha2UgPSBtYWtlO1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMuZW1wdHkgPSBlbXB0eTtcbmV4cG9ydHMuY29weSA9IGNvcHk7XG5leHBvcnRzLm9mX3N0cmluZyA9IG9mX3N0cmluZztcbmV4cG9ydHMudG9fc3RyaW5nID0gdG9fc3RyaW5nO1xuZXhwb3J0cy5zdWIgPSBzdWI7XG5leHBvcnRzLnN1Yl9zdHJpbmcgPSBzdWJfc3RyaW5nO1xuZXhwb3J0cy5leHRlbmQgPSBleHRlbmQ7XG5leHBvcnRzLmZpbGwgPSBmaWxsO1xuZXhwb3J0cy5ibGl0ID0gYmxpdDtcbmV4cG9ydHMuYmxpdF9zdHJpbmcgPSBibGl0X3N0cmluZztcbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuZXhwb3J0cy5jYXQgPSBjYXQ7XG5leHBvcnRzLml0ZXIgPSBpdGVyO1xuZXhwb3J0cy5pdGVyaSA9IGl0ZXJpO1xuZXhwb3J0cy5tYXAgPSBtYXA7XG5leHBvcnRzLm1hcGkgPSBtYXBpO1xuZXhwb3J0cy50cmltID0gdHJpbTtcbmV4cG9ydHMuZXNjYXBlZCA9IGVzY2FwZWQ7XG5leHBvcnRzLmluZGV4ID0gaW5kZXg7XG5leHBvcnRzLnJpbmRleCA9IHJpbmRleDtcbmV4cG9ydHMuaW5kZXhfZnJvbSA9IGluZGV4X2Zyb207XG5leHBvcnRzLnJpbmRleF9mcm9tID0gcmluZGV4X2Zyb207XG5leHBvcnRzLmNvbnRhaW5zID0gY29udGFpbnM7XG5leHBvcnRzLmNvbnRhaW5zX2Zyb20gPSBjb250YWluc19mcm9tO1xuZXhwb3J0cy5yY29udGFpbnNfZnJvbSA9IHJjb250YWluc19mcm9tO1xuZXhwb3J0cy51cHBlcmNhc2UgPSB1cHBlcmNhc2U7XG5leHBvcnRzLmxvd2VyY2FzZSA9IGxvd2VyY2FzZTtcbmV4cG9ydHMuY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG5leHBvcnRzLnVuY2FwaXRhbGl6ZSA9IHVuY2FwaXRhbGl6ZTtcbmV4cG9ydHMuY29tcGFyZSA9IGNvbXBhcmU7XG5leHBvcnRzLnVuc2FmZV90b19zdHJpbmcgPSB1bnNhZmVfdG9fc3RyaW5nO1xuZXhwb3J0cy51bnNhZmVfb2Zfc3RyaW5nID0gdW5zYWZlX29mX3N0cmluZztcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBMaXN0ID0gcmVxdWlyZShcIi4vbGlzdC5qc1wiKTtcbnZhciBCeXRlcyA9IHJlcXVpcmUoXCIuL2J5dGVzLmpzXCIpO1xudmFyIENhbWxfaW50MzIgPSByZXF1aXJlKFwiLi9jYW1sX2ludDMyLmpzXCIpO1xudmFyIENhbWxfc3RyaW5nID0gcmVxdWlyZShcIi4vY2FtbF9zdHJpbmcuanNcIik7XG52YXIgQ2FtbF9wcmltaXRpdmUgPSByZXF1aXJlKFwiLi9jYW1sX3ByaW1pdGl2ZS5qc1wiKTtcblxuZnVuY3Rpb24gbWFrZShuLCBjKSB7XG4gIHJldHVybiBDYW1sX3N0cmluZy5ieXRlc190b19zdHJpbmcoQnl0ZXMubWFrZShuLCBjKSk7XG59XG5cbmZ1bmN0aW9uIGluaXQobiwgZikge1xuICByZXR1cm4gQ2FtbF9zdHJpbmcuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmluaXQobiwgZikpO1xufVxuXG5mdW5jdGlvbiBjb3B5KHMpIHtcbiAgcmV0dXJuIENhbWxfc3RyaW5nLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy5jb3B5KENhbWxfc3RyaW5nLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG5mdW5jdGlvbiBzdWIocywgb2ZzLCBsZW4pIHtcbiAgcmV0dXJuIENhbWxfc3RyaW5nLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy5zdWIoQ2FtbF9zdHJpbmcuYnl0ZXNfb2Zfc3RyaW5nKHMpLCBvZnMsIGxlbikpO1xufVxuXG5mdW5jdGlvbiBjb25jYXQoc2VwLCBsKSB7XG4gIGlmIChsKSB7XG4gICAgdmFyIGhkID0gbFswXTtcbiAgICB2YXIgbnVtID0gWzBdO1xuICAgIHZhciBsZW4gPSBbMF07XG4gICAgTGlzdC5pdGVyKChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgbnVtWzBdID0gbnVtWzBdICsgMSB8IDA7XG4gICAgICAgICAgICBsZW5bMF0gPSBsZW5bMF0gKyBzLmxlbmd0aCB8IDA7XG4gICAgICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgICAgIH0pLCBsKTtcbiAgICB2YXIgciA9IENhbWxfc3RyaW5nLmNhbWxfY3JlYXRlX3N0cmluZyhsZW5bMF0gKyBDYW1sX2ludDMyLmltdWwoc2VwLmxlbmd0aCwgbnVtWzBdIC0gMSB8IDApIHwgMCk7XG4gICAgQ2FtbF9zdHJpbmcuY2FtbF9ibGl0X3N0cmluZyhoZCwgMCwgciwgMCwgaGQubGVuZ3RoKTtcbiAgICB2YXIgcG9zID0gW2hkLmxlbmd0aF07XG4gICAgTGlzdC5pdGVyKChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgQ2FtbF9zdHJpbmcuY2FtbF9ibGl0X3N0cmluZyhzZXAsIDAsIHIsIHBvc1swXSwgc2VwLmxlbmd0aCk7XG4gICAgICAgICAgICBwb3NbMF0gPSBwb3NbMF0gKyBzZXAubGVuZ3RoIHwgMDtcbiAgICAgICAgICAgIENhbWxfc3RyaW5nLmNhbWxfYmxpdF9zdHJpbmcocywgMCwgciwgcG9zWzBdLCBzLmxlbmd0aCk7XG4gICAgICAgICAgICBwb3NbMF0gPSBwb3NbMF0gKyBzLmxlbmd0aCB8IDA7XG4gICAgICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgICAgIH0pLCBsWzFdKTtcbiAgICByZXR1cm4gQ2FtbF9zdHJpbmcuYnl0ZXNfdG9fc3RyaW5nKHIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGl0ZXIoZiwgcykge1xuICByZXR1cm4gQnl0ZXMuaXRlcihmLCBDYW1sX3N0cmluZy5ieXRlc19vZl9zdHJpbmcocykpO1xufVxuXG5mdW5jdGlvbiBpdGVyaShmLCBzKSB7XG4gIHJldHVybiBCeXRlcy5pdGVyaShmLCBDYW1sX3N0cmluZy5ieXRlc19vZl9zdHJpbmcocykpO1xufVxuXG5mdW5jdGlvbiBtYXAoZiwgcykge1xuICByZXR1cm4gQ2FtbF9zdHJpbmcuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLm1hcChmLCBDYW1sX3N0cmluZy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gbWFwaShmLCBzKSB7XG4gIHJldHVybiBDYW1sX3N0cmluZy5ieXRlc190b19zdHJpbmcoQnl0ZXMubWFwaShmLCBDYW1sX3N0cmluZy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gaXNfc3BhY2UocGFyYW0pIHtcbiAgdmFyIHN3aXRjaGVyID0gcGFyYW0gLSA5IHwgMDtcbiAgaWYgKHN3aXRjaGVyID4gNCB8fCBzd2l0Y2hlciA8IDApIHtcbiAgICBpZiAoc3dpdGNoZXIgIT09IDIzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzd2l0Y2hlciAhPT0gMikge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmltKHMpIHtcbiAgaWYgKHMgPT09IFwiXCIgfHwgIShpc19zcGFjZShzLmNoYXJDb2RlQXQoMCkpIHx8IGlzX3NwYWNlKHMuY2hhckNvZGVBdChzLmxlbmd0aCAtIDEgfCAwKSkpKSB7XG4gICAgcmV0dXJuIHM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENhbWxfc3RyaW5nLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy50cmltKENhbWxfc3RyaW5nLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVzY2FwZWQocykge1xuICB2YXIgbmVlZHNfZXNjYXBlID0gZnVuY3Rpb24gKF9pKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGkgPSBfaTtcbiAgICAgIGlmIChpID49IHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKG1hdGNoID49IDMyKSB7XG4gICAgICAgICAgdmFyIHN3aXRjaGVyID0gbWF0Y2ggLSAzNCB8IDA7XG4gICAgICAgICAgaWYgKHN3aXRjaGVyID4gNTggfHwgc3dpdGNoZXIgPCAwKSB7XG4gICAgICAgICAgICBpZiAoc3dpdGNoZXIgPj0gOTMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpdGNoZXIgPiA1NyB8fCBzd2l0Y2hlciA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICBpZiAobmVlZHNfZXNjYXBlKDApKSB7XG4gICAgcmV0dXJuIENhbWxfc3RyaW5nLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy5lc2NhcGVkKENhbWxfc3RyaW5nLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4KHMsIGMpIHtcbiAgcmV0dXJuIEJ5dGVzLmluZGV4KENhbWxfc3RyaW5nLmJ5dGVzX29mX3N0cmluZyhzKSwgYyk7XG59XG5cbmZ1bmN0aW9uIHJpbmRleChzLCBjKSB7XG4gIHJldHVybiBCeXRlcy5yaW5kZXgoQ2FtbF9zdHJpbmcuYnl0ZXNfb2Zfc3RyaW5nKHMpLCBjKTtcbn1cblxuZnVuY3Rpb24gaW5kZXhfZnJvbShzLCBpLCBjKSB7XG4gIHJldHVybiBCeXRlcy5pbmRleF9mcm9tKENhbWxfc3RyaW5nLmJ5dGVzX29mX3N0cmluZyhzKSwgaSwgYyk7XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9mcm9tKHMsIGksIGMpIHtcbiAgcmV0dXJuIEJ5dGVzLnJpbmRleF9mcm9tKENhbWxfc3RyaW5nLmJ5dGVzX29mX3N0cmluZyhzKSwgaSwgYyk7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHMsIGMpIHtcbiAgcmV0dXJuIEJ5dGVzLmNvbnRhaW5zKENhbWxfc3RyaW5nLmJ5dGVzX29mX3N0cmluZyhzKSwgYyk7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zX2Zyb20ocywgaSwgYykge1xuICByZXR1cm4gQnl0ZXMuY29udGFpbnNfZnJvbShDYW1sX3N0cmluZy5ieXRlc19vZl9zdHJpbmcocyksIGksIGMpO1xufVxuXG5mdW5jdGlvbiByY29udGFpbnNfZnJvbShzLCBpLCBjKSB7XG4gIHJldHVybiBCeXRlcy5yY29udGFpbnNfZnJvbShDYW1sX3N0cmluZy5ieXRlc19vZl9zdHJpbmcocyksIGksIGMpO1xufVxuXG5mdW5jdGlvbiB1cHBlcmNhc2Uocykge1xuICByZXR1cm4gQ2FtbF9zdHJpbmcuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLnVwcGVyY2FzZShDYW1sX3N0cmluZy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlKHMpIHtcbiAgcmV0dXJuIENhbWxfc3RyaW5nLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy5sb3dlcmNhc2UoQ2FtbF9zdHJpbmcuYnl0ZXNfb2Zfc3RyaW5nKHMpKSk7XG59XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUocykge1xuICByZXR1cm4gQ2FtbF9zdHJpbmcuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmNhcGl0YWxpemUoQ2FtbF9zdHJpbmcuYnl0ZXNfb2Zfc3RyaW5nKHMpKSk7XG59XG5cbmZ1bmN0aW9uIHVuY2FwaXRhbGl6ZShzKSB7XG4gIHJldHVybiBDYW1sX3N0cmluZy5ieXRlc190b19zdHJpbmcoQnl0ZXMudW5jYXBpdGFsaXplKENhbWxfc3RyaW5nLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG52YXIgY29tcGFyZSA9IENhbWxfcHJpbWl0aXZlLmNhbWxfc3RyaW5nX2NvbXBhcmU7XG5cbnZhciBmaWxsID0gQnl0ZXMuZmlsbDtcblxudmFyIGJsaXQgPSBCeXRlcy5ibGl0X3N0cmluZztcblxuZXhwb3J0cy5tYWtlID0gbWFrZTtcbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLmNvcHkgPSBjb3B5O1xuZXhwb3J0cy5zdWIgPSBzdWI7XG5leHBvcnRzLmZpbGwgPSBmaWxsO1xuZXhwb3J0cy5ibGl0ID0gYmxpdDtcbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuZXhwb3J0cy5pdGVyID0gaXRlcjtcbmV4cG9ydHMuaXRlcmkgPSBpdGVyaTtcbmV4cG9ydHMubWFwID0gbWFwO1xuZXhwb3J0cy5tYXBpID0gbWFwaTtcbmV4cG9ydHMudHJpbSA9IHRyaW07XG5leHBvcnRzLmVzY2FwZWQgPSBlc2NhcGVkO1xuZXhwb3J0cy5pbmRleCA9IGluZGV4O1xuZXhwb3J0cy5yaW5kZXggPSByaW5kZXg7XG5leHBvcnRzLmluZGV4X2Zyb20gPSBpbmRleF9mcm9tO1xuZXhwb3J0cy5yaW5kZXhfZnJvbSA9IHJpbmRleF9mcm9tO1xuZXhwb3J0cy5jb250YWlucyA9IGNvbnRhaW5zO1xuZXhwb3J0cy5jb250YWluc19mcm9tID0gY29udGFpbnNfZnJvbTtcbmV4cG9ydHMucmNvbnRhaW5zX2Zyb20gPSByY29udGFpbnNfZnJvbTtcbmV4cG9ydHMudXBwZXJjYXNlID0gdXBwZXJjYXNlO1xuZXhwb3J0cy5sb3dlcmNhc2UgPSBsb3dlcmNhc2U7XG5leHBvcnRzLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuZXhwb3J0cy51bmNhcGl0YWxpemUgPSB1bmNhcGl0YWxpemU7XG5leHBvcnRzLmNvbXBhcmUgPSBjb21wYXJlO1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJsb2NrID0gcmVxdWlyZShcIi4vYmxvY2suanNcIik7XG5cbmZ1bmN0aW9uIGVyYXNlX3JlbChwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIC8qIEVuZF9vZl9mbXR0eSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChwYXJhbS50YWcgfCAwKSB7XG4gICAgICBjYXNlIDAgOiBcbiAgICAgICAgICByZXR1cm4gLyogQ2hhcl90eSAqL0Jsb2NrLl9fKDAsIFtlcmFzZV9yZWwocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDEgOiBcbiAgICAgICAgICByZXR1cm4gLyogU3RyaW5nX3R5ICovQmxvY2suX18oMSwgW2VyYXNlX3JlbChwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIHJldHVybiAvKiBJbnRfdHkgKi9CbG9jay5fXygyLCBbZXJhc2VfcmVsKHBhcmFtWzBdKV0pO1xuICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgcmV0dXJuIC8qIEludDMyX3R5ICovQmxvY2suX18oMywgW2VyYXNlX3JlbChwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgNCA6IFxuICAgICAgICAgIHJldHVybiAvKiBOYXRpdmVpbnRfdHkgKi9CbG9jay5fXyg0LCBbZXJhc2VfcmVsKHBhcmFtWzBdKV0pO1xuICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEludDY0X3R5ICovQmxvY2suX18oNSwgW2VyYXNlX3JlbChwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgNiA6IFxuICAgICAgICAgIHJldHVybiAvKiBGbG9hdF90eSAqL0Jsb2NrLl9fKDYsIFtlcmFzZV9yZWwocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDcgOiBcbiAgICAgICAgICByZXR1cm4gLyogQm9vbF90eSAqL0Jsb2NrLl9fKDcsIFtlcmFzZV9yZWwocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDggOiBcbiAgICAgICAgICByZXR1cm4gLyogRm9ybWF0X2FyZ190eSAqL0Jsb2NrLl9fKDgsIFtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgICAgICAgICAgIGVyYXNlX3JlbChwYXJhbVsxXSlcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgdmFyIHR5MSA9IHBhcmFtWzBdO1xuICAgICAgICAgIHJldHVybiAvKiBGb3JtYXRfc3Vic3RfdHkgKi9CbG9jay5fXyg5LCBbXG4gICAgICAgICAgICAgICAgICAgIHR5MSxcbiAgICAgICAgICAgICAgICAgICAgdHkxLFxuICAgICAgICAgICAgICAgICAgICBlcmFzZV9yZWwocGFyYW1bMl0pXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICByZXR1cm4gLyogQWxwaGFfdHkgKi9CbG9jay5fXygxMCwgW2VyYXNlX3JlbChwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICByZXR1cm4gLyogVGhldGFfdHkgKi9CbG9jay5fXygxMSwgW2VyYXNlX3JlbChwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICByZXR1cm4gLyogQW55X3R5ICovQmxvY2suX18oMTIsIFtlcmFzZV9yZWwocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDEzIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFJlYWRlcl90eSAqL0Jsb2NrLl9fKDEzLCBbZXJhc2VfcmVsKHBhcmFtWzBdKV0pO1xuICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgIHJldHVybiAvKiBJZ25vcmVkX3JlYWRlcl90eSAqL0Jsb2NrLl9fKDE0LCBbZXJhc2VfcmVsKHBhcmFtWzBdKV0pO1xuICAgICAgXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbmNhdF9mbXR0eShmbXR0eTEsIGZtdHR5Mikge1xuICBpZiAodHlwZW9mIGZtdHR5MSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBmbXR0eTI7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChmbXR0eTEudGFnIHwgMCkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgcmV0dXJuIC8qIENoYXJfdHkgKi9CbG9jay5fXygwLCBbY29uY2F0X2ZtdHR5KGZtdHR5MVswXSwgZm10dHkyKV0pO1xuICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFN0cmluZ190eSAqL0Jsb2NrLl9fKDEsIFtjb25jYXRfZm10dHkoZm10dHkxWzBdLCBmbXR0eTIpXSk7XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICByZXR1cm4gLyogSW50X3R5ICovQmxvY2suX18oMiwgW2NvbmNhdF9mbXR0eShmbXR0eTFbMF0sIGZtdHR5MildKTtcbiAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgIHJldHVybiAvKiBJbnQzMl90eSAqL0Jsb2NrLl9fKDMsIFtjb25jYXRfZm10dHkoZm10dHkxWzBdLCBmbXR0eTIpXSk7XG4gICAgICBjYXNlIDQgOiBcbiAgICAgICAgICByZXR1cm4gLyogTmF0aXZlaW50X3R5ICovQmxvY2suX18oNCwgW2NvbmNhdF9mbXR0eShmbXR0eTFbMF0sIGZtdHR5MildKTtcbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIHJldHVybiAvKiBJbnQ2NF90eSAqL0Jsb2NrLl9fKDUsIFtjb25jYXRfZm10dHkoZm10dHkxWzBdLCBmbXR0eTIpXSk7XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICByZXR1cm4gLyogRmxvYXRfdHkgKi9CbG9jay5fXyg2LCBbY29uY2F0X2ZtdHR5KGZtdHR5MVswXSwgZm10dHkyKV0pO1xuICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEJvb2xfdHkgKi9CbG9jay5fXyg3LCBbY29uY2F0X2ZtdHR5KGZtdHR5MVswXSwgZm10dHkyKV0pO1xuICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEZvcm1hdF9hcmdfdHkgKi9CbG9jay5fXyg4LCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdHR5MVswXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdHR5KGZtdHR5MVsxXSwgZm10dHkyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDkgOiBcbiAgICAgICAgICByZXR1cm4gLyogRm9ybWF0X3N1YnN0X3R5ICovQmxvY2suX18oOSwgW1xuICAgICAgICAgICAgICAgICAgICBmbXR0eTFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGZtdHR5MVsxXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdHR5KGZtdHR5MVsyXSwgZm10dHkyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDEwIDogXG4gICAgICAgICAgcmV0dXJuIC8qIEFscGhhX3R5ICovQmxvY2suX18oMTAsIFtjb25jYXRfZm10dHkoZm10dHkxWzBdLCBmbXR0eTIpXSk7XG4gICAgICBjYXNlIDExIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFRoZXRhX3R5ICovQmxvY2suX18oMTEsIFtjb25jYXRfZm10dHkoZm10dHkxWzBdLCBmbXR0eTIpXSk7XG4gICAgICBjYXNlIDEyIDogXG4gICAgICAgICAgcmV0dXJuIC8qIEFueV90eSAqL0Jsb2NrLl9fKDEyLCBbY29uY2F0X2ZtdHR5KGZtdHR5MVswXSwgZm10dHkyKV0pO1xuICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgIHJldHVybiAvKiBSZWFkZXJfdHkgKi9CbG9jay5fXygxMywgW2NvbmNhdF9mbXR0eShmbXR0eTFbMF0sIGZtdHR5MildKTtcbiAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICByZXR1cm4gLyogSWdub3JlZF9yZWFkZXJfdHkgKi9CbG9jay5fXygxNCwgW2NvbmNhdF9mbXR0eShmbXR0eTFbMF0sIGZtdHR5MildKTtcbiAgICAgIFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb25jYXRfZm10KGZtdDEsIGZtdDIpIHtcbiAgaWYgKHR5cGVvZiBmbXQxID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIGZtdDI7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChmbXQxLnRhZyB8IDApIHtcbiAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgIHJldHVybiAvKiBDaGFyICovQmxvY2suX18oMCwgW2NvbmNhdF9mbXQoZm10MVswXSwgZm10MildKTtcbiAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgIHJldHVybiAvKiBDYW1sX2NoYXIgKi9CbG9jay5fXygxLCBbY29uY2F0X2ZtdChmbXQxWzBdLCBmbXQyKV0pO1xuICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFN0cmluZyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzFdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDMgOiBcbiAgICAgICAgICByZXR1cm4gLyogQ2FtbF9zdHJpbmcgKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVsxXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEludCAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgZm10MVsxXSxcbiAgICAgICAgICAgICAgICAgICAgZm10MVsyXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzNdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDUgOiBcbiAgICAgICAgICByZXR1cm4gLyogSW50MzIgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMV0sXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMl0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVszXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA2IDogXG4gICAgICAgICAgcmV0dXJuIC8qIE5hdGl2ZWludCAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgZm10MVsxXSxcbiAgICAgICAgICAgICAgICAgICAgZm10MVsyXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzNdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDcgOiBcbiAgICAgICAgICByZXR1cm4gLyogSW50NjQgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMV0sXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMl0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVszXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEZsb2F0ICovQmxvY2suX18oOCwgW1xuICAgICAgICAgICAgICAgICAgICBmbXQxWzBdLFxuICAgICAgICAgICAgICAgICAgICBmbXQxWzFdLFxuICAgICAgICAgICAgICAgICAgICBmbXQxWzJdLFxuICAgICAgICAgICAgICAgICAgICBjb25jYXRfZm10KGZtdDFbM10sIGZtdDIpXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgOSA6IFxuICAgICAgICAgIHJldHVybiAvKiBCb29sICovQmxvY2suX18oOSwgW2NvbmNhdF9mbXQoZm10MVswXSwgZm10MildKTtcbiAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICByZXR1cm4gLyogRmx1c2ggKi9CbG9jay5fXygxMCwgW2NvbmNhdF9mbXQoZm10MVswXSwgZm10MildKTtcbiAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICByZXR1cm4gLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICBmbXQxWzBdLFxuICAgICAgICAgICAgICAgICAgICBjb25jYXRfZm10KGZtdDFbMV0sIGZtdDIpXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICByZXR1cm4gLyogQ2hhcl9saXRlcmFsICovQmxvY2suX18oMTIsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzFdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDEzIDogXG4gICAgICAgICAgcmV0dXJuIC8qIEZvcm1hdF9hcmcgKi9CbG9jay5fXygxMywgW1xuICAgICAgICAgICAgICAgICAgICBmbXQxWzBdLFxuICAgICAgICAgICAgICAgICAgICBmbXQxWzFdLFxuICAgICAgICAgICAgICAgICAgICBjb25jYXRfZm10KGZtdDFbMl0sIGZtdDIpXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICByZXR1cm4gLyogRm9ybWF0X3N1YnN0ICovQmxvY2suX18oMTQsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgZm10MVsxXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzJdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDE1IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEFscGhhICovQmxvY2suX18oMTUsIFtjb25jYXRfZm10KGZtdDFbMF0sIGZtdDIpXSk7XG4gICAgICBjYXNlIDE2IDogXG4gICAgICAgICAgcmV0dXJuIC8qIFRoZXRhICovQmxvY2suX18oMTYsIFtjb25jYXRfZm10KGZtdDFbMF0sIGZtdDIpXSk7XG4gICAgICBjYXNlIDE3IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEZvcm1hdHRpbmdfbGl0ICovQmxvY2suX18oMTcsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzFdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDE4IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEZvcm1hdHRpbmdfZ2VuICovQmxvY2suX18oMTgsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzFdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDE5IDogXG4gICAgICAgICAgcmV0dXJuIC8qIFJlYWRlciAqL0Jsb2NrLl9fKDE5LCBbY29uY2F0X2ZtdChmbXQxWzBdLCBmbXQyKV0pO1xuICAgICAgY2FzZSAyMCA6IFxuICAgICAgICAgIHJldHVybiAvKiBTY2FuX2NoYXJfc2V0ICovQmxvY2suX18oMjAsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgZm10MVsxXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzJdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDIxIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFNjYW5fZ2V0X2NvdW50ZXIgKi9CbG9jay5fXygyMSwgW1xuICAgICAgICAgICAgICAgICAgICBmbXQxWzBdLFxuICAgICAgICAgICAgICAgICAgICBjb25jYXRfZm10KGZtdDFbMV0sIGZtdDIpXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMjIgOiBcbiAgICAgICAgICByZXR1cm4gLyogU2Nhbl9uZXh0X2NoYXIgKi9CbG9jay5fXygyMiwgW2NvbmNhdF9mbXQoZm10MVswXSwgZm10MildKTtcbiAgICAgIGNhc2UgMjMgOiBcbiAgICAgICAgICByZXR1cm4gLyogSWdub3JlZF9wYXJhbSAqL0Jsb2NrLl9fKDIzLCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVsxXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAyNCA6IFxuICAgICAgICAgIHJldHVybiAvKiBDdXN0b20gKi9CbG9jay5fXygyNCwgW1xuICAgICAgICAgICAgICAgICAgICBmbXQxWzBdLFxuICAgICAgICAgICAgICAgICAgICBmbXQxWzFdLFxuICAgICAgICAgICAgICAgICAgICBjb25jYXRfZm10KGZtdDFbMl0sIGZtdDIpXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIFxuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLmNvbmNhdF9mbXR0eSA9IGNvbmNhdF9mbXR0eTtcbmV4cG9ydHMuZXJhc2VfcmVsID0gZXJhc2VfcmVsO1xuZXhwb3J0cy5jb25jYXRfZm10ID0gY29uY2F0X2ZtdDtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gbm90X2ltcGxlbWVudGVkKHMpIHtcbiAgdmFyIHN0ciA9IHMgKyBcIiBub3QgaW1wbGVtZW50ZWQgYnkgQnVja2xlU2NyaXB0IHlldFxcblwiO1xuICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcbn1cblxuZXhwb3J0cy5ub3RfaW1wbGVtZW50ZWQgPSBub3RfaW1wbGVtZW50ZWQ7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FtbF9pbnQzMiA9IHJlcXVpcmUoXCIuL2NhbWxfaW50MzIuanNcIik7XG52YXIgQ2FtbF91dGlscyA9IHJlcXVpcmUoXCIuL2NhbWxfdXRpbHMuanNcIik7XG52YXIgQ2FtbF9wcmltaXRpdmUgPSByZXF1aXJlKFwiLi9jYW1sX3ByaW1pdGl2ZS5qc1wiKTtcbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG52YXIgbWluX2ludCA9IC8qIHJlY29yZCAqL1tcbiAgLyogaGkgKi8tMjE0NzQ4MzY0OCxcbiAgLyogbG8gKi8wXG5dO1xuXG52YXIgbWF4X2ludCA9IC8qIHJlY29yZCAqL1tcbiAgLyogaGkgKi8yMTQ3NDgzNjQ3LFxuICAvKiBsbyAqLzFcbl07XG5cbnZhciBvbmUgPSAvKiByZWNvcmQgKi9bXG4gIC8qIGhpICovMCxcbiAgLyogbG8gKi8xXG5dO1xuXG52YXIgemVybyA9IC8qIHJlY29yZCAqL1tcbiAgLyogaGkgKi8wLFxuICAvKiBsbyAqLzBcbl07XG5cbnZhciBuZWdfb25lID0gLyogcmVjb3JkICovW1xuICAvKiBoaSAqLy0xLFxuICAvKiBsbyAqLzQyOTQ5NjcyOTVcbl07XG5cbmZ1bmN0aW9uIG5lZ19zaWduZWQoeCkge1xuICByZXR1cm4gKHggJiAyMTQ3NDgzNjQ4KSAhPT0gMDtcbn1cblxuZnVuY3Rpb24gYWRkKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHZhciBvdGhlcl9sb3dfID0gcGFyYW0kMVsvKiBsbyAqLzFdO1xuICB2YXIgdGhpc19sb3dfID0gcGFyYW1bLyogbG8gKi8xXTtcbiAgdmFyIGxvID0gdGhpc19sb3dfICsgb3RoZXJfbG93XyAmIDQyOTQ5NjcyOTU7XG4gIHZhciBvdmVyZmxvdyA9IG5lZ19zaWduZWQodGhpc19sb3dfKSAmJiAobmVnX3NpZ25lZChvdGhlcl9sb3dfKSB8fCAhbmVnX3NpZ25lZChsbykpIHx8IG5lZ19zaWduZWQob3RoZXJfbG93XykgJiYgIW5lZ19zaWduZWQobG8pID8gMSA6IDA7XG4gIHZhciBoaSA9IHBhcmFtWy8qIGhpICovMF0gKyBwYXJhbSQxWy8qIGhpICovMF0gKyBvdmVyZmxvdyAmIDQyOTQ5NjcyOTU7XG4gIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgLyogaGkgKi9oaSxcbiAgICAgICAgICAvKiBsbyAqLyhsbyA+Pj4gMClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gbm90KHBhcmFtKSB7XG4gIHZhciBoaSA9IHBhcmFtWy8qIGhpICovMF0gXiAtMTtcbiAgdmFyIGxvID0gcGFyYW1bLyogbG8gKi8xXSBeIC0xO1xuICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgIC8qIGhpICovaGksXG4gICAgICAgICAgLyogbG8gKi8obG8gPj4+IDApXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGVxKHgsIHkpIHtcbiAgaWYgKHhbLyogaGkgKi8wXSA9PT0geVsvKiBoaSAqLzBdKSB7XG4gICAgcmV0dXJuIHhbLyogbG8gKi8xXSA9PT0geVsvKiBsbyAqLzFdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlcXVhbF9udWxsKHgsIHkpIHtcbiAgaWYgKHkgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZXEoeCwgeSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVxdWFsX3VuZGVmaW5lZCh4LCB5KSB7XG4gIGlmICh5ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXEoeCwgeSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVxdWFsX251bGxhYmxlKHgsIHkpIHtcbiAgaWYgKHkgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXEoeCwgeSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbmVnKHgpIHtcbiAgaWYgKGVxKHgsIG1pbl9pbnQpKSB7XG4gICAgcmV0dXJuIG1pbl9pbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFkZChub3QoeCksIG9uZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3ViKHgsIHkpIHtcbiAgcmV0dXJuIGFkZCh4LCBuZWcoeSkpO1xufVxuXG5mdW5jdGlvbiBsc2xfKHgsIG51bUJpdHMpIHtcbiAgaWYgKG51bUJpdHMgPT09IDApIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbG8gPSB4Wy8qIGxvICovMV07XG4gICAgaWYgKG51bUJpdHMgPj0gMzIpIHtcbiAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgIC8qIGhpICovKGxvIDw8IChudW1CaXRzIC0gMzIgfCAwKSksXG4gICAgICAgICAgICAgIC8qIGxvICovMFxuICAgICAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGhpID0gKGxvID4+PiAoMzIgLSBudW1CaXRzIHwgMCkpIHwgKHhbLyogaGkgKi8wXSA8PCBudW1CaXRzKTtcbiAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgIC8qIGhpICovaGksXG4gICAgICAgICAgICAgIC8qIGxvICovKChsbyA8PCBudW1CaXRzKSA+Pj4gMClcbiAgICAgICAgICAgIF07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGxzcl8oeCwgbnVtQml0cykge1xuICBpZiAobnVtQml0cyA9PT0gMCkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHZhciBoaSA9IHhbLyogaGkgKi8wXTtcbiAgICB2YXIgb2Zmc2V0ID0gbnVtQml0cyAtIDMyIHwgMDtcbiAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgICAgICAgIC8qIGxvICovKGhpID4+PiAwKVxuICAgICAgICAgICAgXTtcbiAgICB9IGVsc2UgaWYgKG9mZnNldCA+IDApIHtcbiAgICAgIHZhciBsbyA9IChoaSA+Pj4gb2Zmc2V0KTtcbiAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgIC8qIGhpICovMCxcbiAgICAgICAgICAgICAgLyogbG8gKi8obG8gPj4+IDApXG4gICAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaGkkMSA9IChoaSA+Pj4gbnVtQml0cyk7XG4gICAgICB2YXIgbG8kMSA9IChoaSA8PCAoLW9mZnNldCB8IDApKSB8ICh4Wy8qIGxvICovMV0gPj4+IG51bUJpdHMpO1xuICAgICAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAgICAgLyogaGkgKi9oaSQxLFxuICAgICAgICAgICAgICAvKiBsbyAqLyhsbyQxID4+PiAwKVxuICAgICAgICAgICAgXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNyXyh4LCBudW1CaXRzKSB7XG4gIGlmIChudW1CaXRzID09PSAwKSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGhpID0geFsvKiBoaSAqLzBdO1xuICAgIGlmIChudW1CaXRzIDwgMzIpIHtcbiAgICAgIHZhciBoaSQxID0gKGhpID4+IG51bUJpdHMpO1xuICAgICAgdmFyIGxvID0gKGhpIDw8ICgzMiAtIG51bUJpdHMgfCAwKSkgfCAoeFsvKiBsbyAqLzFdID4+PiBudW1CaXRzKTtcbiAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgIC8qIGhpICovaGkkMSxcbiAgICAgICAgICAgICAgLyogbG8gKi8obG8gPj4+IDApXG4gICAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG8kMSA9IChoaSA+PiAobnVtQml0cyAtIDMyIHwgMCkpO1xuICAgICAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAgICAgLyogaGkgKi9oaSA+PSAwID8gMCA6IC0xLFxuICAgICAgICAgICAgICAvKiBsbyAqLyhsbyQxID4+PiAwKVxuICAgICAgICAgICAgXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNfemVybyhwYXJhbSkge1xuICBpZiAocGFyYW1bLyogaGkgKi8wXSAhPT0gMCB8fCBwYXJhbVsvKiBsbyAqLzFdICE9PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIG11bChfdGhpcywgX290aGVyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgb3RoZXIgPSBfb3RoZXI7XG4gICAgdmFyICQkdGhpcyA9IF90aGlzO1xuICAgIHZhciBleGl0ID0gMDtcbiAgICB2YXIgbG87XG4gICAgdmFyIHRoaXNfaGkgPSAkJHRoaXNbLyogaGkgKi8wXTtcbiAgICB2YXIgZXhpdCQxID0gMDtcbiAgICB2YXIgZXhpdCQyID0gMDtcbiAgICB2YXIgZXhpdCQzID0gMDtcbiAgICBpZiAodGhpc19oaSAhPT0gMCB8fCAkJHRoaXNbLyogbG8gKi8xXSAhPT0gMCkge1xuICAgICAgZXhpdCQzID0gNDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHplcm87XG4gICAgfVxuICAgIGlmIChleGl0JDMgPT09IDQpIHtcbiAgICAgIGlmIChvdGhlclsvKiBoaSAqLzBdICE9PSAwIHx8IG90aGVyWy8qIGxvICovMV0gIT09IDApIHtcbiAgICAgICAgZXhpdCQyID0gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB6ZXJvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXhpdCQyID09PSAzKSB7XG4gICAgICBpZiAodGhpc19oaSAhPT0gLTIxNDc0ODM2NDggfHwgJCR0aGlzWy8qIGxvICovMV0gIT09IDApIHtcbiAgICAgICAgZXhpdCQxID0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvID0gb3RoZXJbLyogbG8gKi8xXTtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChleGl0JDEgPT09IDIpIHtcbiAgICAgIHZhciBvdGhlcl9oaSA9IG90aGVyWy8qIGhpICovMF07XG4gICAgICB2YXIgbG8kMSA9ICQkdGhpc1svKiBsbyAqLzFdO1xuICAgICAgdmFyIGV4aXQkNCA9IDA7XG4gICAgICBpZiAob3RoZXJfaGkgIT09IC0yMTQ3NDgzNjQ4IHx8IG90aGVyWy8qIGxvICovMV0gIT09IDApIHtcbiAgICAgICAgZXhpdCQ0ID0gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvID0gbG8kMTtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9XG4gICAgICBpZiAoZXhpdCQ0ID09PSAzKSB7XG4gICAgICAgIHZhciBvdGhlcl9sbyA9IG90aGVyWy8qIGxvICovMV07XG4gICAgICAgIGlmICh0aGlzX2hpIDwgMCkge1xuICAgICAgICAgIGlmIChvdGhlcl9oaSA8IDApIHtcbiAgICAgICAgICAgIF9vdGhlciA9IG5lZyhvdGhlcik7XG4gICAgICAgICAgICBfdGhpcyA9IG5lZygkJHRoaXMpO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmVnKG11bChuZWcoJCR0aGlzKSwgb3RoZXIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob3RoZXJfaGkgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5lZyhtdWwoJCR0aGlzLCBuZWcob3RoZXIpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGE0OCA9ICh0aGlzX2hpID4+PiAxNik7XG4gICAgICAgICAgdmFyIGEzMiA9IHRoaXNfaGkgJiA2NTUzNTtcbiAgICAgICAgICB2YXIgYTE2ID0gKGxvJDEgPj4+IDE2KTtcbiAgICAgICAgICB2YXIgYTAwID0gbG8kMSAmIDY1NTM1O1xuICAgICAgICAgIHZhciBiNDggPSAob3RoZXJfaGkgPj4+IDE2KTtcbiAgICAgICAgICB2YXIgYjMyID0gb3RoZXJfaGkgJiA2NTUzNTtcbiAgICAgICAgICB2YXIgYjE2ID0gKG90aGVyX2xvID4+PiAxNik7XG4gICAgICAgICAgdmFyIGIwMCA9IG90aGVyX2xvICYgNjU1MzU7XG4gICAgICAgICAgdmFyIGM0OCA9IDA7XG4gICAgICAgICAgdmFyIGMzMiA9IDA7XG4gICAgICAgICAgdmFyIGMxNiA9IDA7XG4gICAgICAgICAgdmFyIGMwMCA9IGEwMCAqIGIwMDtcbiAgICAgICAgICBjMTYgPSAoYzAwID4+PiAxNikgKyBhMTYgKiBiMDA7XG4gICAgICAgICAgYzMyID0gKGMxNiA+Pj4gMTYpO1xuICAgICAgICAgIGMxNiA9IChjMTYgJiA2NTUzNSkgKyBhMDAgKiBiMTY7XG4gICAgICAgICAgYzMyID0gYzMyICsgKGMxNiA+Pj4gMTYpICsgYTMyICogYjAwO1xuICAgICAgICAgIGM0OCA9IChjMzIgPj4+IDE2KTtcbiAgICAgICAgICBjMzIgPSAoYzMyICYgNjU1MzUpICsgYTE2ICogYjE2O1xuICAgICAgICAgIGM0OCArPSAoYzMyID4+PiAxNik7XG4gICAgICAgICAgYzMyID0gKGMzMiAmIDY1NTM1KSArIGEwMCAqIGIzMjtcbiAgICAgICAgICBjNDggKz0gKGMzMiA+Pj4gMTYpO1xuICAgICAgICAgIGMzMiA9IGMzMiAmIDY1NTM1O1xuICAgICAgICAgIGM0OCA9IGM0OCArIChhNDggKiBiMDAgKyBhMzIgKiBiMTYgKyBhMTYgKiBiMzIgKyBhMDAgKiBiNDgpICYgNjU1MzU7XG4gICAgICAgICAgdmFyIGhpID0gYzMyIHwgKGM0OCA8PCAxNik7XG4gICAgICAgICAgdmFyIGxvJDIgPSBjMDAgJiA2NTUzNSB8ICgoYzE2ICYgNjU1MzUpIDw8IDE2KTtcbiAgICAgICAgICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgICAgICAgICAgLyogaGkgKi9oaSxcbiAgICAgICAgICAgICAgICAgIC8qIGxvICovKGxvJDIgPj4+IDApXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgfVxuICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICBpZiAoKGxvICYgMSkgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHplcm87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWluX2ludDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gIH07XG59XG5cbmZ1bmN0aW9uIHN3YXAocGFyYW0pIHtcbiAgdmFyIGhpID0gQ2FtbF9pbnQzMi5jYW1sX2ludDMyX2Jzd2FwKHBhcmFtWy8qIGxvICovMV0pO1xuICB2YXIgbG8gPSBDYW1sX2ludDMyLmNhbWxfaW50MzJfYnN3YXAocGFyYW1bLyogaGkgKi8wXSk7XG4gIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgLyogaGkgKi9oaSxcbiAgICAgICAgICAvKiBsbyAqLyhsbyA+Pj4gMClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24geG9yKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgLyogaGkgKi9wYXJhbVsvKiBoaSAqLzBdIF4gcGFyYW0kMVsvKiBoaSAqLzBdLFxuICAgICAgICAgIC8qIGxvICovKChwYXJhbVsvKiBsbyAqLzFdIF4gcGFyYW0kMVsvKiBsbyAqLzFdKSA+Pj4gMClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gb3JfKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgLyogaGkgKi9wYXJhbVsvKiBoaSAqLzBdIHwgcGFyYW0kMVsvKiBoaSAqLzBdLFxuICAgICAgICAgIC8qIGxvICovKChwYXJhbVsvKiBsbyAqLzFdIHwgcGFyYW0kMVsvKiBsbyAqLzFdKSA+Pj4gMClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gYW5kXyhwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgIC8qIGhpICovcGFyYW1bLyogaGkgKi8wXSAmIHBhcmFtJDFbLyogaGkgKi8wXSxcbiAgICAgICAgICAvKiBsbyAqLygocGFyYW1bLyogbG8gKi8xXSAmIHBhcmFtJDFbLyogbG8gKi8xXSkgPj4+IDApXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGdlKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHZhciBvdGhlcl9oaSA9IHBhcmFtJDFbLyogaGkgKi8wXTtcbiAgdmFyIGhpID0gcGFyYW1bLyogaGkgKi8wXTtcbiAgaWYgKGhpID4gb3RoZXJfaGkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChoaSA8IG90aGVyX2hpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJhbVsvKiBsbyAqLzFdID49IHBhcmFtJDFbLyogbG8gKi8xXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBuZXEoeCwgeSkge1xuICByZXR1cm4gIWVxKHgsIHkpO1xufVxuXG5mdW5jdGlvbiBsdCh4LCB5KSB7XG4gIHJldHVybiAhZ2UoeCwgeSk7XG59XG5cbmZ1bmN0aW9uIGd0KHgsIHkpIHtcbiAgaWYgKHhbLyogaGkgKi8wXSA+IHlbLyogaGkgKi8wXSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKHhbLyogaGkgKi8wXSA8IHlbLyogaGkgKi8wXSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geFsvKiBsbyAqLzFdID4geVsvKiBsbyAqLzFdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlKHgsIHkpIHtcbiAgcmV0dXJuICFndCh4LCB5KTtcbn1cblxuZnVuY3Rpb24gbWluKHgsIHkpIHtcbiAgaWYgKGdlKHgsIHkpKSB7XG4gICAgcmV0dXJuIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF4KHgsIHkpIHtcbiAgaWYgKGd0KHgsIHkpKSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9fZmxvYXQocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtWy8qIGhpICovMF0gKiAoMHgxMDAwMDAwMDApICsgcGFyYW1bLyogbG8gKi8xXTtcbn1cblxudmFyIHR3b19wdHJfMzJfZGJsID0gTWF0aC5wb3coMiwgMzIpO1xuXG52YXIgdHdvX3B0cl82M19kYmwgPSBNYXRoLnBvdygyLCA2Myk7XG5cbnZhciBuZWdfdHdvX3B0cl82MyA9IC1NYXRoLnBvdygyLCA2Myk7XG5cbmZ1bmN0aW9uIG9mX2Zsb2F0KHgpIHtcbiAgaWYgKGlzTmFOKHgpIHx8ICFpc0Zpbml0ZSh4KSkge1xuICAgIHJldHVybiB6ZXJvO1xuICB9IGVsc2UgaWYgKHggPD0gbmVnX3R3b19wdHJfNjMpIHtcbiAgICByZXR1cm4gbWluX2ludDtcbiAgfSBlbHNlIGlmICh4ICsgMSA+PSB0d29fcHRyXzYzX2RibCkge1xuICAgIHJldHVybiBtYXhfaW50O1xuICB9IGVsc2UgaWYgKHggPCAwKSB7XG4gICAgcmV0dXJuIG5lZyhvZl9mbG9hdCgteCkpO1xuICB9IGVsc2Uge1xuICAgIHZhciBoaSA9IHggLyB0d29fcHRyXzMyX2RibCB8IDA7XG4gICAgdmFyIGxvID0geCAlIHR3b19wdHJfMzJfZGJsIHwgMDtcbiAgICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgICAgLyogaGkgKi9oaSxcbiAgICAgICAgICAgIC8qIGxvICovKGxvID4+PiAwKVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gZGl2KF9zZWxmLCBfb3RoZXIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBvdGhlciA9IF9vdGhlcjtcbiAgICB2YXIgc2VsZiA9IF9zZWxmO1xuICAgIHZhciBzZWxmX2hpID0gc2VsZlsvKiBoaSAqLzBdO1xuICAgIHZhciBleGl0ID0gMDtcbiAgICB2YXIgZXhpdCQxID0gMDtcbiAgICBpZiAob3RoZXJbLyogaGkgKi8wXSAhPT0gMCB8fCBvdGhlclsvKiBsbyAqLzFdICE9PSAwKSB7XG4gICAgICBleGl0JDEgPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5kaXZpc2lvbl9ieV96ZXJvO1xuICAgIH1cbiAgICBpZiAoZXhpdCQxID09PSAyKSB7XG4gICAgICBpZiAoc2VsZl9oaSAhPT0gLTIxNDc0ODM2NDgpIHtcbiAgICAgICAgaWYgKHNlbGZfaGkgIT09IDAgfHwgc2VsZlsvKiBsbyAqLzFdICE9PSAwKSB7XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHplcm87XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2VsZlsvKiBsbyAqLzFdICE9PSAwKSB7XG4gICAgICAgIGV4aXQgPSAxO1xuICAgICAgfSBlbHNlIGlmIChlcShvdGhlciwgb25lKSB8fCBlcShvdGhlciwgbmVnX29uZSkpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9IGVsc2UgaWYgKGVxKG90aGVyLCBtaW5faW50KSkge1xuICAgICAgICByZXR1cm4gb25lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG90aGVyX2hpID0gb3RoZXJbLyogaGkgKi8wXTtcbiAgICAgICAgdmFyIGhhbGZfdGhpcyA9IGFzcl8oc2VsZiwgMSk7XG4gICAgICAgIHZhciBhcHByb3ggPSBsc2xfKGRpdihoYWxmX3RoaXMsIG90aGVyKSwgMSk7XG4gICAgICAgIHZhciBleGl0JDIgPSAwO1xuICAgICAgICBpZiAoYXBwcm94Wy8qIGhpICovMF0gIT09IDAgfHwgYXBwcm94Wy8qIGxvICovMV0gIT09IDApIHtcbiAgICAgICAgICBleGl0JDIgPSAzO1xuICAgICAgICB9IGVsc2UgaWYgKG90aGVyX2hpIDwgMCkge1xuICAgICAgICAgIHJldHVybiBvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5lZyhvbmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleGl0JDIgPT09IDMpIHtcbiAgICAgICAgICB2YXIgeSA9IG11bChvdGhlciwgYXBwcm94KTtcbiAgICAgICAgICB2YXIgcmVtID0gYWRkKHNlbGYsIG5lZyh5KSk7XG4gICAgICAgICAgcmV0dXJuIGFkZChhcHByb3gsIGRpdihyZW0sIG90aGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICB2YXIgb3RoZXJfaGkkMSA9IG90aGVyWy8qIGhpICovMF07XG4gICAgICB2YXIgZXhpdCQzID0gMDtcbiAgICAgIGlmIChvdGhlcl9oaSQxICE9PSAtMjE0NzQ4MzY0OCB8fCBvdGhlclsvKiBsbyAqLzFdICE9PSAwKSB7XG4gICAgICAgIGV4aXQkMyA9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gemVybztcbiAgICAgIH1cbiAgICAgIGlmIChleGl0JDMgPT09IDIpIHtcbiAgICAgICAgaWYgKHNlbGZfaGkgPCAwKSB7XG4gICAgICAgICAgaWYgKG90aGVyX2hpJDEgPCAwKSB7XG4gICAgICAgICAgICBfb3RoZXIgPSBuZWcob3RoZXIpO1xuICAgICAgICAgICAgX3NlbGYgPSBuZWcoc2VsZik7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZWcoZGl2KG5lZyhzZWxmKSwgb3RoZXIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob3RoZXJfaGkkMSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gbmVnKGRpdihzZWxmLCBuZWcob3RoZXIpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHJlcyA9IHplcm87XG4gICAgICAgICAgdmFyIHJlbSQxID0gc2VsZjtcbiAgICAgICAgICB3aGlsZShnZShyZW0kMSwgb3RoZXIpKSB7XG4gICAgICAgICAgICB2YXIgYXBwcm94JDEgPSBDYW1sX3ByaW1pdGl2ZS5jYW1sX2Zsb2F0X21heCgxLCBNYXRoLmZsb29yKHRvX2Zsb2F0KHJlbSQxKSAvIHRvX2Zsb2F0KG90aGVyKSkpO1xuICAgICAgICAgICAgdmFyIGxvZzIgPSBNYXRoLmNlaWwoTWF0aC5sb2coYXBwcm94JDEpIC8gTWF0aC5MTjIpO1xuICAgICAgICAgICAgdmFyIGRlbHRhID0gbG9nMiA8PSA0OCA/IDEgOiBNYXRoLnBvdygyLCBsb2cyIC0gNDgpO1xuICAgICAgICAgICAgdmFyIGFwcHJveFJlcyA9IG9mX2Zsb2F0KGFwcHJveCQxKTtcbiAgICAgICAgICAgIHZhciBhcHByb3hSZW0gPSBtdWwoYXBwcm94UmVzLCBvdGhlcik7XG4gICAgICAgICAgICB3aGlsZShhcHByb3hSZW1bLyogaGkgKi8wXSA8IDAgfHwgZ3QoYXBwcm94UmVtLCByZW0kMSkpIHtcbiAgICAgICAgICAgICAgYXBwcm94JDEgLT0gZGVsdGE7XG4gICAgICAgICAgICAgIGFwcHJveFJlcyA9IG9mX2Zsb2F0KGFwcHJveCQxKTtcbiAgICAgICAgICAgICAgYXBwcm94UmVtID0gbXVsKGFwcHJveFJlcywgb3RoZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpc196ZXJvKGFwcHJveFJlcykpIHtcbiAgICAgICAgICAgICAgYXBwcm94UmVzID0gb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzID0gYWRkKHJlcywgYXBwcm94UmVzKTtcbiAgICAgICAgICAgIHJlbSQxID0gYWRkKHJlbSQxLCBuZWcoYXBwcm94UmVtKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gICAgXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vZF8oc2VsZiwgb3RoZXIpIHtcbiAgdmFyIHkgPSBtdWwoZGl2KHNlbGYsIG90aGVyKSwgb3RoZXIpO1xuICByZXR1cm4gYWRkKHNlbGYsIG5lZyh5KSk7XG59XG5cbmZ1bmN0aW9uIGRpdl9tb2Qoc2VsZiwgb3RoZXIpIHtcbiAgdmFyIHF1b3RpZW50ID0gZGl2KHNlbGYsIG90aGVyKTtcbiAgdmFyIHkgPSBtdWwocXVvdGllbnQsIG90aGVyKTtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIHF1b3RpZW50LFxuICAgICAgICAgIGFkZChzZWxmLCBuZWcoeSkpXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmUoc2VsZiwgb3RoZXIpIHtcbiAgdmFyIHYgPSBDYW1sX3ByaW1pdGl2ZS5jYW1sX25hdGl2ZWludF9jb21wYXJlKHNlbGZbLyogaGkgKi8wXSwgb3RoZXJbLyogaGkgKi8wXSk7XG4gIGlmICh2ID09PSAwKSB7XG4gICAgcmV0dXJuIENhbWxfcHJpbWl0aXZlLmNhbWxfbmF0aXZlaW50X2NvbXBhcmUoc2VsZlsvKiBsbyAqLzFdLCBvdGhlclsvKiBsbyAqLzFdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdjtcbiAgfVxufVxuXG5mdW5jdGlvbiBvZl9pbnQzMihsbykge1xuICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgIC8qIGhpICovbG8gPCAwID8gLTEgOiAwLFxuICAgICAgICAgIC8qIGxvICovKGxvID4+PiAwKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b19pbnQzMih4KSB7XG4gIHJldHVybiB4Wy8qIGxvICovMV0gfCAwO1xufVxuXG5mdW5jdGlvbiB0b19oZXgoeCkge1xuICB2YXIgYXV4ID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gKHYgPj4+IDApLnRvU3RyaW5nKDE2KTtcbiAgfTtcbiAgdmFyIG1hdGNoID0geFsvKiBoaSAqLzBdO1xuICB2YXIgbWF0Y2gkMSA9IHhbLyogbG8gKi8xXTtcbiAgdmFyIGV4aXQgPSAwO1xuICBpZiAobWF0Y2ggIT09IDAgfHwgbWF0Y2gkMSAhPT0gMCkge1xuICAgIGV4aXQgPSAxO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIjBcIjtcbiAgfVxuICBpZiAoZXhpdCA9PT0gMSkge1xuICAgIGlmIChtYXRjaCQxICE9PSAwKSB7XG4gICAgICBpZiAobWF0Y2ggIT09IDApIHtcbiAgICAgICAgdmFyIGxvID0gYXV4KHhbLyogbG8gKi8xXSk7XG4gICAgICAgIHZhciBwYWQgPSA4IC0gbG8ubGVuZ3RoIHwgMDtcbiAgICAgICAgaWYgKHBhZCA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGF1eCh4Wy8qIGhpICovMF0pICsgbG87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGF1eCh4Wy8qIGhpICovMF0pICsgKENhbWxfdXRpbHMucmVwZWF0KHBhZCwgXCIwXCIpICsgbG8pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYXV4KHhbLyogbG8gKi8xXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhdXgoeFsvKiBoaSAqLzBdKSArIFwiMDAwMDAwMDBcIjtcbiAgICB9XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGRpc2NhcmRfc2lnbih4KSB7XG4gIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgLyogaGkgKi8yMTQ3NDgzNjQ3ICYgeFsvKiBoaSAqLzBdLFxuICAgICAgICAgIC8qIGxvICoveFsvKiBsbyAqLzFdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGZsb2F0X29mX2JpdHMoeCkge1xuICB2YXIgaW50MzIgPSBuZXcgSW50MzJBcnJheSgvKiBhcnJheSAqL1tcbiAgICAgICAgeFsvKiBsbyAqLzFdLFxuICAgICAgICB4Wy8qIGhpICovMF1cbiAgICAgIF0pO1xuICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheShpbnQzMi5idWZmZXIpWzBdO1xufVxuXG5mdW5jdGlvbiBiaXRzX29mX2Zsb2F0KHgpIHtcbiAgdmFyIHUgPSBuZXcgRmxvYXQ2NEFycmF5KC8qIGFycmF5ICovW3hdKTtcbiAgdmFyIGludDMyID0gbmV3IEludDMyQXJyYXkodS5idWZmZXIpO1xuICB2YXIgeCQxID0gaW50MzJbMV07XG4gIHZhciBoaSA9IHgkMTtcbiAgdmFyIHgkMiA9IGludDMyWzBdO1xuICB2YXIgbG8gPSB4JDI7XG4gIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgLyogaGkgKi9oaSxcbiAgICAgICAgICAvKiBsbyAqLyhsbyA+Pj4gMClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZ2V0NjQocywgaSkge1xuICB2YXIgaGkgPSAocy5jaGFyQ29kZUF0KGkgKyA0IHwgMCkgPDwgMzIpIHwgKHMuY2hhckNvZGVBdChpICsgNSB8IDApIDw8IDQwKSB8IChzLmNoYXJDb2RlQXQoaSArIDYgfCAwKSA8PCA0OCkgfCAocy5jaGFyQ29kZUF0KGkgKyA3IHwgMCkgPDwgNTYpO1xuICB2YXIgbG8gPSBzLmNoYXJDb2RlQXQoaSkgfCAocy5jaGFyQ29kZUF0KGkgKyAxIHwgMCkgPDwgOCkgfCAocy5jaGFyQ29kZUF0KGkgKyAyIHwgMCkgPDwgMTYpIHwgKHMuY2hhckNvZGVBdChpICsgMyB8IDApIDw8IDI0KTtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBoaSAqL2hpLFxuICAgICAgICAgIC8qIGxvICovKGxvID4+PiAwKVxuICAgICAgICBdO1xufVxuXG5leHBvcnRzLm1pbl9pbnQgPSBtaW5faW50O1xuZXhwb3J0cy5tYXhfaW50ID0gbWF4X2ludDtcbmV4cG9ydHMub25lID0gb25lO1xuZXhwb3J0cy56ZXJvID0gemVybztcbmV4cG9ydHMubm90ID0gbm90O1xuZXhwb3J0cy5vZl9pbnQzMiA9IG9mX2ludDMyO1xuZXhwb3J0cy50b19pbnQzMiA9IHRvX2ludDMyO1xuZXhwb3J0cy5hZGQgPSBhZGQ7XG5leHBvcnRzLm5lZyA9IG5lZztcbmV4cG9ydHMuc3ViID0gc3ViO1xuZXhwb3J0cy5sc2xfID0gbHNsXztcbmV4cG9ydHMubHNyXyA9IGxzcl87XG5leHBvcnRzLmFzcl8gPSBhc3JfO1xuZXhwb3J0cy5pc196ZXJvID0gaXNfemVybztcbmV4cG9ydHMubXVsID0gbXVsO1xuZXhwb3J0cy54b3IgPSB4b3I7XG5leHBvcnRzLm9yXyA9IG9yXztcbmV4cG9ydHMuYW5kXyA9IGFuZF87XG5leHBvcnRzLnN3YXAgPSBzd2FwO1xuZXhwb3J0cy5nZSA9IGdlO1xuZXhwb3J0cy5lcSA9IGVxO1xuZXhwb3J0cy5uZXEgPSBuZXE7XG5leHBvcnRzLmx0ID0gbHQ7XG5leHBvcnRzLmd0ID0gZ3Q7XG5leHBvcnRzLmxlID0gbGU7XG5leHBvcnRzLmVxdWFsX251bGwgPSBlcXVhbF9udWxsO1xuZXhwb3J0cy5lcXVhbF91bmRlZmluZWQgPSBlcXVhbF91bmRlZmluZWQ7XG5leHBvcnRzLmVxdWFsX251bGxhYmxlID0gZXF1YWxfbnVsbGFibGU7XG5leHBvcnRzLm1pbiA9IG1pbjtcbmV4cG9ydHMubWF4ID0gbWF4O1xuZXhwb3J0cy50b19mbG9hdCA9IHRvX2Zsb2F0O1xuZXhwb3J0cy5vZl9mbG9hdCA9IG9mX2Zsb2F0O1xuZXhwb3J0cy5kaXYgPSBkaXY7XG5leHBvcnRzLm1vZF8gPSBtb2RfO1xuZXhwb3J0cy5kaXZfbW9kID0gZGl2X21vZDtcbmV4cG9ydHMuY29tcGFyZSA9IGNvbXBhcmU7XG5leHBvcnRzLnRvX2hleCA9IHRvX2hleDtcbmV4cG9ydHMuZGlzY2FyZF9zaWduID0gZGlzY2FyZF9zaWduO1xuZXhwb3J0cy5mbG9hdF9vZl9iaXRzID0gZmxvYXRfb2ZfYml0cztcbmV4cG9ydHMuYml0c19vZl9mbG9hdCA9IGJpdHNfb2ZfZmxvYXQ7XG5leHBvcnRzLmdldDY0ID0gZ2V0NjQ7XG4vKiB0d29fcHRyXzMyX2RibCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3VycnkgPSByZXF1aXJlKFwiLi9jdXJyeS5qc1wiKTtcbnZhciBDYW1sX2ludDMyID0gcmVxdWlyZShcIi4vY2FtbF9pbnQzMi5qc1wiKTtcbnZhciBDYW1sX2ludDY0ID0gcmVxdWlyZShcIi4vY2FtbF9pbnQ2NC5qc1wiKTtcbnZhciBDYW1sX3V0aWxzID0gcmVxdWlyZShcIi4vY2FtbF91dGlscy5qc1wiKTtcbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG5mdW5jdGlvbiBjYW1sX2ZhaWx3aXRoKHMpIHtcbiAgdGhyb3cgW1xuICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICBzXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9kaWdpdChjKSB7XG4gIGlmIChjID49IDY1KSB7XG4gICAgaWYgKGMgPj0gOTcpIHtcbiAgICAgIGlmIChjID49IDEyMykge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYyAtIDg3IHwgMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGMgPj0gOTEpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGMgLSA1NSB8IDA7XG4gICAgfVxuICB9IGVsc2UgaWYgKGMgPiA1NyB8fCBjIDwgNDgpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGMgLSAvKiBcIjBcIiAqLzQ4IHwgMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRfb2Zfc3RyaW5nX2Jhc2UocGFyYW0pIHtcbiAgc3dpdGNoIChwYXJhbSkge1xuICAgIGNhc2UgMCA6IFxuICAgICAgICByZXR1cm4gODtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIDE2O1xuICAgIGNhc2UgMiA6IFxuICAgICAgICByZXR1cm4gMTA7XG4gICAgY2FzZSAzIDogXG4gICAgICAgIHJldHVybiAyO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlX3NpZ25fYW5kX2Jhc2Uocykge1xuICB2YXIgc2lnbiA9IDE7XG4gIHZhciBiYXNlID0gLyogRGVjICovMjtcbiAgdmFyIGkgPSAwO1xuICBpZiAoc1tpXSA9PT0gXCItXCIpIHtcbiAgICBzaWduID0gLTE7XG4gICAgaSA9IGkgKyAxIHwgMDtcbiAgfVxuICB2YXIgbWF0Y2ggPSBzLmNoYXJDb2RlQXQoaSk7XG4gIHZhciBtYXRjaCQxID0gcy5jaGFyQ29kZUF0KGkgKyAxIHwgMCk7XG4gIGlmIChtYXRjaCA9PT0gNDgpIHtcbiAgICBpZiAobWF0Y2gkMSA+PSA4OSkge1xuICAgICAgaWYgKG1hdGNoJDEgIT09IDk4KSB7XG4gICAgICAgIGlmIChtYXRjaCQxICE9PSAxMTEpIHtcbiAgICAgICAgICBpZiAobWF0Y2gkMSA9PT0gMTIwKSB7XG4gICAgICAgICAgICBiYXNlID0gLyogSGV4ICovMTtcbiAgICAgICAgICAgIGkgPSBpICsgMiB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJhc2UgPSAvKiBPY3QgKi8wO1xuICAgICAgICAgIGkgPSBpICsgMiB8IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2UgPSAvKiBCaW4gKi8zO1xuICAgICAgICBpID0gaSArIDIgfCAwO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobWF0Y2gkMSAhPT0gNjYpIHtcbiAgICAgIGlmIChtYXRjaCQxICE9PSA3OSkge1xuICAgICAgICBpZiAobWF0Y2gkMSA+PSA4OCkge1xuICAgICAgICAgIGJhc2UgPSAvKiBIZXggKi8xO1xuICAgICAgICAgIGkgPSBpICsgMiB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlID0gLyogT2N0ICovMDtcbiAgICAgICAgaSA9IGkgKyAyIHwgMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZSA9IC8qIEJpbiAqLzM7XG4gICAgICBpID0gaSArIDIgfCAwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgaSxcbiAgICAgICAgICBzaWduLFxuICAgICAgICAgIGJhc2VcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gY2FtbF9pbnRfb2Zfc3RyaW5nKHMpIHtcbiAgdmFyIG1hdGNoID0gcGFyc2Vfc2lnbl9hbmRfYmFzZShzKTtcbiAgdmFyIGkgPSBtYXRjaFswXTtcbiAgdmFyIGJhc2UgPSBpbnRfb2Zfc3RyaW5nX2Jhc2UobWF0Y2hbMl0pO1xuICB2YXIgdGhyZXNob2xkID0gNDI5NDk2NzI5NTtcbiAgdmFyIGxlbiA9IHMubGVuZ3RoO1xuICB2YXIgYyA9IGkgPCBsZW4gPyBzLmNoYXJDb2RlQXQoaSkgOiAvKiBcIlxcMDAwXCIgKi8wO1xuICB2YXIgZCA9IHBhcnNlX2RpZ2l0KGMpO1xuICBpZiAoZCA8IDAgfHwgZCA+PSBiYXNlKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgXCJpbnRfb2Zfc3RyaW5nXCJcbiAgICAgICAgXTtcbiAgfVxuICB2YXIgYXV4ID0gZnVuY3Rpb24gKF9hY2MsIF9rKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGsgPSBfaztcbiAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgaWYgKGsgPT09IGxlbikge1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGEgPSBzLmNoYXJDb2RlQXQoayk7XG4gICAgICAgIGlmIChhID09PSAvKiBcIl9cIiAqLzk1KSB7XG4gICAgICAgICAgX2sgPSBrICsgMSB8IDA7XG4gICAgICAgICAgY29udGludWUgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB2ID0gcGFyc2VfZGlnaXQoYSk7XG4gICAgICAgICAgaWYgKHYgPCAwIHx8IHYgPj0gYmFzZSkge1xuICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICAgICAgICAgIFwiaW50X29mX3N0cmluZ1wiXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGFjYyQxID0gYmFzZSAqIGFjYyArIHY7XG4gICAgICAgICAgICBpZiAoYWNjJDEgPiB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgICAgICAgICAgICBcImludF9vZl9zdHJpbmdcIlxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9rID0gayArIDEgfCAwO1xuICAgICAgICAgICAgICBfYWNjID0gYWNjJDE7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICB2YXIgcmVzID0gbWF0Y2hbMV0gKiBhdXgoZCwgaSArIDEgfCAwKTtcbiAgdmFyIG9yX3JlcyA9IHJlcyB8IDA7XG4gIGlmIChiYXNlID09PSAxMCAmJiByZXMgIT09IG9yX3Jlcykge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgIFwiaW50X29mX3N0cmluZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIG9yX3Jlcztcbn1cblxuZnVuY3Rpb24gY2FtbF9pbnQ2NF9vZl9zdHJpbmcocykge1xuICB2YXIgbWF0Y2ggPSBwYXJzZV9zaWduX2FuZF9iYXNlKHMpO1xuICB2YXIgaGJhc2UgPSBtYXRjaFsyXTtcbiAgdmFyIGkgPSBtYXRjaFswXTtcbiAgdmFyIGJhc2UgPSBDYW1sX2ludDY0Lm9mX2ludDMyKGludF9vZl9zdHJpbmdfYmFzZShoYmFzZSkpO1xuICB2YXIgc2lnbiA9IENhbWxfaW50NjQub2ZfaW50MzIobWF0Y2hbMV0pO1xuICB2YXIgdGhyZXNob2xkO1xuICBzd2l0Y2ggKGhiYXNlKSB7XG4gICAgY2FzZSAwIDogXG4gICAgICAgIHRocmVzaG9sZCA9IC8qIGludDY0ICovW1xuICAgICAgICAgIC8qIGhpICovNTM2ODcwOTExLFxuICAgICAgICAgIC8qIGxvICovNDI5NDk2NzI5NVxuICAgICAgICBdO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgdGhyZXNob2xkID0gLyogaW50NjQgKi9bXG4gICAgICAgICAgLyogaGkgKi8yNjg0MzU0NTUsXG4gICAgICAgICAgLyogbG8gKi80Mjk0OTY3Mjk1XG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMiA6IFxuICAgICAgICB0aHJlc2hvbGQgPSAvKiBpbnQ2NCAqL1tcbiAgICAgICAgICAvKiBoaSAqLzQyOTQ5NjcyOSxcbiAgICAgICAgICAvKiBsbyAqLzI1NzY5ODAzNzdcbiAgICAgICAgXTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAzIDogXG4gICAgICAgIHRocmVzaG9sZCA9IC8qIGludDY0ICovW1xuICAgICAgICAgIC8qIGhpICovMjE0NzQ4MzY0NyxcbiAgICAgICAgICAvKiBsbyAqLzQyOTQ5NjcyOTVcbiAgICAgICAgXTtcbiAgICAgICAgYnJlYWs7XG4gICAgXG4gIH1cbiAgdmFyIGxlbiA9IHMubGVuZ3RoO1xuICB2YXIgYyA9IGkgPCBsZW4gPyBzLmNoYXJDb2RlQXQoaSkgOiAvKiBcIlxcMDAwXCIgKi8wO1xuICB2YXIgZCA9IENhbWxfaW50NjQub2ZfaW50MzIocGFyc2VfZGlnaXQoYykpO1xuICBpZiAoQ2FtbF9pbnQ2NC5sdChkLCAvKiBpbnQ2NCAqL1tcbiAgICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgICAgLyogbG8gKi8wXG4gICAgICAgIF0pIHx8IENhbWxfaW50NjQuZ2UoZCwgYmFzZSkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICBcImludDY0X29mX3N0cmluZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgdmFyIGF1eCA9IGZ1bmN0aW9uIChfYWNjLCBfaykge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBrID0gX2s7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIGlmIChrID09PSBsZW4pIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhID0gcy5jaGFyQ29kZUF0KGspO1xuICAgICAgICBpZiAoYSA9PT0gLyogXCJfXCIgKi85NSkge1xuICAgICAgICAgIF9rID0gayArIDEgfCAwO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdiA9IENhbWxfaW50NjQub2ZfaW50MzIocGFyc2VfZGlnaXQoYSkpO1xuICAgICAgICAgIGlmIChDYW1sX2ludDY0Lmx0KHYsIC8qIGludDY0ICovW1xuICAgICAgICAgICAgICAgICAgLyogaGkgKi8wLFxuICAgICAgICAgICAgICAgICAgLyogbG8gKi8wXG4gICAgICAgICAgICAgICAgXSkgfHwgQ2FtbF9pbnQ2NC5nZSh2LCBiYXNlKSB8fCBDYW1sX2ludDY0Lmd0KGFjYywgdGhyZXNob2xkKSkge1xuICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICAgICAgICAgIFwiaW50NjRfb2Zfc3RyaW5nXCJcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYWNjJDEgPSBDYW1sX2ludDY0LmFkZChDYW1sX2ludDY0Lm11bChiYXNlLCBhY2MpLCB2KTtcbiAgICAgICAgICAgIF9rID0gayArIDEgfCAwO1xuICAgICAgICAgICAgX2FjYyA9IGFjYyQxO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG4gIHZhciByZXMgPSBDYW1sX2ludDY0Lm11bChzaWduLCBhdXgoZCwgaSArIDEgfCAwKSk7XG4gIHZhciBvcl9yZXMgPSBDYW1sX2ludDY0Lm9yXyhyZXMsIC8qIGludDY0ICovW1xuICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgIC8qIGxvICovMFxuICAgICAgXSk7XG4gIGlmIChDYW1sX2ludDY0LmVxKGJhc2UsIC8qIGludDY0ICovW1xuICAgICAgICAgIC8qIGhpICovMCxcbiAgICAgICAgICAvKiBsbyAqLzEwXG4gICAgICAgIF0pICYmIENhbWxfaW50NjQubmVxKHJlcywgb3JfcmVzKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgIFwiaW50NjRfb2Zfc3RyaW5nXCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gb3JfcmVzO1xufVxuXG5mdW5jdGlvbiBpbnRfb2ZfYmFzZShwYXJhbSkge1xuICBzd2l0Y2ggKHBhcmFtKSB7XG4gICAgY2FzZSAwIDogXG4gICAgICAgIHJldHVybiA4O1xuICAgIGNhc2UgMSA6IFxuICAgICAgICByZXR1cm4gMTY7XG4gICAgY2FzZSAyIDogXG4gICAgICAgIHJldHVybiAxMDtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBsb3dlcmNhc2UoYykge1xuICBpZiAoYyA+PSAvKiBcIkFcIiAqLzY1ICYmIGMgPD0gLyogXCJaXCIgKi85MCB8fCBjID49IC8qIFwiXFwxOTJcIiAqLzE5MiAmJiBjIDw9IC8qIFwiXFwyMTRcIiAqLzIxNCB8fCBjID49IC8qIFwiXFwyMTZcIiAqLzIxNiAmJiBjIDw9IC8qIFwiXFwyMjJcIiAqLzIyMikge1xuICAgIHJldHVybiBjICsgMzIgfCAwO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlX2Zvcm1hdChmbXQpIHtcbiAgdmFyIGxlbiA9IGZtdC5sZW5ndGg7XG4gIGlmIChsZW4gPiAzMSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiZm9ybWF0X2ludDogZm9ybWF0IHRvbyBsb25nXCJcbiAgICAgICAgXTtcbiAgfVxuICB2YXIgZiA9IC8qIHJlY29yZCAqL1tcbiAgICAvKiBqdXN0aWZ5ICovXCIrXCIsXG4gICAgLyogc2lnbnN0eWxlICovXCItXCIsXG4gICAgLyogZmlsdGVyICovXCIgXCIsXG4gICAgLyogYWx0ZXJuYXRlICovZmFsc2UsXG4gICAgLyogYmFzZSA6IERlYyAqLzIsXG4gICAgLyogc2lnbmVkY29udiAqL2ZhbHNlLFxuICAgIC8qIHdpZHRoICovMCxcbiAgICAvKiB1cHBlcmNhc2UgKi9mYWxzZSxcbiAgICAvKiBzaWduICovMSxcbiAgICAvKiBwcmVjICovLTEsXG4gICAgLyogY29udiAqL1wiZlwiXG4gIF07XG4gIHZhciBfaSA9IDA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID49IGxlbikge1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjID0gZm10LmNoYXJDb2RlQXQoaSk7XG4gICAgICB2YXIgZXhpdCA9IDA7XG4gICAgICBpZiAoYyA+PSA2OSkge1xuICAgICAgICBpZiAoYyA+PSA4OCkge1xuICAgICAgICAgIGlmIChjID49IDEyMSkge1xuICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYyAtIDg4IHwgMCkge1xuICAgICAgICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgICAgICAgICAgIGZbLyogYmFzZSAqLzRdID0gLyogSGV4ICovMTtcbiAgICAgICAgICAgICAgICAgIGZbLyogdXBwZXJjYXNlICovN10gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgICAgICBjYXNlIDE1IDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gNTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDEyIDogXG4gICAgICAgICAgICAgIGNhc2UgMTcgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA0O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMjMgOiBcbiAgICAgICAgICAgICAgICAgIGZbLyogYmFzZSAqLzRdID0gLyogT2N0ICovMDtcbiAgICAgICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgICBjYXNlIDI5IDogXG4gICAgICAgICAgICAgICAgICBmWy8qIGJhc2UgKi80XSA9IC8qIERlYyAqLzI7XG4gICAgICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgICAgICBjYXNlIDMgOiBcbiAgICAgICAgICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgICAgICBjYXNlIDYgOiBcbiAgICAgICAgICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgICAgICBjYXNlIDkgOiBcbiAgICAgICAgICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgICAgICBjYXNlIDExIDogXG4gICAgICAgICAgICAgIGNhc2UgMTYgOiBcbiAgICAgICAgICAgICAgY2FzZSAxOCA6IFxuICAgICAgICAgICAgICBjYXNlIDE5IDogXG4gICAgICAgICAgICAgIGNhc2UgMjAgOiBcbiAgICAgICAgICAgICAgY2FzZSAyMSA6IFxuICAgICAgICAgICAgICBjYXNlIDIyIDogXG4gICAgICAgICAgICAgIGNhc2UgMjQgOiBcbiAgICAgICAgICAgICAgY2FzZSAyNSA6IFxuICAgICAgICAgICAgICBjYXNlIDI2IDogXG4gICAgICAgICAgICAgIGNhc2UgMjcgOiBcbiAgICAgICAgICAgICAgY2FzZSAyOCA6IFxuICAgICAgICAgICAgICBjYXNlIDMwIDogXG4gICAgICAgICAgICAgIGNhc2UgMzEgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMzIgOiBcbiAgICAgICAgICAgICAgICAgIGZbLyogYmFzZSAqLzRdID0gLyogSGV4ICovMTtcbiAgICAgICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoYyA+PSA3Mikge1xuICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZbLyogc2lnbmVkY29udiAqLzVdID0gdHJ1ZTtcbiAgICAgICAgICBmWy8qIHVwcGVyY2FzZSAqLzddID0gdHJ1ZTtcbiAgICAgICAgICBmWy8qIGNvbnYgKi8xMF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxvd2VyY2FzZShjKSk7XG4gICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgY29udGludWUgO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc3dpdGNoZXIgPSBjIC0gMzIgfCAwO1xuICAgICAgICBpZiAoc3dpdGNoZXIgPiAyNSB8fCBzd2l0Y2hlciA8IDApIHtcbiAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2l0Y2ggKHN3aXRjaGVyKSB7XG4gICAgICAgICAgICBjYXNlIDMgOiBcbiAgICAgICAgICAgICAgICBmWy8qIGFsdGVybmF0ZSAqLzNdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICAgICAgICBleGl0ID0gMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgICAgICBmWy8qIGp1c3RpZnkgKi8wXSA9IFwiLVwiO1xuICAgICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICAgICAgICBmWy8qIHByZWMgKi85XSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGogPSBpICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUoKGZ1bmN0aW9uKGope1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciB3ID0gZm10LmNoYXJDb2RlQXQoaikgLSAvKiBcIjBcIiAqLzQ4IHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdyA+PSAwICYmIHcgPD0gOTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KGopKSgpKSB7XG4gICAgICAgICAgICAgICAgICBmWy8qIHByZWMgKi85XSA9IChDYW1sX2ludDMyLmltdWwoZlsvKiBwcmVjICovOV0sIDEwKSArIGZtdC5jaGFyQ29kZUF0KGopIHwgMCkgLSAvKiBcIjBcIiAqLzQ4IHwgMDtcbiAgICAgICAgICAgICAgICAgIGogPSBqICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBfaSA9IGo7XG4gICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICBjYXNlIDIgOiBcbiAgICAgICAgICAgIGNhc2UgNCA6IFxuICAgICAgICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgICBjYXNlIDYgOiBcbiAgICAgICAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgICBjYXNlIDkgOiBcbiAgICAgICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICAgIGNhc2UgMTUgOiBcbiAgICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTYgOiBcbiAgICAgICAgICAgICAgICBmWy8qIGZpbHRlciAqLzJdID0gXCIwXCI7XG4gICAgICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgY2FzZSAxNyA6IFxuICAgICAgICAgICAgY2FzZSAxOCA6IFxuICAgICAgICAgICAgY2FzZSAxOSA6IFxuICAgICAgICAgICAgY2FzZSAyMCA6IFxuICAgICAgICAgICAgY2FzZSAyMSA6IFxuICAgICAgICAgICAgY2FzZSAyMiA6IFxuICAgICAgICAgICAgY2FzZSAyMyA6IFxuICAgICAgICAgICAgY2FzZSAyNCA6IFxuICAgICAgICAgICAgY2FzZSAyNSA6IFxuICAgICAgICAgICAgICAgIGV4aXQgPSAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGV4aXQpIHtcbiAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgICBmWy8qIHNpZ25zdHlsZSAqLzFdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDMgOiBcbiAgICAgICAgICAgIGZbLyogd2lkdGggKi82XSA9IDA7XG4gICAgICAgICAgICB2YXIgaiQxID0gaTtcbiAgICAgICAgICAgIHdoaWxlKChmdW5jdGlvbihqJDEpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdyA9IGZtdC5jaGFyQ29kZUF0KGokMSkgLSAvKiBcIjBcIiAqLzQ4IHwgMDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB3ID49IDAgJiYgdyA8PSA5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KGokMSkpKCkpIHtcbiAgICAgICAgICAgICAgZlsvKiB3aWR0aCAqLzZdID0gKENhbWxfaW50MzIuaW11bChmWy8qIHdpZHRoICovNl0sIDEwKSArIGZtdC5jaGFyQ29kZUF0KGokMSkgfCAwKSAtIC8qIFwiMFwiICovNDggfCAwO1xuICAgICAgICAgICAgICBqJDEgPSBqJDEgKyAxIHwgMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfaSA9IGokMTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgICBmWy8qIHNpZ25lZGNvbnYgKi81XSA9IHRydWU7XG4gICAgICAgICAgICBmWy8qIGJhc2UgKi80XSA9IC8qIERlYyAqLzI7XG4gICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgICBmWy8qIHNpZ25lZGNvbnYgKi81XSA9IHRydWU7XG4gICAgICAgICAgICBmWy8qIGNvbnYgKi8xMF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluaXNoX2Zvcm1hdHRpbmcocGFyYW0sIHJhd2J1ZmZlcikge1xuICB2YXIganVzdGlmeSA9IHBhcmFtWy8qIGp1c3RpZnkgKi8wXTtcbiAgdmFyIHNpZ25zdHlsZSA9IHBhcmFtWy8qIHNpZ25zdHlsZSAqLzFdO1xuICB2YXIgZmlsdGVyID0gcGFyYW1bLyogZmlsdGVyICovMl07XG4gIHZhciBhbHRlcm5hdGUgPSBwYXJhbVsvKiBhbHRlcm5hdGUgKi8zXTtcbiAgdmFyIGJhc2UgPSBwYXJhbVsvKiBiYXNlICovNF07XG4gIHZhciBzaWduZWRjb252ID0gcGFyYW1bLyogc2lnbmVkY29udiAqLzVdO1xuICB2YXIgd2lkdGggPSBwYXJhbVsvKiB3aWR0aCAqLzZdO1xuICB2YXIgdXBwZXJjYXNlID0gcGFyYW1bLyogdXBwZXJjYXNlICovN107XG4gIHZhciBzaWduID0gcGFyYW1bLyogc2lnbiAqLzhdO1xuICB2YXIgbGVuID0gcmF3YnVmZmVyLmxlbmd0aDtcbiAgaWYgKHNpZ25lZGNvbnYgJiYgKHNpZ24gPCAwIHx8IHNpZ25zdHlsZSAhPT0gXCItXCIpKSB7XG4gICAgbGVuID0gbGVuICsgMSB8IDA7XG4gIH1cbiAgaWYgKGFsdGVybmF0ZSkge1xuICAgIGlmIChiYXNlID09PSAvKiBPY3QgKi8wKSB7XG4gICAgICBsZW4gPSBsZW4gKyAxIHwgMDtcbiAgICB9IGVsc2UgaWYgKGJhc2UgPT09IC8qIEhleCAqLzEpIHtcbiAgICAgIGxlbiA9IGxlbiArIDIgfCAwO1xuICAgIH1cbiAgICBcbiAgfVxuICB2YXIgYnVmZmVyID0gXCJcIjtcbiAgaWYgKGp1c3RpZnkgPT09IFwiK1wiICYmIGZpbHRlciA9PT0gXCIgXCIpIHtcbiAgICBmb3IodmFyIGkgPSBsZW4gLGlfZmluaXNoID0gd2lkdGggLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlciArIGZpbHRlcjtcbiAgICB9XG4gIH1cbiAgaWYgKHNpZ25lZGNvbnYpIHtcbiAgICBpZiAoc2lnbiA8IDApIHtcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlciArIFwiLVwiO1xuICAgIH0gZWxzZSBpZiAoc2lnbnN0eWxlICE9PSBcIi1cIikge1xuICAgICAgYnVmZmVyID0gYnVmZmVyICsgc2lnbnN0eWxlO1xuICAgIH1cbiAgICBcbiAgfVxuICBpZiAoYWx0ZXJuYXRlICYmIGJhc2UgPT09IC8qIE9jdCAqLzApIHtcbiAgICBidWZmZXIgPSBidWZmZXIgKyBcIjBcIjtcbiAgfVxuICBpZiAoYWx0ZXJuYXRlICYmIGJhc2UgPT09IC8qIEhleCAqLzEpIHtcbiAgICBidWZmZXIgPSBidWZmZXIgKyBcIjB4XCI7XG4gIH1cbiAgaWYgKGp1c3RpZnkgPT09IFwiK1wiICYmIGZpbHRlciA9PT0gXCIwXCIpIHtcbiAgICBmb3IodmFyIGkkMSA9IGxlbiAsaV9maW5pc2gkMSA9IHdpZHRoIC0gMSB8IDA7IGkkMSA8PSBpX2ZpbmlzaCQxOyArK2kkMSl7XG4gICAgICBidWZmZXIgPSBidWZmZXIgKyBmaWx0ZXI7XG4gICAgfVxuICB9XG4gIGJ1ZmZlciA9IHVwcGVyY2FzZSA/IGJ1ZmZlciArIHJhd2J1ZmZlci50b1VwcGVyQ2FzZSgpIDogYnVmZmVyICsgcmF3YnVmZmVyO1xuICBpZiAoanVzdGlmeSA9PT0gXCItXCIpIHtcbiAgICBmb3IodmFyIGkkMiA9IGxlbiAsaV9maW5pc2gkMiA9IHdpZHRoIC0gMSB8IDA7IGkkMiA8PSBpX2ZpbmlzaCQyOyArK2kkMil7XG4gICAgICBidWZmZXIgPSBidWZmZXIgKyBcIiBcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuZnVuY3Rpb24gY2FtbF9mb3JtYXRfaW50KGZtdCwgaSkge1xuICBpZiAoZm10ID09PSBcIiVkXCIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGkpO1xuICB9IGVsc2Uge1xuICAgIHZhciBmID0gcGFyc2VfZm9ybWF0KGZtdCk7XG4gICAgdmFyIGYkMSA9IGY7XG4gICAgdmFyIGkkMSA9IGk7XG4gICAgdmFyIGkkMiA9IGkkMSA8IDAgPyAoXG4gICAgICAgIGYkMVsvKiBzaWduZWRjb252ICovNV0gPyAoZiQxWy8qIHNpZ24gKi84XSA9IC0xLCAtaSQxKSA6IChpJDEgPj4+IDApXG4gICAgICApIDogaSQxO1xuICAgIHZhciBzID0gaSQyLnRvU3RyaW5nKGludF9vZl9iYXNlKGYkMVsvKiBiYXNlICovNF0pKTtcbiAgICBpZiAoZiQxWy8qIHByZWMgKi85XSA+PSAwKSB7XG4gICAgICBmJDFbLyogZmlsdGVyICovMl0gPSBcIiBcIjtcbiAgICAgIHZhciBuID0gZiQxWy8qIHByZWMgKi85XSAtIHMubGVuZ3RoIHwgMDtcbiAgICAgIGlmIChuID4gMCkge1xuICAgICAgICBzID0gQ2FtbF91dGlscy5yZXBlYXQobiwgXCIwXCIpICsgcztcbiAgICAgIH1cbiAgICAgIFxuICAgIH1cbiAgICByZXR1cm4gZmluaXNoX2Zvcm1hdHRpbmcoZiQxLCBzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2ludDY0X2Zvcm1hdChmbXQsIHgpIHtcbiAgdmFyIGYgPSBwYXJzZV9mb3JtYXQoZm10KTtcbiAgdmFyIHgkMSA9IGZbLyogc2lnbmVkY29udiAqLzVdICYmIENhbWxfaW50NjQubHQoeCwgLyogaW50NjQgKi9bXG4gICAgICAgIC8qIGhpICovMCxcbiAgICAgICAgLyogbG8gKi8wXG4gICAgICBdKSA/IChmWy8qIHNpZ24gKi84XSA9IC0xLCBDYW1sX2ludDY0Lm5lZyh4KSkgOiB4O1xuICB2YXIgcyA9IFwiXCI7XG4gIHZhciBtYXRjaCA9IGZbLyogYmFzZSAqLzRdO1xuICBzd2l0Y2ggKG1hdGNoKSB7XG4gICAgY2FzZSAwIDogXG4gICAgICAgIHZhciB3YmFzZSA9IC8qIGludDY0ICovW1xuICAgICAgICAgIC8qIGhpICovMCxcbiAgICAgICAgICAvKiBsbyAqLzhcbiAgICAgICAgXTtcbiAgICAgICAgdmFyIGN2dGJsID0gXCIwMTIzNDU2N1wiO1xuICAgICAgICBpZiAoQ2FtbF9pbnQ2NC5sdCh4JDEsIC8qIGludDY0ICovW1xuICAgICAgICAgICAgICAgIC8qIGhpICovMCxcbiAgICAgICAgICAgICAgICAvKiBsbyAqLzBcbiAgICAgICAgICAgICAgXSkpIHtcbiAgICAgICAgICB2YXIgeSA9IENhbWxfaW50NjQuZGlzY2FyZF9zaWduKHgkMSk7XG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSBDYW1sX2ludDY0LmRpdl9tb2QoeSwgd2Jhc2UpO1xuICAgICAgICAgIHZhciBxdW90aWVudCA9IENhbWxfaW50NjQuYWRkKC8qIGludDY0ICovW1xuICAgICAgICAgICAgICAgIC8qIGhpICovMjY4NDM1NDU2LFxuICAgICAgICAgICAgICAgIC8qIGxvICovMFxuICAgICAgICAgICAgICBdLCBtYXRjaCQxWzBdKTtcbiAgICAgICAgICB2YXIgbW9kdWx1cyA9IG1hdGNoJDFbMV07XG4gICAgICAgICAgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY3Z0YmwuY2hhckNvZGVBdChtb2R1bHVzWzFdIHwgMCkpICsgcztcbiAgICAgICAgICB3aGlsZShDYW1sX2ludDY0Lm5lcShxdW90aWVudCwgLyogaW50NjQgKi9bXG4gICAgICAgICAgICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgICAgICAgICAgICAvKiBsbyAqLzBcbiAgICAgICAgICAgICAgICBdKSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDIgPSBDYW1sX2ludDY0LmRpdl9tb2QocXVvdGllbnQsIHdiYXNlKTtcbiAgICAgICAgICAgIHF1b3RpZW50ID0gbWF0Y2gkMlswXTtcbiAgICAgICAgICAgIG1vZHVsdXMgPSBtYXRjaCQyWzFdO1xuICAgICAgICAgICAgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY3Z0YmwuY2hhckNvZGVBdChtb2R1bHVzWzFdIHwgMCkpICsgcztcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtYXRjaCQzID0gQ2FtbF9pbnQ2NC5kaXZfbW9kKHgkMSwgd2Jhc2UpO1xuICAgICAgICAgIHZhciBxdW90aWVudCQxID0gbWF0Y2gkM1swXTtcbiAgICAgICAgICB2YXIgbW9kdWx1cyQxID0gbWF0Y2gkM1sxXTtcbiAgICAgICAgICBzID0gU3RyaW5nLmZyb21DaGFyQ29kZShjdnRibC5jaGFyQ29kZUF0KG1vZHVsdXMkMVsxXSB8IDApKSArIHM7XG4gICAgICAgICAgd2hpbGUoQ2FtbF9pbnQ2NC5uZXEocXVvdGllbnQkMSwgLyogaW50NjQgKi9bXG4gICAgICAgICAgICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgICAgICAgICAgICAvKiBsbyAqLzBcbiAgICAgICAgICAgICAgICBdKSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDQgPSBDYW1sX2ludDY0LmRpdl9tb2QocXVvdGllbnQkMSwgd2Jhc2UpO1xuICAgICAgICAgICAgcXVvdGllbnQkMSA9IG1hdGNoJDRbMF07XG4gICAgICAgICAgICBtb2R1bHVzJDEgPSBtYXRjaCQ0WzFdO1xuICAgICAgICAgICAgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY3Z0YmwuY2hhckNvZGVBdChtb2R1bHVzJDFbMV0gfCAwKSkgKyBzO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAxIDogXG4gICAgICAgIHMgPSBDYW1sX2ludDY0LnRvX2hleCh4JDEpICsgcztcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAyIDogXG4gICAgICAgIHZhciB3YmFzZSQxID0gLyogaW50NjQgKi9bXG4gICAgICAgICAgLyogaGkgKi8wLFxuICAgICAgICAgIC8qIGxvICovMTBcbiAgICAgICAgXTtcbiAgICAgICAgdmFyIGN2dGJsJDEgPSBcIjAxMjM0NTY3ODlcIjtcbiAgICAgICAgaWYgKENhbWxfaW50NjQubHQoeCQxLCAvKiBpbnQ2NCAqL1tcbiAgICAgICAgICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgICAgICAgICAgLyogbG8gKi8wXG4gICAgICAgICAgICAgIF0pKSB7XG4gICAgICAgICAgdmFyIHkkMSA9IENhbWxfaW50NjQuZGlzY2FyZF9zaWduKHgkMSk7XG4gICAgICAgICAgdmFyIG1hdGNoJDUgPSBDYW1sX2ludDY0LmRpdl9tb2QoeSQxLCB3YmFzZSQxKTtcbiAgICAgICAgICB2YXIgbWF0Y2gkNiA9IENhbWxfaW50NjQuZGl2X21vZChDYW1sX2ludDY0LmFkZCgvKiBpbnQ2NCAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogaGkgKi8wLFxuICAgICAgICAgICAgICAgICAgICAvKiBsbyAqLzhcbiAgICAgICAgICAgICAgICAgIF0sIG1hdGNoJDVbMV0pLCB3YmFzZSQxKTtcbiAgICAgICAgICB2YXIgcXVvdGllbnQkMiA9IENhbWxfaW50NjQuYWRkKENhbWxfaW50NjQuYWRkKC8qIGludDY0ICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBoaSAqLzIxNDc0ODM2NCxcbiAgICAgICAgICAgICAgICAgICAgLyogbG8gKi8zNDM1OTczODM2XG4gICAgICAgICAgICAgICAgICBdLCBtYXRjaCQ1WzBdKSwgbWF0Y2gkNlswXSk7XG4gICAgICAgICAgdmFyIG1vZHVsdXMkMiA9IG1hdGNoJDZbMV07XG4gICAgICAgICAgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY3Z0YmwkMS5jaGFyQ29kZUF0KG1vZHVsdXMkMlsxXSB8IDApKSArIHM7XG4gICAgICAgICAgd2hpbGUoQ2FtbF9pbnQ2NC5uZXEocXVvdGllbnQkMiwgLyogaW50NjQgKi9bXG4gICAgICAgICAgICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgICAgICAgICAgICAvKiBsbyAqLzBcbiAgICAgICAgICAgICAgICBdKSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDcgPSBDYW1sX2ludDY0LmRpdl9tb2QocXVvdGllbnQkMiwgd2Jhc2UkMSk7XG4gICAgICAgICAgICBxdW90aWVudCQyID0gbWF0Y2gkN1swXTtcbiAgICAgICAgICAgIG1vZHVsdXMkMiA9IG1hdGNoJDdbMV07XG4gICAgICAgICAgICBzID0gU3RyaW5nLmZyb21DaGFyQ29kZShjdnRibCQxLmNoYXJDb2RlQXQobW9kdWx1cyQyWzFdIHwgMCkpICsgcztcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtYXRjaCQ4ID0gQ2FtbF9pbnQ2NC5kaXZfbW9kKHgkMSwgd2Jhc2UkMSk7XG4gICAgICAgICAgdmFyIHF1b3RpZW50JDMgPSBtYXRjaCQ4WzBdO1xuICAgICAgICAgIHZhciBtb2R1bHVzJDMgPSBtYXRjaCQ4WzFdO1xuICAgICAgICAgIHMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGN2dGJsJDEuY2hhckNvZGVBdChtb2R1bHVzJDNbMV0gfCAwKSkgKyBzO1xuICAgICAgICAgIHdoaWxlKENhbWxfaW50NjQubmVxKHF1b3RpZW50JDMsIC8qIGludDY0ICovW1xuICAgICAgICAgICAgICAgICAgLyogaGkgKi8wLFxuICAgICAgICAgICAgICAgICAgLyogbG8gKi8wXG4gICAgICAgICAgICAgICAgXSkpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQ5ID0gQ2FtbF9pbnQ2NC5kaXZfbW9kKHF1b3RpZW50JDMsIHdiYXNlJDEpO1xuICAgICAgICAgICAgcXVvdGllbnQkMyA9IG1hdGNoJDlbMF07XG4gICAgICAgICAgICBtb2R1bHVzJDMgPSBtYXRjaCQ5WzFdO1xuICAgICAgICAgICAgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY3Z0YmwkMS5jaGFyQ29kZUF0KG1vZHVsdXMkM1sxXSB8IDApKSArIHM7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICBcbiAgfVxuICBpZiAoZlsvKiBwcmVjICovOV0gPj0gMCkge1xuICAgIGZbLyogZmlsdGVyICovMl0gPSBcIiBcIjtcbiAgICB2YXIgbiA9IGZbLyogcHJlYyAqLzldIC0gcy5sZW5ndGggfCAwO1xuICAgIGlmIChuID4gMCkge1xuICAgICAgcyA9IENhbWxfdXRpbHMucmVwZWF0KG4sIFwiMFwiKSArIHM7XG4gICAgfVxuICAgIFxuICB9XG4gIHJldHVybiBmaW5pc2hfZm9ybWF0dGluZyhmLCBzKTtcbn1cblxuZnVuY3Rpb24gY2FtbF9mb3JtYXRfZmxvYXQoZm10LCB4KSB7XG4gIHZhciBmID0gcGFyc2VfZm9ybWF0KGZtdCk7XG4gIHZhciBwcmVjID0gZlsvKiBwcmVjICovOV0gPCAwID8gNiA6IGZbLyogcHJlYyAqLzldO1xuICB2YXIgeCQxID0geCA8IDAgPyAoZlsvKiBzaWduICovOF0gPSAtMSwgLXgpIDogeDtcbiAgdmFyIHMgPSBcIlwiO1xuICBpZiAoaXNOYU4oeCQxKSkge1xuICAgIHMgPSBcIm5hblwiO1xuICAgIGZbLyogZmlsdGVyICovMl0gPSBcIiBcIjtcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZSh4JDEpKSB7XG4gICAgdmFyIG1hdGNoID0gZlsvKiBjb252ICovMTBdO1xuICAgIHN3aXRjaCAobWF0Y2gpIHtcbiAgICAgIGNhc2UgXCJlXCIgOiBcbiAgICAgICAgICBzID0geCQxLnRvRXhwb25lbnRpYWwocHJlYyk7XG4gICAgICAgICAgdmFyIGkgPSBzLmxlbmd0aDtcbiAgICAgICAgICBpZiAoc1tpIC0gMyB8IDBdID09PSBcImVcIikge1xuICAgICAgICAgICAgcyA9IHMuc2xpY2UoMCwgaSAtIDEgfCAwKSArIChcIjBcIiArIHMuc2xpY2UoaSAtIDEgfCAwKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImZcIiA6IFxuICAgICAgICAgIHMgPSB4JDEudG9GaXhlZChwcmVjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJnXCIgOiBcbiAgICAgICAgICB2YXIgcHJlYyQxID0gcHJlYyAhPT0gMCA/IHByZWMgOiAxO1xuICAgICAgICAgIHMgPSB4JDEudG9FeHBvbmVudGlhbChwcmVjJDEgLSAxIHwgMCk7XG4gICAgICAgICAgdmFyIGogPSBzLmluZGV4T2YoXCJlXCIpO1xuICAgICAgICAgIHZhciBleHAgPSBOdW1iZXIocy5zbGljZShqICsgMSB8IDApKSB8IDA7XG4gICAgICAgICAgaWYgKGV4cCA8IC00IHx8IHgkMSA+PSAxZTIxIHx8IHgkMS50b0ZpeGVkKCkubGVuZ3RoID4gcHJlYyQxKSB7XG4gICAgICAgICAgICB2YXIgaSQxID0gaiAtIDEgfCAwO1xuICAgICAgICAgICAgd2hpbGUoc1tpJDFdID09PSBcIjBcIikge1xuICAgICAgICAgICAgICBpJDEgPSBpJDEgLSAxIHwgMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoc1tpJDFdID09PSBcIi5cIikge1xuICAgICAgICAgICAgICBpJDEgPSBpJDEgLSAxIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMgPSBzLnNsaWNlKDAsIGkkMSArIDEgfCAwKSArIHMuc2xpY2Uoaik7XG4gICAgICAgICAgICB2YXIgaSQyID0gcy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoc1tpJDIgLSAzIHwgMF0gPT09IFwiZVwiKSB7XG4gICAgICAgICAgICAgIHMgPSBzLnNsaWNlKDAsIGkkMiAtIDEgfCAwKSArIChcIjBcIiArIHMuc2xpY2UoaSQyIC0gMSB8IDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcCA9IHByZWMkMTtcbiAgICAgICAgICAgIGlmIChleHAgPCAwKSB7XG4gICAgICAgICAgICAgIHAgPSBwIC0gKGV4cCArIDEgfCAwKSB8IDA7XG4gICAgICAgICAgICAgIHMgPSB4JDEudG9GaXhlZChwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoaWxlKChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcyA9IHgkMS50b0ZpeGVkKHApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmxlbmd0aCA+IChwcmVjJDEgKyAxIHwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKCkpIHtcbiAgICAgICAgICAgICAgICBwID0gcCAtIDEgfCAwO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHAgIT09IDApIHtcbiAgICAgICAgICAgICAgdmFyIGsgPSBzLmxlbmd0aCAtIDEgfCAwO1xuICAgICAgICAgICAgICB3aGlsZShzW2tdID09PSBcIjBcIikge1xuICAgICAgICAgICAgICAgIGsgPSBrIC0gMSB8IDA7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGlmIChzW2tdID09PSBcIi5cIikge1xuICAgICAgICAgICAgICAgIGsgPSBrIC0gMSB8IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcyA9IHMuc2xpY2UoMCwgayArIDEgfCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzID0gXCJpbmZcIjtcbiAgICBmWy8qIGZpbHRlciAqLzJdID0gXCIgXCI7XG4gIH1cbiAgcmV0dXJuIGZpbmlzaF9mb3JtYXR0aW5nKGYsIHMpO1xufVxuXG52YXIgZmxvYXRfb2Zfc3RyaW5nID0gKFxuICBmdW5jdGlvbiAocywgY2FtbF9mYWlsd2l0aCkge1xuICAgIHZhciByZXMgPSArcztcbiAgICBpZiAoKHMubGVuZ3RoID4gMCkgJiYgKHJlcyA9PT0gcmVzKSlcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICBzID0gcy5yZXBsYWNlKC9fL2csIFwiXCIpO1xuICAgIHJlcyA9ICtzO1xuICAgIGlmICgoKHMubGVuZ3RoID4gMCkgJiYgKHJlcyA9PT0gcmVzKSkgfHwgL15bKy1dP25hbiQvaS50ZXN0KHMpKSB7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIDtcbiAgICBpZiAoL14gKjB4WzAtOWEtZl9dK3BbKy1dP1swLTlfXSsvaS50ZXN0KHMpKSB7XG4gICAgICAgIHZhciBwaWR4ID0gcy5pbmRleE9mKCdwJyk7XG4gICAgICAgIHBpZHggPSAocGlkeCA9PSAtMSkgPyBzLmluZGV4T2YoJ1AnKSA6IHBpZHg7XG4gICAgICAgIHZhciBleHAgPSArcy5zdWJzdHJpbmcocGlkeCArIDEpO1xuICAgICAgICByZXMgPSArcy5zdWJzdHJpbmcoMCwgcGlkeCk7XG4gICAgICAgIHJldHVybiByZXMgKiBNYXRoLnBvdygyLCBleHApO1xuICAgIH1cbiAgICBpZiAoL15cXCs/aW5mKGluaXR5KT8kL2kudGVzdChzKSlcbiAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgIGlmICgvXi1pbmYoaW5pdHkpPyQvaS50ZXN0KHMpKVxuICAgICAgICByZXR1cm4gLUluZmluaXR5O1xuICAgIGNhbWxfZmFpbHdpdGgoXCJmbG9hdF9vZl9zdHJpbmdcIik7XG59XG5cbik7XG5cbmZ1bmN0aW9uIGNhbWxfZmxvYXRfb2Zfc3RyaW5nKHMpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKGZsb2F0X29mX3N0cmluZywgcywgY2FtbF9mYWlsd2l0aCk7XG59XG5cbnZhciBjYW1sX25hdGl2ZWludF9mb3JtYXQgPSBjYW1sX2Zvcm1hdF9pbnQ7XG5cbnZhciBjYW1sX2ludDMyX2Zvcm1hdCA9IGNhbWxfZm9ybWF0X2ludDtcblxudmFyIGNhbWxfaW50MzJfb2Zfc3RyaW5nID0gY2FtbF9pbnRfb2Zfc3RyaW5nO1xuXG52YXIgY2FtbF9uYXRpdmVpbnRfb2Zfc3RyaW5nID0gY2FtbF9pbnRfb2Zfc3RyaW5nO1xuXG5leHBvcnRzLmNhbWxfZm9ybWF0X2Zsb2F0ID0gY2FtbF9mb3JtYXRfZmxvYXQ7XG5leHBvcnRzLmNhbWxfZm9ybWF0X2ludCA9IGNhbWxfZm9ybWF0X2ludDtcbmV4cG9ydHMuY2FtbF9uYXRpdmVpbnRfZm9ybWF0ID0gY2FtbF9uYXRpdmVpbnRfZm9ybWF0O1xuZXhwb3J0cy5jYW1sX2ludDMyX2Zvcm1hdCA9IGNhbWxfaW50MzJfZm9ybWF0O1xuZXhwb3J0cy5jYW1sX2Zsb2F0X29mX3N0cmluZyA9IGNhbWxfZmxvYXRfb2Zfc3RyaW5nO1xuZXhwb3J0cy5jYW1sX2ludDY0X2Zvcm1hdCA9IGNhbWxfaW50NjRfZm9ybWF0O1xuZXhwb3J0cy5jYW1sX2ludF9vZl9zdHJpbmcgPSBjYW1sX2ludF9vZl9zdHJpbmc7XG5leHBvcnRzLmNhbWxfaW50MzJfb2Zfc3RyaW5nID0gY2FtbF9pbnQzMl9vZl9zdHJpbmc7XG5leHBvcnRzLmNhbWxfaW50NjRfb2Zfc3RyaW5nID0gY2FtbF9pbnQ2NF9vZl9zdHJpbmc7XG5leHBvcnRzLmNhbWxfbmF0aXZlaW50X29mX3N0cmluZyA9IGNhbWxfbmF0aXZlaW50X29mX3N0cmluZztcbi8qIGZsb2F0X29mX3N0cmluZyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gY2FtbF9zeXNfZ2V0ZW52KHMpIHtcbiAgdmFyIG1hdGNoID0gdHlwZW9mIChwcm9jZXNzKSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCA6IChwcm9jZXNzKTtcbiAgaWYgKG1hdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgbWF0Y2gkMSA9IG1hdGNoLmVudltzXTtcbiAgICBpZiAobWF0Y2gkMSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbWF0Y2gkMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9zeXNfdGltZSgpIHtcbiAgdmFyIG1hdGNoID0gdHlwZW9mIChwcm9jZXNzKSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCA6IChwcm9jZXNzKTtcbiAgaWYgKG1hdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWF0Y2gudXB0aW1lKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3lzX3JhbmRvbV9zZWVkKCkge1xuICByZXR1cm4gLyogYXJyYXkgKi9bKChEYXRlLm5vdygpIHwgMCkgXiA0Mjk0OTY3Mjk1KSAqIE1hdGgucmFuZG9tKCkgfCAwXTtcbn1cblxuZnVuY3Rpb24gY2FtbF9zeXNfc3lzdGVtX2NvbW1hbmQoKSB7XG4gIHJldHVybiAxMjc7XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3lzX2dldGN3ZCgpIHtcbiAgdmFyIG1hdGNoID0gdHlwZW9mIChwcm9jZXNzKSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCA6IChwcm9jZXNzKTtcbiAgaWYgKG1hdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWF0Y2guY3dkKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiL1wiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3lzX2dldF9hcmd2KCkge1xuICB2YXIgbWF0Y2ggPSB0eXBlb2YgKHByb2Nlc3MpID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkIDogKHByb2Nlc3MpO1xuICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChtYXRjaC5hcmd2ID09IG51bGwpIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgLyogYXJyYXkgKi9bXCJcIl1cbiAgICAgICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgbWF0Y2guYXJndlswXSxcbiAgICAgICAgICAgICAgbWF0Y2guYXJndlxuICAgICAgICAgICAgXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIC8qIGFycmF5ICovW1wiXCJdXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX3N5c19leGl0KGV4aXRfY29kZSkge1xuICB2YXIgbWF0Y2ggPSB0eXBlb2YgKHByb2Nlc3MpID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkIDogKHByb2Nlc3MpO1xuICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBtYXRjaC5leGl0KGV4aXRfY29kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qICgpICovMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX3N5c19pc19kaXJlY3RvcnkoKSB7XG4gIHRocm93IFtcbiAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgXCJjYW1sX3N5c19pc19kaXJlY3Rvcnkgbm90IGltcGxlbWVudGVkXCJcbiAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3lzX2ZpbGVfZXhpc3RzKCkge1xuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgIFwiY2FtbF9zeXNfZmlsZV9leGlzdHMgbm90IGltcGxlbWVudGVkXCJcbiAgICAgIF07XG59XG5cbmV4cG9ydHMuY2FtbF9zeXNfZ2V0ZW52ID0gY2FtbF9zeXNfZ2V0ZW52O1xuZXhwb3J0cy5jYW1sX3N5c190aW1lID0gY2FtbF9zeXNfdGltZTtcbmV4cG9ydHMuY2FtbF9zeXNfcmFuZG9tX3NlZWQgPSBjYW1sX3N5c19yYW5kb21fc2VlZDtcbmV4cG9ydHMuY2FtbF9zeXNfc3lzdGVtX2NvbW1hbmQgPSBjYW1sX3N5c19zeXN0ZW1fY29tbWFuZDtcbmV4cG9ydHMuY2FtbF9zeXNfZ2V0Y3dkID0gY2FtbF9zeXNfZ2V0Y3dkO1xuZXhwb3J0cy5jYW1sX3N5c19nZXRfYXJndiA9IGNhbWxfc3lzX2dldF9hcmd2O1xuZXhwb3J0cy5jYW1sX3N5c19leGl0ID0gY2FtbF9zeXNfZXhpdDtcbmV4cG9ydHMuY2FtbF9zeXNfaXNfZGlyZWN0b3J5ID0gY2FtbF9zeXNfaXNfZGlyZWN0b3J5O1xuZXhwb3J0cy5jYW1sX3N5c19maWxlX2V4aXN0cyA9IGNhbWxfc3lzX2ZpbGVfZXhpc3RzO1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEN1cnJ5ID0gcmVxdWlyZShcIi4vY3VycnkuanNcIik7XG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gJGNhcmV0KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gcHJpbSArIHByaW0kMTtcbn1cblxudmFyIHN0ZG91dCA9IC8qIHJlY29yZCAqL1tcbiAgLyogYnVmZmVyICovXCJcIixcbiAgLyogb3V0cHV0ICovKGZ1bmN0aW9uIChfLCBzKSB7XG4gICAgICB2YXIgdiA9IHMubGVuZ3RoIC0gMSB8IDA7XG4gICAgICBpZiAoKCAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIpICYmIHByb2Nlc3Muc3Rkb3V0ICYmIHByb2Nlc3Muc3Rkb3V0LndyaXRlKSkge1xuICAgICAgICByZXR1cm4gKCBwcm9jZXNzLnN0ZG91dC53cml0ZSApKHMpO1xuICAgICAgfSBlbHNlIGlmIChzW3ZdID09PSBcIlxcblwiKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHMuc2xpY2UoMCwgdikpO1xuICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2cocyk7XG4gICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICB9XG4gICAgfSlcbl07XG5cbnZhciBzdGRlcnIgPSAvKiByZWNvcmQgKi9bXG4gIC8qIGJ1ZmZlciAqL1wiXCIsXG4gIC8qIG91dHB1dCAqLyhmdW5jdGlvbiAoXywgcykge1xuICAgICAgdmFyIHYgPSBzLmxlbmd0aCAtIDEgfCAwO1xuICAgICAgaWYgKHNbdl0gPT09IFwiXFxuXCIpIHtcbiAgICAgICAgY29uc29sZS5sb2cocy5zbGljZSgwLCB2KSk7XG4gICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhzKTtcbiAgICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICAgIH1cbiAgICB9KVxuXTtcblxuZnVuY3Rpb24gY2FtbF9tbF9vcGVuX2Rlc2NyaXB0b3JfaW4oKSB7XG4gIHRocm93IFtcbiAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgXCJjYW1sX21sX29wZW5fZGVzY3JpcHRvcl9pbiBub3QgaW1wbGVtZW50ZWRcIlxuICAgICAgXTtcbn1cblxuZnVuY3Rpb24gY2FtbF9tbF9vcGVuX2Rlc2NyaXB0b3Jfb3V0KCkge1xuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgIFwiY2FtbF9tbF9vcGVuX2Rlc2NyaXB0b3Jfb3V0IG5vdCBpbXBsZW1lbnRlZFwiXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiBjYW1sX21sX2ZsdXNoKG9jKSB7XG4gIGlmIChvY1svKiBidWZmZXIgKi8wXSAhPT0gXCJcIikge1xuICAgIEN1cnJ5Ll8yKG9jWy8qIG91dHB1dCAqLzFdLCBvYywgb2NbLyogYnVmZmVyICovMF0pO1xuICAgIG9jWy8qIGJ1ZmZlciAqLzBdID0gXCJcIjtcbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbnZhciBub2RlX3N0ZF9vdXRwdXQgPSAoZnVuY3Rpb24gKHMpe1xuICAgcmV0dXJuICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIikgJiYgcHJvY2Vzcy5zdGRvdXQgJiYgKHByb2Nlc3Muc3Rkb3V0LndyaXRlKHMpLCB0cnVlKTtcbiAgIH1cbik7XG5cbmZ1bmN0aW9uIGNhbWxfbWxfb3V0cHV0KG9jLCBzdHIsIG9mZnNldCwgbGVuKSB7XG4gIHZhciBzdHIkMSA9IG9mZnNldCA9PT0gMCAmJiBsZW4gPT09IHN0ci5sZW5ndGggPyBzdHIgOiBzdHIuc2xpY2Uob2Zmc2V0LCBsZW4pO1xuICBpZiAoKCAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIpICYmIHByb2Nlc3Muc3Rkb3V0ICYmIHByb2Nlc3Muc3Rkb3V0LndyaXRlICkgJiYgb2MgPT09IHN0ZG91dCkge1xuICAgIHJldHVybiAoIHByb2Nlc3Muc3Rkb3V0LndyaXRlICkoc3RyJDEpO1xuICB9IGVsc2Uge1xuICAgIHZhciBpZCA9IHN0ciQxLmxhc3RJbmRleE9mKFwiXFxuXCIpO1xuICAgIGlmIChpZCA8IDApIHtcbiAgICAgIG9jWy8qIGJ1ZmZlciAqLzBdID0gb2NbLyogYnVmZmVyICovMF0gKyBzdHIkMTtcbiAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9jWy8qIGJ1ZmZlciAqLzBdID0gb2NbLyogYnVmZmVyICovMF0gKyBzdHIkMS5zbGljZSgwLCBpZCArIDEgfCAwKTtcbiAgICAgIGNhbWxfbWxfZmx1c2gob2MpO1xuICAgICAgb2NbLyogYnVmZmVyICovMF0gPSBvY1svKiBidWZmZXIgKi8wXSArIHN0ciQxLnNsaWNlKGlkICsgMSB8IDApO1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9tbF9vdXRwdXRfY2hhcihvYywgJCRjaGFyKSB7XG4gIHJldHVybiBjYW1sX21sX291dHB1dChvYywgU3RyaW5nLmZyb21DaGFyQ29kZSgkJGNoYXIpLCAwLCAxKTtcbn1cblxuZnVuY3Rpb24gY2FtbF9tbF9pbnB1dChfLCBfJDEsIF8kMiwgXyQzKSB7XG4gIHRocm93IFtcbiAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgXCJjYW1sX21sX2lucHV0IGljIG5vdCBpbXBsZW1lbnRlZFwiXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiBjYW1sX21sX2lucHV0X2NoYXIoKSB7XG4gIHRocm93IFtcbiAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgXCJjYW1sX21sX2lucHV0X2NoYXIgbm90IGltcGxlbW50ZWRcIlxuICAgICAgXTtcbn1cblxuZnVuY3Rpb24gY2FtbF9tbF9vdXRfY2hhbm5lbHNfbGlzdCgpIHtcbiAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgIHN0ZG91dCxcbiAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgIHN0ZGVycixcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxudmFyIHN0ZGluID0gdW5kZWZpbmVkO1xuXG5leHBvcnRzLiRjYXJldCA9ICRjYXJldDtcbmV4cG9ydHMuc3RkaW4gPSBzdGRpbjtcbmV4cG9ydHMuc3Rkb3V0ID0gc3Rkb3V0O1xuZXhwb3J0cy5zdGRlcnIgPSBzdGRlcnI7XG5leHBvcnRzLmNhbWxfbWxfb3Blbl9kZXNjcmlwdG9yX2luID0gY2FtbF9tbF9vcGVuX2Rlc2NyaXB0b3JfaW47XG5leHBvcnRzLmNhbWxfbWxfb3Blbl9kZXNjcmlwdG9yX291dCA9IGNhbWxfbWxfb3Blbl9kZXNjcmlwdG9yX291dDtcbmV4cG9ydHMuY2FtbF9tbF9mbHVzaCA9IGNhbWxfbWxfZmx1c2g7XG5leHBvcnRzLm5vZGVfc3RkX291dHB1dCA9IG5vZGVfc3RkX291dHB1dDtcbmV4cG9ydHMuY2FtbF9tbF9vdXRwdXQgPSBjYW1sX21sX291dHB1dDtcbmV4cG9ydHMuY2FtbF9tbF9vdXRwdXRfY2hhciA9IGNhbWxfbWxfb3V0cHV0X2NoYXI7XG5leHBvcnRzLmNhbWxfbWxfaW5wdXQgPSBjYW1sX21sX2lucHV0O1xuZXhwb3J0cy5jYW1sX21sX2lucHV0X2NoYXIgPSBjYW1sX21sX2lucHV0X2NoYXI7XG5leHBvcnRzLmNhbWxfbWxfb3V0X2NoYW5uZWxzX2xpc3QgPSBjYW1sX21sX291dF9jaGFubmVsc19saXN0O1xuLyogbm9kZV9zdGRfb3V0cHV0IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBUIFZFUlNJT04gMy4wLjAsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3NzID0gcmVxdWlyZShcImJzLWNzcy9saWIvanMvc3JjL0Nzcy5qc1wiKTtcbnZhciBCb2FyZCA9IHJlcXVpcmUoXCIuL0JvYXJkXCIpO1xudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIFRvb2xCYXIgPSByZXF1aXJlKFwiLi9Ub29sQmFyXCIpO1xudmFyIEJlbHRfTGlzdCA9IHJlcXVpcmUoXCJicy1wbGF0Zm9ybS9saWIvanMvYmVsdF9MaXN0LmpzXCIpO1xudmFyIEJlbHRfQXJyYXkgPSByZXF1aXJlKFwiYnMtcGxhdGZvcm0vbGliL2pzL2JlbHRfQXJyYXkuanNcIik7XG52YXIgUmVhc29uUmVhY3QgPSByZXF1aXJlKFwicmVhc29uLXJlYWN0L2xpYi9qcy9zcmMvUmVhc29uUmVhY3QuanNcIik7XG5cbnZhciBjb21wb25lbnQgPSBSZWFzb25SZWFjdC5zdGF0ZWxlc3NDb21wb25lbnQoXCJHYW1lXCIpO1xuXG52YXIgYm9hcmQgPSBDc3Muc3R5bGUoLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3NzLmZsZXhEaXJlY3Rpb24oQ3NzLmNvbHVtbiksXG4gICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgIENzcy5qdXN0aWZ5Q29udGVudChDc3MuY2VudGVyKSxcbiAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgIENzcy5iYWNrZ3JvdW5kQ29sb3IoQ3NzLmRhcmtvbGl2ZWdyZWVuKSxcbiAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICBDc3MubWluSGVpZ2h0KENzcy5weCg1MDApKSxcbiAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICBdXG4gICAgICAgICAgXVxuICAgICAgICBdXG4gICAgICBdXG4gICAgXSk7XG5cbnZhciB0b3BTdHlsZSA9IENzcy5zdHlsZSgvKiA6OiAqL1tcbiAgICAgIENzcy5kaXNwbGF5KENzcy5mbGV4Qm94KSxcbiAgICAgIC8qIFtdICovMFxuICAgIF0pO1xuXG52YXIgbWlkZGxlU3R5bGUgPSBDc3Muc3R5bGUoLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3NzLmp1c3RpZnlDb250ZW50KENzcy5jZW50ZXIpLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBDc3MuZm9udFNpemUoQ3NzLnB4KDEwMCkpLFxuICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICBdXG4gICAgICBdXG4gICAgXSk7XG5cbnZhciBib3R0b21TdHlsZSA9IENzcy5zdHlsZSgvKiA6OiAqL1tcbiAgICAgIENzcy5kaXNwbGF5KENzcy5mbGV4Qm94KSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MuanVzdGlmeUNvbnRlbnQoQ3NzLmZsZXhFbmQpLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF1cbiAgICBdKTtcblxuZnVuY3Rpb24gYWN0aW9uQnV0dG9uKGRpc2FibGVkKSB7XG4gIHJldHVybiBDc3Muc3R5bGUoLyogOjogKi9bXG4gICAgICAgICAgICAgIENzcy5iYWNrZ3JvdW5kKGRpc2FibGVkID8gQ3NzLmRhcmtncmF5IDogQ3NzLndoaXRlKSxcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgQ3NzLmNvbG9yKENzcy5ibGFjayksXG4gICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBDc3MuYm9yZGVyKENzcy5weCgxKSwgQ3NzLnNvbGlkLCBDc3MuYmxhY2spLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIENzcy5ib3JkZXJSYWRpdXMoQ3NzLnB4KDMpKSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbn1cblxudmFyIFN0eWxlcyA9IC8qIG1vZHVsZSAqL1tcbiAgLyogYm9hcmQgKi9ib2FyZCxcbiAgLyogdG9wU3R5bGUgKi90b3BTdHlsZSxcbiAgLyogbWlkZGxlU3R5bGUgKi9taWRkbGVTdHlsZSxcbiAgLyogYm90dG9tU3R5bGUgKi9ib3R0b21TdHlsZSxcbiAgLyogYWN0aW9uQnV0dG9uICovYWN0aW9uQnV0dG9uXG5dO1xuXG5mdW5jdGlvbiBtYWtlKGdhbWUsIHNlbmQsIF8pIHtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBkZWJ1Z05hbWUgKi9jb21wb25lbnRbLyogZGVidWdOYW1lICovMF0sXG4gICAgICAgICAgLyogcmVhY3RDbGFzc0ludGVybmFsICovY29tcG9uZW50Wy8qIHJlYWN0Q2xhc3NJbnRlcm5hbCAqLzFdLFxuICAgICAgICAgIC8qIGhhbmRlZE9mZlN0YXRlICovY29tcG9uZW50Wy8qIGhhbmRlZE9mZlN0YXRlICovMl0sXG4gICAgICAgICAgLyogd2lsbFJlY2VpdmVQcm9wcyAqL2NvbXBvbmVudFsvKiB3aWxsUmVjZWl2ZVByb3BzICovM10sXG4gICAgICAgICAgLyogZGlkTW91bnQgKi9jb21wb25lbnRbLyogZGlkTW91bnQgKi80XSxcbiAgICAgICAgICAvKiBkaWRVcGRhdGUgKi9jb21wb25lbnRbLyogZGlkVXBkYXRlICovNV0sXG4gICAgICAgICAgLyogd2lsbFVubW91bnQgKi9jb21wb25lbnRbLyogd2lsbFVubW91bnQgKi82XSxcbiAgICAgICAgICAvKiB3aWxsVXBkYXRlICovY29tcG9uZW50Wy8qIHdpbGxVcGRhdGUgKi83XSxcbiAgICAgICAgICAvKiBzaG91bGRVcGRhdGUgKi9jb21wb25lbnRbLyogc2hvdWxkVXBkYXRlICovOF0sXG4gICAgICAgICAgLyogcmVuZGVyICovKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGJvYXJkXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBSZWFzb25SZWFjdC5lbGVtZW50KC8qIE5vbmUgKi8wLCAvKiBOb25lICovMCwgQm9hcmQubWFrZShCZWx0X0FycmF5LnJldmVyc2UoQmVsdF9MaXN0LnRvQXJyYXkoZ2FtZVsvKiBib2FyZCAqLzBdWy8qIHBsYXllckhhbmQgKi8wXSkpLCBCZWx0X0FycmF5LnJldmVyc2UoQmVsdF9MaXN0LnRvQXJyYXkoZ2FtZVsvKiBib2FyZCAqLzBdWy8qIGRlYWxlckhhbmQgKi8xXSkpLCBnYW1lWy8qIGdhbWVTdGF0ZSAqLzJdLCAvKiBhcnJheSAqL1tdKSksIFJlYXNvblJlYWN0LmVsZW1lbnQoLyogTm9uZSAqLzAsIC8qIE5vbmUgKi8wLCBUb29sQmFyLm1ha2Uoc2VuZCwgZ2FtZSwgLyogYXJyYXkgKi9bXSkpKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIC8qIGluaXRpYWxTdGF0ZSAqL2NvbXBvbmVudFsvKiBpbml0aWFsU3RhdGUgKi8xMF0sXG4gICAgICAgICAgLyogcmV0YWluZWRQcm9wcyAqL2NvbXBvbmVudFsvKiByZXRhaW5lZFByb3BzICovMTFdLFxuICAgICAgICAgIC8qIHJlZHVjZXIgKi9jb21wb25lbnRbLyogcmVkdWNlciAqLzEyXSxcbiAgICAgICAgICAvKiBzdWJzY3JpcHRpb25zICovY29tcG9uZW50Wy8qIHN1YnNjcmlwdGlvbnMgKi8xM10sXG4gICAgICAgICAgLyoganNFbGVtZW50V3JhcHBlZCAqL2NvbXBvbmVudFsvKiBqc0VsZW1lbnRXcmFwcGVkICovMTRdXG4gICAgICAgIF07XG59XG5cbmV4cG9ydHMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuZXhwb3J0cy5TdHlsZXMgPSBTdHlsZXM7XG5leHBvcnRzLm1ha2UgPSBtYWtlO1xuLyogY29tcG9uZW50IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBUIFZFUlNJT04gMy4wLjAsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2FtZSA9IHJlcXVpcmUoXCIuL0dhbWVcIik7XG52YXIgQmxvY2sgPSByZXF1aXJlKFwiYnMtcGxhdGZvcm0vbGliL2pzL2Jsb2NrLmpzXCIpO1xudmFyIEN1cnJ5ID0gcmVxdWlyZShcImJzLXBsYXRmb3JtL2xpYi9qcy9jdXJyeS5qc1wiKTtcbnZhciBMb2dpYyA9IHJlcXVpcmUoXCIuL2xvZ2ljXCIpO1xudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIEJlbHRfTGlzdCA9IHJlcXVpcmUoXCJicy1wbGF0Zm9ybS9saWIvanMvYmVsdF9MaXN0LmpzXCIpO1xudmFyIEJlbHRfQXJyYXkgPSByZXF1aXJlKFwiYnMtcGxhdGZvcm0vbGliL2pzL2JlbHRfQXJyYXkuanNcIik7XG52YXIgQXJyYXlMYWJlbHMgPSByZXF1aXJlKFwiYnMtcGxhdGZvcm0vbGliL2pzL2FycmF5TGFiZWxzLmpzXCIpO1xudmFyIFJlYXNvblJlYWN0ID0gcmVxdWlyZShcInJlYXNvbi1yZWFjdC9saWIvanMvc3JjL1JlYXNvblJlYWN0LmpzXCIpO1xuXG52YXIgY29tcG9uZW50ID0gUmVhc29uUmVhY3QucmVkdWNlckNvbXBvbmVudChcIkJsYWNramFja1wiKTtcblxuZnVuY3Rpb24gYXBwUmVkdWNlcihhY3Rpb24sIHN0YXRlKSB7XG4gIHJldHVybiAvKiBVcGRhdGUgKi9CbG9jay5fXygwLCBbLyogcmVjb3JkICovW1xuICAgICAgICAgICAgICAvKiBnYW1lICovTG9naWMucnVuUGxheWVyVHVybihzdGF0ZVsvKiBnYW1lICovMF0sIGFjdGlvblswXSksXG4gICAgICAgICAgICAgIC8qIHBsYXllckJldCAqL3N0YXRlWy8qIHBsYXllckJldCAqLzFdXG4gICAgICAgICAgICBdXSk7XG59XG5cbmZ1bmN0aW9uIHJhbmdlKCRzdGFyb3B0JHN0YXIsIGVuZF8pIHtcbiAgdmFyIHN0YXJ0ID0gJHN0YXJvcHQkc3RhciA/ICRzdGFyb3B0JHN0YXJbMF0gOiAwO1xuICBpZiAoc3RhcnQgPj0gZW5kXykge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICByYW5nZSgvKiBTb21lICovW3N0YXJ0ICsgMSB8IDBdLCBlbmRfKVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwZWF0KHRpbWVzLCBsKSB7XG4gIHJldHVybiBCZWx0X0FycmF5Lm1hcChBcnJheUxhYmVscy5vZl9saXN0KHJhbmdlKC8qIE5vbmUgKi8wLCB0aW1lcykpLCAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGN5Y2xlKHRpbWVzLCBsKSB7XG4gIHJldHVybiBCZWx0X0xpc3QuY29uY2F0TWFueShyZXBlYXQodGltZXMsIGwpKTtcbn1cblxuZnVuY3Rpb24gbWFrZSgpIHtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBkZWJ1Z05hbWUgKi9jb21wb25lbnRbLyogZGVidWdOYW1lICovMF0sXG4gICAgICAgICAgLyogcmVhY3RDbGFzc0ludGVybmFsICovY29tcG9uZW50Wy8qIHJlYWN0Q2xhc3NJbnRlcm5hbCAqLzFdLFxuICAgICAgICAgIC8qIGhhbmRlZE9mZlN0YXRlICovY29tcG9uZW50Wy8qIGhhbmRlZE9mZlN0YXRlICovMl0sXG4gICAgICAgICAgLyogd2lsbFJlY2VpdmVQcm9wcyAqL2NvbXBvbmVudFsvKiB3aWxsUmVjZWl2ZVByb3BzICovM10sXG4gICAgICAgICAgLyogZGlkTW91bnQgKi9jb21wb25lbnRbLyogZGlkTW91bnQgKi80XSxcbiAgICAgICAgICAvKiBkaWRVcGRhdGUgKi9jb21wb25lbnRbLyogZGlkVXBkYXRlICovNV0sXG4gICAgICAgICAgLyogd2lsbFVubW91bnQgKi9jb21wb25lbnRbLyogd2lsbFVubW91bnQgKi82XSxcbiAgICAgICAgICAvKiB3aWxsVXBkYXRlICovY29tcG9uZW50Wy8qIHdpbGxVcGRhdGUgKi83XSxcbiAgICAgICAgICAvKiBzaG91bGRVcGRhdGUgKi9jb21wb25lbnRbLyogc2hvdWxkVXBkYXRlICovOF0sXG4gICAgICAgICAgLyogcmVuZGVyICovKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICB2YXIgc2VuZCA9IHBhcmFtWy8qIHNlbmQgKi8zXTtcbiAgICAgICAgICAgICAgdmFyIHNlbmRXID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoc2VuZCwgLyogTW92ZSAqL1thXSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCwgUmVhc29uUmVhY3QuZWxlbWVudCgvKiBOb25lICovMCwgLyogTm9uZSAqLzAsIEdhbWUubWFrZShwYXJhbVsvKiBzdGF0ZSAqLzFdWy8qIGdhbWUgKi8wXSwgc2VuZFcsIC8qIGFycmF5ICovW10pKSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAvKiBpbml0aWFsU3RhdGUgKi8oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgc2h1ZmZsZWREZWNrID0gQmVsdF9MaXN0LnNodWZmbGUoQmVsdF9MaXN0LmNvbmNhdE1hbnkocmVwZWF0KDEwMCwgTG9naWMuZGVmYXVsdERlY2spKSk7XG4gICAgICAgICAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgLyogZ2FtZSA6IHJlY29yZCAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGJvYXJkICovTG9naWMuZW1wdHlCb2FyZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGRlY2sgKi9zaHVmZmxlZERlY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBnYW1lU3RhdGUgOiBOZXdHYW1lICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHBsYXllckJldCAqLzIwMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogcGxheWVyVG90YWwgKi8xMDAwMC4wXG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAvKiBwbGF5ZXJCZXQgKi8yMDBcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIC8qIHJldGFpbmVkUHJvcHMgKi9jb21wb25lbnRbLyogcmV0YWluZWRQcm9wcyAqLzExXSxcbiAgICAgICAgICAvKiByZWR1Y2VyICovYXBwUmVkdWNlcixcbiAgICAgICAgICAvKiBzdWJzY3JpcHRpb25zICovY29tcG9uZW50Wy8qIHN1YnNjcmlwdGlvbnMgKi8xM10sXG4gICAgICAgICAgLyoganNFbGVtZW50V3JhcHBlZCAqL2NvbXBvbmVudFsvKiBqc0VsZW1lbnRXcmFwcGVkICovMTRdXG4gICAgICAgIF07XG59XG5cbmV4cG9ydHMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuZXhwb3J0cy5hcHBSZWR1Y2VyID0gYXBwUmVkdWNlcjtcbmV4cG9ydHMucmFuZ2UgPSByYW5nZTtcbmV4cG9ydHMucmVwZWF0ID0gcmVwZWF0O1xuZXhwb3J0cy5jeWNsZSA9IGN5Y2xlO1xuZXhwb3J0cy5tYWtlID0gbWFrZTtcbi8qIGNvbXBvbmVudCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCBWRVJTSU9OIDMuMC4wLCBQTEVBU0UgRURJVCBXSVRIIENBUkVcbid1c2Ugc3RyaWN0JztcblxudmFyIEFwcCA9IHJlcXVpcmUoXCIuL2FwcFwiKTtcbnZhciBSZWFjdERPTVJlID0gcmVxdWlyZShcInJlYXNvbi1yZWFjdC9saWIvanMvc3JjL1JlYWN0RE9NUmUuanNcIik7XG52YXIgUmVhc29uUmVhY3QgPSByZXF1aXJlKFwicmVhc29uLXJlYWN0L2xpYi9qcy9zcmMvUmVhc29uUmVhY3QuanNcIik7XG5cblJlYWN0RE9NUmUucmVuZGVyVG9FbGVtZW50V2l0aElkKFJlYXNvblJlYWN0LmVsZW1lbnQoLyogTm9uZSAqLzAsIC8qIE5vbmUgKi8wLCBBcHAubWFrZSgvKiBhcnJheSAqL1tdKSksIFwicm9vdFwiKTtcblxuLyogIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iXSwic291cmNlUm9vdCI6IiJ9